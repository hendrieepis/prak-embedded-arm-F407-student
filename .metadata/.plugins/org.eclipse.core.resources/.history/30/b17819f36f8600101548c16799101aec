
F4Disc-01b-ObjectCountingFunction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009568  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080096f8  080096f8  0000a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d4  080097d4  0000b158  2**0
                  CONTENTS
  4 .ARM          00000008  080097d4  080097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097dc  080097dc  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097dc  080097dc  0000a7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e0  080097e0  0000a7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080097e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b158  2**0
                  CONTENTS
 10 .bss          00001e74  20000158  20000158  0000b158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fcc  20001fcc  0000b158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001511b  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a66  00000000  00000000  000202a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00023d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e40  00000000  00000000  00024fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025123  00000000  00000000  00025e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019822  00000000  00000000  0004af33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc68c  00000000  00000000  00064755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130de1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d4  00000000  00000000  00130e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  001362f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096e0 	.word	0x080096e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080096e0 	.word	0x080096e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <usb_is_configured>:
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
uint16_t count=0;
extern USBD_HandleTypeDef hUsbDeviceFS;  // deklarasi handle dari usb_device.c
static inline uint8_t usb_is_configured(void){
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
    return (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED);
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <usb_is_configured+0x20>)
 80005a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	bf0c      	ite	eq
 80005ac:	2301      	moveq	r3, #1
 80005ae:	2300      	movne	r3, #0
 80005b0:	b2db      	uxtb	r3, r3
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000278 	.word	0x20000278

080005c0 <_write>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	68b8      	ldr	r0, [r7, #8]
 80005d4:	f007 fcec 	bl	8007fb0 <CDC_Transmit_FS>
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <counterShow>:
void checkBoard(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void counterShow(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 80005e8:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <counterShow+0xbc>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	461a      	mov	r2, r3
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	482a      	ldr	r0, [pc, #168]	@ (80006a4 <counterShow+0xc0>)
 80005fa:	f001 f925 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR1_GPIO_Port,BAR1_Pin,count & (1<<1));
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <counterShow+0xbc>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000610:	4825      	ldr	r0, [pc, #148]	@ (80006a8 <counterShow+0xc4>)
 8000612:	f001 f919 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR2_GPIO_Port,BAR2_Pin,count & (1<<2));
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <counterShow+0xbc>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	b2db      	uxtb	r3, r3
 8000622:	461a      	mov	r2, r3
 8000624:	2110      	movs	r1, #16
 8000626:	481f      	ldr	r0, [pc, #124]	@ (80006a4 <counterShow+0xc0>)
 8000628:	f001 f90e 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR3_GPIO_Port,BAR3_Pin,count & (1<<3));
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <counterShow+0xbc>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	2120      	movs	r1, #32
 800063c:	4819      	ldr	r0, [pc, #100]	@ (80006a4 <counterShow+0xc0>)
 800063e:	f001 f903 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR4_GPIO_Port,BAR4_Pin,count & (1<<4));
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <counterShow+0xbc>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	2104      	movs	r1, #4
 8000652:	4814      	ldr	r0, [pc, #80]	@ (80006a4 <counterShow+0xc0>)
 8000654:	f001 f8f8 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <counterShow+0xbc>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	2110      	movs	r1, #16
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <counterShow+0xc8>)
 800066a:	f001 f8ed 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <counterShow+0xbc>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	2120      	movs	r1, #32
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <counterShow+0xc8>)
 8000680:	f001 f8e2 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <counterShow+0xbc>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <counterShow+0xcc>)
 8000696:	f001 f8d7 	bl	8001848 <HAL_GPIO_WritePin>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000268 	.word	0x20000268
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020400 	.word	0x40020400
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <CounterUpdate>:
void CounterUpdate(void){
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	++count;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <CounterUpdate+0x1c>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b03      	ldr	r3, [pc, #12]	@ (80006d0 <CounterUpdate+0x1c>)
 80006c2:	801a      	strh	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000268 	.word	0x20000268

080006d4 <sensorDetected>:

// sensor.c dan sensor.h
uint8_t sensorDetected(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint32_t db_ms=20;
 80006da:	2314      	movs	r3, #20
 80006dc:	603b      	str	r3, [r7, #0]
	uint8_t FlagDetect=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 80006e2:	2102      	movs	r1, #2
 80006e4:	4814      	ldr	r0, [pc, #80]	@ (8000738 <sensorDetected+0x64>)
 80006e6:	f001 f897 	bl	8001818 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d11d      	bne.n	800072c <sensorDetected+0x58>
		HAL_Delay(db_ms);
 80006f0:	6838      	ldr	r0, [r7, #0]
 80006f2:	f000 fdbf 	bl	8001274 <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 80006f6:	2102      	movs	r1, #2
 80006f8:	480f      	ldr	r0, [pc, #60]	@ (8000738 <sensorDetected+0x64>)
 80006fa:	f001 f88d 	bl	8001818 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <sensorDetected+0x58>
			while(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET);
 8000704:	bf00      	nop
 8000706:	2102      	movs	r1, #2
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <sensorDetected+0x64>)
 800070a:	f001 f885 	bl	8001818 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f8      	beq.n	8000706 <sensorDetected+0x32>
			// tunggu release stabil
			HAL_Delay(db_ms);
 8000714:	6838      	ldr	r0, [r7, #0]
 8000716:	f000 fdad 	bl	8001274 <HAL_Delay>
			if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_SET) {
 800071a:	2102      	movs	r1, #2
 800071c:	4806      	ldr	r0, [pc, #24]	@ (8000738 <sensorDetected+0x64>)
 800071e:	f001 f87b 	bl	8001818 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d101      	bne.n	800072c <sensorDetected+0x58>
				FlagDetect=1; // valid press
 8000728:	2301      	movs	r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return FlagDetect;
 800072c:	79fb      	ldrb	r3, [r7, #7]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40020400 	.word	0x40020400

0800073c <checkBoard>:

void checkBoard(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	printf("Cek BarLED, buzzer, USER LED \n\r");
 8000742:	482b      	ldr	r0, [pc, #172]	@ (80007f0 <checkBoard+0xb4>)
 8000744:	f008 f960 	bl	8008a08 <iprintf>
	HAL_Delay(300);
 8000748:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800074c:	f000 fd92 	bl	8001274 <HAL_Delay>
	for (uint8_t cnt=0;cnt<8;cnt++){
 8000750:	2300      	movs	r3, #0
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	e044      	b.n	80007e0 <checkBoard+0xa4>

		HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 8000756:	2140      	movs	r1, #64	@ 0x40
 8000758:	4826      	ldr	r0, [pc, #152]	@ (80007f4 <checkBoard+0xb8>)
 800075a:	f001 f88e 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 800075e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000762:	4825      	ldr	r0, [pc, #148]	@ (80007f8 <checkBoard+0xbc>)
 8000764:	f001 f889 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 8000768:	2110      	movs	r1, #16
 800076a:	4822      	ldr	r0, [pc, #136]	@ (80007f4 <checkBoard+0xb8>)
 800076c:	f001 f885 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 8000770:	2120      	movs	r1, #32
 8000772:	4820      	ldr	r0, [pc, #128]	@ (80007f4 <checkBoard+0xb8>)
 8000774:	f001 f881 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 8000778:	2104      	movs	r1, #4
 800077a:	481e      	ldr	r0, [pc, #120]	@ (80007f4 <checkBoard+0xb8>)
 800077c:	f001 f87d 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 8000780:	2110      	movs	r1, #16
 8000782:	481e      	ldr	r0, [pc, #120]	@ (80007fc <checkBoard+0xc0>)
 8000784:	f001 f879 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 8000788:	2120      	movs	r1, #32
 800078a:	481c      	ldr	r0, [pc, #112]	@ (80007fc <checkBoard+0xc0>)
 800078c:	f001 f875 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	481b      	ldr	r0, [pc, #108]	@ (8000800 <checkBoard+0xc4>)
 8000794:	f001 f871 	bl	800187a <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000798:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800079c:	4816      	ldr	r0, [pc, #88]	@ (80007f8 <checkBoard+0xbc>)
 800079e:	f001 f86c 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	4816      	ldr	r0, [pc, #88]	@ (8000800 <checkBoard+0xc4>)
 80007a8:	f001 f867 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80007ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <checkBoard+0xc4>)
 80007b2:	f001 f862 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80007b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ba:	4811      	ldr	r0, [pc, #68]	@ (8000800 <checkBoard+0xc4>)
 80007bc:	f001 f85d 	bl	800187a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80007c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c4:	480e      	ldr	r0, [pc, #56]	@ (8000800 <checkBoard+0xc4>)
 80007c6:	f001 f858 	bl	800187a <HAL_GPIO_TogglePin>
		printf("count: %d \n\r",cnt);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	@ (8000804 <checkBoard+0xc8>)
 80007d0:	f008 f91a 	bl	8008a08 <iprintf>
		HAL_Delay(100);
 80007d4:	2064      	movs	r0, #100	@ 0x64
 80007d6:	f000 fd4d 	bl	8001274 <HAL_Delay>
	for (uint8_t cnt=0;cnt<8;cnt++){
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	3301      	adds	r3, #1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	d9b7      	bls.n	8000756 <checkBoard+0x1a>
	}

}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	080096f8 	.word	0x080096f8
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020400 	.word	0x40020400
 8000800:	40020c00 	.word	0x40020c00
 8000804:	08009718 	.word	0x08009718

08000808 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800080e:	f000 fcbf 	bl	8001190 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000812:	f000 f839 	bl	8000888 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_USB_DEVICE_Init();
 8000816:	f007 fb0d 	bl	8007e34 <MX_USB_DEVICE_Init>
	MX_GPIO_Init();
 800081a:	f000 f933 	bl	8000a84 <MX_GPIO_Init>
	MX_I2C1_Init();
 800081e:	f000 f89d 	bl	800095c <MX_I2C1_Init>
	MX_I2S3_Init();
 8000822:	f000 f8c9 	bl	80009b8 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000826:	f000 f8f7 	bl	8000a18 <MX_SPI1_Init>

	/* USER CODE BEGIN 2 */
	uint32_t t0 = HAL_GetTick();
 800082a:	f000 fd17 	bl	800125c <HAL_GetTick>
 800082e:	6078      	str	r0, [r7, #4]
	while (!usb_is_configured() && (HAL_GetTick() - t0) < 2000) {
 8000830:	e002      	b.n	8000838 <main+0x30>
	    HAL_Delay(10);
 8000832:	200a      	movs	r0, #10
 8000834:	f000 fd1e 	bl	8001274 <HAL_Delay>
	while (!usb_is_configured() && (HAL_GetTick() - t0) < 2000) {
 8000838:	f7ff feb0 	bl	800059c <usb_is_configured>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d107      	bne.n	8000852 <main+0x4a>
 8000842:	f000 fd0b 	bl	800125c <HAL_GetTick>
 8000846:	4602      	mov	r2, r0
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000850:	d3ef      	bcc.n	8000832 <main+0x2a>
	}
	HAL_Delay(700); //fix auto connect serial app
 8000852:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000856:	f000 fd0d 	bl	8001274 <HAL_Delay>
	checkBoard();
 800085a:	f7ff ff6f 	bl	800073c <checkBoard>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */


		if(sensorDetected()){
 800085e:	f7ff ff39 	bl	80006d4 <sensorDetected>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0fa      	beq.n	800085e <main+0x56>
			CounterUpdate();
 8000868:	f7ff ff24 	bl	80006b4 <CounterUpdate>
			counterShow();
 800086c:	f7ff feba 	bl	80005e4 <counterShow>
			printf("nilai counter: %d \n\r",count);
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <main+0x78>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	4803      	ldr	r0, [pc, #12]	@ (8000884 <main+0x7c>)
 8000878:	f008 f8c6 	bl	8008a08 <iprintf>
		if(sensorDetected()){
 800087c:	e7ef      	b.n	800085e <main+0x56>
 800087e:	bf00      	nop
 8000880:	20000268 	.word	0x20000268
 8000884:	08009728 	.word	0x08009728

08000888 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	@ 0x50
 800088c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	@ 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f008 f90b 	bl	8008ab2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <SystemClock_Config+0xcc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <SystemClock_Config+0xcc>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <SystemClock_Config+0xd0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a21      	ldr	r2, [pc, #132]	@ (8000958 <SystemClock_Config+0xd0>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80008f8:	2308      	movs	r3, #8
 80008fa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80008fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000900:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000906:	2307      	movs	r3, #7
 8000908:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	4618      	mov	r0, r3
 8000910:	f003 f830 	bl	8003974 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x96>
	{
		Error_Handler();
 800091a:	f000 f9fd 	bl	8000d18 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2302      	movs	r3, #2
 8000924:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800092a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800092e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2105      	movs	r1, #5
 800093c:	4618      	mov	r0, r3
 800093e:	f003 fa91 	bl	8003e64 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000948:	f000 f9e6 	bl	8000d18 <Error_Handler>
	}
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	@ 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800097e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f000 ff89 	bl	80018b0 <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80009a4:	f000 f9b8 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000174 	.word	0x20000174
 80009b0:	40005400 	.word	0x40005400
 80009b4:	000186a0 	.word	0x000186a0

080009b8 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009be:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <MX_I2S3_Init+0x58>)
 80009c0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009dc:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a14 <MX_I2S3_Init+0x5c>)
 80009e2:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009f8:	f001 f89e 	bl	8001b38 <HAL_I2S_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 8000a02:	f000 f989 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200001c8 	.word	0x200001c8
 8000a10:	40003c00 	.word	0x40003c00
 8000a14:	00017700 	.word	0x00017700

08000a18 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <MX_SPI1_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a28:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a48:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a6a:	f003 fd47 	bl	80044fc <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000a74:	f000 f950 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000210 	.word	0x20000210
 8000a80:	40013000 	.word	0x40013000

08000a84 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	@ 0x30
 8000a88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	4b98      	ldr	r3, [pc, #608]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a97      	ldr	r2, [pc, #604]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b95      	ldr	r3, [pc, #596]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	4b91      	ldr	r3, [pc, #580]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a90      	ldr	r2, [pc, #576]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b8e      	ldr	r3, [pc, #568]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a89      	ldr	r2, [pc, #548]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b87      	ldr	r3, [pc, #540]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b83      	ldr	r3, [pc, #524]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a82      	ldr	r2, [pc, #520]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b80      	ldr	r3, [pc, #512]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a7b      	ldr	r2, [pc, #492]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b79      	ldr	r3, [pc, #484]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b75      	ldr	r3, [pc, #468]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a74      	ldr	r2, [pc, #464]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b72      	ldr	r3, [pc, #456]	@ (8000d00 <MX_GPIO_Init+0x27c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000b42:	2200      	movs	r2, #0
 8000b44:	217c      	movs	r1, #124	@ 0x7c
 8000b46:	486f      	ldr	r0, [pc, #444]	@ (8000d04 <MX_GPIO_Init+0x280>)
 8000b48:	f000 fe7e 	bl	8001848 <HAL_GPIO_WritePin>
			|BAR0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000b52:	486d      	ldr	r0, [pc, #436]	@ (8000d08 <MX_GPIO_Init+0x284>)
 8000b54:	f000 fe78 	bl	8001848 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <MX_GPIO_Init+0x284>)
 8000b5e:	f000 fe73 	bl	8001848 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b62:	2200      	movs	r2, #0
 8000b64:	f24f 0190 	movw	r1, #61584	@ 0xf090
 8000b68:	4868      	ldr	r0, [pc, #416]	@ (8000d0c <MX_GPIO_Init+0x288>)
 8000b6a:	f000 fe6d 	bl	8001848 <HAL_GPIO_WritePin>
			|Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2130      	movs	r1, #48	@ 0x30
 8000b72:	4867      	ldr	r0, [pc, #412]	@ (8000d10 <MX_GPIO_Init+0x28c>)
 8000b74:	f000 fe68 	bl	8001848 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
	GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000b78:	237c      	movs	r3, #124	@ 0x7c
 8000b7a:	61fb      	str	r3, [r7, #28]
			|BAR0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	485d      	ldr	r0, [pc, #372]	@ (8000d04 <MX_GPIO_Init+0x280>)
 8000b90:	f000 fca6 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000b94:	f642 0301 	movw	r3, #10241	@ 0x2801
 8000b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4856      	ldr	r0, [pc, #344]	@ (8000d08 <MX_GPIO_Init+0x284>)
 8000bae:	f000 fc97 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	484e      	ldr	r0, [pc, #312]	@ (8000d08 <MX_GPIO_Init+0x284>)
 8000bce:	f000 fc87 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bda:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	484b      	ldr	r0, [pc, #300]	@ (8000d14 <MX_GPIO_Init+0x290>)
 8000be8:	f000 fc7a 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000bec:	2330      	movs	r3, #48	@ 0x30
 8000bee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4842      	ldr	r0, [pc, #264]	@ (8000d08 <MX_GPIO_Init+0x284>)
 8000c00:	f000 fc6e 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
	GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000c04:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000c08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	483d      	ldr	r0, [pc, #244]	@ (8000d10 <MX_GPIO_Init+0x28c>)
 8000c1a:	f000 fc61 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4837      	ldr	r0, [pc, #220]	@ (8000d10 <MX_GPIO_Init+0x28c>)
 8000c32:	f000 fc55 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000c36:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000c3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482e      	ldr	r0, [pc, #184]	@ (8000d04 <MX_GPIO_Init+0x280>)
 8000c4c:	f000 fc48 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c62:	2305      	movs	r3, #5
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4828      	ldr	r0, [pc, #160]	@ (8000d10 <MX_GPIO_Init+0x28c>)
 8000c6e:	f000 fc37 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW2_Pin SW1_Pin */
	GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000c72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c76:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4821      	ldr	r0, [pc, #132]	@ (8000d0c <MX_GPIO_Init+0x288>)
 8000c88:	f000 fc2a 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c8c:	f24f 0390 	movw	r3, #61584	@ 0xf090
 8000c90:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin|BAR7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <MX_GPIO_Init+0x288>)
 8000ca6:	f000 fc1b 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000caa:	2320      	movs	r3, #32
 8000cac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <MX_GPIO_Init+0x288>)
 8000cbe:	f000 fc0f 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR5_Pin BAR6_Pin */
	GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000cc2:	2330      	movs	r3, #48	@ 0x30
 8000cc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480d      	ldr	r0, [pc, #52]	@ (8000d10 <MX_GPIO_Init+0x28c>)
 8000cda:	f000 fc01 	bl	80014e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ce6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <MX_GPIO_Init+0x280>)
 8000cf4:	f000 fbf4 	bl	80014e0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3730      	adds	r7, #48	@ 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020c00 	.word	0x40020c00
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40020000 	.word	0x40020000

08000d18 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <Error_Handler+0x8>

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d62:	2007      	movs	r0, #7
 8000d64:	f000 fb7a 	bl	800145c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <HAL_I2C_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12c      	bne.n	8000df0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_I2C_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a17      	ldr	r2, [pc, #92]	@ (8000dfc <HAL_I2C_MspInit+0x88>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_I2C_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000db2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db8:	2312      	movs	r3, #18
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <HAL_I2C_MspInit+0x8c>)
 8000dd0:	f000 fb86 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_I2C_MspInit+0x88>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_I2C_MspInit+0x88>)
 8000dde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_I2C_MspInit+0x88>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	@ 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	@ 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a31      	ldr	r2, [pc, #196]	@ (8000ef4 <HAL_I2S_MspInit+0xf0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d15a      	bne.n	8000eea <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e38:	23c0      	movs	r3, #192	@ 0xc0
 8000e3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 fa19 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e50:	f7ff ff62 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a26      	ldr	r2, [pc, #152]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e94:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_I2S_MspInit+0xf4>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eb8:	2306      	movs	r3, #6
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480e      	ldr	r0, [pc, #56]	@ (8000efc <HAL_I2S_MspInit+0xf8>)
 8000ec4:	f000 fb0c 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ec8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eda:	2306      	movs	r3, #6
 8000edc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <HAL_I2S_MspInit+0xfc>)
 8000ee6:	f000 fafb 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3738      	adds	r7, #56	@ 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40003c00 	.word	0x40003c00
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800

08000f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	@ (8000f88 <HAL_SPI_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12b      	bne.n	8000f7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a10      	ldr	r2, [pc, #64]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_SPI_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f5e:	23e0      	movs	r3, #224	@ 0xe0
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <HAL_SPI_MspInit+0x8c>)
 8000f7a:	f000 fab1 	bl	80014e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	@ 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40013000 	.word	0x40013000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 f923 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <OTG_FS_IRQHandler+0x10>)
 8000ffa:	f001 fb8d 	bl	8002718 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20001754 	.word	0x20001754

08001008 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e00a      	b.n	8001030 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800101a:	f3af 8000 	nop.w
 800101e:	4601      	mov	r1, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbf0      	blt.n	800101a <_read+0x12>
  }

  return len;
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800106a:	605a      	str	r2, [r3, #4]
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_isatty>:

int _isatty(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f007 fd38 	bl	8008b50 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20020000 	.word	0x20020000
 800110c:	00000400 	.word	0x00000400
 8001110:	2000026c 	.word	0x2000026c
 8001114:	20001fd0 	.word	0x20001fd0

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	@ (8001178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	@ (800117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	@ (8001188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001166:	f7ff ffd7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f007 fcf7 	bl	8008b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fb4b 	bl	8000808 <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001180:	080097e4 	.word	0x080097e4
  ldr r2, =_sbss
 8001184:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001188:	20001fcc 	.word	0x20001fcc

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f94f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fdae 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f967 	bl	80014c6 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f92f 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	20000270 	.word	0x20000270

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000270 	.word	0x20000270

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	@ (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff3e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e16b      	b.n	80017d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014fc:	2201      	movs	r2, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 815a 	bne.w	80017ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d005      	beq.n	8001532 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	2b02      	cmp	r3, #2
 8001530:	d130      	bne.n	8001594 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 0201 	and.w	r2, r3, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b03      	cmp	r3, #3
 800159e:	d017      	beq.n	80015d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d123      	bne.n	8001624 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	08da      	lsrs	r2, r3, #3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3208      	adds	r2, #8
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0203 	and.w	r2, r3, #3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80b4 	beq.w	80017ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b60      	ldr	r3, [pc, #384]	@ (80017ec <HAL_GPIO_Init+0x30c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a5f      	ldr	r2, [pc, #380]	@ (80017ec <HAL_GPIO_Init+0x30c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b5d      	ldr	r3, [pc, #372]	@ (80017ec <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001682:	4a5b      	ldr	r2, [pc, #364]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	@ (80017f4 <HAL_GPIO_Init+0x314>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d02b      	beq.n	8001706 <HAL_GPIO_Init+0x226>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a51      	ldr	r2, [pc, #324]	@ (80017f8 <HAL_GPIO_Init+0x318>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d025      	beq.n	8001702 <HAL_GPIO_Init+0x222>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a50      	ldr	r2, [pc, #320]	@ (80017fc <HAL_GPIO_Init+0x31c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d01f      	beq.n	80016fe <HAL_GPIO_Init+0x21e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001800 <HAL_GPIO_Init+0x320>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x21a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001804 <HAL_GPIO_Init+0x324>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x216>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001808 <HAL_GPIO_Init+0x328>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x212>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	@ (800180c <HAL_GPIO_Init+0x32c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001810 <HAL_GPIO_Init+0x330>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x20a>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e00e      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ea:	2308      	movs	r3, #8
 80016ec:	e00c      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016ee:	2306      	movs	r3, #6
 80016f0:	e00a      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f2:	2305      	movs	r3, #5
 80016f4:	e008      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fa:	2303      	movs	r3, #3
 80016fc:	e004      	b.n	8001708 <HAL_GPIO_Init+0x228>
 80016fe:	2302      	movs	r3, #2
 8001700:	e002      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x228>
 8001706:	2300      	movs	r3, #0
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f002 0203 	and.w	r2, r2, #3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	4093      	lsls	r3, r2
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001718:	4935      	ldr	r1, [pc, #212]	@ (80017f0 <HAL_GPIO_Init+0x310>)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	3302      	adds	r3, #2
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001726:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_GPIO_Init+0x334>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174a:	4a32      	ldr	r2, [pc, #200]	@ (8001814 <HAL_GPIO_Init+0x334>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001750:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <HAL_GPIO_Init+0x334>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001774:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <HAL_GPIO_Init+0x334>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177a:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_GPIO_Init+0x334>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800179e:	4a1d      	ldr	r2, [pc, #116]	@ (8001814 <HAL_GPIO_Init+0x334>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_GPIO_Init+0x334>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c8:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <HAL_GPIO_Init+0x334>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3301      	adds	r3, #1
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	f67f ae90 	bls.w	80014fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3724      	adds	r7, #36	@ 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40013800 	.word	0x40013800
 80017f4:	40020000 	.word	0x40020000
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40021400 	.word	0x40021400
 800180c:	40021800 	.word	0x40021800
 8001810:	40021c00 	.word	0x40021c00
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e001      	b.n	800183a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001864:	e003      	b.n	800186e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	041a      	lsls	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	041a      	lsls	r2, r3, #16
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43d9      	mvns	r1, r3
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	400b      	ands	r3, r1
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e12b      	b.n	8001b1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fa4c 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2224      	movs	r2, #36	@ 0x24
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001912:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001914:	f002 fc9e 	bl	8004254 <HAL_RCC_GetPCLK1Freq>
 8001918:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a81      	ldr	r2, [pc, #516]	@ (8001b24 <HAL_I2C_Init+0x274>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d807      	bhi.n	8001934 <HAL_I2C_Init+0x84>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a80      	ldr	r2, [pc, #512]	@ (8001b28 <HAL_I2C_Init+0x278>)
 8001928:	4293      	cmp	r3, r2
 800192a:	bf94      	ite	ls
 800192c:	2301      	movls	r3, #1
 800192e:	2300      	movhi	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	e006      	b.n	8001942 <HAL_I2C_Init+0x92>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4a7d      	ldr	r2, [pc, #500]	@ (8001b2c <HAL_I2C_Init+0x27c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	bf94      	ite	ls
 800193c:	2301      	movls	r3, #1
 800193e:	2300      	movhi	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0e7      	b.n	8001b1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a78      	ldr	r2, [pc, #480]	@ (8001b30 <HAL_I2C_Init+0x280>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	0c9b      	lsrs	r3, r3, #18
 8001954:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a6a      	ldr	r2, [pc, #424]	@ (8001b24 <HAL_I2C_Init+0x274>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d802      	bhi.n	8001984 <HAL_I2C_Init+0xd4>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3301      	adds	r3, #1
 8001982:	e009      	b.n	8001998 <HAL_I2C_Init+0xe8>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	4a69      	ldr	r2, [pc, #420]	@ (8001b34 <HAL_I2C_Init+0x284>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	3301      	adds	r3, #1
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	430b      	orrs	r3, r1
 800199e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	495c      	ldr	r1, [pc, #368]	@ (8001b24 <HAL_I2C_Init+0x274>)
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d819      	bhi.n	80019ec <HAL_I2C_Init+0x13c>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1e59      	subs	r1, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c6:	1c59      	adds	r1, r3, #1
 80019c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019cc:	400b      	ands	r3, r1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <HAL_I2C_Init+0x138>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1e59      	subs	r1, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e6:	e051      	b.n	8001a8c <HAL_I2C_Init+0x1dc>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e04f      	b.n	8001a8c <HAL_I2C_Init+0x1dc>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d111      	bne.n	8001a18 <HAL_I2C_Init+0x168>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1e58      	subs	r0, r3, #1
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	440b      	add	r3, r1
 8001a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	e012      	b.n	8001a3e <HAL_I2C_Init+0x18e>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1e58      	subs	r0, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	0099      	lsls	r1, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_Init+0x196>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e022      	b.n	8001a8c <HAL_I2C_Init+0x1dc>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10e      	bne.n	8001a6c <HAL_I2C_Init+0x1bc>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1e58      	subs	r0, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	440b      	add	r3, r1
 8001a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a6a:	e00f      	b.n	8001a8c <HAL_I2C_Init+0x1dc>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1e58      	subs	r0, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	0099      	lsls	r1, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	6809      	ldr	r1, [r1, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001aba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6911      	ldr	r1, [r2, #16]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68d2      	ldr	r2, [r2, #12]
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2220      	movs	r2, #32
 8001b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	000186a0 	.word	0x000186a0
 8001b28:	001e847f 	.word	0x001e847f
 8001b2c:	003d08ff 	.word	0x003d08ff
 8001b30:	431bde83 	.word	0x431bde83
 8001b34:	10624dd3 	.word	0x10624dd3

08001b38 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e128      	b.n	8001d9c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a90      	ldr	r2, [pc, #576]	@ (8001da4 <HAL_I2S_Init+0x26c>)
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff f94d 	bl	8000e04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b80:	f023 030f 	bic.w	r3, r3, #15
 8001b84:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d060      	beq.n	8001c58 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e001      	b.n	8001ba8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d802      	bhi.n	8001bb6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f002 fc42 	bl	8004440 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bbc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc6:	d125      	bne.n	8001c14 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	461a      	mov	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	3305      	adds	r3, #5
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e01f      	b.n	8001c32 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	461a      	mov	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	3305      	adds	r3, #5
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	e00e      	b.n	8001c32 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	3305      	adds	r3, #5
 8001c30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4a5c      	ldr	r2, [pc, #368]	@ (8001da8 <HAL_I2S_Init+0x270>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	e003      	b.n	8001c60 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d902      	bls.n	8001c6c <HAL_I2S_Init+0x134>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	2bff      	cmp	r3, #255	@ 0xff
 8001c6a:	d907      	bls.n	8001c7c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e08f      	b.n	8001d9c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	ea42 0103 	orr.w	r1, r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c9a:	f023 030f 	bic.w	r3, r3, #15
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6851      	ldr	r1, [r2, #4]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6892      	ldr	r2, [r2, #8]
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68d2      	ldr	r2, [r2, #12]
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6992      	ldr	r2, [r2, #24]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cbe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d161      	bne.n	8001d8c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a38      	ldr	r2, [pc, #224]	@ (8001dac <HAL_I2S_Init+0x274>)
 8001ccc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a37      	ldr	r2, [pc, #220]	@ (8001db0 <HAL_I2S_Init+0x278>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_I2S_Init+0x1a4>
 8001cd8:	4b36      	ldr	r3, [pc, #216]	@ (8001db4 <HAL_I2S_Init+0x27c>)
 8001cda:	e001      	b.n	8001ce0 <HAL_I2S_Init+0x1a8>
 8001cdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	4932      	ldr	r1, [pc, #200]	@ (8001db0 <HAL_I2S_Init+0x278>)
 8001ce8:	428a      	cmp	r2, r1
 8001cea:	d101      	bne.n	8001cf0 <HAL_I2S_Init+0x1b8>
 8001cec:	4a31      	ldr	r2, [pc, #196]	@ (8001db4 <HAL_I2S_Init+0x27c>)
 8001cee:	e001      	b.n	8001cf4 <HAL_I2S_Init+0x1bc>
 8001cf0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001cf4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001cf8:	f023 030f 	bic.w	r3, r3, #15
 8001cfc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2b      	ldr	r2, [pc, #172]	@ (8001db0 <HAL_I2S_Init+0x278>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_I2S_Init+0x1d4>
 8001d08:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <HAL_I2S_Init+0x27c>)
 8001d0a:	e001      	b.n	8001d10 <HAL_I2S_Init+0x1d8>
 8001d0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d10:	2202      	movs	r2, #2
 8001d12:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a25      	ldr	r2, [pc, #148]	@ (8001db0 <HAL_I2S_Init+0x278>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2S_Init+0x1ea>
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_I2S_Init+0x27c>)
 8001d20:	e001      	b.n	8001d26 <HAL_I2S_Init+0x1ee>
 8001d22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d32:	d003      	beq.n	8001d3c <HAL_I2S_Init+0x204>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d103      	bne.n	8001d44 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e001      	b.n	8001d48 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	897b      	ldrh	r3, [r7, #10]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d74:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <HAL_I2S_Init+0x278>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_I2S_Init+0x24c>
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <HAL_I2S_Init+0x27c>)
 8001d82:	e001      	b.n	8001d88 <HAL_I2S_Init+0x250>
 8001d84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d88:	897a      	ldrh	r2, [r7, #10]
 8001d8a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	08001eaf 	.word	0x08001eaf
 8001da8:	cccccccd 	.word	0xcccccccd
 8001dac:	08001fc5 	.word	0x08001fc5
 8001db0:	40003800 	.word	0x40003800
 8001db4:	40003400 	.word	0x40003400

08001db8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	1c9a      	adds	r2, r3, #2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10e      	bne.n	8001e48 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e38:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb8 	bl	8001db8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	b292      	uxth	r2, r2
 8001e64:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	1c9a      	adds	r2, r3, #2
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10e      	bne.n	8001ea6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff93 	bl	8001dcc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d13a      	bne.n	8001f40 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d109      	bne.n	8001ee8 <I2S_IRQHandler+0x3a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ede:	2b40      	cmp	r3, #64	@ 0x40
 8001ee0:	d102      	bne.n	8001ee8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffb4 	bl	8001e50 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eee:	2b40      	cmp	r3, #64	@ 0x40
 8001ef0:	d126      	bne.n	8001f40 <I2S_IRQHandler+0x92>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d11f      	bne.n	8001f40 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f043 0202 	orr.w	r2, r3, #2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ff50 	bl	8001de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d136      	bne.n	8001fba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d109      	bne.n	8001f6a <I2S_IRQHandler+0xbc>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f60:	2b80      	cmp	r3, #128	@ 0x80
 8001f62:	d102      	bne.n	8001f6a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff45 	bl	8001df4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d122      	bne.n	8001fba <I2S_IRQHandler+0x10c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d11b      	bne.n	8001fba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f90:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff13 	bl	8001de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a92      	ldr	r2, [pc, #584]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001fde:	4b92      	ldr	r3, [pc, #584]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe0:	e001      	b.n	8001fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001fe2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a8b      	ldr	r2, [pc, #556]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ffe:	e001      	b.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002000:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002010:	d004      	beq.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8099 	bne.w	800214e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f925 	bl	8002280 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f9c8 	bl	80023e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002056:	2b40      	cmp	r3, #64	@ 0x40
 8002058:	d13a      	bne.n	80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d035      	beq.n	80020d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6e      	ldr	r2, [pc, #440]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800206e:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002070:	e001      	b.n	8002076 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002072:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4969      	ldr	r1, [pc, #420]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800207e:	428b      	cmp	r3, r1
 8002080:	d101      	bne.n	8002086 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002082:	4b69      	ldr	r3, [pc, #420]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002084:	e001      	b.n	800208a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002086:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800208a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800208e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800209e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	f043 0202 	orr.w	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fe88 	bl	8001de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	f040 80c3 	bne.w	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80bd 	beq.w	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a49      	ldr	r2, [pc, #292]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002102:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002104:	e001      	b.n	800210a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002106:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4944      	ldr	r1, [pc, #272]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002112:	428b      	cmp	r3, r1
 8002114:	d101      	bne.n	800211a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002116:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002118:	e001      	b.n	800211e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800211a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800211e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002122:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	f043 0204 	orr.w	r2, r3, #4
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fe4a 	bl	8001de0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800214c:	e089      	b.n	8002262 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	d107      	bne.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8be 	bl	80022e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f8fd 	bl	800237c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002188:	2b40      	cmp	r3, #64	@ 0x40
 800218a:	d12f      	bne.n	80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d02a      	beq.n	80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80021b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021b2:	e001      	b.n	80021b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80021b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4919      	ldr	r1, [pc, #100]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80021c4:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021c6:	e001      	b.n	80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80021c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fdfa 	bl	8001de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d136      	bne.n	8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d031      	beq.n	8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a07      	ldr	r2, [pc, #28]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800220a:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800220c:	e001      	b.n	8002212 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800220e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4902      	ldr	r1, [pc, #8]	@ (8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800221a:	428b      	cmp	r3, r1
 800221c:	d106      	bne.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800221e:	4b02      	ldr	r3, [pc, #8]	@ (8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002220:	e006      	b.n	8002230 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002222:	bf00      	nop
 8002224:	40003800 	.word	0x40003800
 8002228:	40003400 	.word	0x40003400
 800222c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002230:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002234:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002244:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	f043 0204 	orr.w	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff fdc0 	bl	8001de0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002260:	e000      	b.n	8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002262:	bf00      	nop
}
 8002264:	bf00      	nop
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	1c99      	adds	r1, r3, #2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6251      	str	r1, [r2, #36]	@ 0x24
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d113      	bne.n	80022da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ffc9 	bl	800226c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	1c99      	adds	r1, r3, #2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6251      	str	r1, [r2, #36]	@ 0x24
 80022f6:	8819      	ldrh	r1, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002374 <I2SEx_TxISR_I2SExt+0x90>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <I2SEx_TxISR_I2SExt+0x22>
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <I2SEx_TxISR_I2SExt+0x94>)
 8002304:	e001      	b.n	800230a <I2SEx_TxISR_I2SExt+0x26>
 8002306:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800230a:	460a      	mov	r2, r1
 800230c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d121      	bne.n	800236a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <I2SEx_TxISR_I2SExt+0x90>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d101      	bne.n	8002334 <I2SEx_TxISR_I2SExt+0x50>
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <I2SEx_TxISR_I2SExt+0x94>)
 8002332:	e001      	b.n	8002338 <I2SEx_TxISR_I2SExt+0x54>
 8002334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	490d      	ldr	r1, [pc, #52]	@ (8002374 <I2SEx_TxISR_I2SExt+0x90>)
 8002340:	428b      	cmp	r3, r1
 8002342:	d101      	bne.n	8002348 <I2SEx_TxISR_I2SExt+0x64>
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <I2SEx_TxISR_I2SExt+0x94>)
 8002346:	e001      	b.n	800234c <I2SEx_TxISR_I2SExt+0x68>
 8002348:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800234c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002350:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff81 	bl	800226c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40003800 	.word	0x40003800
 8002378:	40003400 	.word	0x40003400

0800237c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68d8      	ldr	r0, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	1c99      	adds	r1, r3, #2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002394:	b282      	uxth	r2, r0
 8002396:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ff4a 	bl	800226c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a20      	ldr	r2, [pc, #128]	@ (8002470 <I2SEx_RxISR_I2SExt+0x90>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <I2SEx_RxISR_I2SExt+0x16>
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <I2SEx_RxISR_I2SExt+0x94>)
 80023f4:	e001      	b.n	80023fa <I2SEx_RxISR_I2SExt+0x1a>
 80023f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023fa:	68d8      	ldr	r0, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	1c99      	adds	r1, r3, #2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002406:	b282      	uxth	r2, r0
 8002408:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d121      	bne.n	8002466 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <I2SEx_RxISR_I2SExt+0x90>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <I2SEx_RxISR_I2SExt+0x50>
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <I2SEx_RxISR_I2SExt+0x94>)
 800242e:	e001      	b.n	8002434 <I2SEx_RxISR_I2SExt+0x54>
 8002430:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	490d      	ldr	r1, [pc, #52]	@ (8002470 <I2SEx_RxISR_I2SExt+0x90>)
 800243c:	428b      	cmp	r3, r1
 800243e:	d101      	bne.n	8002444 <I2SEx_RxISR_I2SExt+0x64>
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <I2SEx_RxISR_I2SExt+0x94>)
 8002442:	e001      	b.n	8002448 <I2SEx_RxISR_I2SExt+0x68>
 8002444:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002448:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800244c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d106      	bne.n	8002466 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff03 	bl	800226c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40003800 	.word	0x40003800
 8002474:	40003400 	.word	0x40003400

08002478 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b08f      	sub	sp, #60	@ 0x3c
 800247c:	af0a      	add	r7, sp, #40	@ 0x28
 800247e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e10f      	b.n	80026aa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f005 fecb 	bl	8008240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f002 f9b4 	bl	8004836 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	687e      	ldr	r6, [r7, #4]
 80024d6:	466d      	mov	r5, sp
 80024d8:	f106 0410 	add.w	r4, r6, #16
 80024dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ec:	1d33      	adds	r3, r6, #4
 80024ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	f002 f88c 	bl	800460e <USB_CoreInit>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d0      	b.n	80026aa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f002 f9a2 	bl	8004858 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e04a      	b.n	80025b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	333d      	adds	r3, #61	@ 0x3d
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	333c      	adds	r3, #60	@ 0x3c
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	b298      	uxth	r0, r3
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3344      	adds	r3, #68	@ 0x44
 8002556:	4602      	mov	r2, r0
 8002558:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3340      	adds	r3, #64	@ 0x40
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3348      	adds	r3, #72	@ 0x48
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	334c      	adds	r3, #76	@ 0x4c
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3354      	adds	r3, #84	@ 0x54
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	3301      	adds	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3af      	bcc.n	800251a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e044      	b.n	800264a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	3301      	adds	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d3b5      	bcc.n	80025c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	687e      	ldr	r6, [r7, #4]
 800265c:	466d      	mov	r5, sp
 800265e:	f106 0410 	add.w	r4, r6, #16
 8002662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800266a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800266e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002672:	1d33      	adds	r3, r6, #4
 8002674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	f002 f93a 	bl	80048f0 <USB_DevInit>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00d      	b.n	80026aa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fa89 	bl	8005bba <USB_DevDisconnect>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_PCD_Start+0x1c>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e020      	b.n	8002710 <HAL_PCD_Start+0x5e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d109      	bne.n	80026f2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d005      	beq.n	80026f2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 f88c 	bl	8004814 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fa39 	bl	8005b78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b08d      	sub	sp, #52	@ 0x34
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 faf7 	bl	8005d22 <USB_GetMode>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 848a 	bne.w	8003050 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fa5b 	bl	8005bfc <USB_ReadInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8480 	beq.w	800304e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f003 fa48 	bl	8005bfc <USB_ReadInterrupts>
 800276c:	4603      	mov	r3, r0
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d107      	bne.n	8002786 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f002 0202 	and.w	r2, r2, #2
 8002784:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fa36 	bl	8005bfc <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b10      	cmp	r3, #16
 8002798:	d161      	bne.n	800285e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0210 	bic.w	r2, r2, #16
 80027a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f003 020f 	and.w	r2, r3, #15
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80027d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027d4:	d124      	bne.n	8002820 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d035      	beq.n	800284e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	6a38      	ldr	r0, [r7, #32]
 80027f6:	f003 f86d 	bl	80058d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002806:	441a      	add	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002818:	441a      	add	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	621a      	str	r2, [r3, #32]
 800281e:	e016      	b.n	800284e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002826:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800282a:	d110      	bne.n	800284e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002832:	2208      	movs	r2, #8
 8002834:	4619      	mov	r1, r3
 8002836:	6a38      	ldr	r0, [r7, #32]
 8002838:	f003 f84c 	bl	80058d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002848:	441a      	add	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0210 	orr.w	r2, r2, #16
 800285c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f003 f9ca 	bl	8005bfc <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002872:	f040 80a7 	bne.w	80029c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 f9cf 	bl	8005c22 <USB_ReadDevAllOutEpInterrupt>
 8002884:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002886:	e099      	b.n	80029bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 808e 	beq.w	80029b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 f9f3 	bl	8005c8a <USB_ReadDevOutEPInterrupt>
 80028a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028bc:	461a      	mov	r2, r3
 80028be:	2301      	movs	r3, #1
 80028c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fec3 	bl	8003650 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00c      	beq.n	80028ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e0:	461a      	mov	r2, r3
 80028e2:	2308      	movs	r3, #8
 80028e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 ff99 	bl	8003820 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d030      	beq.n	8002976 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	2b80      	cmp	r3, #128	@ 0x80
 800291e:	d109      	bne.n	8002934 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800292e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002932:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	78db      	ldrb	r3, [r3, #3]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f005 fd82 	bl	8008468 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2302      	movs	r3, #2
 8002974:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298c:	461a      	mov	r2, r3
 800298e:	2320      	movs	r3, #32
 8002990:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a8:	461a      	mov	r2, r3
 80029aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f af62 	bne.w	8002888 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 f917 	bl	8005bfc <USB_ReadInterrupts>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029d8:	f040 80db 	bne.w	8002b92 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 f938 	bl	8005c56 <USB_ReadDevAllInEpInterrupt>
 80029e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029ec:	e0cd      	b.n	8002b8a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80c2 	beq.w	8002b7e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 f95e 	bl	8005cc6 <USB_ReadDevInEPInterrupt>
 8002a0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d057      	beq.n	8002ac6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69f9      	ldr	r1, [r7, #28]
 8002a32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a36:	4013      	ands	r3, r2
 8002a38:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a46:	461a      	mov	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d132      	bne.n	8002aba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334c      	adds	r3, #76	@ 0x4c
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4403      	add	r3, r0
 8002a74:	3348      	adds	r3, #72	@ 0x48
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4419      	add	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4403      	add	r3, r0
 8002a88:	334c      	adds	r3, #76	@ 0x4c
 8002a8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d113      	bne.n	8002aba <HAL_PCD_IRQHandler+0x3a2>
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3354      	adds	r3, #84	@ 0x54
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d108      	bne.n	8002aba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	f003 f965 	bl	8005d84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f005 fc4c 	bl	800835e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002adc:	461a      	mov	r2, r3
 8002ade:	2308      	movs	r3, #8
 8002ae0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af8:	461a      	mov	r2, r3
 8002afa:	2310      	movs	r3, #16
 8002afc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b14:	461a      	mov	r2, r3
 8002b16:	2340      	movs	r3, #64	@ 0x40
 8002b18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d023      	beq.n	8002b6c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b26:	6a38      	ldr	r0, [r7, #32]
 8002b28:	f002 f846 	bl	8004bb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3338      	adds	r3, #56	@ 0x38
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	78db      	ldrb	r3, [r3, #3]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d108      	bne.n	8002b5a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f005 fc99 	bl	800848c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b66:	461a      	mov	r2, r3
 8002b68:	2302      	movs	r3, #2
 8002b6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fcdb 	bl	8003534 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	3301      	adds	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f47f af2e 	bne.w	80029ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 f830 	bl	8005bfc <USB_ReadInterrupts>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ba6:	d122      	bne.n	8002bee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bce:	2100      	movs	r1, #0
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fec3 	bl	800395c <HAL_PCDEx_LPM_Callback>
 8002bd6:	e002      	b.n	8002bde <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f005 fc37 	bl	800844c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 f802 	bl	8005bfc <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c02:	d112      	bne.n	8002c2a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d102      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f005 fbf3 	bl	8008400 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c28:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f002 ffe4 	bl	8005bfc <USB_ReadInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	f040 80b7 	bne.w	8002db0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 ffab 	bl	8004bb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c66:	e046      	b.n	8002cf6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c74:	461a      	mov	r2, r3
 8002c76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8c:	0151      	lsls	r1, r2, #5
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	440a      	add	r2, r1
 8002c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc0:	0151      	lsls	r1, r2, #5
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ce0:	0151      	lsls	r1, r2, #5
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	440a      	add	r2, r1
 8002ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3b3      	bcc.n	8002c68 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d0e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d016      	beq.n	8002d4a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2c:	f043 030b 	orr.w	r3, r3, #11
 8002d30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d42:	f043 030b 	orr.w	r3, r3, #11
 8002d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d48:	e015      	b.n	8002d76 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d5c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d70:	f043 030b 	orr.w	r3, r3, #11
 8002d74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d84:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f002 fff2 	bl	8005d84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 ff21 	bl	8005bfc <USB_ReadInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dc4:	d124      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 ffb7 	bl	8005d3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 ff6c 	bl	8004cb2 <USB_GetDevSpeed>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	f001 fa29 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8002dea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	4620      	mov	r0, r4
 8002df6:	f001 fc6b 	bl	80046d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f005 fad7 	bl	80083ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fef1 	bl	8005bfc <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d10a      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f005 fab4 	bl	8008392 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f002 0208 	and.w	r2, r2, #8
 8002e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fedc 	bl	8005bfc <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4a:	2b80      	cmp	r3, #128	@ 0x80
 8002e4c:	d122      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5e:	e014      	b.n	8002e8a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fb27 	bl	80034d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	3301      	adds	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3e5      	bcc.n	8002e60 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 feaf 	bl	8005bfc <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ea8:	d13b      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eaa:	2301      	movs	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eae:	e02b      	b.n	8002f08 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3340      	adds	r3, #64	@ 0x40
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d115      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ed6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da12      	bge.n	8002f02 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	333f      	adds	r3, #63	@ 0x3f
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fae8 	bl	80034d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3ce      	bcc.n	8002eb0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fe68 	bl	8005bfc <USB_ReadInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f36:	d155      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f38:	2301      	movs	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3c:	e045      	b.n	8002fca <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d12e      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da2b      	bge.n	8002fc4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002f78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d121      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc0:	6053      	str	r3, [r2, #4]
            break;
 8002fc2:	e007      	b.n	8002fd4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3b4      	bcc.n	8002f3e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f002 fe07 	bl	8005bfc <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff8:	d10a      	bne.n	8003010 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f005 fa58 	bl	80084b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800300e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fdf1 	bl	8005bfc <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d115      	bne.n	8003050 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f005 fa48 	bl	80084cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	e000      	b.n	8003050 <HAL_PCD_IRQHandler+0x938>
      return;
 800304e:	bf00      	nop
    }
  }
}
 8003050:	3734      	adds	r7, #52	@ 0x34
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}

08003056 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_PCD_SetAddress+0x1a>
 800306c:	2302      	movs	r3, #2
 800306e:	e013      	b.n	8003098 <HAL_PCD_SetAddress+0x42>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fd4f 	bl	8005b2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	70fb      	strb	r3, [r7, #3]
 80030b2:	460b      	mov	r3, r1
 80030b4:	803b      	strh	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da0f      	bge.n	80030e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3338      	adds	r3, #56	@ 0x38
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	705a      	strb	r2, [r3, #1]
 80030e4:	e00f      	b.n	8003106 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003112:	883a      	ldrh	r2, [r7, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	78ba      	ldrb	r2, [r7, #2]
 800311c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003130:	78bb      	ldrb	r3, [r7, #2]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d102      	bne.n	800313c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_PCD_EP_Open+0xaa>
 8003146:	2302      	movs	r3, #2
 8003148:	e00e      	b.n	8003168 <HAL_PCD_EP_Open+0xc8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68f9      	ldr	r1, [r7, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fdcf 	bl	8004cfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003166:	7afb      	ldrb	r3, [r7, #11]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800317c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003180:	2b00      	cmp	r3, #0
 8003182:	da0f      	bge.n	80031a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3338      	adds	r3, #56	@ 0x38
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	705a      	strb	r2, [r3, #1]
 80031a2:	e00f      	b.n	80031c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_PCD_EP_Close+0x6e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e00e      	b.n	80031fc <HAL_PCD_EP_Close+0x8c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fe0d 	bl	8004e0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003214:	7afb      	ldrb	r3, [r7, #11]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2200      	movs	r2, #0
 8003244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	f002 f8ec 	bl	8005454 <USB_EP0StartXfer>
 800327c:	e008      	b.n	8003290 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	f001 fe9a 	bl	8004fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80032bc:	681b      	ldr	r3, [r3, #0]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	460b      	mov	r3, r1
 80032d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032da:	7afb      	ldrb	r3, [r7, #11]
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	3338      	adds	r3, #56	@ 0x38
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	3304      	adds	r3, #4
 80032f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2201      	movs	r2, #1
 8003308:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330a:	7afb      	ldrb	r3, [r7, #11]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	b2da      	uxtb	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003324:	7afb      	ldrb	r3, [r7, #11]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	6979      	ldr	r1, [r7, #20]
 800333c:	f002 f88a 	bl	8005454 <USB_EP0StartXfer>
 8003340:	e008      	b.n	8003354 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	6979      	ldr	r1, [r7, #20]
 8003350:	f001 fe38 	bl	8004fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d901      	bls.n	800337c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e050      	b.n	800341e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800337c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003380:	2b00      	cmp	r3, #0
 8003382:	da0f      	bge.n	80033a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3338      	adds	r3, #56	@ 0x38
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	705a      	strb	r2, [r3, #1]
 80033a2:	e00d      	b.n	80033c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_PCD_EP_SetStall+0x82>
 80033dc:	2302      	movs	r3, #2
 80033de:	e01e      	b.n	800341e <HAL_PCD_EP_SetStall+0xc0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 fac8 	bl	8005984 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	b2d9      	uxtb	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800340e:	461a      	mov	r2, r3
 8003410:	f002 fcb8 	bl	8005d84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d901      	bls.n	8003444 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e042      	b.n	80034ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003448:	2b00      	cmp	r3, #0
 800344a:	da0f      	bge.n	800346c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3338      	adds	r3, #56	@ 0x38
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	705a      	strb	r2, [r3, #1]
 800346a:	e00f      	b.n	800348c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	3304      	adds	r3, #4
 8003484:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_PCD_EP_ClrStall+0x86>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e00e      	b.n	80034ca <HAL_PCD_EP_ClrStall+0xa4>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fad0 	bl	8005a60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da0c      	bge.n	8003500 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	3338      	adds	r3, #56	@ 0x38
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	3304      	adds	r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e00c      	b.n	800351a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 020f 	and.w	r2, r3, #15
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	3304      	adds	r3, #4
 8003518:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	4618      	mov	r0, r3
 8003522:	f002 f8ef 	bl	8005704 <USB_EPStopXfer>
 8003526:	4603      	mov	r3, r0
 8003528:	72fb      	strb	r3, [r7, #11]

  return ret;
 800352a:	7afb      	ldrb	r3, [r7, #11]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	@ 0x28
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	3338      	adds	r3, #56	@ 0x38
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4413      	add	r3, r2
 8003558:	3304      	adds	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	429a      	cmp	r2, r3
 8003566:	d901      	bls.n	800356c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e06c      	b.n	8003646 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	429a      	cmp	r2, r3
 8003580:	d902      	bls.n	8003588 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3303      	adds	r3, #3
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003590:	e02b      	b.n	80035ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d902      	bls.n	80035ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3303      	adds	r3, #3
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6919      	ldr	r1, [r3, #16]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4603      	mov	r3, r0
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f002 f943 	bl	8005858 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	441a      	add	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d809      	bhi.n	8003614 <PCD_WriteEmptyTxFifo+0xe0>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003608:	429a      	cmp	r2, r3
 800360a:	d203      	bcs.n	8003614 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1be      	bne.n	8003592 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	429a      	cmp	r2, r3
 800361e:	d811      	bhi.n	8003644 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	43db      	mvns	r3, r3
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003640:	4013      	ands	r3, r2
 8003642:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	333c      	adds	r3, #60	@ 0x3c
 8003668:	3304      	adds	r3, #4
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d17b      	bne.n	800377e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4a61      	ldr	r2, [pc, #388]	@ (8003818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f240 80b9 	bls.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80b3 	beq.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036b8:	6093      	str	r3, [r2, #8]
 80036ba:	e0a7      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d2:	461a      	mov	r2, r3
 80036d4:	2320      	movs	r3, #32
 80036d6:	6093      	str	r3, [r2, #8]
 80036d8:	e098      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 8093 	bne.w	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003818 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d90f      	bls.n	800370e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	e07e      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	0159      	lsls	r1, r3, #5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	440b      	add	r3, r1
 8003730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	1ad2      	subs	r2, r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d114      	bne.n	8003770 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003758:	461a      	mov	r2, r3
 800375a:	2101      	movs	r1, #1
 800375c:	f002 fb12 	bl	8005d84 <USB_EP0_OutStart>
 8003760:	e006      	b.n	8003770 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f004 fdd6 	bl	8008328 <HAL_PCD_DataOutStageCallback>
 800377c:	e046      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4a26      	ldr	r2, [pc, #152]	@ (800381c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d124      	bne.n	80037d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a2:	6093      	str	r3, [r2, #8]
 80037a4:	e032      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037bc:	461a      	mov	r2, r3
 80037be:	2320      	movs	r3, #32
 80037c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f004 fdad 	bl	8008328 <HAL_PCD_DataOutStageCallback>
 80037ce:	e01d      	b.n	800380c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d114      	bne.n	8003800 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80037f8:	461a      	mov	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	f002 fac2 	bl	8005d84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f004 fd8e 	bl	8008328 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	4f54300a 	.word	0x4f54300a
 800381c:	4f54310a 	.word	0x4f54310a

08003820 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	333c      	adds	r3, #60	@ 0x3c
 8003838:	3304      	adds	r3, #4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a15      	ldr	r2, [pc, #84]	@ (80038a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d90e      	bls.n	8003874 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003872:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f004 fd45 	bl	8008304 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d90c      	bls.n	800389c <PCD_EP_OutSetupPacket_int+0x7c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003894:	461a      	mov	r2, r3
 8003896:	2101      	movs	r1, #1
 8003898:	f002 fa74 	bl	8005d84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	4f54300a 	.word	0x4f54300a

080038ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
 80038b8:	4613      	mov	r3, r2
 80038ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038ca:	883b      	ldrh	r3, [r7, #0]
 80038cc:	0419      	lsls	r1, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d8:	e028      	b.n	800392c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e00d      	b.n	800390a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	3340      	adds	r3, #64	@ 0x40
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	3301      	adds	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	3b01      	subs	r3, #1
 8003910:	429a      	cmp	r2, r3
 8003912:	d3ec      	bcc.n	80038ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003914:	883b      	ldrh	r3, [r7, #0]
 8003916:	0418      	lsls	r0, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	3b01      	subs	r3, #1
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	4302      	orrs	r2, r0
 8003924:	3340      	adds	r3, #64	@ 0x40
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e267      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d075      	beq.n	8003a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003992:	4b88      	ldr	r3, [pc, #544]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b04      	cmp	r3, #4
 800399c:	d00c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b85      	ldr	r3, [pc, #532]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d112      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b82      	ldr	r3, [pc, #520]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05b      	beq.n	8003a7c <HAL_RCC_OscConfig+0x108>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d157      	bne.n	8003a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e242      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d106      	bne.n	80039e8 <HAL_RCC_OscConfig+0x74>
 80039da:	4b76      	ldr	r3, [pc, #472]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a75      	ldr	r2, [pc, #468]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e01d      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b70      	ldr	r3, [pc, #448]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6f      	ldr	r2, [pc, #444]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6c      	ldr	r2, [pc, #432]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0xb0>
 8003a0c:	4b69      	ldr	r3, [pc, #420]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a68      	ldr	r2, [pc, #416]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b66      	ldr	r3, [pc, #408]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fc16 	bl	800125c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fd fc12 	bl	800125c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	@ 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e207      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0xc0>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fd fc02 	bl	800125c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fbfe 	bl	800125c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e1f3      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6e:	4b51      	ldr	r3, [pc, #324]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0xe8>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00b      	beq.n	8003aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b47      	ldr	r3, [pc, #284]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11c      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b44      	ldr	r3, [pc, #272]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d116      	bne.n	8003adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	4b41      	ldr	r3, [pc, #260]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1c7      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4937      	ldr	r1, [pc, #220]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	e03a      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae4:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd fbb7 	bl	800125c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fd fbb3 	bl	800125c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1a8      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b04:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b28      	ldr	r3, [pc, #160]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4925      	ldr	r1, [pc, #148]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	e015      	b.n	8003b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b24      	ldr	r3, [pc, #144]	@ (8003bb8 <HAL_RCC_OscConfig+0x244>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fb96 	bl	800125c <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fd fb92 	bl	800125c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e187      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d036      	beq.n	8003bcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fb76 	bl	800125c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fd fb72 	bl	800125c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e167      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b86:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x200>
 8003b92:	e01b      	b.n	8003bcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_RCC_OscConfig+0x248>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fb5f 	bl	800125c <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	e00e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fd fb5b 	bl	800125c <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d907      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e150      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	42470000 	.word	0x42470000
 8003bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	4b88      	ldr	r3, [pc, #544]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ea      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8097 	beq.w	8003d08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b81      	ldr	r3, [pc, #516]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	4b7d      	ldr	r3, [pc, #500]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d118      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c16:	4b74      	ldr	r3, [pc, #464]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a73      	ldr	r2, [pc, #460]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c22:	f7fd fb1b 	bl	800125c <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7fd fb17 	bl	800125c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e10c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_OscConfig+0x474>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x2ea>
 8003c50:	4b64      	ldr	r3, [pc, #400]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	4a63      	ldr	r2, [pc, #396]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x30c>
 8003c66:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c72:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	4a5b      	ldr	r2, [pc, #364]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0x324>
 8003c80:	4b58      	ldr	r3, [pc, #352]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a57      	ldr	r2, [pc, #348]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	4b55      	ldr	r3, [pc, #340]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a54      	ldr	r2, [pc, #336]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 0304 	bic.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd fadc 	bl	800125c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fad8 	bl	800125c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0cb      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	4b49      	ldr	r3, [pc, #292]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ee      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x334>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fac6 	bl	800125c <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd fac2 	bl	800125c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0b5      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	4b3e      	ldr	r3, [pc, #248]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ee      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b39      	ldr	r3, [pc, #228]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	4a38      	ldr	r2, [pc, #224]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80a1 	beq.w	8003e54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d12:	4b34      	ldr	r3, [pc, #208]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d05c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d141      	bne.n	8003daa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d26:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fa96 	bl	800125c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd fa92 	bl	800125c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e087      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	019b      	lsls	r3, r3, #6
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	491b      	ldr	r1, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fd fa6b 	bl	800125c <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fd fa67 	bl	800125c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e05c      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9c:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x416>
 8003da8:	e054      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <HAL_RCC_OscConfig+0x478>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fd fa54 	bl	800125c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd fa50 	bl	800125c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e045      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x444>
 8003dd6:	e03d      	b.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e038      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40007000 	.word	0x40007000
 8003dec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e60 <HAL_RCC_OscConfig+0x4ec>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d121      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d11a      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800

08003e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0cc      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e78:	4b68      	ldr	r3, [pc, #416]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d90c      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b65      	ldr	r3, [pc, #404]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b8      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb8:	4b59      	ldr	r3, [pc, #356]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed0:	4b53      	ldr	r3, [pc, #332]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b50      	ldr	r3, [pc, #320]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	494d      	ldr	r1, [pc, #308]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d044      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d119      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d107      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f22:	4b3f      	ldr	r3, [pc, #252]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e067      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f42:	4b37      	ldr	r3, [pc, #220]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4934      	ldr	r1, [pc, #208]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f54:	f7fd f982 	bl	800125c <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f7fd f97e 	bl	800125c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e04f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f72:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 020c 	and.w	r2, r3, #12
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1eb      	bne.n	8003f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f84:	4b25      	ldr	r3, [pc, #148]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d20c      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b22      	ldr	r3, [pc, #136]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	@ (800401c <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4916      	ldr	r1, [pc, #88]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490e      	ldr	r1, [pc, #56]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f821 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490a      	ldr	r1, [pc, #40]	@ (8004024 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a09      	ldr	r2, [pc, #36]	@ (8004028 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd f8e2 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023c00 	.word	0x40023c00
 8004020:	40023800 	.word	0x40023800
 8004024:	08009788 	.word	0x08009788
 8004028:	20000000 	.word	0x20000000
 800402c:	20000004 	.word	0x20000004

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004034:	b094      	sub	sp, #80	@ 0x50
 8004036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	647b      	str	r3, [r7, #68]	@ 0x44
 800403c:	2300      	movs	r3, #0
 800403e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004040:	2300      	movs	r3, #0
 8004042:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004048:	4b79      	ldr	r3, [pc, #484]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d00d      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x40>
 8004054:	2b08      	cmp	r3, #8
 8004056:	f200 80e1 	bhi.w	800421c <HAL_RCC_GetSysClockFreq+0x1ec>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x34>
 800405e:	2b04      	cmp	r3, #4
 8004060:	d003      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x3a>
 8004062:	e0db      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004064:	4b73      	ldr	r3, [pc, #460]	@ (8004234 <HAL_RCC_GetSysClockFreq+0x204>)
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004068:	e0db      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406a:	4b73      	ldr	r3, [pc, #460]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x208>)
 800406c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800406e:	e0d8      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004070:	4b6f      	ldr	r3, [pc, #444]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004078:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407a:	4b6d      	ldr	r3, [pc, #436]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d063      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004086:	4b6a      	ldr	r3, [pc, #424]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	2200      	movs	r2, #0
 800408e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004090:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004098:	633b      	str	r3, [r7, #48]	@ 0x30
 800409a:	2300      	movs	r3, #0
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
 800409e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040a2:	4622      	mov	r2, r4
 80040a4:	462b      	mov	r3, r5
 80040a6:	f04f 0000 	mov.w	r0, #0
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	0159      	lsls	r1, r3, #5
 80040b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b4:	0150      	lsls	r0, r2, #5
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4621      	mov	r1, r4
 80040bc:	1a51      	subs	r1, r2, r1
 80040be:	6139      	str	r1, [r7, #16]
 80040c0:	4629      	mov	r1, r5
 80040c2:	eb63 0301 	sbc.w	r3, r3, r1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d4:	4659      	mov	r1, fp
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	4651      	mov	r1, sl
 80040da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040de:	4651      	mov	r1, sl
 80040e0:	018a      	lsls	r2, r1, #6
 80040e2:	4651      	mov	r1, sl
 80040e4:	ebb2 0801 	subs.w	r8, r2, r1
 80040e8:	4659      	mov	r1, fp
 80040ea:	eb63 0901 	sbc.w	r9, r3, r1
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004102:	4690      	mov	r8, r2
 8004104:	4699      	mov	r9, r3
 8004106:	4623      	mov	r3, r4
 8004108:	eb18 0303 	adds.w	r3, r8, r3
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	462b      	mov	r3, r5
 8004110:	eb49 0303 	adc.w	r3, r9, r3
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004122:	4629      	mov	r1, r5
 8004124:	024b      	lsls	r3, r1, #9
 8004126:	4621      	mov	r1, r4
 8004128:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800412c:	4621      	mov	r1, r4
 800412e:	024a      	lsls	r2, r1, #9
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004136:	2200      	movs	r2, #0
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800413a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800413c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004140:	f7fc f896 	bl	8000270 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4613      	mov	r3, r2
 800414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414c:	e058      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414e:	4b38      	ldr	r3, [pc, #224]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	099b      	lsrs	r3, r3, #6
 8004154:	2200      	movs	r2, #0
 8004156:	4618      	mov	r0, r3
 8004158:	4611      	mov	r1, r2
 800415a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	2300      	movs	r3, #0
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
 8004164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	f04f 0000 	mov.w	r0, #0
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	0159      	lsls	r1, r3, #5
 8004176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800417a:	0150      	lsls	r0, r2, #5
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4641      	mov	r1, r8
 8004182:	ebb2 0a01 	subs.w	sl, r2, r1
 8004186:	4649      	mov	r1, r9
 8004188:	eb63 0b01 	sbc.w	fp, r3, r1
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800419c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041a0:	ebb2 040a 	subs.w	r4, r2, sl
 80041a4:	eb63 050b 	sbc.w	r5, r3, fp
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	00eb      	lsls	r3, r5, #3
 80041b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b6:	00e2      	lsls	r2, r4, #3
 80041b8:	4614      	mov	r4, r2
 80041ba:	461d      	mov	r5, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	18e3      	adds	r3, r4, r3
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	464b      	mov	r3, r9
 80041c4:	eb45 0303 	adc.w	r3, r5, r3
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041d6:	4629      	mov	r1, r5
 80041d8:	028b      	lsls	r3, r1, #10
 80041da:	4621      	mov	r1, r4
 80041dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041e0:	4621      	mov	r1, r4
 80041e2:	028a      	lsls	r2, r1, #10
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ea:	2200      	movs	r2, #0
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	61fa      	str	r2, [r7, #28]
 80041f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f4:	f7fc f83c 	bl	8000270 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4613      	mov	r3, r2
 80041fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004200:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x200>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	3301      	adds	r3, #1
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004210:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800421a:	e002      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800421c:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_RCC_GetSysClockFreq+0x204>)
 800421e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004224:	4618      	mov	r0, r3
 8004226:	3750      	adds	r7, #80	@ 0x50
 8004228:	46bd      	mov	sp, r7
 800422a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
 8004234:	00f42400 	.word	0x00f42400
 8004238:	007a1200 	.word	0x007a1200

0800423c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004240:	4b03      	ldr	r3, [pc, #12]	@ (8004250 <HAL_RCC_GetHCLKFreq+0x14>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000000 	.word	0x20000000

08004254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004258:	f7ff fff0 	bl	800423c <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0a9b      	lsrs	r3, r3, #10
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	@ (8004278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	08009798 	.word	0x08009798

0800427c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d035      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042a4:	4b62      	ldr	r3, [pc, #392]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042aa:	f7fc ffd7 	bl	800125c <HAL_GetTick>
 80042ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b0:	e008      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042b2:	f7fc ffd3 	bl	800125c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0b0      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	019a      	lsls	r2, r3, #6
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	071b      	lsls	r3, r3, #28
 80042dc:	4955      	ldr	r1, [pc, #340]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042e4:	4b52      	ldr	r3, [pc, #328]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ea:	f7fc ffb7 	bl	800125c <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042f2:	f7fc ffb3 	bl	800125c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e090      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004304:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8083 	beq.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b44      	ldr	r3, [pc, #272]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	4a43      	ldr	r2, [pc, #268]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	@ 0x40
 800432e:	4b41      	ldr	r3, [pc, #260]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800433a:	4b3f      	ldr	r3, [pc, #252]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a3e      	ldr	r2, [pc, #248]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004344:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004346:	f7fc ff89 	bl	800125c <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fc ff85 	bl	800125c <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e062      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004360:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800436c:	4b31      	ldr	r3, [pc, #196]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004374:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	429a      	cmp	r2, r3
 8004388:	d028      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800438a:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004392:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004394:	4b29      	ldr	r3, [pc, #164]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800439a:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043a0:	4a24      	ldr	r2, [pc, #144]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a6:	4b23      	ldr	r3, [pc, #140]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d114      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fc ff53 	bl	800125c <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fc ff4f 	bl	800125c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e02a      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	4b18      	ldr	r3, [pc, #96]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ee      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e8:	d10d      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043ea:	4b12      	ldr	r3, [pc, #72]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80043fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043fe:	490d      	ldr	r1, [pc, #52]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]
 8004404:	e005      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004410:	6093      	str	r3, [r2, #8]
 8004412:	4b08      	ldr	r3, [pc, #32]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004414:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441e:	4905      	ldr	r1, [pc, #20]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	42470068 	.word	0x42470068
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
 800443c:	42470e40 	.word	0x42470e40

08004440 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d13e      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800445e:	4b23      	ldr	r3, [pc, #140]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004466:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d12f      	bne.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004474:	4b1e      	ldr	r3, [pc, #120]	@ (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004476:	617b      	str	r3, [r7, #20]
          break;
 8004478:	e02f      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800447a:	4b1c      	ldr	r3, [pc, #112]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004486:	d108      	bne.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004490:	4a18      	ldr	r2, [pc, #96]	@ (80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e007      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800449a:	4b14      	ldr	r3, [pc, #80]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044a2:	4a15      	ldr	r2, [pc, #84]	@ (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044aa:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	fb02 f303 	mul.w	r3, r2, r3
 80044bc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044be:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c4:	0f1b      	lsrs	r3, r3, #28
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]
          break;
 80044d2:	e002      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
          break;
 80044d8:	bf00      	nop
        }
      }
      break;
 80044da:	bf00      	nop
    }
  }
  return frequency;
 80044dc:	697b      	ldr	r3, [r7, #20]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00bb8000 	.word	0x00bb8000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	00f42400 	.word	0x00f42400

080044fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07b      	b.n	8004606 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d108      	bne.n	8004528 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800451e:	d009      	beq.n	8004534 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	61da      	str	r2, [r3, #28]
 8004526:	e005      	b.n	8004534 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc fcd8 	bl	8000f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800456a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b8:	ea42 0103 	orr.w	r1, r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f003 0104 	and.w	r1, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	f003 0210 	and.w	r2, r3, #16
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800460e:	b084      	sub	sp, #16
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	f107 001c 	add.w	r0, r7, #28
 800461c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	2b01      	cmp	r3, #1
 8004624:	d122      	bne.n	800466c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800463a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800464e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d105      	bne.n	8004660 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f001 fbed 	bl	8005e40 <USB_CoreReset>
 8004666:	4603      	mov	r3, r0
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	e01a      	b.n	80046a2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f001 fbe1 	bl	8005e40 <USB_CoreReset>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	@ 0x38
 8004694:	e005      	b.n	80046a2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10b      	bne.n	80046c0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f043 0206 	orr.w	r2, r3, #6
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046cc:	b004      	add	sp, #16
 80046ce:	4770      	bx	lr

080046d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d165      	bne.n	80047b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a41      	ldr	r2, [pc, #260]	@ (80047ec <USB_SetTurnaroundTime+0x11c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d906      	bls.n	80046fa <USB_SetTurnaroundTime+0x2a>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a40      	ldr	r2, [pc, #256]	@ (80047f0 <USB_SetTurnaroundTime+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d202      	bcs.n	80046fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046f4:	230f      	movs	r3, #15
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e062      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a3c      	ldr	r2, [pc, #240]	@ (80047f0 <USB_SetTurnaroundTime+0x120>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d306      	bcc.n	8004710 <USB_SetTurnaroundTime+0x40>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4a3b      	ldr	r2, [pc, #236]	@ (80047f4 <USB_SetTurnaroundTime+0x124>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d202      	bcs.n	8004710 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800470a:	230e      	movs	r3, #14
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e057      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a38      	ldr	r2, [pc, #224]	@ (80047f4 <USB_SetTurnaroundTime+0x124>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d306      	bcc.n	8004726 <USB_SetTurnaroundTime+0x56>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4a37      	ldr	r2, [pc, #220]	@ (80047f8 <USB_SetTurnaroundTime+0x128>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d202      	bcs.n	8004726 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004720:	230d      	movs	r3, #13
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e04c      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a33      	ldr	r2, [pc, #204]	@ (80047f8 <USB_SetTurnaroundTime+0x128>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d306      	bcc.n	800473c <USB_SetTurnaroundTime+0x6c>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4a32      	ldr	r2, [pc, #200]	@ (80047fc <USB_SetTurnaroundTime+0x12c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d802      	bhi.n	800473c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004736:	230c      	movs	r3, #12
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e041      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a2f      	ldr	r2, [pc, #188]	@ (80047fc <USB_SetTurnaroundTime+0x12c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d906      	bls.n	8004752 <USB_SetTurnaroundTime+0x82>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4a2e      	ldr	r2, [pc, #184]	@ (8004800 <USB_SetTurnaroundTime+0x130>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d802      	bhi.n	8004752 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800474c:	230b      	movs	r3, #11
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e036      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4a2a      	ldr	r2, [pc, #168]	@ (8004800 <USB_SetTurnaroundTime+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d906      	bls.n	8004768 <USB_SetTurnaroundTime+0x98>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <USB_SetTurnaroundTime+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d802      	bhi.n	8004768 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004762:	230a      	movs	r3, #10
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e02b      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a26      	ldr	r2, [pc, #152]	@ (8004804 <USB_SetTurnaroundTime+0x134>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d906      	bls.n	800477e <USB_SetTurnaroundTime+0xae>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4a25      	ldr	r2, [pc, #148]	@ (8004808 <USB_SetTurnaroundTime+0x138>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d202      	bcs.n	800477e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004778:	2309      	movs	r3, #9
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e020      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a21      	ldr	r2, [pc, #132]	@ (8004808 <USB_SetTurnaroundTime+0x138>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d306      	bcc.n	8004794 <USB_SetTurnaroundTime+0xc4>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a20      	ldr	r2, [pc, #128]	@ (800480c <USB_SetTurnaroundTime+0x13c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d802      	bhi.n	8004794 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800478e:	2308      	movs	r3, #8
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e015      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4a1d      	ldr	r2, [pc, #116]	@ (800480c <USB_SetTurnaroundTime+0x13c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d906      	bls.n	80047aa <USB_SetTurnaroundTime+0xda>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <USB_SetTurnaroundTime+0x140>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d202      	bcs.n	80047aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047a4:	2307      	movs	r3, #7
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e00a      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047aa:	2306      	movs	r3, #6
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e007      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047b6:	2309      	movs	r3, #9
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e001      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047bc:	2309      	movs	r3, #9
 80047be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	029b      	lsls	r3, r3, #10
 80047d4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	00d8acbf 	.word	0x00d8acbf
 80047f0:	00e4e1c0 	.word	0x00e4e1c0
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	01067380 	.word	0x01067380
 80047fc:	011a499f 	.word	0x011a499f
 8004800:	01312cff 	.word	0x01312cff
 8004804:	014ca43f 	.word	0x014ca43f
 8004808:	016e3600 	.word	0x016e3600
 800480c:	01a6ab1f 	.word	0x01a6ab1f
 8004810:	01e84800 	.word	0x01e84800

08004814 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d115      	bne.n	80048a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004886:	2001      	movs	r0, #1
 8004888:	f7fc fcf4 	bl	8001274 <HAL_Delay>
      ms++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 fa45 	bl	8005d22 <USB_GetMode>
 8004898:	4603      	mov	r3, r0
 800489a:	2b01      	cmp	r3, #1
 800489c:	d01e      	beq.n	80048dc <USB_SetCurrentMode+0x84>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b31      	cmp	r3, #49	@ 0x31
 80048a2:	d9f0      	bls.n	8004886 <USB_SetCurrentMode+0x2e>
 80048a4:	e01a      	b.n	80048dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d115      	bne.n	80048d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7fc fcdb 	bl	8001274 <HAL_Delay>
      ms++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fa2c 	bl	8005d22 <USB_GetMode>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <USB_SetCurrentMode+0x84>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b31      	cmp	r3, #49	@ 0x31
 80048d4:	d9f0      	bls.n	80048b8 <USB_SetCurrentMode+0x60>
 80048d6:	e001      	b.n	80048dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e005      	b.n	80048e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b32      	cmp	r3, #50	@ 0x32
 80048e0:	d101      	bne.n	80048e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048f0:	b084      	sub	sp, #16
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80048fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e009      	b.n	8004924 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3340      	adds	r3, #64	@ 0x40
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	2200      	movs	r2, #0
 800491c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	3301      	adds	r3, #1
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b0e      	cmp	r3, #14
 8004928:	d9f2      	bls.n	8004910 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800492a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11c      	bne.n	800496a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800493e:	f043 0302 	orr.w	r3, r3, #2
 8004942:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004948:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004960:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	@ 0x38
 8004968:	e00b      	b.n	8004982 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004988:	461a      	mov	r2, r3
 800498a:	2300      	movs	r3, #0
 800498c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004994:	4619      	mov	r1, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499c:	461a      	mov	r2, r3
 800499e:	680b      	ldr	r3, [r1, #0]
 80049a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10c      	bne.n	80049c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ae:	2100      	movs	r1, #0
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f965 	bl	8004c80 <USB_SetDevSpeed>
 80049b6:	e008      	b.n	80049ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049b8:	2101      	movs	r1, #1
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f960 	bl	8004c80 <USB_SetDevSpeed>
 80049c0:	e003      	b.n	80049ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049c2:	2103      	movs	r1, #3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f95b 	bl	8004c80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049ca:	2110      	movs	r1, #16
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8f3 	bl	8004bb8 <USB_FlushTxFifo>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f91f 	bl	8004c20 <USB_FlushRxFifo>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fe:	461a      	mov	r2, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e043      	b.n	8004a9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a2c:	d118      	bne.n	8004a60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a40:	461a      	mov	r2, r3
 8004a42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e013      	b.n	8004a72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a56:	461a      	mov	r2, r3
 8004a58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e008      	b.n	8004a72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2300      	movs	r3, #0
 8004a70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3b7      	bcc.n	8004a16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e043      	b.n	8004b34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac2:	d118      	bne.n	8004af6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e013      	b.n	8004b08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e008      	b.n	8004b08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b02:	461a      	mov	r2, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b14:	461a      	mov	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3301      	adds	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d3b7      	bcc.n	8004aac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f043 0210 	orr.w	r2, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb4 <USB_DevInit+0x2c4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f043 0208 	orr.w	r2, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4770      	bx	lr
 8004bb4:	803c3800 	.word	0x803c3800

08004bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a13      	ldr	r2, [pc, #76]	@ (8004c1c <USB_FlushTxFifo+0x64>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e01b      	b.n	8004c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	daf2      	bge.n	8004bc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a08      	ldr	r2, [pc, #32]	@ (8004c1c <USB_FlushTxFifo+0x64>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e006      	b.n	8004c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d0f0      	beq.n	8004bf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	00030d40 	.word	0x00030d40

08004c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a11      	ldr	r2, [pc, #68]	@ (8004c7c <USB_FlushRxFifo+0x5c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e018      	b.n	8004c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	daf2      	bge.n	8004c2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a08      	ldr	r2, [pc, #32]	@ (8004c7c <USB_FlushRxFifo+0x5c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e006      	b.n	8004c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d0f0      	beq.n	8004c50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	00030d40 	.word	0x00030d40

08004c80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0306 	and.w	r3, r3, #6
 8004cca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	75fb      	strb	r3, [r7, #23]
 8004cd6:	e00a      	b.n	8004cee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d002      	beq.n	8004ce4 <USB_GetDevSpeed+0x32>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d102      	bne.n	8004cea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	75fb      	strb	r3, [r7, #23]
 8004ce8:	e001      	b.n	8004cee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cea:	230f      	movs	r3, #15
 8004cec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d13a      	bne.n	8004d8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d155      	bne.n	8004dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	791b      	ldrb	r3, [r3, #4]
 8004d6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	059b      	lsls	r3, r3, #22
 8004d72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d74:	4313      	orrs	r3, r2
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e036      	b.n	8004dfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2101      	movs	r1, #1
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11a      	bne.n	8004dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	791b      	ldrb	r3, [r3, #4]
 8004de0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004de2:	430b      	orrs	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d161      	bne.n	8004eec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e3e:	d11f      	bne.n	8004e80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	2101      	movs	r1, #1
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	0159      	lsls	r1, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	440b      	add	r3, r1
 8004ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4b35      	ldr	r3, [pc, #212]	@ (8004fbc <USB_DeactivateEndpoint+0x1b0>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]
 8004eea:	e060      	b.n	8004fae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f02:	d11f      	bne.n	8004f44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2101      	movs	r1, #1
 8004f56:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f64:	4013      	ands	r3, r2
 8004f66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	440b      	add	r3, r1
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <USB_DeactivateEndpoint+0x1b4>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	ec337800 	.word	0xec337800
 8004fc0:	eff37800 	.word	0xeff37800

08004fc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	@ 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f040 815c 	bne.w	800529e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d132      	bne.n	8005054 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005008:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800500c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800502c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800504c:	0cdb      	lsrs	r3, r3, #19
 800504e:	04db      	lsls	r3, r3, #19
 8005050:	6113      	str	r3, [r2, #16]
 8005052:	e074      	b.n	800513e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800506e:	0cdb      	lsrs	r3, r3, #19
 8005070:	04db      	lsls	r3, r3, #19
 8005072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800508e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005092:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	440b      	add	r3, r1
 80050b0:	1e59      	subs	r1, r3, #1
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050bc:	4b9d      	ldr	r3, [pc, #628]	@ (8005334 <USB_EPStartXfer+0x370>)
 80050be:	400b      	ands	r3, r1
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	0148      	lsls	r0, r1, #5
 80050c4:	69f9      	ldr	r1, [r7, #28]
 80050c6:	4401      	add	r1, r0
 80050c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80050cc:	4313      	orrs	r3, r2
 80050ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	0148      	lsls	r0, r1, #5
 80050ea:	69f9      	ldr	r1, [r7, #28]
 80050ec:	4401      	add	r1, r0
 80050ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	791b      	ldrb	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d11f      	bne.n	800513e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005118:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800511c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005138:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800513c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d14b      	bne.n	80051dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	791b      	ldrb	r3, [r3, #4]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d128      	bne.n	80051ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d110      	bne.n	800519a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005192:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e00f      	b.n	80051ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e133      	b.n	8005444 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	791b      	ldrb	r3, [r3, #4]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d015      	beq.n	8005230 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 811b 	beq.w	8005444 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800522a:	4313      	orrs	r3, r2
 800522c:	634b      	str	r3, [r1, #52]	@ 0x34
 800522e:	e109      	b.n	8005444 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800525a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e00f      	b.n	8005282 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005280:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6919      	ldr	r1, [r3, #16]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	b298      	uxth	r0, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fade 	bl	8005858 <USB_WritePacket>
 800529c:	e0d2      	b.n	8005444 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052b8:	0cdb      	lsrs	r3, r3, #19
 80052ba:	04db      	lsls	r3, r3, #19
 80052bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80052dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80052e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d126      	bne.n	8005338 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	0148      	lsls	r0, r1, #5
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	4401      	add	r1, r0
 8005308:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800530c:	4313      	orrs	r3, r2
 800530e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800532a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800532e:	6113      	str	r3, [r2, #16]
 8005330:	e03a      	b.n	80053a8 <USB_EPStartXfer+0x3e4>
 8005332:	bf00      	nop
 8005334:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4413      	add	r3, r2
 8005342:	1e5a      	subs	r2, r3, #1
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	8afa      	ldrh	r2, [r7, #22]
 8005354:	fb03 f202 	mul.w	r2, r3, r2
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	8afb      	ldrh	r3, [r7, #22]
 800536c:	04d9      	lsls	r1, r3, #19
 800536e:	4b38      	ldr	r3, [pc, #224]	@ (8005450 <USB_EPStartXfer+0x48c>)
 8005370:	400b      	ands	r3, r1
 8005372:	69b9      	ldr	r1, [r7, #24]
 8005374:	0148      	lsls	r0, r1, #5
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	4401      	add	r1, r0
 800537a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800537e:	4313      	orrs	r3, r2
 8005380:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	0148      	lsls	r0, r1, #5
 800539c:	69f9      	ldr	r1, [r7, #28]
 800539e:	4401      	add	r1, r0
 80053a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80053a4:	4313      	orrs	r3, r2
 80053a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10d      	bne.n	80053ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6919      	ldr	r1, [r3, #16]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c6:	460a      	mov	r2, r1
 80053c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	791b      	ldrb	r3, [r3, #4]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d128      	bne.n	8005424 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d110      	bne.n	8005404 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e00f      	b.n	8005424 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005422:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800543e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	1ff80000 	.word	0x1ff80000

08005454 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 80ce 	bne.w	8005612 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d132      	bne.n	80054e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005498:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800549c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054dc:	0cdb      	lsrs	r3, r3, #19
 80054de:	04db      	lsls	r3, r3, #19
 80054e0:	6113      	str	r3, [r2, #16]
 80054e2:	e04e      	b.n	8005582 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fe:	0cdb      	lsrs	r3, r3, #19
 8005500:	04db      	lsls	r3, r3, #19
 8005502:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800551e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005522:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005526:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d903      	bls.n	800553c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005556:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800555a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005572:	6939      	ldr	r1, [r7, #16]
 8005574:	0148      	lsls	r0, r1, #5
 8005576:	6979      	ldr	r1, [r7, #20]
 8005578:	4401      	add	r1, r0
 800557a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800557e:	4313      	orrs	r3, r2
 8005580:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d11e      	bne.n	80055c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e097      	b.n	80056f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8083 	beq.w	80056f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	6979      	ldr	r1, [r7, #20]
 8005608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800560c:	4313      	orrs	r3, r2
 800560e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005610:	e071      	b.n	80056f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800562c:	0cdb      	lsrs	r3, r3, #19
 800562e:	04db      	lsls	r3, r3, #19
 8005630:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005650:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005654:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005688:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800568c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a4:	6939      	ldr	r1, [r7, #16]
 80056a6:	0148      	lsls	r0, r1, #5
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	4401      	add	r1, r0
 80056ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056b0:	4313      	orrs	r3, r2
 80056b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10d      	bne.n	80056d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6919      	ldr	r1, [r3, #16]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d2:	460a      	mov	r2, r1
 80056d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d14a      	bne.n	80057b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800573a:	f040 8086 	bne.w	800584a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800575c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005760:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005780:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005784:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005792:	4293      	cmp	r3, r2
 8005794:	d902      	bls.n	800579c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
          break;
 800579a:	e056      	b.n	800584a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057b4:	d0e7      	beq.n	8005786 <USB_EPStopXfer+0x82>
 80057b6:	e048      	b.n	800584a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057d0:	d13b      	bne.n	800584a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005818:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3301      	adds	r3, #1
 800581e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005826:	4293      	cmp	r3, r2
 8005828:	d902      	bls.n	8005830 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
          break;
 800582e:	e00c      	b.n	800584a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005848:	d0e7      	beq.n	800581a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
}
 800584c:	4618      	mov	r0, r3
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	@ 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	460b      	mov	r3, r1
 8005868:	71fb      	strb	r3, [r7, #7]
 800586a:	4613      	mov	r3, r2
 800586c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005876:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d123      	bne.n	80058c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800587e:	88bb      	ldrh	r3, [r7, #4]
 8005880:	3303      	adds	r3, #3
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e018      	b.n	80058be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	031a      	lsls	r2, r3, #12
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005898:	461a      	mov	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3301      	adds	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3301      	adds	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3e2      	bcc.n	800588c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3724      	adds	r7, #36	@ 0x24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b08b      	sub	sp, #44	@ 0x2c
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	e014      	b.n	800592a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	601a      	str	r2, [r3, #0]
    pDest++;
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	3301      	adds	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	3301      	adds	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	3301      	adds	r3, #1
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	6a3a      	ldr	r2, [r7, #32]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	429a      	cmp	r2, r3
 8005930:	d3e6      	bcc.n	8005900 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005932:	8bfb      	ldrh	r3, [r7, #30]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01e      	beq.n	8005976 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005942:	461a      	mov	r2, r3
 8005944:	f107 0310 	add.w	r3, r7, #16
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	701a      	strb	r2, [r3, #0]
      i++;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	3301      	adds	r3, #1
 8005962:	623b      	str	r3, [r7, #32]
      pDest++;
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	3301      	adds	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800596a:	8bfb      	ldrh	r3, [r7, #30]
 800596c:	3b01      	subs	r3, #1
 800596e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005970:	8bfb      	ldrh	r3, [r7, #30]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ea      	bne.n	800594c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005978:	4618      	mov	r0, r3
 800597a:	372c      	adds	r7, #44	@ 0x2c
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d12c      	bne.n	80059fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	db12      	blt.n	80059d8 <USB_EPSetStall+0x54>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00f      	beq.n	80059d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	e02b      	b.n	8005a52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	db12      	blt.n	8005a32 <USB_EPSetStall+0xae>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00f      	beq.n	8005a32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d128      	bne.n	8005ace <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	791b      	ldrb	r3, [r3, #4]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d003      	beq.n	8005aac <USB_EPClearStall+0x4c>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	791b      	ldrb	r3, [r3, #4]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d138      	bne.n	8005b1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e027      	b.n	8005b1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005aec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	791b      	ldrb	r3, [r3, #4]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d003      	beq.n	8005afe <USB_EPClearStall+0x9e>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	791b      	ldrb	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d10f      	bne.n	8005b1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b4a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba6:	f023 0302 	bic.w	r3, r3, #2
 8005baa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005bd4:	f023 0303 	bic.w	r3, r3, #3
 8005bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005be8:	f043 0302 	orr.w	r3, r3, #2
 8005bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	0c1b      	lsrs	r3, r3, #16
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	b29b      	uxth	r3, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b087      	sub	sp, #28
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf6:	01db      	lsls	r3, r3, #7
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4013      	ands	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d14:	68bb      	ldr	r3, [r7, #8]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d5c:	f023 0307 	bic.w	r3, r3, #7
 8005d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	333c      	adds	r3, #60	@ 0x3c
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4a26      	ldr	r2, [pc, #152]	@ (8005e3c <USB_EP0_OutStart+0xb8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d90a      	bls.n	8005dbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005db4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005db8:	d101      	bne.n	8005dbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e037      	b.n	8005e2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dec:	f043 0318 	orr.w	r3, r3, #24
 8005df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e00:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005e04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e06:	7afb      	ldrb	r3, [r7, #11]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d10f      	bne.n	8005e2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e26:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	4f54300a 	.word	0x4f54300a

08005e40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a13      	ldr	r2, [pc, #76]	@ (8005ea4 <USB_CoreReset+0x64>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e01b      	b.n	8005e96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	daf2      	bge.n	8005e4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f043 0201 	orr.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a09      	ldr	r2, [pc, #36]	@ (8005ea4 <USB_CoreReset+0x64>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d901      	bls.n	8005e88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e006      	b.n	8005e96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d0f0      	beq.n	8005e76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	00030d40 	.word	0x00030d40

08005ea8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005eb4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005eb8:	f002 fca0 	bl	80087fc <USBD_static_malloc>
 8005ebc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	32b0      	adds	r2, #176	@ 0xb0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e0d4      	b.n	8006082 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ed8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005edc:	2100      	movs	r1, #0
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f002 fde7 	bl	8008ab2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	32b0      	adds	r2, #176	@ 0xb0
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32b0      	adds	r2, #176	@ 0xb0
 8005efe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7c1b      	ldrb	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d138      	bne.n	8005f82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f10:	4b5e      	ldr	r3, [pc, #376]	@ (800608c <USBD_CDC_Init+0x1e4>)
 8005f12:	7819      	ldrb	r1, [r3, #0]
 8005f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f18:	2202      	movs	r2, #2
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f002 fb4b 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f20:	4b5a      	ldr	r3, [pc, #360]	@ (800608c <USBD_CDC_Init+0x1e4>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	3324      	adds	r3, #36	@ 0x24
 8005f36:	2201      	movs	r2, #1
 8005f38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f3a:	4b55      	ldr	r3, [pc, #340]	@ (8006090 <USBD_CDC_Init+0x1e8>)
 8005f3c:	7819      	ldrb	r1, [r3, #0]
 8005f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f42:	2202      	movs	r2, #2
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 fb36 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f4a:	4b51      	ldr	r3, [pc, #324]	@ (8006090 <USBD_CDC_Init+0x1e8>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f003 020f 	and.w	r2, r3, #15
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f62:	2201      	movs	r2, #1
 8005f64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f66:	4b4b      	ldr	r3, [pc, #300]	@ (8006094 <USBD_CDC_Init+0x1ec>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f003 020f 	and.w	r2, r3, #15
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	3326      	adds	r3, #38	@ 0x26
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	e035      	b.n	8005fee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f82:	4b42      	ldr	r3, [pc, #264]	@ (800608c <USBD_CDC_Init+0x1e4>)
 8005f84:	7819      	ldrb	r1, [r3, #0]
 8005f86:	2340      	movs	r3, #64	@ 0x40
 8005f88:	2202      	movs	r2, #2
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 fb13 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f90:	4b3e      	ldr	r3, [pc, #248]	@ (800608c <USBD_CDC_Init+0x1e4>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3324      	adds	r3, #36	@ 0x24
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005faa:	4b39      	ldr	r3, [pc, #228]	@ (8006090 <USBD_CDC_Init+0x1e8>)
 8005fac:	7819      	ldrb	r1, [r3, #0]
 8005fae:	2340      	movs	r3, #64	@ 0x40
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f002 faff 	bl	80085b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fb8:	4b35      	ldr	r3, [pc, #212]	@ (8006090 <USBD_CDC_Init+0x1e8>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8006094 <USBD_CDC_Init+0x1ec>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 020f 	and.w	r2, r3, #15
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3326      	adds	r3, #38	@ 0x26
 8005fea:	2210      	movs	r2, #16
 8005fec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fee:	4b29      	ldr	r3, [pc, #164]	@ (8006094 <USBD_CDC_Init+0x1ec>)
 8005ff0:	7819      	ldrb	r1, [r3, #0]
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	2203      	movs	r2, #3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f002 fadd 	bl	80085b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ffc:	4b25      	ldr	r3, [pc, #148]	@ (8006094 <USBD_CDC_Init+0x1ec>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 020f 	and.w	r2, r3, #15
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3324      	adds	r3, #36	@ 0x24
 8006012:	2201      	movs	r2, #1
 8006014:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	33b0      	adds	r3, #176	@ 0xb0
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800604c:	2302      	movs	r3, #2
 800604e:	e018      	b.n	8006082 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	7c1b      	ldrb	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006058:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <USBD_CDC_Init+0x1e8>)
 800605a:	7819      	ldrb	r1, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f002 fb94 	bl	8008794 <USBD_LL_PrepareReceive>
 800606c:	e008      	b.n	8006080 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800606e:	4b08      	ldr	r3, [pc, #32]	@ (8006090 <USBD_CDC_Init+0x1e8>)
 8006070:	7819      	ldrb	r1, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006078:	2340      	movs	r3, #64	@ 0x40
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f002 fb8a 	bl	8008794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000093 	.word	0x20000093
 8006090:	20000094 	.word	0x20000094
 8006094:	20000095 	.word	0x20000095

08006098 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006190 <USBD_CDC_DeInit+0xf8>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f002 faa9 	bl	8008602 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060b0:	4b37      	ldr	r3, [pc, #220]	@ (8006190 <USBD_CDC_DeInit+0xf8>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3324      	adds	r3, #36	@ 0x24
 80060c6:	2200      	movs	r2, #0
 80060c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060ca:	4b32      	ldr	r3, [pc, #200]	@ (8006194 <USBD_CDC_DeInit+0xfc>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f002 fa96 	bl	8008602 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006194 <USBD_CDC_DeInit+0xfc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060ee:	2200      	movs	r2, #0
 80060f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060f2:	4b29      	ldr	r3, [pc, #164]	@ (8006198 <USBD_CDC_DeInit+0x100>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f002 fa82 	bl	8008602 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80060fe:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <USBD_CDC_DeInit+0x100>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	f003 020f 	and.w	r2, r3, #15
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	3324      	adds	r3, #36	@ 0x24
 8006114:	2200      	movs	r2, #0
 8006116:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006118:	4b1f      	ldr	r3, [pc, #124]	@ (8006198 <USBD_CDC_DeInit+0x100>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f003 020f 	and.w	r2, r3, #15
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	3326      	adds	r3, #38	@ 0x26
 800612e:	2200      	movs	r2, #0
 8006130:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	32b0      	adds	r2, #176	@ 0xb0
 800613c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01f      	beq.n	8006184 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	33b0      	adds	r3, #176	@ 0xb0
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32b0      	adds	r2, #176	@ 0xb0
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	4618      	mov	r0, r3
 8006168:	f002 fb56 	bl	8008818 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	32b0      	adds	r2, #176	@ 0xb0
 8006176:	2100      	movs	r1, #0
 8006178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000093 	.word	0x20000093
 8006194:	20000094 	.word	0x20000094
 8006198:	20000095 	.word	0x20000095

0800619c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	32b0      	adds	r2, #176	@ 0xb0
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e0bf      	b.n	800634c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d050      	beq.n	800627a <USBD_CDC_Setup+0xde>
 80061d8:	2b20      	cmp	r3, #32
 80061da:	f040 80af 	bne.w	800633c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	88db      	ldrh	r3, [r3, #6]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d03a      	beq.n	800625c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	da1b      	bge.n	8006228 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	33b0      	adds	r3, #176	@ 0xb0
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006206:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	88d2      	ldrh	r2, [r2, #6]
 800620c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	88db      	ldrh	r3, [r3, #6]
 8006212:	2b07      	cmp	r3, #7
 8006214:	bf28      	it	cs
 8006216:	2307      	movcs	r3, #7
 8006218:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	89fa      	ldrh	r2, [r7, #14]
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 fd87 	bl	8007d34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006226:	e090      	b.n	800634a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	785a      	ldrb	r2, [r3, #1]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	88db      	ldrh	r3, [r3, #6]
 8006236:	2b3f      	cmp	r3, #63	@ 0x3f
 8006238:	d803      	bhi.n	8006242 <USBD_CDC_Setup+0xa6>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	e000      	b.n	8006244 <USBD_CDC_Setup+0xa8>
 8006242:	2240      	movs	r2, #64	@ 0x40
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800624a:	6939      	ldr	r1, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006252:	461a      	mov	r2, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fd99 	bl	8007d8c <USBD_CtlPrepareRx>
      break;
 800625a:	e076      	b.n	800634a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	33b0      	adds	r3, #176	@ 0xb0
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	7850      	ldrb	r0, [r2, #1]
 8006272:	2200      	movs	r2, #0
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	4798      	blx	r3
      break;
 8006278:	e067      	b.n	800634a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b0b      	cmp	r3, #11
 8006280:	d851      	bhi.n	8006326 <USBD_CDC_Setup+0x18a>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <USBD_CDC_Setup+0xec>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062b9 	.word	0x080062b9
 800628c:	08006335 	.word	0x08006335
 8006290:	08006327 	.word	0x08006327
 8006294:	08006327 	.word	0x08006327
 8006298:	08006327 	.word	0x08006327
 800629c:	08006327 	.word	0x08006327
 80062a0:	08006327 	.word	0x08006327
 80062a4:	08006327 	.word	0x08006327
 80062a8:	08006327 	.word	0x08006327
 80062ac:	08006327 	.word	0x08006327
 80062b0:	080062e3 	.word	0x080062e3
 80062b4:	0800630d 	.word	0x0800630d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d107      	bne.n	80062d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062c4:	f107 030a 	add.w	r3, r7, #10
 80062c8:	2202      	movs	r2, #2
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fd31 	bl	8007d34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062d2:	e032      	b.n	800633a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fcbb 	bl	8007c52 <USBD_CtlError>
            ret = USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	75fb      	strb	r3, [r7, #23]
          break;
 80062e0:	e02b      	b.n	800633a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d107      	bne.n	80062fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062ee:	f107 030d 	add.w	r3, r7, #13
 80062f2:	2201      	movs	r2, #1
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fd1c 	bl	8007d34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062fc:	e01d      	b.n	800633a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 fca6 	bl	8007c52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006306:	2303      	movs	r3, #3
 8006308:	75fb      	strb	r3, [r7, #23]
          break;
 800630a:	e016      	b.n	800633a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d00f      	beq.n	8006338 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fc99 	bl	8007c52 <USBD_CtlError>
            ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006324:	e008      	b.n	8006338 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fc92 	bl	8007c52 <USBD_CtlError>
          ret = USBD_FAIL;
 800632e:	2303      	movs	r3, #3
 8006330:	75fb      	strb	r3, [r7, #23]
          break;
 8006332:	e002      	b.n	800633a <USBD_CDC_Setup+0x19e>
          break;
 8006334:	bf00      	nop
 8006336:	e008      	b.n	800634a <USBD_CDC_Setup+0x1ae>
          break;
 8006338:	bf00      	nop
      }
      break;
 800633a:	e006      	b.n	800634a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fc87 	bl	8007c52 <USBD_CtlError>
      ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	75fb      	strb	r3, [r7, #23]
      break;
 8006348:	bf00      	nop
  }

  return (uint8_t)ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	32b0      	adds	r2, #176	@ 0xb0
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800637a:	2303      	movs	r3, #3
 800637c:	e065      	b.n	800644a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	32b0      	adds	r2, #176	@ 0xb0
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	f003 020f 	and.w	r2, r3, #15
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	3318      	adds	r3, #24
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d02f      	beq.n	8006408 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	3318      	adds	r3, #24
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	f003 010f 	and.w	r1, r3, #15
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	460b      	mov	r3, r1
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	440b      	add	r3, r1
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4403      	add	r3, r0
 80063d0:	3348      	adds	r3, #72	@ 0x48
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d112      	bne.n	8006408 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 020f 	and.w	r2, r3, #15
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	3318      	adds	r3, #24
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063fa:	78f9      	ldrb	r1, [r7, #3]
 80063fc:	2300      	movs	r3, #0
 80063fe:	2200      	movs	r2, #0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 f9a6 	bl	8008752 <USBD_LL_Transmit>
 8006406:	e01f      	b.n	8006448 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	33b0      	adds	r3, #176	@ 0xb0
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d010      	beq.n	8006448 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	33b0      	adds	r3, #176	@ 0xb0
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	32b0      	adds	r2, #176	@ 0xb0
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	32b0      	adds	r2, #176	@ 0xb0
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	e01a      	b.n	80064ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f002 f9a4 	bl	80087d6 <USBD_LL_GetRxDataSize>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	33b0      	adds	r3, #176	@ 0xb0
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80064b4:	4611      	mov	r1, r2
 80064b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	32b0      	adds	r2, #176	@ 0xb0
 80064d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e024      	b.n	800652e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	33b0      	adds	r3, #176	@ 0xb0
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d019      	beq.n	800652c <USBD_CDC_EP0_RxReady+0x6a>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80064fe:	2bff      	cmp	r3, #255	@ 0xff
 8006500:	d014      	beq.n	800652c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	33b0      	adds	r3, #176	@ 0xb0
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800651a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006522:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	22ff      	movs	r2, #255	@ 0xff
 8006528:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006540:	2182      	movs	r1, #130	@ 0x82
 8006542:	4818      	ldr	r0, [pc, #96]	@ (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006544:	f000 fd4f 	bl	8006fe6 <USBD_GetEpDesc>
 8006548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800654a:	2101      	movs	r1, #1
 800654c:	4815      	ldr	r0, [pc, #84]	@ (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800654e:	f000 fd4a 	bl	8006fe6 <USBD_GetEpDesc>
 8006552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006554:	2181      	movs	r1, #129	@ 0x81
 8006556:	4813      	ldr	r0, [pc, #76]	@ (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006558:	f000 fd45 	bl	8006fe6 <USBD_GetEpDesc>
 800655c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2210      	movs	r2, #16
 8006568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d006      	beq.n	800657e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2200      	movs	r2, #0
 8006574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006578:	711a      	strb	r2, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d006      	beq.n	8006592 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800658c:	711a      	strb	r2, [r3, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2243      	movs	r2, #67	@ 0x43
 8006596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006598:	4b02      	ldr	r3, [pc, #8]	@ (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000050 	.word	0x20000050

080065a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065b0:	2182      	movs	r1, #130	@ 0x82
 80065b2:	4818      	ldr	r0, [pc, #96]	@ (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065b4:	f000 fd17 	bl	8006fe6 <USBD_GetEpDesc>
 80065b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065ba:	2101      	movs	r1, #1
 80065bc:	4815      	ldr	r0, [pc, #84]	@ (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065be:	f000 fd12 	bl	8006fe6 <USBD_GetEpDesc>
 80065c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065c4:	2181      	movs	r1, #129	@ 0x81
 80065c6:	4813      	ldr	r0, [pc, #76]	@ (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065c8:	f000 fd0d 	bl	8006fe6 <USBD_GetEpDesc>
 80065cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2210      	movs	r2, #16
 80065d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d006      	beq.n	80065ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2200      	movs	r2, #0
 80065e4:	711a      	strb	r2, [r3, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f042 0202 	orr.w	r2, r2, #2
 80065ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d006      	beq.n	8006602 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	711a      	strb	r2, [r3, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f042 0202 	orr.w	r2, r2, #2
 8006600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2243      	movs	r2, #67	@ 0x43
 8006606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006608:	4b02      	ldr	r3, [pc, #8]	@ (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000050 	.word	0x20000050

08006618 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006620:	2182      	movs	r1, #130	@ 0x82
 8006622:	4818      	ldr	r0, [pc, #96]	@ (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006624:	f000 fcdf 	bl	8006fe6 <USBD_GetEpDesc>
 8006628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800662a:	2101      	movs	r1, #1
 800662c:	4815      	ldr	r0, [pc, #84]	@ (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800662e:	f000 fcda 	bl	8006fe6 <USBD_GetEpDesc>
 8006632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006634:	2181      	movs	r1, #129	@ 0x81
 8006636:	4813      	ldr	r0, [pc, #76]	@ (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006638:	f000 fcd5 	bl	8006fe6 <USBD_GetEpDesc>
 800663c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2210      	movs	r2, #16
 8006648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2200      	movs	r2, #0
 8006654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006658:	711a      	strb	r2, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d006      	beq.n	8006672 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800666c:	711a      	strb	r2, [r3, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2243      	movs	r2, #67	@ 0x43
 8006676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006678:	4b02      	ldr	r3, [pc, #8]	@ (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000050 	.word	0x20000050

08006688 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	220a      	movs	r2, #10
 8006694:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006696:	4b03      	ldr	r3, [pc, #12]	@ (80066a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	2000000c 	.word	0x2000000c

080066a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e009      	b.n	80066d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	33b0      	adds	r3, #176	@ 0xb0
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	32b0      	adds	r2, #176	@ 0xb0
 80066f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e008      	b.n	8006714 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	32b0      	adds	r2, #176	@ 0xb0
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e004      	b.n	800674e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32b0      	adds	r2, #176	@ 0xb0
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	32b0      	adds	r2, #176	@ 0xb0
 8006782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800678a:	2303      	movs	r3, #3
 800678c:	e025      	b.n	80067da <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006794:	2b00      	cmp	r3, #0
 8006796:	d11f      	bne.n	80067d8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2201      	movs	r2, #1
 800679c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80067a0:	4b10      	ldr	r3, [pc, #64]	@ (80067e4 <USBD_CDC_TransmitPacket+0x88>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4403      	add	r3, r0
 80067ba:	3318      	adds	r3, #24
 80067bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80067be:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <USBD_CDC_TransmitPacket+0x88>)
 80067c0:	7819      	ldrb	r1, [r3, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 ffbf 	bl	8008752 <USBD_LL_Transmit>

    ret = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000093 	.word	0x20000093

080067e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32b0      	adds	r2, #176	@ 0xb0
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	32b0      	adds	r2, #176	@ 0xb0
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006812:	2303      	movs	r3, #3
 8006814:	e018      	b.n	8006848 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7c1b      	ldrb	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800681e:	4b0c      	ldr	r3, [pc, #48]	@ (8006850 <USBD_CDC_ReceivePacket+0x68>)
 8006820:	7819      	ldrb	r1, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 ffb1 	bl	8008794 <USBD_LL_PrepareReceive>
 8006832:	e008      	b.n	8006846 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006834:	4b06      	ldr	r3, [pc, #24]	@ (8006850 <USBD_CDC_ReceivePacket+0x68>)
 8006836:	7819      	ldrb	r1, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800683e:	2340      	movs	r3, #64	@ 0x40
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 ffa7 	bl	8008794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000094 	.word	0x20000094

08006854 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e01f      	b.n	80068ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	79fa      	ldrb	r2, [r7, #7]
 800689e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f001 fe21 	bl	80084e8 <USBD_LL_Init>
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e025      	b.n	8006918 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32ae      	adds	r2, #174	@ 0xae
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00f      	beq.n	8006908 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	32ae      	adds	r2, #174	@ 0xae
 80068f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f8:	f107 020e 	add.w	r2, r7, #14
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	4602      	mov	r2, r0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fe29 	bl	8008580 <USBD_LL_Start>
 800692e:	4603      	mov	r3, r0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	4611      	mov	r1, r2
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	4611      	mov	r1, r2
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f906 	bl	8007bde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d01a      	beq.n	8006a2c <USBD_LL_SetupStage+0x72>
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d822      	bhi.n	8006a40 <USBD_LL_SetupStage+0x86>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <USBD_LL_SetupStage+0x4a>
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d00a      	beq.n	8006a18 <USBD_LL_SetupStage+0x5e>
 8006a02:	e01d      	b.n	8006a40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fb5d 	bl	80070cc <USBD_StdDevReq>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
      break;
 8006a16:	e020      	b.n	8006a5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fbc5 	bl	80071b0 <USBD_StdItfReq>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2a:	e016      	b.n	8006a5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc27 	bl	8007288 <USBD_StdEPReq>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3e:	e00c      	b.n	8006a5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fdf6 	bl	8008640 <USBD_LL_StallEP>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	bf00      	nop
  }

  return ret;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d16e      	bne.n	8006b5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	f040 8098 	bne.w	8006bc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d913      	bls.n	8006ac4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bf28      	it	cs
 8006ab6:	4613      	movcs	r3, r2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f001 f982 	bl	8007dc6 <USBD_CtlContinueRx>
 8006ac2:	e07d      	b.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d014      	beq.n	8006afc <USBD_LL_DataOutStage+0x98>
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d81d      	bhi.n	8006b12 <USBD_LL_DataOutStage+0xae>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <USBD_LL_DataOutStage+0x7c>
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d003      	beq.n	8006ae6 <USBD_LL_DataOutStage+0x82>
 8006ade:	e018      	b.n	8006b12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ae4:	e018      	b.n	8006b18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fa5e 	bl	8006fb2 <USBD_CoreFindIF>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75bb      	strb	r3, [r7, #22]
            break;
 8006afa:	e00d      	b.n	8006b18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	4619      	mov	r1, r3
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fa60 	bl	8006fcc <USBD_CoreFindEP>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b10:	e002      	b.n	8006b18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	75bb      	strb	r3, [r7, #22]
            break;
 8006b16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b18:	7dbb      	ldrb	r3, [r7, #22]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d113      	bne.n	8006b52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b2a:	7dba      	ldrb	r2, [r7, #22]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	32ae      	adds	r2, #174	@ 0xae
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b3a:	7dba      	ldrb	r2, [r7, #22]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b42:	7dba      	ldrb	r2, [r7, #22]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	32ae      	adds	r2, #174	@ 0xae
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f001 f948 	bl	8007de8 <USBD_CtlSendStatus>
 8006b58:	e032      	b.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa31 	bl	8006fcc <USBD_CoreFindEP>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b6e:	7dbb      	ldrb	r3, [r7, #22]
 8006b70:	2bff      	cmp	r3, #255	@ 0xff
 8006b72:	d025      	beq.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
 8006b74:	7dbb      	ldrb	r3, [r7, #22]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d122      	bne.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d117      	bne.n	8006bb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b86:	7dba      	ldrb	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	32ae      	adds	r2, #174	@ 0xae
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00f      	beq.n	8006bb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b96:	7dba      	ldrb	r2, [r7, #22]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b9e:	7dba      	ldrb	r2, [r7, #22]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	32ae      	adds	r2, #174	@ 0xae
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	7afa      	ldrb	r2, [r7, #11]
 8006bac:	4611      	mov	r1, r2
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	4798      	blx	r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	e000      	b.n	8006bc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d16f      	bne.n	8006cbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3314      	adds	r3, #20
 8006be2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d15a      	bne.n	8006ca4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d914      	bls.n	8006c24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f001 f8aa 	bl	8007d6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c16:	2300      	movs	r3, #0
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f001 fdb9 	bl	8008794 <USBD_LL_PrepareReceive>
 8006c22:	e03f      	b.n	8006ca4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d11c      	bne.n	8006c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d316      	bcc.n	8006c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d20f      	bcs.n	8006c6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f001 f88b 	bl	8007d6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f001 fd96 	bl	8008794 <USBD_LL_PrepareReceive>
 8006c68:	e01c      	b.n	8006ca4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d10f      	bne.n	8006c96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c96:	2180      	movs	r1, #128	@ 0x80
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 fcd1 	bl	8008640 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f001 f8b5 	bl	8007e0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d03a      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff fe42 	bl	8006938 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006cbc:	e032      	b.n	8006d24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
 8006cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f97f 	bl	8006fcc <USBD_CoreFindEP>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2bff      	cmp	r3, #255	@ 0xff
 8006cd6:	d025      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d122      	bne.n	8006d24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d11c      	bne.n	8006d24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006cea:	7dfa      	ldrb	r2, [r7, #23]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	32ae      	adds	r2, #174	@ 0xae
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006cfa:	7dfa      	ldrb	r2, [r7, #23]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d02:	7dfa      	ldrb	r2, [r7, #23]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	32ae      	adds	r2, #174	@ 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	7afa      	ldrb	r2, [r7, #11]
 8006d10:	4611      	mov	r1, r2
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	4798      	blx	r3
 8006d16:	4603      	mov	r3, r0
 8006d18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d1a:	7dbb      	ldrb	r3, [r7, #22]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d20:	7dbb      	ldrb	r3, [r7, #22]
 8006d22:	e000      	b.n	8006d26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d014      	beq.n	8006d94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00e      	beq.n	8006d94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6852      	ldr	r2, [r2, #4]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	4611      	mov	r1, r2
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d94:	2340      	movs	r3, #64	@ 0x40
 8006d96:	2200      	movs	r2, #0
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fc0b 	bl	80085b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2240      	movs	r2, #64	@ 0x40
 8006dac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006db0:	2340      	movs	r3, #64	@ 0x40
 8006db2:	2200      	movs	r2, #0
 8006db4:	2180      	movs	r1, #128	@ 0x80
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fbfd 	bl	80085b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2240      	movs	r2, #64	@ 0x40
 8006dc6:	621a      	str	r2, [r3, #32]

  return ret;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	78fa      	ldrb	r2, [r7, #3]
 8006de2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d106      	bne.n	8006e40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d110      	bne.n	8006e84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	32ae      	adds	r2, #174	@ 0xae
 8006ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e01c      	b.n	8006eea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d115      	bne.n	8006ee8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	32ae      	adds	r2, #174	@ 0xae
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	32ae      	adds	r2, #174	@ 0xae
 8006eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	32ae      	adds	r2, #174	@ 0xae
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e01c      	b.n	8006f4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d115      	bne.n	8006f4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32ae      	adds	r2, #174	@ 0xae
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32ae      	adds	r2, #174	@ 0xae
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	4611      	mov	r1, r2
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6852      	ldr	r2, [r2, #4]
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	4611      	mov	r1, r2
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b086      	sub	sp, #24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	b29b      	uxth	r3, r3
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	4293      	cmp	r3, r2
 800700a:	d91f      	bls.n	800704c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007012:	e013      	b.n	800703c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007014:	f107 030a 	add.w	r3, r7, #10
 8007018:	4619      	mov	r1, r3
 800701a:	6978      	ldr	r0, [r7, #20]
 800701c:	f000 f81b 	bl	8007056 <USBD_GetNextDesc>
 8007020:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b05      	cmp	r3, #5
 8007028:	d108      	bne.n	800703c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	789b      	ldrb	r3, [r3, #2]
 8007032:	78fa      	ldrb	r2, [r7, #3]
 8007034:	429a      	cmp	r2, r3
 8007036:	d008      	beq.n	800704a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	885b      	ldrh	r3, [r3, #2]
 8007040:	b29a      	uxth	r2, r3
 8007042:	897b      	ldrh	r3, [r7, #10]
 8007044:	429a      	cmp	r2, r3
 8007046:	d8e5      	bhi.n	8007014 <USBD_GetEpDesc+0x2e>
 8007048:	e000      	b.n	800704c <USBD_GetEpDesc+0x66>
          break;
 800704a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800704c:	693b      	ldr	r3, [r7, #16]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	4413      	add	r3, r2
 800706e:	b29a      	uxth	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007080:	68fb      	ldr	r3, [r7, #12]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800708e:	b480      	push	{r7}
 8007090:	b087      	sub	sp, #28
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	3301      	adds	r3, #1
 80070a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	b21a      	sxth	r2, r3
 80070b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b21b      	sxth	r3, r3
 80070bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070be:	89fb      	ldrh	r3, [r7, #14]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070e2:	2b40      	cmp	r3, #64	@ 0x40
 80070e4:	d005      	beq.n	80070f2 <USBD_StdDevReq+0x26>
 80070e6:	2b40      	cmp	r3, #64	@ 0x40
 80070e8:	d857      	bhi.n	800719a <USBD_StdDevReq+0xce>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00f      	beq.n	800710e <USBD_StdDevReq+0x42>
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d153      	bne.n	800719a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	32ae      	adds	r2, #174	@ 0xae
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	4798      	blx	r3
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e04a      	b.n	80071a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b09      	cmp	r3, #9
 8007114:	d83b      	bhi.n	800718e <USBD_StdDevReq+0xc2>
 8007116:	a201      	add	r2, pc, #4	@ (adr r2, 800711c <USBD_StdDevReq+0x50>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007171 	.word	0x08007171
 8007120:	08007185 	.word	0x08007185
 8007124:	0800718f 	.word	0x0800718f
 8007128:	0800717b 	.word	0x0800717b
 800712c:	0800718f 	.word	0x0800718f
 8007130:	0800714f 	.word	0x0800714f
 8007134:	08007145 	.word	0x08007145
 8007138:	0800718f 	.word	0x0800718f
 800713c:	08007167 	.word	0x08007167
 8007140:	08007159 	.word	0x08007159
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa3c 	bl	80075c4 <USBD_GetDescriptor>
          break;
 800714c:	e024      	b.n	8007198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fba1 	bl	8007898 <USBD_SetAddress>
          break;
 8007156:	e01f      	b.n	8007198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fbe0 	bl	8007920 <USBD_SetConfig>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
          break;
 8007164:	e018      	b.n	8007198 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc83 	bl	8007a74 <USBD_GetConfig>
          break;
 800716e:	e013      	b.n	8007198 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fcb4 	bl	8007ae0 <USBD_GetStatus>
          break;
 8007178:	e00e      	b.n	8007198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fce3 	bl	8007b48 <USBD_SetFeature>
          break;
 8007182:	e009      	b.n	8007198 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fd07 	bl	8007b9a <USBD_ClrFeature>
          break;
 800718c:	e004      	b.n	8007198 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fd5e 	bl	8007c52 <USBD_CtlError>
          break;
 8007196:	bf00      	nop
      }
      break;
 8007198:	e004      	b.n	80071a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fd58 	bl	8007c52 <USBD_CtlError>
      break;
 80071a2:	bf00      	nop
  }

  return ret;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop

080071b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071c6:	2b40      	cmp	r3, #64	@ 0x40
 80071c8:	d005      	beq.n	80071d6 <USBD_StdItfReq+0x26>
 80071ca:	2b40      	cmp	r3, #64	@ 0x40
 80071cc:	d852      	bhi.n	8007274 <USBD_StdItfReq+0xc4>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <USBD_StdItfReq+0x26>
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d14e      	bne.n	8007274 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d840      	bhi.n	8007266 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	889b      	ldrh	r3, [r3, #4]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d836      	bhi.n	800725c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	889b      	ldrh	r3, [r3, #4]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fedb 	bl	8006fb2 <USBD_CoreFindIF>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2bff      	cmp	r3, #255	@ 0xff
 8007204:	d01d      	beq.n	8007242 <USBD_StdItfReq+0x92>
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11a      	bne.n	8007242 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800720c:	7bba      	ldrb	r2, [r7, #14]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	32ae      	adds	r2, #174	@ 0xae
 8007212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00f      	beq.n	800723c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800721c:	7bba      	ldrb	r2, [r7, #14]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007224:	7bba      	ldrb	r2, [r7, #14]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	32ae      	adds	r2, #174	@ 0xae
 800722a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	4798      	blx	r3
 8007236:	4603      	mov	r3, r0
 8007238:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800723a:	e004      	b.n	8007246 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007240:	e001      	b.n	8007246 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007242:	2303      	movs	r3, #3
 8007244:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	88db      	ldrh	r3, [r3, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d110      	bne.n	8007270 <USBD_StdItfReq+0xc0>
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10d      	bne.n	8007270 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fdc7 	bl	8007de8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800725a:	e009      	b.n	8007270 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fcf7 	bl	8007c52 <USBD_CtlError>
          break;
 8007264:	e004      	b.n	8007270 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fcf2 	bl	8007c52 <USBD_CtlError>
          break;
 800726e:	e000      	b.n	8007272 <USBD_StdItfReq+0xc2>
          break;
 8007270:	bf00      	nop
      }
      break;
 8007272:	e004      	b.n	800727e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fceb 	bl	8007c52 <USBD_CtlError>
      break;
 800727c:	bf00      	nop
  }

  return ret;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	889b      	ldrh	r3, [r3, #4]
 800729a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072a4:	2b40      	cmp	r3, #64	@ 0x40
 80072a6:	d007      	beq.n	80072b8 <USBD_StdEPReq+0x30>
 80072a8:	2b40      	cmp	r3, #64	@ 0x40
 80072aa:	f200 817f 	bhi.w	80075ac <USBD_StdEPReq+0x324>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d02a      	beq.n	8007308 <USBD_StdEPReq+0x80>
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	f040 817a 	bne.w	80075ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fe85 	bl	8006fcc <USBD_CoreFindEP>
 80072c2:	4603      	mov	r3, r0
 80072c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072c6:	7b7b      	ldrb	r3, [r7, #13]
 80072c8:	2bff      	cmp	r3, #255	@ 0xff
 80072ca:	f000 8174 	beq.w	80075b6 <USBD_StdEPReq+0x32e>
 80072ce:	7b7b      	ldrb	r3, [r7, #13]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 8170 	bne.w	80075b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072d6:	7b7a      	ldrb	r2, [r7, #13]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072de:	7b7a      	ldrb	r2, [r7, #13]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	32ae      	adds	r2, #174	@ 0xae
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 8163 	beq.w	80075b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072f0:	7b7a      	ldrb	r2, [r7, #13]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	32ae      	adds	r2, #174	@ 0xae
 80072f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007306:	e156      	b.n	80075b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b03      	cmp	r3, #3
 800730e:	d008      	beq.n	8007322 <USBD_StdEPReq+0x9a>
 8007310:	2b03      	cmp	r3, #3
 8007312:	f300 8145 	bgt.w	80075a0 <USBD_StdEPReq+0x318>
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 809b 	beq.w	8007452 <USBD_StdEPReq+0x1ca>
 800731c:	2b01      	cmp	r3, #1
 800731e:	d03c      	beq.n	800739a <USBD_StdEPReq+0x112>
 8007320:	e13e      	b.n	80075a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d002      	beq.n	8007334 <USBD_StdEPReq+0xac>
 800732e:	2b03      	cmp	r3, #3
 8007330:	d016      	beq.n	8007360 <USBD_StdEPReq+0xd8>
 8007332:	e02c      	b.n	800738e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00d      	beq.n	8007356 <USBD_StdEPReq+0xce>
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b80      	cmp	r3, #128	@ 0x80
 800733e:	d00a      	beq.n	8007356 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 f97b 	bl	8008640 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800734a:	2180      	movs	r1, #128	@ 0x80
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 f977 	bl	8008640 <USBD_LL_StallEP>
 8007352:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007354:	e020      	b.n	8007398 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fc7a 	bl	8007c52 <USBD_CtlError>
              break;
 800735e:	e01b      	b.n	8007398 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	885b      	ldrh	r3, [r3, #2]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10e      	bne.n	8007386 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00b      	beq.n	8007386 <USBD_StdEPReq+0xfe>
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	2b80      	cmp	r3, #128	@ 0x80
 8007372:	d008      	beq.n	8007386 <USBD_StdEPReq+0xfe>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 f95d 	bl	8008640 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fd2e 	bl	8007de8 <USBD_CtlSendStatus>

              break;
 800738c:	e004      	b.n	8007398 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc5e 	bl	8007c52 <USBD_CtlError>
              break;
 8007396:	bf00      	nop
          }
          break;
 8007398:	e107      	b.n	80075aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d002      	beq.n	80073ac <USBD_StdEPReq+0x124>
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d016      	beq.n	80073d8 <USBD_StdEPReq+0x150>
 80073aa:	e04b      	b.n	8007444 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <USBD_StdEPReq+0x146>
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b80      	cmp	r3, #128	@ 0x80
 80073b6:	d00a      	beq.n	80073ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f93f 	bl	8008640 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 f93b 	bl	8008640 <USBD_LL_StallEP>
 80073ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073cc:	e040      	b.n	8007450 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fc3e 	bl	8007c52 <USBD_CtlError>
              break;
 80073d6:	e03b      	b.n	8007450 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	885b      	ldrh	r3, [r3, #2]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d136      	bne.n	800744e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d004      	beq.n	80073f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 f945 	bl	800867e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fcf7 	bl	8007de8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fde4 	bl	8006fcc <USBD_CoreFindEP>
 8007404:	4603      	mov	r3, r0
 8007406:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007408:	7b7b      	ldrb	r3, [r7, #13]
 800740a:	2bff      	cmp	r3, #255	@ 0xff
 800740c:	d01f      	beq.n	800744e <USBD_StdEPReq+0x1c6>
 800740e:	7b7b      	ldrb	r3, [r7, #13]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11c      	bne.n	800744e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007414:	7b7a      	ldrb	r2, [r7, #13]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800741c:	7b7a      	ldrb	r2, [r7, #13]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	32ae      	adds	r2, #174	@ 0xae
 8007422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d010      	beq.n	800744e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800742c:	7b7a      	ldrb	r2, [r7, #13]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32ae      	adds	r2, #174	@ 0xae
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
 800743e:	4603      	mov	r3, r0
 8007440:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007442:	e004      	b.n	800744e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fc03 	bl	8007c52 <USBD_CtlError>
              break;
 800744c:	e000      	b.n	8007450 <USBD_StdEPReq+0x1c8>
              break;
 800744e:	bf00      	nop
          }
          break;
 8007450:	e0ab      	b.n	80075aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d002      	beq.n	8007464 <USBD_StdEPReq+0x1dc>
 800745e:	2b03      	cmp	r3, #3
 8007460:	d032      	beq.n	80074c8 <USBD_StdEPReq+0x240>
 8007462:	e097      	b.n	8007594 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d007      	beq.n	800747a <USBD_StdEPReq+0x1f2>
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b80      	cmp	r3, #128	@ 0x80
 800746e:	d004      	beq.n	800747a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fbed 	bl	8007c52 <USBD_CtlError>
                break;
 8007478:	e091      	b.n	800759e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800747a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	da0b      	bge.n	800749a <USBD_StdEPReq+0x212>
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	3310      	adds	r3, #16
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	3304      	adds	r3, #4
 8007498:	e00b      	b.n	80074b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4413      	add	r3, r2
 80074b0:	3304      	adds	r3, #4
 80074b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2202      	movs	r2, #2
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fc37 	bl	8007d34 <USBD_CtlSendData>
              break;
 80074c6:	e06a      	b.n	800759e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da11      	bge.n	80074f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	f003 020f 	and.w	r2, r3, #15
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	3324      	adds	r3, #36	@ 0x24
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d117      	bne.n	800751a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fbb0 	bl	8007c52 <USBD_CtlError>
                  break;
 80074f2:	e054      	b.n	800759e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	f003 020f 	and.w	r2, r3, #15
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fb9d 	bl	8007c52 <USBD_CtlError>
                  break;
 8007518:	e041      	b.n	800759e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800751a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800751e:	2b00      	cmp	r3, #0
 8007520:	da0b      	bge.n	800753a <USBD_StdEPReq+0x2b2>
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	3310      	adds	r3, #16
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	4413      	add	r3, r2
 8007536:	3304      	adds	r3, #4
 8007538:	e00b      	b.n	8007552 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	3304      	adds	r3, #4
 8007552:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <USBD_StdEPReq+0x2d8>
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	2b80      	cmp	r3, #128	@ 0x80
 800755e:	d103      	bne.n	8007568 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e00e      	b.n	8007586 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f8a5 	bl	80086bc <USBD_LL_IsStallEP>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2201      	movs	r2, #1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e002      	b.n	8007586 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2202      	movs	r2, #2
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fbd1 	bl	8007d34 <USBD_CtlSendData>
              break;
 8007592:	e004      	b.n	800759e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fb5b 	bl	8007c52 <USBD_CtlError>
              break;
 800759c:	bf00      	nop
          }
          break;
 800759e:	e004      	b.n	80075aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb55 	bl	8007c52 <USBD_CtlError>
          break;
 80075a8:	bf00      	nop
      }
      break;
 80075aa:	e005      	b.n	80075b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fb4f 	bl	8007c52 <USBD_CtlError>
      break;
 80075b4:	e000      	b.n	80075b8 <USBD_StdEPReq+0x330>
      break;
 80075b6:	bf00      	nop
  }

  return ret;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	885b      	ldrh	r3, [r3, #2]
 80075de:	0a1b      	lsrs	r3, r3, #8
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	2b06      	cmp	r3, #6
 80075e6:	f200 8128 	bhi.w	800783a <USBD_GetDescriptor+0x276>
 80075ea:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <USBD_GetDescriptor+0x2c>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	08007625 	.word	0x08007625
 80075f8:	08007665 	.word	0x08007665
 80075fc:	0800783b 	.word	0x0800783b
 8007600:	0800783b 	.word	0x0800783b
 8007604:	080077db 	.word	0x080077db
 8007608:	08007807 	.word	0x08007807
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7c12      	ldrb	r2, [r2, #16]
 8007618:	f107 0108 	add.w	r1, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
      break;
 8007622:	e112      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7c1b      	ldrb	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10d      	bne.n	8007648 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007634:	f107 0208 	add.w	r2, r7, #8
 8007638:	4610      	mov	r0, r2
 800763a:	4798      	blx	r3
 800763c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	2202      	movs	r2, #2
 8007644:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007646:	e100      	b.n	800784a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	f107 0208 	add.w	r2, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	2202      	movs	r2, #2
 8007660:	701a      	strb	r2, [r3, #0]
      break;
 8007662:	e0f2      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b05      	cmp	r3, #5
 800766c:	f200 80ac 	bhi.w	80077c8 <USBD_GetDescriptor+0x204>
 8007670:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <USBD_GetDescriptor+0xb4>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007691 	.word	0x08007691
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076f9 	.word	0x080076f9
 8007684:	0800772d 	.word	0x0800772d
 8007688:	08007761 	.word	0x08007761
 800768c:	08007795 	.word	0x08007795
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	7c12      	ldrb	r2, [r2, #16]
 80076a8:	f107 0108 	add.w	r1, r7, #8
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b2:	e091      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 facb 	bl	8007c52 <USBD_CtlError>
            err++;
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	3301      	adds	r3, #1
 80076c0:	72fb      	strb	r3, [r7, #11]
          break;
 80076c2:	e089      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e6:	e077      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fab1 	bl	8007c52 <USBD_CtlError>
            err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
          break;
 80076f6:	e06f      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	7c12      	ldrb	r2, [r2, #16]
 8007710:	f107 0108 	add.w	r1, r7, #8
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771a:	e05d      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa97 	bl	8007c52 <USBD_CtlError>
            err++;
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	3301      	adds	r3, #1
 8007728:	72fb      	strb	r3, [r7, #11]
          break;
 800772a:	e055      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	7c12      	ldrb	r2, [r2, #16]
 8007744:	f107 0108 	add.w	r1, r7, #8
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774e:	e043      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa7d 	bl	8007c52 <USBD_CtlError>
            err++;
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	3301      	adds	r3, #1
 800775c:	72fb      	strb	r3, [r7, #11]
          break;
 800775e:	e03b      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	7c12      	ldrb	r2, [r2, #16]
 8007778:	f107 0108 	add.w	r1, r7, #8
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007782:	e029      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa63 	bl	8007c52 <USBD_CtlError>
            err++;
 800778c:	7afb      	ldrb	r3, [r7, #11]
 800778e:	3301      	adds	r3, #1
 8007790:	72fb      	strb	r3, [r7, #11]
          break;
 8007792:	e021      	b.n	80077d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7c12      	ldrb	r2, [r2, #16]
 80077ac:	f107 0108 	add.w	r1, r7, #8
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b6:	e00f      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa49 	bl	8007c52 <USBD_CtlError>
            err++;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	3301      	adds	r3, #1
 80077c4:	72fb      	strb	r3, [r7, #11]
          break;
 80077c6:	e007      	b.n	80077d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa41 	bl	8007c52 <USBD_CtlError>
          err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077d6:	bf00      	nop
      }
      break;
 80077d8:	e037      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7c1b      	ldrb	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ea:	f107 0208 	add.w	r2, r7, #8
 80077ee:	4610      	mov	r0, r2
 80077f0:	4798      	blx	r3
 80077f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f4:	e029      	b.n	800784a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fa2a 	bl	8007c52 <USBD_CtlError>
        err++;
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	3301      	adds	r3, #1
 8007802:	72fb      	strb	r3, [r7, #11]
      break;
 8007804:	e021      	b.n	800784a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7c1b      	ldrb	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10d      	bne.n	800782a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	f107 0208 	add.w	r2, r7, #8
 800781a:	4610      	mov	r0, r2
 800781c:	4798      	blx	r3
 800781e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3301      	adds	r3, #1
 8007824:	2207      	movs	r2, #7
 8007826:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007828:	e00f      	b.n	800784a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fa10 	bl	8007c52 <USBD_CtlError>
        err++;
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	3301      	adds	r3, #1
 8007836:	72fb      	strb	r3, [r7, #11]
      break;
 8007838:	e007      	b.n	800784a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa08 	bl	8007c52 <USBD_CtlError>
      err++;
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	3301      	adds	r3, #1
 8007846:	72fb      	strb	r3, [r7, #11]
      break;
 8007848:	bf00      	nop
  }

  if (err != 0U)
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11e      	bne.n	800788e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	88db      	ldrh	r3, [r3, #6]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d016      	beq.n	8007886 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007858:	893b      	ldrh	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	88da      	ldrh	r2, [r3, #6]
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	4293      	cmp	r3, r2
 8007866:	bf28      	it	cs
 8007868:	4613      	movcs	r3, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800786e:	893b      	ldrh	r3, [r7, #8]
 8007870:	461a      	mov	r2, r3
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa5d 	bl	8007d34 <USBD_CtlSendData>
 800787a:	e009      	b.n	8007890 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9e7 	bl	8007c52 <USBD_CtlError>
 8007884:	e004      	b.n	8007890 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 faae 	bl	8007de8 <USBD_CtlSendStatus>
 800788c:	e000      	b.n	8007890 <USBD_GetDescriptor+0x2cc>
    return;
 800788e:	bf00      	nop
  }
}
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop

08007898 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	889b      	ldrh	r3, [r3, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d131      	bne.n	800790e <USBD_SetAddress+0x76>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d12d      	bne.n	800790e <USBD_SetAddress+0x76>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80078b8:	d829      	bhi.n	800790e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	885b      	ldrh	r3, [r3, #2]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d104      	bne.n	80078dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9bc 	bl	8007c52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078da:	e01d      	b.n	8007918 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7bfa      	ldrb	r2, [r7, #15]
 80078e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 ff13 	bl	8008714 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa7a 	bl	8007de8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007902:	e009      	b.n	8007918 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790c:	e004      	b.n	8007918 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f99e 	bl	8007c52 <USBD_CtlError>
  }
}
 8007916:	bf00      	nop
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	4b4e      	ldr	r3, [pc, #312]	@ (8007a70 <USBD_SetConfig+0x150>)
 8007936:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007938:	4b4d      	ldr	r3, [pc, #308]	@ (8007a70 <USBD_SetConfig+0x150>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d905      	bls.n	800794c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f985 	bl	8007c52 <USBD_CtlError>
    return USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	e08c      	b.n	8007a66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b02      	cmp	r3, #2
 8007956:	d002      	beq.n	800795e <USBD_SetConfig+0x3e>
 8007958:	2b03      	cmp	r3, #3
 800795a:	d029      	beq.n	80079b0 <USBD_SetConfig+0x90>
 800795c:	e075      	b.n	8007a4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800795e:	4b44      	ldr	r3, [pc, #272]	@ (8007a70 <USBD_SetConfig+0x150>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d020      	beq.n	80079a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007966:	4b42      	ldr	r3, [pc, #264]	@ (8007a70 <USBD_SetConfig+0x150>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007970:	4b3f      	ldr	r3, [pc, #252]	@ (8007a70 <USBD_SetConfig+0x150>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	4619      	mov	r1, r3
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7fe ffe9 	bl	800694e <USBD_SetClassConfig>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d008      	beq.n	8007998 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f962 	bl	8007c52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2202      	movs	r2, #2
 8007992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007996:	e065      	b.n	8007a64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fa25 	bl	8007de8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2203      	movs	r2, #3
 80079a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079a6:	e05d      	b.n	8007a64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa1d 	bl	8007de8 <USBD_CtlSendStatus>
      break;
 80079ae:	e059      	b.n	8007a64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007a70 <USBD_SetConfig+0x150>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d112      	bne.n	80079de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80079c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a70 <USBD_SetConfig+0x150>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079ca:	4b29      	ldr	r3, [pc, #164]	@ (8007a70 <USBD_SetConfig+0x150>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7fe ffd8 	bl	8006986 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa06 	bl	8007de8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079dc:	e042      	b.n	8007a64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079de:	4b24      	ldr	r3, [pc, #144]	@ (8007a70 <USBD_SetConfig+0x150>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d02a      	beq.n	8007a42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7fe ffc6 	bl	8006986 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007a70 <USBD_SetConfig+0x150>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a04:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <USBD_SetConfig+0x150>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fe ff9f 	bl	800694e <USBD_SetClassConfig>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00f      	beq.n	8007a3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f918 	bl	8007c52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fe ffab 	bl	8006986 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a38:	e014      	b.n	8007a64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9d4 	bl	8007de8 <USBD_CtlSendStatus>
      break;
 8007a40:	e010      	b.n	8007a64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f9d0 	bl	8007de8 <USBD_CtlSendStatus>
      break;
 8007a48:	e00c      	b.n	8007a64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f900 	bl	8007c52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a52:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <USBD_SetConfig+0x150>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fe ff94 	bl	8006986 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	73fb      	strb	r3, [r7, #15]
      break;
 8007a62:	bf00      	nop
  }

  return ret;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000274 	.word	0x20000274

08007a74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d004      	beq.n	8007a90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f8e2 	bl	8007c52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a8e:	e023      	b.n	8007ad8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	dc02      	bgt.n	8007aa2 <USBD_GetConfig+0x2e>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dc03      	bgt.n	8007aa8 <USBD_GetConfig+0x34>
 8007aa0:	e015      	b.n	8007ace <USBD_GetConfig+0x5a>
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d00b      	beq.n	8007abe <USBD_GetConfig+0x4a>
 8007aa6:	e012      	b.n	8007ace <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f93c 	bl	8007d34 <USBD_CtlSendData>
        break;
 8007abc:	e00c      	b.n	8007ad8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f934 	bl	8007d34 <USBD_CtlSendData>
        break;
 8007acc:	e004      	b.n	8007ad8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f8be 	bl	8007c52 <USBD_CtlError>
        break;
 8007ad6:	bf00      	nop
}
 8007ad8:	bf00      	nop
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d81e      	bhi.n	8007b36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	88db      	ldrh	r3, [r3, #6]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d004      	beq.n	8007b0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f8a5 	bl	8007c52 <USBD_CtlError>
        break;
 8007b08:	e01a      	b.n	8007b40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f043 0202 	orr.w	r2, r3, #2
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f900 	bl	8007d34 <USBD_CtlSendData>
      break;
 8007b34:	e004      	b.n	8007b40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f88a 	bl	8007c52 <USBD_CtlError>
      break;
 8007b3e:	bf00      	nop
  }
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	885b      	ldrh	r3, [r3, #2]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d107      	bne.n	8007b6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f940 	bl	8007de8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b68:	e013      	b.n	8007b92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	885b      	ldrh	r3, [r3, #2]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d10b      	bne.n	8007b8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	889b      	ldrh	r3, [r3, #4]
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f930 	bl	8007de8 <USBD_CtlSendStatus>
}
 8007b88:	e003      	b.n	8007b92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f860 	bl	8007c52 <USBD_CtlError>
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	3b01      	subs	r3, #1
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d80b      	bhi.n	8007bca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	885b      	ldrh	r3, [r3, #2]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10c      	bne.n	8007bd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f910 	bl	8007de8 <USBD_CtlSendStatus>
      }
      break;
 8007bc8:	e004      	b.n	8007bd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f840 	bl	8007c52 <USBD_CtlError>
      break;
 8007bd2:	e000      	b.n	8007bd6 <USBD_ClrFeature+0x3c>
      break;
 8007bd4:	bf00      	nop
  }
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	781a      	ldrb	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff fa40 	bl	800708e <SWAPBYTE>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	461a      	mov	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff fa33 	bl	800708e <SWAPBYTE>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fa26 	bl	800708e <SWAPBYTE>
 8007c42:	4603      	mov	r3, r0
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	80da      	strh	r2, [r3, #6]
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c5c:	2180      	movs	r1, #128	@ 0x80
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fcee 	bl	8008640 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fcea 	bl	8008640 <USBD_LL_StallEP>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d036      	beq.n	8007cf8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c8e:	6938      	ldr	r0, [r7, #16]
 8007c90:	f000 f836 	bl	8007d00 <USBD_GetLen>
 8007c94:	4603      	mov	r3, r0
 8007c96:	3301      	adds	r3, #1
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	7812      	ldrb	r2, [r2, #0]
 8007cac:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	4413      	add	r3, r2
 8007cba:	2203      	movs	r2, #3
 8007cbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cc4:	e013      	b.n	8007cee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	4413      	add	r3, r2
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	613b      	str	r3, [r7, #16]
    idx++;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	3301      	adds	r3, #1
 8007cec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e7      	bne.n	8007cc6 <USBD_GetString+0x52>
 8007cf6:	e000      	b.n	8007cfa <USBD_GetString+0x86>
    return;
 8007cf8:	bf00      	nop
  }
}
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d10:	e005      	b.n	8007d1e <USBD_GetLen+0x1e>
  {
    len++;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	3301      	adds	r3, #1
 8007d16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f5      	bne.n	8007d12 <USBD_GetLen+0x12>
  }

  return len;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	2100      	movs	r1, #0
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fcf9 	bl	8008752 <USBD_LL_Transmit>

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fce8 	bl	8008752 <USBD_LL_Transmit>

  return USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	2100      	movs	r1, #0
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fcec 	bl	8008794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fcdb 	bl	8008794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2204      	movs	r2, #4
 8007df4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fca7 	bl	8008752 <USBD_LL_Transmit>

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2205      	movs	r2, #5
 8007e1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2200      	movs	r2, #0
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fcb5 	bl	8008794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4912      	ldr	r1, [pc, #72]	@ (8007e84 <MX_USB_DEVICE_Init+0x50>)
 8007e3c:	4812      	ldr	r0, [pc, #72]	@ (8007e88 <MX_USB_DEVICE_Init+0x54>)
 8007e3e:	f7fe fd09 	bl	8006854 <USBD_Init>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e48:	f7f8 ff66 	bl	8000d18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e4c:	490f      	ldr	r1, [pc, #60]	@ (8007e8c <MX_USB_DEVICE_Init+0x58>)
 8007e4e:	480e      	ldr	r0, [pc, #56]	@ (8007e88 <MX_USB_DEVICE_Init+0x54>)
 8007e50:	f7fe fd30 	bl	80068b4 <USBD_RegisterClass>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e5a:	f7f8 ff5d 	bl	8000d18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e5e:	490c      	ldr	r1, [pc, #48]	@ (8007e90 <MX_USB_DEVICE_Init+0x5c>)
 8007e60:	4809      	ldr	r0, [pc, #36]	@ (8007e88 <MX_USB_DEVICE_Init+0x54>)
 8007e62:	f7fe fc21 	bl	80066a8 <USBD_CDC_RegisterInterface>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e6c:	f7f8 ff54 	bl	8000d18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e70:	4805      	ldr	r0, [pc, #20]	@ (8007e88 <MX_USB_DEVICE_Init+0x54>)
 8007e72:	f7fe fd55 	bl	8006920 <USBD_Start>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e7c:	f7f8 ff4c 	bl	8000d18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e80:	bf00      	nop
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	200000ac 	.word	0x200000ac
 8007e88:	20000278 	.word	0x20000278
 8007e8c:	20000018 	.word	0x20000018
 8007e90:	20000098 	.word	0x20000098

08007e94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4905      	ldr	r1, [pc, #20]	@ (8007eb0 <CDC_Init_FS+0x1c>)
 8007e9c:	4805      	ldr	r0, [pc, #20]	@ (8007eb4 <CDC_Init_FS+0x20>)
 8007e9e:	f7fe fc1d 	bl	80066dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ea2:	4905      	ldr	r1, [pc, #20]	@ (8007eb8 <CDC_Init_FS+0x24>)
 8007ea4:	4803      	ldr	r0, [pc, #12]	@ (8007eb4 <CDC_Init_FS+0x20>)
 8007ea6:	f7fe fc3b 	bl	8006720 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20000d54 	.word	0x20000d54
 8007eb4:	20000278 	.word	0x20000278
 8007eb8:	20000554 	.word	0x20000554

08007ebc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	2b23      	cmp	r3, #35	@ 0x23
 8007ee0:	d84a      	bhi.n	8007f78 <CDC_Control_FS+0xac>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <CDC_Control_FS+0x1c>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f79 	.word	0x08007f79
 8007eec:	08007f79 	.word	0x08007f79
 8007ef0:	08007f79 	.word	0x08007f79
 8007ef4:	08007f79 	.word	0x08007f79
 8007ef8:	08007f79 	.word	0x08007f79
 8007efc:	08007f79 	.word	0x08007f79
 8007f00:	08007f79 	.word	0x08007f79
 8007f04:	08007f79 	.word	0x08007f79
 8007f08:	08007f79 	.word	0x08007f79
 8007f0c:	08007f79 	.word	0x08007f79
 8007f10:	08007f79 	.word	0x08007f79
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	08007f79 	.word	0x08007f79
 8007f1c:	08007f79 	.word	0x08007f79
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f79 	.word	0x08007f79
 8007f28:	08007f79 	.word	0x08007f79
 8007f2c:	08007f79 	.word	0x08007f79
 8007f30:	08007f79 	.word	0x08007f79
 8007f34:	08007f79 	.word	0x08007f79
 8007f38:	08007f79 	.word	0x08007f79
 8007f3c:	08007f79 	.word	0x08007f79
 8007f40:	08007f79 	.word	0x08007f79
 8007f44:	08007f79 	.word	0x08007f79
 8007f48:	08007f79 	.word	0x08007f79
 8007f4c:	08007f79 	.word	0x08007f79
 8007f50:	08007f79 	.word	0x08007f79
 8007f54:	08007f79 	.word	0x08007f79
 8007f58:	08007f79 	.word	0x08007f79
 8007f5c:	08007f79 	.word	0x08007f79
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08007f79 	.word	0x08007f79
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f79 	.word	0x08007f79
 8007f70:	08007f79 	.word	0x08007f79
 8007f74:	08007f79 	.word	0x08007f79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f78:	bf00      	nop
  }

  return (USBD_OK);
 8007f7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	4805      	ldr	r0, [pc, #20]	@ (8007fac <CDC_Receive_FS+0x24>)
 8007f96:	f7fe fbc3 	bl	8006720 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f9a:	4804      	ldr	r0, [pc, #16]	@ (8007fac <CDC_Receive_FS+0x24>)
 8007f9c:	f7fe fc24 	bl	80067e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fa0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000278 	.word	0x20000278

08007fb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <CDC_Transmit_FS+0x48>)
 8007fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e00b      	b.n	8007fee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fd6:	887b      	ldrh	r3, [r7, #2]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4806      	ldr	r0, [pc, #24]	@ (8007ff8 <CDC_Transmit_FS+0x48>)
 8007fde:	f7fe fb7d 	bl	80066dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fe2:	4805      	ldr	r0, [pc, #20]	@ (8007ff8 <CDC_Transmit_FS+0x48>)
 8007fe4:	f7fe fbba 	bl	800675c <USBD_CDC_TransmitPacket>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000278 	.word	0x20000278

08007ffc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800800e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
	...

08008020 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2212      	movs	r2, #18
 8008030:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008032:	4b03      	ldr	r3, [pc, #12]	@ (8008040 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	200000c8 	.word	0x200000c8

08008044 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2204      	movs	r2, #4
 8008054:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008056:	4b03      	ldr	r3, [pc, #12]	@ (8008064 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	200000dc 	.word	0x200000dc

08008068 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	4907      	ldr	r1, [pc, #28]	@ (800809c <USBD_FS_ProductStrDescriptor+0x34>)
 800807e:	4808      	ldr	r0, [pc, #32]	@ (80080a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008080:	f7ff fdf8 	bl	8007c74 <USBD_GetString>
 8008084:	e004      	b.n	8008090 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4904      	ldr	r1, [pc, #16]	@ (800809c <USBD_FS_ProductStrDescriptor+0x34>)
 800808a:	4805      	ldr	r0, [pc, #20]	@ (80080a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800808c:	f7ff fdf2 	bl	8007c74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008090:	4b02      	ldr	r3, [pc, #8]	@ (800809c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20001554 	.word	0x20001554
 80080a0:	08009740 	.word	0x08009740

080080a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	4904      	ldr	r1, [pc, #16]	@ (80080c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080b4:	4804      	ldr	r0, [pc, #16]	@ (80080c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080b6:	f7ff fddd 	bl	8007c74 <USBD_GetString>
  return USBD_StrDesc;
 80080ba:	4b02      	ldr	r3, [pc, #8]	@ (80080c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20001554 	.word	0x20001554
 80080c8:	08009758 	.word	0x08009758

080080cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	221a      	movs	r2, #26
 80080dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080de:	f000 f843 	bl	8008168 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080e2:	4b02      	ldr	r3, [pc, #8]	@ (80080ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	200000e0 	.word	0x200000e0

080080f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4907      	ldr	r1, [pc, #28]	@ (8008124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008106:	4808      	ldr	r0, [pc, #32]	@ (8008128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008108:	f7ff fdb4 	bl	8007c74 <USBD_GetString>
 800810c:	e004      	b.n	8008118 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4904      	ldr	r1, [pc, #16]	@ (8008124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008112:	4805      	ldr	r0, [pc, #20]	@ (8008128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008114:	f7ff fdae 	bl	8007c74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008118:	4b02      	ldr	r3, [pc, #8]	@ (8008124 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20001554 	.word	0x20001554
 8008128:	0800976c 	.word	0x0800976c

0800812c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4907      	ldr	r1, [pc, #28]	@ (8008160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008142:	4808      	ldr	r0, [pc, #32]	@ (8008164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008144:	f7ff fd96 	bl	8007c74 <USBD_GetString>
 8008148:	e004      	b.n	8008154 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	4904      	ldr	r1, [pc, #16]	@ (8008160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800814e:	4805      	ldr	r0, [pc, #20]	@ (8008164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008150:	f7ff fd90 	bl	8007c74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008154:	4b02      	ldr	r3, [pc, #8]	@ (8008160 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20001554 	.word	0x20001554
 8008164:	08009778 	.word	0x08009778

08008168 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800816e:	4b0f      	ldr	r3, [pc, #60]	@ (80081ac <Get_SerialNum+0x44>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008174:	4b0e      	ldr	r3, [pc, #56]	@ (80081b0 <Get_SerialNum+0x48>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800817a:	4b0e      	ldr	r3, [pc, #56]	@ (80081b4 <Get_SerialNum+0x4c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4413      	add	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800818e:	2208      	movs	r2, #8
 8008190:	4909      	ldr	r1, [pc, #36]	@ (80081b8 <Get_SerialNum+0x50>)
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f814 	bl	80081c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008198:	2204      	movs	r2, #4
 800819a:	4908      	ldr	r1, [pc, #32]	@ (80081bc <Get_SerialNum+0x54>)
 800819c:	68b8      	ldr	r0, [r7, #8]
 800819e:	f000 f80f 	bl	80081c0 <IntToUnicode>
  }
}
 80081a2:	bf00      	nop
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	1fff7a10 	.word	0x1fff7a10
 80081b0:	1fff7a14 	.word	0x1fff7a14
 80081b4:	1fff7a18 	.word	0x1fff7a18
 80081b8:	200000e2 	.word	0x200000e2
 80081bc:	200000f2 	.word	0x200000f2

080081c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]
 80081d6:	e027      	b.n	8008228 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	0f1b      	lsrs	r3, r3, #28
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d80b      	bhi.n	80081f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	0f1b      	lsrs	r3, r3, #28
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4619      	mov	r1, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	440b      	add	r3, r1
 80081f0:	3230      	adds	r2, #48	@ 0x30
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	e00a      	b.n	800820e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	0f1b      	lsrs	r3, r3, #28
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4619      	mov	r1, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	440b      	add	r3, r1
 8008208:	3237      	adds	r2, #55	@ 0x37
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	3301      	adds	r3, #1
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	2200      	movs	r2, #0
 8008220:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	3301      	adds	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
 8008228:	7dfa      	ldrb	r2, [r7, #23]
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	429a      	cmp	r2, r3
 800822e:	d3d3      	bcc.n	80081d8 <IntToUnicode+0x18>
  }
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	@ 0x28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008248:	f107 0314 	add.w	r3, r7, #20
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	609a      	str	r2, [r3, #8]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008260:	d147      	bne.n	80082f2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008262:	2300      	movs	r3, #0
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	4b25      	ldr	r3, [pc, #148]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826a:	4a24      	ldr	r2, [pc, #144]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	6313      	str	r3, [r2, #48]	@ 0x30
 8008272:	4b22      	ldr	r3, [pc, #136]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800827e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008284:	2300      	movs	r3, #0
 8008286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800828c:	f107 0314 	add.w	r3, r7, #20
 8008290:	4619      	mov	r1, r3
 8008292:	481b      	ldr	r0, [pc, #108]	@ (8008300 <HAL_PCD_MspInit+0xc0>)
 8008294:	f7f9 f924 	bl	80014e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008298:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800829c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800829e:	2302      	movs	r3, #2
 80082a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082a6:	2300      	movs	r3, #0
 80082a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082aa:	230a      	movs	r3, #10
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ae:	f107 0314 	add.w	r3, r7, #20
 80082b2:	4619      	mov	r1, r3
 80082b4:	4812      	ldr	r0, [pc, #72]	@ (8008300 <HAL_PCD_MspInit+0xc0>)
 80082b6:	f7f9 f913 	bl	80014e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082ba:	4b10      	ldr	r3, [pc, #64]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 80082bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082be:	4a0f      	ldr	r2, [pc, #60]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 80082c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	4b0c      	ldr	r3, [pc, #48]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 80082cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ce:	4a0b      	ldr	r2, [pc, #44]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 80082d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80082d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80082d6:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <HAL_PCD_MspInit+0xbc>)
 80082d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082e2:	2200      	movs	r2, #0
 80082e4:	2100      	movs	r1, #0
 80082e6:	2043      	movs	r0, #67	@ 0x43
 80082e8:	f7f9 f8c3 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082ec:	2043      	movs	r0, #67	@ 0x43
 80082ee:	f7f9 f8dc 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082f2:	bf00      	nop
 80082f4:	3728      	adds	r7, #40	@ 0x28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40023800 	.word	0x40023800
 8008300:	40020000 	.word	0x40020000

08008304 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f7fe fb4d 	bl	80069ba <USBD_LL_SetupStage>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4613      	mov	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	440b      	add	r3, r1
 8008348:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	4619      	mov	r1, r3
 8008352:	f7fe fb87 	bl	8006a64 <USBD_LL_DataOutStage>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
 8008366:	460b      	mov	r3, r1
 8008368:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	334c      	adds	r3, #76	@ 0x4c
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	4619      	mov	r1, r3
 8008386:	f7fe fc20 	bl	8006bca <USBD_LL_DataInStage>
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fd54 	bl	8006e4e <USBD_LL_SOF>
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083b6:	2301      	movs	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d102      	bne.n	80083c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
 80083c6:	e008      	b.n	80083da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d102      	bne.n	80083d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
 80083d4:	e001      	b.n	80083da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083d6:	f7f8 fc9f 	bl	8000d18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083e0:	7bfa      	ldrb	r2, [r7, #15]
 80083e2:	4611      	mov	r1, r2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe fcf4 	bl	8006dd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe fc9c 	bl	8006d2e <USBD_LL_Reset>
}
 80083f6:	bf00      	nop
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fcef 	bl	8006df2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <HAL_PCD_SuspendCallback+0x48>)
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	4a03      	ldr	r2, [pc, #12]	@ (8008448 <HAL_PCD_SuspendCallback+0x48>)
 800843a:	f043 0306 	orr.w	r3, r3, #6
 800843e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed00 	.word	0xe000ed00

0800844c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fcdf 	bl	8006e1e <USBD_LL_Resume>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800847a:	78fa      	ldrb	r2, [r7, #3]
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fd37 	bl	8006ef2 <USBD_LL_IsoOUTIncomplete>
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800849e:	78fa      	ldrb	r2, [r7, #3]
 80084a0:	4611      	mov	r1, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fcf3 	bl	8006e8e <USBD_LL_IsoINIncomplete>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe fd49 	bl	8006f56 <USBD_LL_DevConnected>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe fd46 	bl	8006f6c <USBD_LL_DevDisconnected>
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d13c      	bne.n	8008572 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084f8:	4a20      	ldr	r2, [pc, #128]	@ (800857c <USBD_LL_Init+0x94>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a1e      	ldr	r2, [pc, #120]	@ (800857c <USBD_LL_Init+0x94>)
 8008504:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008508:	4b1c      	ldr	r3, [pc, #112]	@ (800857c <USBD_LL_Init+0x94>)
 800850a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800850e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008510:	4b1a      	ldr	r3, [pc, #104]	@ (800857c <USBD_LL_Init+0x94>)
 8008512:	2204      	movs	r2, #4
 8008514:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008516:	4b19      	ldr	r3, [pc, #100]	@ (800857c <USBD_LL_Init+0x94>)
 8008518:	2202      	movs	r2, #2
 800851a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800851c:	4b17      	ldr	r3, [pc, #92]	@ (800857c <USBD_LL_Init+0x94>)
 800851e:	2200      	movs	r2, #0
 8008520:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008522:	4b16      	ldr	r3, [pc, #88]	@ (800857c <USBD_LL_Init+0x94>)
 8008524:	2202      	movs	r2, #2
 8008526:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008528:	4b14      	ldr	r3, [pc, #80]	@ (800857c <USBD_LL_Init+0x94>)
 800852a:	2200      	movs	r2, #0
 800852c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800852e:	4b13      	ldr	r3, [pc, #76]	@ (800857c <USBD_LL_Init+0x94>)
 8008530:	2200      	movs	r2, #0
 8008532:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008534:	4b11      	ldr	r3, [pc, #68]	@ (800857c <USBD_LL_Init+0x94>)
 8008536:	2200      	movs	r2, #0
 8008538:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800853a:	4b10      	ldr	r3, [pc, #64]	@ (800857c <USBD_LL_Init+0x94>)
 800853c:	2201      	movs	r2, #1
 800853e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008540:	4b0e      	ldr	r3, [pc, #56]	@ (800857c <USBD_LL_Init+0x94>)
 8008542:	2200      	movs	r2, #0
 8008544:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008546:	480d      	ldr	r0, [pc, #52]	@ (800857c <USBD_LL_Init+0x94>)
 8008548:	f7f9 ff96 	bl	8002478 <HAL_PCD_Init>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008552:	f7f8 fbe1 	bl	8000d18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008556:	2180      	movs	r1, #128	@ 0x80
 8008558:	4808      	ldr	r0, [pc, #32]	@ (800857c <USBD_LL_Init+0x94>)
 800855a:	f7fb f9ee 	bl	800393a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800855e:	2240      	movs	r2, #64	@ 0x40
 8008560:	2100      	movs	r1, #0
 8008562:	4806      	ldr	r0, [pc, #24]	@ (800857c <USBD_LL_Init+0x94>)
 8008564:	f7fb f9a2 	bl	80038ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008568:	2280      	movs	r2, #128	@ 0x80
 800856a:	2101      	movs	r1, #1
 800856c:	4803      	ldr	r0, [pc, #12]	@ (800857c <USBD_LL_Init+0x94>)
 800856e:	f7fb f99d 	bl	80038ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20001754 	.word	0x20001754

08008580 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008596:	4618      	mov	r0, r3
 8008598:	f7fa f88b 	bl	80026b2 <HAL_PCD_Start>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f942 	bl	800882c <USBD_Get_USB_Status>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	4608      	mov	r0, r1
 80085c0:	4611      	mov	r1, r2
 80085c2:	461a      	mov	r2, r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	70fb      	strb	r3, [r7, #3]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70bb      	strb	r3, [r7, #2]
 80085cc:	4613      	mov	r3, r2
 80085ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80085de:	78bb      	ldrb	r3, [r7, #2]
 80085e0:	883a      	ldrh	r2, [r7, #0]
 80085e2:	78f9      	ldrb	r1, [r7, #3]
 80085e4:	f7fa fd5c 	bl	80030a0 <HAL_PCD_EP_Open>
 80085e8:	4603      	mov	r3, r0
 80085ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f91c 	bl	800882c <USBD_Get_USB_Status>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	460b      	mov	r3, r1
 800860c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f7fa fda5 	bl	8003170 <HAL_PCD_EP_Close>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f8fd 	bl	800882c <USBD_Get_USB_Status>
 8008632:	4603      	mov	r3, r0
 8008634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008636:	7bbb      	ldrb	r3, [r7, #14]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7fa fe7d 	bl	800335e <HAL_PCD_EP_SetStall>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f8de 	bl	800882c <USBD_Get_USB_Status>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008674:	7bbb      	ldrb	r3, [r7, #14]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f7fa fec2 	bl	8003426 <HAL_PCD_EP_ClrStall>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f8bf 	bl	800882c <USBD_Get_USB_Status>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da0b      	bge.n	80086f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	333e      	adds	r3, #62	@ 0x3e
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	e00b      	b.n	8008708 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	4613      	mov	r3, r2
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008706:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800872e:	78fa      	ldrb	r2, [r7, #3]
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f7fa fc8f 	bl	8003056 <HAL_PCD_SetAddress>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	4618      	mov	r0, r3
 8008740:	f000 f874 	bl	800882c <USBD_Get_USB_Status>
 8008744:	4603      	mov	r3, r0
 8008746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008748:	7bbb      	ldrb	r3, [r7, #14]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
 800875e:	460b      	mov	r3, r1
 8008760:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008770:	7af9      	ldrb	r1, [r7, #11]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	f7fa fda8 	bl	80032ca <HAL_PCD_EP_Transmit>
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f853 	bl	800882c <USBD_Get_USB_Status>
 8008786:	4603      	mov	r3, r0
 8008788:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800878a:	7dbb      	ldrb	r3, [r7, #22]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	460b      	mov	r3, r1
 80087a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80087b2:	7af9      	ldrb	r1, [r7, #11]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	f7fa fd24 	bl	8003204 <HAL_PCD_EP_Receive>
 80087bc:	4603      	mov	r3, r0
 80087be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f832 	bl	800882c <USBD_Get_USB_Status>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087e8:	78fa      	ldrb	r2, [r7, #3]
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fa fd54 	bl	800329a <HAL_PCD_EP_GetRxCount>
 80087f2:	4603      	mov	r3, r0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008804:	4b03      	ldr	r3, [pc, #12]	@ (8008814 <USBD_static_malloc+0x18>)
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20001c60 	.word	0x20001c60

08008818 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]

}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d817      	bhi.n	8008870 <USBD_Get_USB_Status+0x44>
 8008840:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <USBD_Get_USB_Status+0x1c>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	08008859 	.word	0x08008859
 800884c:	0800885f 	.word	0x0800885f
 8008850:	08008865 	.word	0x08008865
 8008854:	0800886b 	.word	0x0800886b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
    break;
 800885c:	e00b      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800885e:	2303      	movs	r3, #3
 8008860:	73fb      	strb	r3, [r7, #15]
    break;
 8008862:	e008      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008864:	2301      	movs	r3, #1
 8008866:	73fb      	strb	r3, [r7, #15]
    break;
 8008868:	e005      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800886a:	2303      	movs	r3, #3
 800886c:	73fb      	strb	r3, [r7, #15]
    break;
 800886e:	e002      	b.n	8008876 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008870:	2303      	movs	r3, #3
 8008872:	73fb      	strb	r3, [r7, #15]
    break;
 8008874:	bf00      	nop
  }
  return usb_status;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <std>:
 8008884:	2300      	movs	r3, #0
 8008886:	b510      	push	{r4, lr}
 8008888:	4604      	mov	r4, r0
 800888a:	e9c0 3300 	strd	r3, r3, [r0]
 800888e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008892:	6083      	str	r3, [r0, #8]
 8008894:	8181      	strh	r1, [r0, #12]
 8008896:	6643      	str	r3, [r0, #100]	@ 0x64
 8008898:	81c2      	strh	r2, [r0, #14]
 800889a:	6183      	str	r3, [r0, #24]
 800889c:	4619      	mov	r1, r3
 800889e:	2208      	movs	r2, #8
 80088a0:	305c      	adds	r0, #92	@ 0x5c
 80088a2:	f000 f906 	bl	8008ab2 <memset>
 80088a6:	4b0d      	ldr	r3, [pc, #52]	@ (80088dc <std+0x58>)
 80088a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80088aa:	4b0d      	ldr	r3, [pc, #52]	@ (80088e0 <std+0x5c>)
 80088ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088ae:	4b0d      	ldr	r3, [pc, #52]	@ (80088e4 <std+0x60>)
 80088b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088b2:	4b0d      	ldr	r3, [pc, #52]	@ (80088e8 <std+0x64>)
 80088b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80088b6:	4b0d      	ldr	r3, [pc, #52]	@ (80088ec <std+0x68>)
 80088b8:	6224      	str	r4, [r4, #32]
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d006      	beq.n	80088cc <std+0x48>
 80088be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088c2:	4294      	cmp	r4, r2
 80088c4:	d002      	beq.n	80088cc <std+0x48>
 80088c6:	33d0      	adds	r3, #208	@ 0xd0
 80088c8:	429c      	cmp	r4, r3
 80088ca:	d105      	bne.n	80088d8 <std+0x54>
 80088cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d4:	f000 b966 	b.w	8008ba4 <__retarget_lock_init_recursive>
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	bf00      	nop
 80088dc:	08008a2d 	.word	0x08008a2d
 80088e0:	08008a4f 	.word	0x08008a4f
 80088e4:	08008a87 	.word	0x08008a87
 80088e8:	08008aab 	.word	0x08008aab
 80088ec:	20001e80 	.word	0x20001e80

080088f0 <stdio_exit_handler>:
 80088f0:	4a02      	ldr	r2, [pc, #8]	@ (80088fc <stdio_exit_handler+0xc>)
 80088f2:	4903      	ldr	r1, [pc, #12]	@ (8008900 <stdio_exit_handler+0x10>)
 80088f4:	4803      	ldr	r0, [pc, #12]	@ (8008904 <stdio_exit_handler+0x14>)
 80088f6:	f000 b869 	b.w	80089cc <_fwalk_sglue>
 80088fa:	bf00      	nop
 80088fc:	200000fc 	.word	0x200000fc
 8008900:	08009441 	.word	0x08009441
 8008904:	2000010c 	.word	0x2000010c

08008908 <cleanup_stdio>:
 8008908:	6841      	ldr	r1, [r0, #4]
 800890a:	4b0c      	ldr	r3, [pc, #48]	@ (800893c <cleanup_stdio+0x34>)
 800890c:	4299      	cmp	r1, r3
 800890e:	b510      	push	{r4, lr}
 8008910:	4604      	mov	r4, r0
 8008912:	d001      	beq.n	8008918 <cleanup_stdio+0x10>
 8008914:	f000 fd94 	bl	8009440 <_fflush_r>
 8008918:	68a1      	ldr	r1, [r4, #8]
 800891a:	4b09      	ldr	r3, [pc, #36]	@ (8008940 <cleanup_stdio+0x38>)
 800891c:	4299      	cmp	r1, r3
 800891e:	d002      	beq.n	8008926 <cleanup_stdio+0x1e>
 8008920:	4620      	mov	r0, r4
 8008922:	f000 fd8d 	bl	8009440 <_fflush_r>
 8008926:	68e1      	ldr	r1, [r4, #12]
 8008928:	4b06      	ldr	r3, [pc, #24]	@ (8008944 <cleanup_stdio+0x3c>)
 800892a:	4299      	cmp	r1, r3
 800892c:	d004      	beq.n	8008938 <cleanup_stdio+0x30>
 800892e:	4620      	mov	r0, r4
 8008930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008934:	f000 bd84 	b.w	8009440 <_fflush_r>
 8008938:	bd10      	pop	{r4, pc}
 800893a:	bf00      	nop
 800893c:	20001e80 	.word	0x20001e80
 8008940:	20001ee8 	.word	0x20001ee8
 8008944:	20001f50 	.word	0x20001f50

08008948 <global_stdio_init.part.0>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4b0b      	ldr	r3, [pc, #44]	@ (8008978 <global_stdio_init.part.0+0x30>)
 800894c:	4c0b      	ldr	r4, [pc, #44]	@ (800897c <global_stdio_init.part.0+0x34>)
 800894e:	4a0c      	ldr	r2, [pc, #48]	@ (8008980 <global_stdio_init.part.0+0x38>)
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	4620      	mov	r0, r4
 8008954:	2200      	movs	r2, #0
 8008956:	2104      	movs	r1, #4
 8008958:	f7ff ff94 	bl	8008884 <std>
 800895c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008960:	2201      	movs	r2, #1
 8008962:	2109      	movs	r1, #9
 8008964:	f7ff ff8e 	bl	8008884 <std>
 8008968:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800896c:	2202      	movs	r2, #2
 800896e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008972:	2112      	movs	r1, #18
 8008974:	f7ff bf86 	b.w	8008884 <std>
 8008978:	20001fb8 	.word	0x20001fb8
 800897c:	20001e80 	.word	0x20001e80
 8008980:	080088f1 	.word	0x080088f1

08008984 <__sfp_lock_acquire>:
 8008984:	4801      	ldr	r0, [pc, #4]	@ (800898c <__sfp_lock_acquire+0x8>)
 8008986:	f000 b90e 	b.w	8008ba6 <__retarget_lock_acquire_recursive>
 800898a:	bf00      	nop
 800898c:	20001fc1 	.word	0x20001fc1

08008990 <__sfp_lock_release>:
 8008990:	4801      	ldr	r0, [pc, #4]	@ (8008998 <__sfp_lock_release+0x8>)
 8008992:	f000 b909 	b.w	8008ba8 <__retarget_lock_release_recursive>
 8008996:	bf00      	nop
 8008998:	20001fc1 	.word	0x20001fc1

0800899c <__sinit>:
 800899c:	b510      	push	{r4, lr}
 800899e:	4604      	mov	r4, r0
 80089a0:	f7ff fff0 	bl	8008984 <__sfp_lock_acquire>
 80089a4:	6a23      	ldr	r3, [r4, #32]
 80089a6:	b11b      	cbz	r3, 80089b0 <__sinit+0x14>
 80089a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ac:	f7ff bff0 	b.w	8008990 <__sfp_lock_release>
 80089b0:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <__sinit+0x28>)
 80089b2:	6223      	str	r3, [r4, #32]
 80089b4:	4b04      	ldr	r3, [pc, #16]	@ (80089c8 <__sinit+0x2c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f5      	bne.n	80089a8 <__sinit+0xc>
 80089bc:	f7ff ffc4 	bl	8008948 <global_stdio_init.part.0>
 80089c0:	e7f2      	b.n	80089a8 <__sinit+0xc>
 80089c2:	bf00      	nop
 80089c4:	08008909 	.word	0x08008909
 80089c8:	20001fb8 	.word	0x20001fb8

080089cc <_fwalk_sglue>:
 80089cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089d0:	4607      	mov	r7, r0
 80089d2:	4688      	mov	r8, r1
 80089d4:	4614      	mov	r4, r2
 80089d6:	2600      	movs	r6, #0
 80089d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089dc:	f1b9 0901 	subs.w	r9, r9, #1
 80089e0:	d505      	bpl.n	80089ee <_fwalk_sglue+0x22>
 80089e2:	6824      	ldr	r4, [r4, #0]
 80089e4:	2c00      	cmp	r4, #0
 80089e6:	d1f7      	bne.n	80089d8 <_fwalk_sglue+0xc>
 80089e8:	4630      	mov	r0, r6
 80089ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ee:	89ab      	ldrh	r3, [r5, #12]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d907      	bls.n	8008a04 <_fwalk_sglue+0x38>
 80089f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089f8:	3301      	adds	r3, #1
 80089fa:	d003      	beq.n	8008a04 <_fwalk_sglue+0x38>
 80089fc:	4629      	mov	r1, r5
 80089fe:	4638      	mov	r0, r7
 8008a00:	47c0      	blx	r8
 8008a02:	4306      	orrs	r6, r0
 8008a04:	3568      	adds	r5, #104	@ 0x68
 8008a06:	e7e9      	b.n	80089dc <_fwalk_sglue+0x10>

08008a08 <iprintf>:
 8008a08:	b40f      	push	{r0, r1, r2, r3}
 8008a0a:	b507      	push	{r0, r1, r2, lr}
 8008a0c:	4906      	ldr	r1, [pc, #24]	@ (8008a28 <iprintf+0x20>)
 8008a0e:	ab04      	add	r3, sp, #16
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a16:	6881      	ldr	r1, [r0, #8]
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	f000 f9e9 	bl	8008df0 <_vfiprintf_r>
 8008a1e:	b003      	add	sp, #12
 8008a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a24:	b004      	add	sp, #16
 8008a26:	4770      	bx	lr
 8008a28:	20000108 	.word	0x20000108

08008a2c <__sread>:
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	460c      	mov	r4, r1
 8008a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a34:	f000 f868 	bl	8008b08 <_read_r>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	bfab      	itete	ge
 8008a3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a40:	181b      	addge	r3, r3, r0
 8008a42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a46:	bfac      	ite	ge
 8008a48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a4a:	81a3      	strhlt	r3, [r4, #12]
 8008a4c:	bd10      	pop	{r4, pc}

08008a4e <__swrite>:
 8008a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a52:	461f      	mov	r7, r3
 8008a54:	898b      	ldrh	r3, [r1, #12]
 8008a56:	05db      	lsls	r3, r3, #23
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	4616      	mov	r6, r2
 8008a5e:	d505      	bpl.n	8008a6c <__swrite+0x1e>
 8008a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a64:	2302      	movs	r3, #2
 8008a66:	2200      	movs	r2, #0
 8008a68:	f000 f83c 	bl	8008ae4 <_lseek_r>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	4632      	mov	r2, r6
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a82:	f000 b853 	b.w	8008b2c <_write_r>

08008a86 <__sseek>:
 8008a86:	b510      	push	{r4, lr}
 8008a88:	460c      	mov	r4, r1
 8008a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8e:	f000 f829 	bl	8008ae4 <_lseek_r>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	bf15      	itete	ne
 8008a98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008aa2:	81a3      	strheq	r3, [r4, #12]
 8008aa4:	bf18      	it	ne
 8008aa6:	81a3      	strhne	r3, [r4, #12]
 8008aa8:	bd10      	pop	{r4, pc}

08008aaa <__sclose>:
 8008aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aae:	f000 b809 	b.w	8008ac4 <_close_r>

08008ab2 <memset>:
 8008ab2:	4402      	add	r2, r0
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d100      	bne.n	8008abc <memset+0xa>
 8008aba:	4770      	bx	lr
 8008abc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac0:	e7f9      	b.n	8008ab6 <memset+0x4>
	...

08008ac4 <_close_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	@ (8008ae0 <_close_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f8 fab7 	bl	8001042 <_close>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_close_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_close_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20001fbc 	.word	0x20001fbc

08008ae4 <_lseek_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	@ (8008b04 <_lseek_r+0x20>)
 8008ae8:	4604      	mov	r4, r0
 8008aea:	4608      	mov	r0, r1
 8008aec:	4611      	mov	r1, r2
 8008aee:	2200      	movs	r2, #0
 8008af0:	602a      	str	r2, [r5, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f7f8 facc 	bl	8001090 <_lseek>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_lseek_r+0x1e>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_lseek_r+0x1e>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20001fbc 	.word	0x20001fbc

08008b08 <_read_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	@ (8008b28 <_read_r+0x20>)
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	602a      	str	r2, [r5, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	f7f8 fa76 	bl	8001008 <_read>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_read_r+0x1e>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_read_r+0x1e>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20001fbc 	.word	0x20001fbc

08008b2c <_write_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4d07      	ldr	r5, [pc, #28]	@ (8008b4c <_write_r+0x20>)
 8008b30:	4604      	mov	r4, r0
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	2200      	movs	r2, #0
 8008b38:	602a      	str	r2, [r5, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f7f7 fd40 	bl	80005c0 <_write>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_write_r+0x1e>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_write_r+0x1e>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20001fbc 	.word	0x20001fbc

08008b50 <__errno>:
 8008b50:	4b01      	ldr	r3, [pc, #4]	@ (8008b58 <__errno+0x8>)
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	20000108 	.word	0x20000108

08008b5c <__libc_init_array>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b94 <__libc_init_array+0x38>)
 8008b60:	4c0d      	ldr	r4, [pc, #52]	@ (8008b98 <__libc_init_array+0x3c>)
 8008b62:	1b64      	subs	r4, r4, r5
 8008b64:	10a4      	asrs	r4, r4, #2
 8008b66:	2600      	movs	r6, #0
 8008b68:	42a6      	cmp	r6, r4
 8008b6a:	d109      	bne.n	8008b80 <__libc_init_array+0x24>
 8008b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b9c <__libc_init_array+0x40>)
 8008b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8008ba0 <__libc_init_array+0x44>)
 8008b70:	f000 fdb6 	bl	80096e0 <_init>
 8008b74:	1b64      	subs	r4, r4, r5
 8008b76:	10a4      	asrs	r4, r4, #2
 8008b78:	2600      	movs	r6, #0
 8008b7a:	42a6      	cmp	r6, r4
 8008b7c:	d105      	bne.n	8008b8a <__libc_init_array+0x2e>
 8008b7e:	bd70      	pop	{r4, r5, r6, pc}
 8008b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b84:	4798      	blx	r3
 8008b86:	3601      	adds	r6, #1
 8008b88:	e7ee      	b.n	8008b68 <__libc_init_array+0xc>
 8008b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8e:	4798      	blx	r3
 8008b90:	3601      	adds	r6, #1
 8008b92:	e7f2      	b.n	8008b7a <__libc_init_array+0x1e>
 8008b94:	080097dc 	.word	0x080097dc
 8008b98:	080097dc 	.word	0x080097dc
 8008b9c:	080097dc 	.word	0x080097dc
 8008ba0:	080097e0 	.word	0x080097e0

08008ba4 <__retarget_lock_init_recursive>:
 8008ba4:	4770      	bx	lr

08008ba6 <__retarget_lock_acquire_recursive>:
 8008ba6:	4770      	bx	lr

08008ba8 <__retarget_lock_release_recursive>:
 8008ba8:	4770      	bx	lr
	...

08008bac <_free_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4605      	mov	r5, r0
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	d041      	beq.n	8008c38 <_free_r+0x8c>
 8008bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb8:	1f0c      	subs	r4, r1, #4
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfb8      	it	lt
 8008bbe:	18e4      	addlt	r4, r4, r3
 8008bc0:	f000 f8e0 	bl	8008d84 <__malloc_lock>
 8008bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c3c <_free_r+0x90>)
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	b933      	cbnz	r3, 8008bd8 <_free_r+0x2c>
 8008bca:	6063      	str	r3, [r4, #4]
 8008bcc:	6014      	str	r4, [r2, #0]
 8008bce:	4628      	mov	r0, r5
 8008bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bd4:	f000 b8dc 	b.w	8008d90 <__malloc_unlock>
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	d908      	bls.n	8008bee <_free_r+0x42>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	1821      	adds	r1, r4, r0
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf01      	itttt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	1809      	addeq	r1, r1, r0
 8008bea:	6021      	streq	r1, [r4, #0]
 8008bec:	e7ed      	b.n	8008bca <_free_r+0x1e>
 8008bee:	461a      	mov	r2, r3
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	b10b      	cbz	r3, 8008bf8 <_free_r+0x4c>
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	d9fa      	bls.n	8008bee <_free_r+0x42>
 8008bf8:	6811      	ldr	r1, [r2, #0]
 8008bfa:	1850      	adds	r0, r2, r1
 8008bfc:	42a0      	cmp	r0, r4
 8008bfe:	d10b      	bne.n	8008c18 <_free_r+0x6c>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	4401      	add	r1, r0
 8008c04:	1850      	adds	r0, r2, r1
 8008c06:	4283      	cmp	r3, r0
 8008c08:	6011      	str	r1, [r2, #0]
 8008c0a:	d1e0      	bne.n	8008bce <_free_r+0x22>
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	6053      	str	r3, [r2, #4]
 8008c12:	4408      	add	r0, r1
 8008c14:	6010      	str	r0, [r2, #0]
 8008c16:	e7da      	b.n	8008bce <_free_r+0x22>
 8008c18:	d902      	bls.n	8008c20 <_free_r+0x74>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	e7d6      	b.n	8008bce <_free_r+0x22>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	1821      	adds	r1, r4, r0
 8008c24:	428b      	cmp	r3, r1
 8008c26:	bf04      	itt	eq
 8008c28:	6819      	ldreq	r1, [r3, #0]
 8008c2a:	685b      	ldreq	r3, [r3, #4]
 8008c2c:	6063      	str	r3, [r4, #4]
 8008c2e:	bf04      	itt	eq
 8008c30:	1809      	addeq	r1, r1, r0
 8008c32:	6021      	streq	r1, [r4, #0]
 8008c34:	6054      	str	r4, [r2, #4]
 8008c36:	e7ca      	b.n	8008bce <_free_r+0x22>
 8008c38:	bd38      	pop	{r3, r4, r5, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20001fc8 	.word	0x20001fc8

08008c40 <sbrk_aligned>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	4e0f      	ldr	r6, [pc, #60]	@ (8008c80 <sbrk_aligned+0x40>)
 8008c44:	460c      	mov	r4, r1
 8008c46:	6831      	ldr	r1, [r6, #0]
 8008c48:	4605      	mov	r5, r0
 8008c4a:	b911      	cbnz	r1, 8008c52 <sbrk_aligned+0x12>
 8008c4c:	f000 fcb4 	bl	80095b8 <_sbrk_r>
 8008c50:	6030      	str	r0, [r6, #0]
 8008c52:	4621      	mov	r1, r4
 8008c54:	4628      	mov	r0, r5
 8008c56:	f000 fcaf 	bl	80095b8 <_sbrk_r>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	d103      	bne.n	8008c66 <sbrk_aligned+0x26>
 8008c5e:	f04f 34ff 	mov.w	r4, #4294967295
 8008c62:	4620      	mov	r0, r4
 8008c64:	bd70      	pop	{r4, r5, r6, pc}
 8008c66:	1cc4      	adds	r4, r0, #3
 8008c68:	f024 0403 	bic.w	r4, r4, #3
 8008c6c:	42a0      	cmp	r0, r4
 8008c6e:	d0f8      	beq.n	8008c62 <sbrk_aligned+0x22>
 8008c70:	1a21      	subs	r1, r4, r0
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 fca0 	bl	80095b8 <_sbrk_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d1f2      	bne.n	8008c62 <sbrk_aligned+0x22>
 8008c7c:	e7ef      	b.n	8008c5e <sbrk_aligned+0x1e>
 8008c7e:	bf00      	nop
 8008c80:	20001fc4 	.word	0x20001fc4

08008c84 <_malloc_r>:
 8008c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c88:	1ccd      	adds	r5, r1, #3
 8008c8a:	f025 0503 	bic.w	r5, r5, #3
 8008c8e:	3508      	adds	r5, #8
 8008c90:	2d0c      	cmp	r5, #12
 8008c92:	bf38      	it	cc
 8008c94:	250c      	movcc	r5, #12
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	4606      	mov	r6, r0
 8008c9a:	db01      	blt.n	8008ca0 <_malloc_r+0x1c>
 8008c9c:	42a9      	cmp	r1, r5
 8008c9e:	d904      	bls.n	8008caa <_malloc_r+0x26>
 8008ca0:	230c      	movs	r3, #12
 8008ca2:	6033      	str	r3, [r6, #0]
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008caa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d80 <_malloc_r+0xfc>
 8008cae:	f000 f869 	bl	8008d84 <__malloc_lock>
 8008cb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb6:	461c      	mov	r4, r3
 8008cb8:	bb44      	cbnz	r4, 8008d0c <_malloc_r+0x88>
 8008cba:	4629      	mov	r1, r5
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff ffbf 	bl	8008c40 <sbrk_aligned>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	d158      	bne.n	8008d7a <_malloc_r+0xf6>
 8008cc8:	f8d8 4000 	ldr.w	r4, [r8]
 8008ccc:	4627      	mov	r7, r4
 8008cce:	2f00      	cmp	r7, #0
 8008cd0:	d143      	bne.n	8008d5a <_malloc_r+0xd6>
 8008cd2:	2c00      	cmp	r4, #0
 8008cd4:	d04b      	beq.n	8008d6e <_malloc_r+0xea>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	4639      	mov	r1, r7
 8008cda:	4630      	mov	r0, r6
 8008cdc:	eb04 0903 	add.w	r9, r4, r3
 8008ce0:	f000 fc6a 	bl	80095b8 <_sbrk_r>
 8008ce4:	4581      	cmp	r9, r0
 8008ce6:	d142      	bne.n	8008d6e <_malloc_r+0xea>
 8008ce8:	6821      	ldr	r1, [r4, #0]
 8008cea:	1a6d      	subs	r5, r5, r1
 8008cec:	4629      	mov	r1, r5
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7ff ffa6 	bl	8008c40 <sbrk_aligned>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d03a      	beq.n	8008d6e <_malloc_r+0xea>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	442b      	add	r3, r5
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	bb62      	cbnz	r2, 8008d60 <_malloc_r+0xdc>
 8008d06:	f8c8 7000 	str.w	r7, [r8]
 8008d0a:	e00f      	b.n	8008d2c <_malloc_r+0xa8>
 8008d0c:	6822      	ldr	r2, [r4, #0]
 8008d0e:	1b52      	subs	r2, r2, r5
 8008d10:	d420      	bmi.n	8008d54 <_malloc_r+0xd0>
 8008d12:	2a0b      	cmp	r2, #11
 8008d14:	d917      	bls.n	8008d46 <_malloc_r+0xc2>
 8008d16:	1961      	adds	r1, r4, r5
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	6025      	str	r5, [r4, #0]
 8008d1c:	bf18      	it	ne
 8008d1e:	6059      	strne	r1, [r3, #4]
 8008d20:	6863      	ldr	r3, [r4, #4]
 8008d22:	bf08      	it	eq
 8008d24:	f8c8 1000 	streq.w	r1, [r8]
 8008d28:	5162      	str	r2, [r4, r5]
 8008d2a:	604b      	str	r3, [r1, #4]
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 f82f 	bl	8008d90 <__malloc_unlock>
 8008d32:	f104 000b 	add.w	r0, r4, #11
 8008d36:	1d23      	adds	r3, r4, #4
 8008d38:	f020 0007 	bic.w	r0, r0, #7
 8008d3c:	1ac2      	subs	r2, r0, r3
 8008d3e:	bf1c      	itt	ne
 8008d40:	1a1b      	subne	r3, r3, r0
 8008d42:	50a3      	strne	r3, [r4, r2]
 8008d44:	e7af      	b.n	8008ca6 <_malloc_r+0x22>
 8008d46:	6862      	ldr	r2, [r4, #4]
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	bf0c      	ite	eq
 8008d4c:	f8c8 2000 	streq.w	r2, [r8]
 8008d50:	605a      	strne	r2, [r3, #4]
 8008d52:	e7eb      	b.n	8008d2c <_malloc_r+0xa8>
 8008d54:	4623      	mov	r3, r4
 8008d56:	6864      	ldr	r4, [r4, #4]
 8008d58:	e7ae      	b.n	8008cb8 <_malloc_r+0x34>
 8008d5a:	463c      	mov	r4, r7
 8008d5c:	687f      	ldr	r7, [r7, #4]
 8008d5e:	e7b6      	b.n	8008cce <_malloc_r+0x4a>
 8008d60:	461a      	mov	r2, r3
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d1fb      	bne.n	8008d60 <_malloc_r+0xdc>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	6053      	str	r3, [r2, #4]
 8008d6c:	e7de      	b.n	8008d2c <_malloc_r+0xa8>
 8008d6e:	230c      	movs	r3, #12
 8008d70:	6033      	str	r3, [r6, #0]
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 f80c 	bl	8008d90 <__malloc_unlock>
 8008d78:	e794      	b.n	8008ca4 <_malloc_r+0x20>
 8008d7a:	6005      	str	r5, [r0, #0]
 8008d7c:	e7d6      	b.n	8008d2c <_malloc_r+0xa8>
 8008d7e:	bf00      	nop
 8008d80:	20001fc8 	.word	0x20001fc8

08008d84 <__malloc_lock>:
 8008d84:	4801      	ldr	r0, [pc, #4]	@ (8008d8c <__malloc_lock+0x8>)
 8008d86:	f7ff bf0e 	b.w	8008ba6 <__retarget_lock_acquire_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	20001fc0 	.word	0x20001fc0

08008d90 <__malloc_unlock>:
 8008d90:	4801      	ldr	r0, [pc, #4]	@ (8008d98 <__malloc_unlock+0x8>)
 8008d92:	f7ff bf09 	b.w	8008ba8 <__retarget_lock_release_recursive>
 8008d96:	bf00      	nop
 8008d98:	20001fc0 	.word	0x20001fc0

08008d9c <__sfputc_r>:
 8008d9c:	6893      	ldr	r3, [r2, #8]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	b410      	push	{r4}
 8008da4:	6093      	str	r3, [r2, #8]
 8008da6:	da08      	bge.n	8008dba <__sfputc_r+0x1e>
 8008da8:	6994      	ldr	r4, [r2, #24]
 8008daa:	42a3      	cmp	r3, r4
 8008dac:	db01      	blt.n	8008db2 <__sfputc_r+0x16>
 8008dae:	290a      	cmp	r1, #10
 8008db0:	d103      	bne.n	8008dba <__sfputc_r+0x1e>
 8008db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db6:	f000 bb6b 	b.w	8009490 <__swbuf_r>
 8008dba:	6813      	ldr	r3, [r2, #0]
 8008dbc:	1c58      	adds	r0, r3, #1
 8008dbe:	6010      	str	r0, [r2, #0]
 8008dc0:	7019      	strb	r1, [r3, #0]
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <__sfputs_r>:
 8008dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dcc:	4606      	mov	r6, r0
 8008dce:	460f      	mov	r7, r1
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	18d5      	adds	r5, r2, r3
 8008dd4:	42ac      	cmp	r4, r5
 8008dd6:	d101      	bne.n	8008ddc <__sfputs_r+0x12>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e007      	b.n	8008dec <__sfputs_r+0x22>
 8008ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de0:	463a      	mov	r2, r7
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7ff ffda 	bl	8008d9c <__sfputc_r>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d1f3      	bne.n	8008dd4 <__sfputs_r+0xa>
 8008dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008df0 <_vfiprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	460d      	mov	r5, r1
 8008df6:	b09d      	sub	sp, #116	@ 0x74
 8008df8:	4614      	mov	r4, r2
 8008dfa:	4698      	mov	r8, r3
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	b118      	cbz	r0, 8008e08 <_vfiprintf_r+0x18>
 8008e00:	6a03      	ldr	r3, [r0, #32]
 8008e02:	b90b      	cbnz	r3, 8008e08 <_vfiprintf_r+0x18>
 8008e04:	f7ff fdca 	bl	800899c <__sinit>
 8008e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e0a:	07d9      	lsls	r1, r3, #31
 8008e0c:	d405      	bmi.n	8008e1a <_vfiprintf_r+0x2a>
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	059a      	lsls	r2, r3, #22
 8008e12:	d402      	bmi.n	8008e1a <_vfiprintf_r+0x2a>
 8008e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e16:	f7ff fec6 	bl	8008ba6 <__retarget_lock_acquire_recursive>
 8008e1a:	89ab      	ldrh	r3, [r5, #12]
 8008e1c:	071b      	lsls	r3, r3, #28
 8008e1e:	d501      	bpl.n	8008e24 <_vfiprintf_r+0x34>
 8008e20:	692b      	ldr	r3, [r5, #16]
 8008e22:	b99b      	cbnz	r3, 8008e4c <_vfiprintf_r+0x5c>
 8008e24:	4629      	mov	r1, r5
 8008e26:	4630      	mov	r0, r6
 8008e28:	f000 fb70 	bl	800950c <__swsetup_r>
 8008e2c:	b170      	cbz	r0, 8008e4c <_vfiprintf_r+0x5c>
 8008e2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e30:	07dc      	lsls	r4, r3, #31
 8008e32:	d504      	bpl.n	8008e3e <_vfiprintf_r+0x4e>
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	b01d      	add	sp, #116	@ 0x74
 8008e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3e:	89ab      	ldrh	r3, [r5, #12]
 8008e40:	0598      	lsls	r0, r3, #22
 8008e42:	d4f7      	bmi.n	8008e34 <_vfiprintf_r+0x44>
 8008e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e46:	f7ff feaf 	bl	8008ba8 <__retarget_lock_release_recursive>
 8008e4a:	e7f3      	b.n	8008e34 <_vfiprintf_r+0x44>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e50:	2320      	movs	r3, #32
 8008e52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e5a:	2330      	movs	r3, #48	@ 0x30
 8008e5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800900c <_vfiprintf_r+0x21c>
 8008e60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e64:	f04f 0901 	mov.w	r9, #1
 8008e68:	4623      	mov	r3, r4
 8008e6a:	469a      	mov	sl, r3
 8008e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e70:	b10a      	cbz	r2, 8008e76 <_vfiprintf_r+0x86>
 8008e72:	2a25      	cmp	r2, #37	@ 0x25
 8008e74:	d1f9      	bne.n	8008e6a <_vfiprintf_r+0x7a>
 8008e76:	ebba 0b04 	subs.w	fp, sl, r4
 8008e7a:	d00b      	beq.n	8008e94 <_vfiprintf_r+0xa4>
 8008e7c:	465b      	mov	r3, fp
 8008e7e:	4622      	mov	r2, r4
 8008e80:	4629      	mov	r1, r5
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7ff ffa1 	bl	8008dca <__sfputs_r>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	f000 80a7 	beq.w	8008fdc <_vfiprintf_r+0x1ec>
 8008e8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e90:	445a      	add	r2, fp
 8008e92:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e94:	f89a 3000 	ldrb.w	r3, [sl]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 809f 	beq.w	8008fdc <_vfiprintf_r+0x1ec>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ea8:	f10a 0a01 	add.w	sl, sl, #1
 8008eac:	9304      	str	r3, [sp, #16]
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008eb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008eb6:	4654      	mov	r4, sl
 8008eb8:	2205      	movs	r2, #5
 8008eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ebe:	4853      	ldr	r0, [pc, #332]	@ (800900c <_vfiprintf_r+0x21c>)
 8008ec0:	f7f7 f986 	bl	80001d0 <memchr>
 8008ec4:	9a04      	ldr	r2, [sp, #16]
 8008ec6:	b9d8      	cbnz	r0, 8008f00 <_vfiprintf_r+0x110>
 8008ec8:	06d1      	lsls	r1, r2, #27
 8008eca:	bf44      	itt	mi
 8008ecc:	2320      	movmi	r3, #32
 8008ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ed2:	0713      	lsls	r3, r2, #28
 8008ed4:	bf44      	itt	mi
 8008ed6:	232b      	movmi	r3, #43	@ 0x2b
 8008ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008edc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee2:	d015      	beq.n	8008f10 <_vfiprintf_r+0x120>
 8008ee4:	9a07      	ldr	r2, [sp, #28]
 8008ee6:	4654      	mov	r4, sl
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f04f 0c0a 	mov.w	ip, #10
 8008eee:	4621      	mov	r1, r4
 8008ef0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ef4:	3b30      	subs	r3, #48	@ 0x30
 8008ef6:	2b09      	cmp	r3, #9
 8008ef8:	d94b      	bls.n	8008f92 <_vfiprintf_r+0x1a2>
 8008efa:	b1b0      	cbz	r0, 8008f2a <_vfiprintf_r+0x13a>
 8008efc:	9207      	str	r2, [sp, #28]
 8008efe:	e014      	b.n	8008f2a <_vfiprintf_r+0x13a>
 8008f00:	eba0 0308 	sub.w	r3, r0, r8
 8008f04:	fa09 f303 	lsl.w	r3, r9, r3
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	46a2      	mov	sl, r4
 8008f0e:	e7d2      	b.n	8008eb6 <_vfiprintf_r+0xc6>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	1d19      	adds	r1, r3, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	9103      	str	r1, [sp, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfbb      	ittet	lt
 8008f1c:	425b      	neglt	r3, r3
 8008f1e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f22:	9307      	strge	r3, [sp, #28]
 8008f24:	9307      	strlt	r3, [sp, #28]
 8008f26:	bfb8      	it	lt
 8008f28:	9204      	strlt	r2, [sp, #16]
 8008f2a:	7823      	ldrb	r3, [r4, #0]
 8008f2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f2e:	d10a      	bne.n	8008f46 <_vfiprintf_r+0x156>
 8008f30:	7863      	ldrb	r3, [r4, #1]
 8008f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f34:	d132      	bne.n	8008f9c <_vfiprintf_r+0x1ac>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	1d1a      	adds	r2, r3, #4
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	9203      	str	r2, [sp, #12]
 8008f3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f42:	3402      	adds	r4, #2
 8008f44:	9305      	str	r3, [sp, #20]
 8008f46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800901c <_vfiprintf_r+0x22c>
 8008f4a:	7821      	ldrb	r1, [r4, #0]
 8008f4c:	2203      	movs	r2, #3
 8008f4e:	4650      	mov	r0, sl
 8008f50:	f7f7 f93e 	bl	80001d0 <memchr>
 8008f54:	b138      	cbz	r0, 8008f66 <_vfiprintf_r+0x176>
 8008f56:	9b04      	ldr	r3, [sp, #16]
 8008f58:	eba0 000a 	sub.w	r0, r0, sl
 8008f5c:	2240      	movs	r2, #64	@ 0x40
 8008f5e:	4082      	lsls	r2, r0
 8008f60:	4313      	orrs	r3, r2
 8008f62:	3401      	adds	r4, #1
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6a:	4829      	ldr	r0, [pc, #164]	@ (8009010 <_vfiprintf_r+0x220>)
 8008f6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f70:	2206      	movs	r2, #6
 8008f72:	f7f7 f92d 	bl	80001d0 <memchr>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d03f      	beq.n	8008ffa <_vfiprintf_r+0x20a>
 8008f7a:	4b26      	ldr	r3, [pc, #152]	@ (8009014 <_vfiprintf_r+0x224>)
 8008f7c:	bb1b      	cbnz	r3, 8008fc6 <_vfiprintf_r+0x1d6>
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	3307      	adds	r3, #7
 8008f82:	f023 0307 	bic.w	r3, r3, #7
 8008f86:	3308      	adds	r3, #8
 8008f88:	9303      	str	r3, [sp, #12]
 8008f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8c:	443b      	add	r3, r7
 8008f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f90:	e76a      	b.n	8008e68 <_vfiprintf_r+0x78>
 8008f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f96:	460c      	mov	r4, r1
 8008f98:	2001      	movs	r0, #1
 8008f9a:	e7a8      	b.n	8008eee <_vfiprintf_r+0xfe>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	3401      	adds	r4, #1
 8008fa0:	9305      	str	r3, [sp, #20]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f04f 0c0a 	mov.w	ip, #10
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fae:	3a30      	subs	r2, #48	@ 0x30
 8008fb0:	2a09      	cmp	r2, #9
 8008fb2:	d903      	bls.n	8008fbc <_vfiprintf_r+0x1cc>
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0c6      	beq.n	8008f46 <_vfiprintf_r+0x156>
 8008fb8:	9105      	str	r1, [sp, #20]
 8008fba:	e7c4      	b.n	8008f46 <_vfiprintf_r+0x156>
 8008fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e7f0      	b.n	8008fa8 <_vfiprintf_r+0x1b8>
 8008fc6:	ab03      	add	r3, sp, #12
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	462a      	mov	r2, r5
 8008fcc:	4b12      	ldr	r3, [pc, #72]	@ (8009018 <_vfiprintf_r+0x228>)
 8008fce:	a904      	add	r1, sp, #16
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	f3af 8000 	nop.w
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	1c78      	adds	r0, r7, #1
 8008fda:	d1d6      	bne.n	8008f8a <_vfiprintf_r+0x19a>
 8008fdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fde:	07d9      	lsls	r1, r3, #31
 8008fe0:	d405      	bmi.n	8008fee <_vfiprintf_r+0x1fe>
 8008fe2:	89ab      	ldrh	r3, [r5, #12]
 8008fe4:	059a      	lsls	r2, r3, #22
 8008fe6:	d402      	bmi.n	8008fee <_vfiprintf_r+0x1fe>
 8008fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fea:	f7ff fddd 	bl	8008ba8 <__retarget_lock_release_recursive>
 8008fee:	89ab      	ldrh	r3, [r5, #12]
 8008ff0:	065b      	lsls	r3, r3, #25
 8008ff2:	f53f af1f 	bmi.w	8008e34 <_vfiprintf_r+0x44>
 8008ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ff8:	e71e      	b.n	8008e38 <_vfiprintf_r+0x48>
 8008ffa:	ab03      	add	r3, sp, #12
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	462a      	mov	r2, r5
 8009000:	4b05      	ldr	r3, [pc, #20]	@ (8009018 <_vfiprintf_r+0x228>)
 8009002:	a904      	add	r1, sp, #16
 8009004:	4630      	mov	r0, r6
 8009006:	f000 f879 	bl	80090fc <_printf_i>
 800900a:	e7e4      	b.n	8008fd6 <_vfiprintf_r+0x1e6>
 800900c:	080097a0 	.word	0x080097a0
 8009010:	080097aa 	.word	0x080097aa
 8009014:	00000000 	.word	0x00000000
 8009018:	08008dcb 	.word	0x08008dcb
 800901c:	080097a6 	.word	0x080097a6

08009020 <_printf_common>:
 8009020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009024:	4616      	mov	r6, r2
 8009026:	4698      	mov	r8, r3
 8009028:	688a      	ldr	r2, [r1, #8]
 800902a:	690b      	ldr	r3, [r1, #16]
 800902c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009030:	4293      	cmp	r3, r2
 8009032:	bfb8      	it	lt
 8009034:	4613      	movlt	r3, r2
 8009036:	6033      	str	r3, [r6, #0]
 8009038:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800903c:	4607      	mov	r7, r0
 800903e:	460c      	mov	r4, r1
 8009040:	b10a      	cbz	r2, 8009046 <_printf_common+0x26>
 8009042:	3301      	adds	r3, #1
 8009044:	6033      	str	r3, [r6, #0]
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	0699      	lsls	r1, r3, #26
 800904a:	bf42      	ittt	mi
 800904c:	6833      	ldrmi	r3, [r6, #0]
 800904e:	3302      	addmi	r3, #2
 8009050:	6033      	strmi	r3, [r6, #0]
 8009052:	6825      	ldr	r5, [r4, #0]
 8009054:	f015 0506 	ands.w	r5, r5, #6
 8009058:	d106      	bne.n	8009068 <_printf_common+0x48>
 800905a:	f104 0a19 	add.w	sl, r4, #25
 800905e:	68e3      	ldr	r3, [r4, #12]
 8009060:	6832      	ldr	r2, [r6, #0]
 8009062:	1a9b      	subs	r3, r3, r2
 8009064:	42ab      	cmp	r3, r5
 8009066:	dc26      	bgt.n	80090b6 <_printf_common+0x96>
 8009068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	3b00      	subs	r3, #0
 8009070:	bf18      	it	ne
 8009072:	2301      	movne	r3, #1
 8009074:	0692      	lsls	r2, r2, #26
 8009076:	d42b      	bmi.n	80090d0 <_printf_common+0xb0>
 8009078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800907c:	4641      	mov	r1, r8
 800907e:	4638      	mov	r0, r7
 8009080:	47c8      	blx	r9
 8009082:	3001      	adds	r0, #1
 8009084:	d01e      	beq.n	80090c4 <_printf_common+0xa4>
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	f003 0306 	and.w	r3, r3, #6
 800908e:	2b04      	cmp	r3, #4
 8009090:	bf02      	ittt	eq
 8009092:	68e5      	ldreq	r5, [r4, #12]
 8009094:	6833      	ldreq	r3, [r6, #0]
 8009096:	1aed      	subeq	r5, r5, r3
 8009098:	68a3      	ldr	r3, [r4, #8]
 800909a:	bf0c      	ite	eq
 800909c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090a0:	2500      	movne	r5, #0
 80090a2:	4293      	cmp	r3, r2
 80090a4:	bfc4      	itt	gt
 80090a6:	1a9b      	subgt	r3, r3, r2
 80090a8:	18ed      	addgt	r5, r5, r3
 80090aa:	2600      	movs	r6, #0
 80090ac:	341a      	adds	r4, #26
 80090ae:	42b5      	cmp	r5, r6
 80090b0:	d11a      	bne.n	80090e8 <_printf_common+0xc8>
 80090b2:	2000      	movs	r0, #0
 80090b4:	e008      	b.n	80090c8 <_printf_common+0xa8>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4652      	mov	r2, sl
 80090ba:	4641      	mov	r1, r8
 80090bc:	4638      	mov	r0, r7
 80090be:	47c8      	blx	r9
 80090c0:	3001      	adds	r0, #1
 80090c2:	d103      	bne.n	80090cc <_printf_common+0xac>
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295
 80090c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090cc:	3501      	adds	r5, #1
 80090ce:	e7c6      	b.n	800905e <_printf_common+0x3e>
 80090d0:	18e1      	adds	r1, r4, r3
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	2030      	movs	r0, #48	@ 0x30
 80090d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090da:	4422      	add	r2, r4
 80090dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090e4:	3302      	adds	r3, #2
 80090e6:	e7c7      	b.n	8009078 <_printf_common+0x58>
 80090e8:	2301      	movs	r3, #1
 80090ea:	4622      	mov	r2, r4
 80090ec:	4641      	mov	r1, r8
 80090ee:	4638      	mov	r0, r7
 80090f0:	47c8      	blx	r9
 80090f2:	3001      	adds	r0, #1
 80090f4:	d0e6      	beq.n	80090c4 <_printf_common+0xa4>
 80090f6:	3601      	adds	r6, #1
 80090f8:	e7d9      	b.n	80090ae <_printf_common+0x8e>
	...

080090fc <_printf_i>:
 80090fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	7e0f      	ldrb	r7, [r1, #24]
 8009102:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009104:	2f78      	cmp	r7, #120	@ 0x78
 8009106:	4691      	mov	r9, r2
 8009108:	4680      	mov	r8, r0
 800910a:	460c      	mov	r4, r1
 800910c:	469a      	mov	sl, r3
 800910e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009112:	d807      	bhi.n	8009124 <_printf_i+0x28>
 8009114:	2f62      	cmp	r7, #98	@ 0x62
 8009116:	d80a      	bhi.n	800912e <_printf_i+0x32>
 8009118:	2f00      	cmp	r7, #0
 800911a:	f000 80d1 	beq.w	80092c0 <_printf_i+0x1c4>
 800911e:	2f58      	cmp	r7, #88	@ 0x58
 8009120:	f000 80b8 	beq.w	8009294 <_printf_i+0x198>
 8009124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009128:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800912c:	e03a      	b.n	80091a4 <_printf_i+0xa8>
 800912e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009132:	2b15      	cmp	r3, #21
 8009134:	d8f6      	bhi.n	8009124 <_printf_i+0x28>
 8009136:	a101      	add	r1, pc, #4	@ (adr r1, 800913c <_printf_i+0x40>)
 8009138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800913c:	08009195 	.word	0x08009195
 8009140:	080091a9 	.word	0x080091a9
 8009144:	08009125 	.word	0x08009125
 8009148:	08009125 	.word	0x08009125
 800914c:	08009125 	.word	0x08009125
 8009150:	08009125 	.word	0x08009125
 8009154:	080091a9 	.word	0x080091a9
 8009158:	08009125 	.word	0x08009125
 800915c:	08009125 	.word	0x08009125
 8009160:	08009125 	.word	0x08009125
 8009164:	08009125 	.word	0x08009125
 8009168:	080092a7 	.word	0x080092a7
 800916c:	080091d3 	.word	0x080091d3
 8009170:	08009261 	.word	0x08009261
 8009174:	08009125 	.word	0x08009125
 8009178:	08009125 	.word	0x08009125
 800917c:	080092c9 	.word	0x080092c9
 8009180:	08009125 	.word	0x08009125
 8009184:	080091d3 	.word	0x080091d3
 8009188:	08009125 	.word	0x08009125
 800918c:	08009125 	.word	0x08009125
 8009190:	08009269 	.word	0x08009269
 8009194:	6833      	ldr	r3, [r6, #0]
 8009196:	1d1a      	adds	r2, r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6032      	str	r2, [r6, #0]
 800919c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091a4:	2301      	movs	r3, #1
 80091a6:	e09c      	b.n	80092e2 <_printf_i+0x1e6>
 80091a8:	6833      	ldr	r3, [r6, #0]
 80091aa:	6820      	ldr	r0, [r4, #0]
 80091ac:	1d19      	adds	r1, r3, #4
 80091ae:	6031      	str	r1, [r6, #0]
 80091b0:	0606      	lsls	r6, r0, #24
 80091b2:	d501      	bpl.n	80091b8 <_printf_i+0xbc>
 80091b4:	681d      	ldr	r5, [r3, #0]
 80091b6:	e003      	b.n	80091c0 <_printf_i+0xc4>
 80091b8:	0645      	lsls	r5, r0, #25
 80091ba:	d5fb      	bpl.n	80091b4 <_printf_i+0xb8>
 80091bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091c0:	2d00      	cmp	r5, #0
 80091c2:	da03      	bge.n	80091cc <_printf_i+0xd0>
 80091c4:	232d      	movs	r3, #45	@ 0x2d
 80091c6:	426d      	negs	r5, r5
 80091c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091cc:	4858      	ldr	r0, [pc, #352]	@ (8009330 <_printf_i+0x234>)
 80091ce:	230a      	movs	r3, #10
 80091d0:	e011      	b.n	80091f6 <_printf_i+0xfa>
 80091d2:	6821      	ldr	r1, [r4, #0]
 80091d4:	6833      	ldr	r3, [r6, #0]
 80091d6:	0608      	lsls	r0, r1, #24
 80091d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80091dc:	d402      	bmi.n	80091e4 <_printf_i+0xe8>
 80091de:	0649      	lsls	r1, r1, #25
 80091e0:	bf48      	it	mi
 80091e2:	b2ad      	uxthmi	r5, r5
 80091e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80091e6:	4852      	ldr	r0, [pc, #328]	@ (8009330 <_printf_i+0x234>)
 80091e8:	6033      	str	r3, [r6, #0]
 80091ea:	bf14      	ite	ne
 80091ec:	230a      	movne	r3, #10
 80091ee:	2308      	moveq	r3, #8
 80091f0:	2100      	movs	r1, #0
 80091f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091f6:	6866      	ldr	r6, [r4, #4]
 80091f8:	60a6      	str	r6, [r4, #8]
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	db05      	blt.n	800920a <_printf_i+0x10e>
 80091fe:	6821      	ldr	r1, [r4, #0]
 8009200:	432e      	orrs	r6, r5
 8009202:	f021 0104 	bic.w	r1, r1, #4
 8009206:	6021      	str	r1, [r4, #0]
 8009208:	d04b      	beq.n	80092a2 <_printf_i+0x1a6>
 800920a:	4616      	mov	r6, r2
 800920c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009210:	fb03 5711 	mls	r7, r3, r1, r5
 8009214:	5dc7      	ldrb	r7, [r0, r7]
 8009216:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800921a:	462f      	mov	r7, r5
 800921c:	42bb      	cmp	r3, r7
 800921e:	460d      	mov	r5, r1
 8009220:	d9f4      	bls.n	800920c <_printf_i+0x110>
 8009222:	2b08      	cmp	r3, #8
 8009224:	d10b      	bne.n	800923e <_printf_i+0x142>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	07df      	lsls	r7, r3, #31
 800922a:	d508      	bpl.n	800923e <_printf_i+0x142>
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	6861      	ldr	r1, [r4, #4]
 8009230:	4299      	cmp	r1, r3
 8009232:	bfde      	ittt	le
 8009234:	2330      	movle	r3, #48	@ 0x30
 8009236:	f806 3c01 	strble.w	r3, [r6, #-1]
 800923a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800923e:	1b92      	subs	r2, r2, r6
 8009240:	6122      	str	r2, [r4, #16]
 8009242:	f8cd a000 	str.w	sl, [sp]
 8009246:	464b      	mov	r3, r9
 8009248:	aa03      	add	r2, sp, #12
 800924a:	4621      	mov	r1, r4
 800924c:	4640      	mov	r0, r8
 800924e:	f7ff fee7 	bl	8009020 <_printf_common>
 8009252:	3001      	adds	r0, #1
 8009254:	d14a      	bne.n	80092ec <_printf_i+0x1f0>
 8009256:	f04f 30ff 	mov.w	r0, #4294967295
 800925a:	b004      	add	sp, #16
 800925c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	f043 0320 	orr.w	r3, r3, #32
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	4832      	ldr	r0, [pc, #200]	@ (8009334 <_printf_i+0x238>)
 800926a:	2778      	movs	r7, #120	@ 0x78
 800926c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	6831      	ldr	r1, [r6, #0]
 8009274:	061f      	lsls	r7, r3, #24
 8009276:	f851 5b04 	ldr.w	r5, [r1], #4
 800927a:	d402      	bmi.n	8009282 <_printf_i+0x186>
 800927c:	065f      	lsls	r7, r3, #25
 800927e:	bf48      	it	mi
 8009280:	b2ad      	uxthmi	r5, r5
 8009282:	6031      	str	r1, [r6, #0]
 8009284:	07d9      	lsls	r1, r3, #31
 8009286:	bf44      	itt	mi
 8009288:	f043 0320 	orrmi.w	r3, r3, #32
 800928c:	6023      	strmi	r3, [r4, #0]
 800928e:	b11d      	cbz	r5, 8009298 <_printf_i+0x19c>
 8009290:	2310      	movs	r3, #16
 8009292:	e7ad      	b.n	80091f0 <_printf_i+0xf4>
 8009294:	4826      	ldr	r0, [pc, #152]	@ (8009330 <_printf_i+0x234>)
 8009296:	e7e9      	b.n	800926c <_printf_i+0x170>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	f023 0320 	bic.w	r3, r3, #32
 800929e:	6023      	str	r3, [r4, #0]
 80092a0:	e7f6      	b.n	8009290 <_printf_i+0x194>
 80092a2:	4616      	mov	r6, r2
 80092a4:	e7bd      	b.n	8009222 <_printf_i+0x126>
 80092a6:	6833      	ldr	r3, [r6, #0]
 80092a8:	6825      	ldr	r5, [r4, #0]
 80092aa:	6961      	ldr	r1, [r4, #20]
 80092ac:	1d18      	adds	r0, r3, #4
 80092ae:	6030      	str	r0, [r6, #0]
 80092b0:	062e      	lsls	r6, r5, #24
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	d501      	bpl.n	80092ba <_printf_i+0x1be>
 80092b6:	6019      	str	r1, [r3, #0]
 80092b8:	e002      	b.n	80092c0 <_printf_i+0x1c4>
 80092ba:	0668      	lsls	r0, r5, #25
 80092bc:	d5fb      	bpl.n	80092b6 <_printf_i+0x1ba>
 80092be:	8019      	strh	r1, [r3, #0]
 80092c0:	2300      	movs	r3, #0
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	4616      	mov	r6, r2
 80092c6:	e7bc      	b.n	8009242 <_printf_i+0x146>
 80092c8:	6833      	ldr	r3, [r6, #0]
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	6032      	str	r2, [r6, #0]
 80092ce:	681e      	ldr	r6, [r3, #0]
 80092d0:	6862      	ldr	r2, [r4, #4]
 80092d2:	2100      	movs	r1, #0
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7f6 ff7b 	bl	80001d0 <memchr>
 80092da:	b108      	cbz	r0, 80092e0 <_printf_i+0x1e4>
 80092dc:	1b80      	subs	r0, r0, r6
 80092de:	6060      	str	r0, [r4, #4]
 80092e0:	6863      	ldr	r3, [r4, #4]
 80092e2:	6123      	str	r3, [r4, #16]
 80092e4:	2300      	movs	r3, #0
 80092e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092ea:	e7aa      	b.n	8009242 <_printf_i+0x146>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	4632      	mov	r2, r6
 80092f0:	4649      	mov	r1, r9
 80092f2:	4640      	mov	r0, r8
 80092f4:	47d0      	blx	sl
 80092f6:	3001      	adds	r0, #1
 80092f8:	d0ad      	beq.n	8009256 <_printf_i+0x15a>
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	079b      	lsls	r3, r3, #30
 80092fe:	d413      	bmi.n	8009328 <_printf_i+0x22c>
 8009300:	68e0      	ldr	r0, [r4, #12]
 8009302:	9b03      	ldr	r3, [sp, #12]
 8009304:	4298      	cmp	r0, r3
 8009306:	bfb8      	it	lt
 8009308:	4618      	movlt	r0, r3
 800930a:	e7a6      	b.n	800925a <_printf_i+0x15e>
 800930c:	2301      	movs	r3, #1
 800930e:	4632      	mov	r2, r6
 8009310:	4649      	mov	r1, r9
 8009312:	4640      	mov	r0, r8
 8009314:	47d0      	blx	sl
 8009316:	3001      	adds	r0, #1
 8009318:	d09d      	beq.n	8009256 <_printf_i+0x15a>
 800931a:	3501      	adds	r5, #1
 800931c:	68e3      	ldr	r3, [r4, #12]
 800931e:	9903      	ldr	r1, [sp, #12]
 8009320:	1a5b      	subs	r3, r3, r1
 8009322:	42ab      	cmp	r3, r5
 8009324:	dcf2      	bgt.n	800930c <_printf_i+0x210>
 8009326:	e7eb      	b.n	8009300 <_printf_i+0x204>
 8009328:	2500      	movs	r5, #0
 800932a:	f104 0619 	add.w	r6, r4, #25
 800932e:	e7f5      	b.n	800931c <_printf_i+0x220>
 8009330:	080097b1 	.word	0x080097b1
 8009334:	080097c2 	.word	0x080097c2

08009338 <__sflush_r>:
 8009338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	0716      	lsls	r6, r2, #28
 8009342:	4605      	mov	r5, r0
 8009344:	460c      	mov	r4, r1
 8009346:	d454      	bmi.n	80093f2 <__sflush_r+0xba>
 8009348:	684b      	ldr	r3, [r1, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dc02      	bgt.n	8009354 <__sflush_r+0x1c>
 800934e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009350:	2b00      	cmp	r3, #0
 8009352:	dd48      	ble.n	80093e6 <__sflush_r+0xae>
 8009354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009356:	2e00      	cmp	r6, #0
 8009358:	d045      	beq.n	80093e6 <__sflush_r+0xae>
 800935a:	2300      	movs	r3, #0
 800935c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009360:	682f      	ldr	r7, [r5, #0]
 8009362:	6a21      	ldr	r1, [r4, #32]
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	d030      	beq.n	80093ca <__sflush_r+0x92>
 8009368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	0759      	lsls	r1, r3, #29
 800936e:	d505      	bpl.n	800937c <__sflush_r+0x44>
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	1ad2      	subs	r2, r2, r3
 8009374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009376:	b10b      	cbz	r3, 800937c <__sflush_r+0x44>
 8009378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800937a:	1ad2      	subs	r2, r2, r3
 800937c:	2300      	movs	r3, #0
 800937e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009380:	6a21      	ldr	r1, [r4, #32]
 8009382:	4628      	mov	r0, r5
 8009384:	47b0      	blx	r6
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	d106      	bne.n	800939a <__sflush_r+0x62>
 800938c:	6829      	ldr	r1, [r5, #0]
 800938e:	291d      	cmp	r1, #29
 8009390:	d82b      	bhi.n	80093ea <__sflush_r+0xb2>
 8009392:	4a2a      	ldr	r2, [pc, #168]	@ (800943c <__sflush_r+0x104>)
 8009394:	40ca      	lsrs	r2, r1
 8009396:	07d6      	lsls	r6, r2, #31
 8009398:	d527      	bpl.n	80093ea <__sflush_r+0xb2>
 800939a:	2200      	movs	r2, #0
 800939c:	6062      	str	r2, [r4, #4]
 800939e:	04d9      	lsls	r1, r3, #19
 80093a0:	6922      	ldr	r2, [r4, #16]
 80093a2:	6022      	str	r2, [r4, #0]
 80093a4:	d504      	bpl.n	80093b0 <__sflush_r+0x78>
 80093a6:	1c42      	adds	r2, r0, #1
 80093a8:	d101      	bne.n	80093ae <__sflush_r+0x76>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b903      	cbnz	r3, 80093b0 <__sflush_r+0x78>
 80093ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80093b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093b2:	602f      	str	r7, [r5, #0]
 80093b4:	b1b9      	cbz	r1, 80093e6 <__sflush_r+0xae>
 80093b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093ba:	4299      	cmp	r1, r3
 80093bc:	d002      	beq.n	80093c4 <__sflush_r+0x8c>
 80093be:	4628      	mov	r0, r5
 80093c0:	f7ff fbf4 	bl	8008bac <_free_r>
 80093c4:	2300      	movs	r3, #0
 80093c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80093c8:	e00d      	b.n	80093e6 <__sflush_r+0xae>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b0      	blx	r6
 80093d0:	4602      	mov	r2, r0
 80093d2:	1c50      	adds	r0, r2, #1
 80093d4:	d1c9      	bne.n	800936a <__sflush_r+0x32>
 80093d6:	682b      	ldr	r3, [r5, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0c6      	beq.n	800936a <__sflush_r+0x32>
 80093dc:	2b1d      	cmp	r3, #29
 80093de:	d001      	beq.n	80093e4 <__sflush_r+0xac>
 80093e0:	2b16      	cmp	r3, #22
 80093e2:	d11e      	bne.n	8009422 <__sflush_r+0xea>
 80093e4:	602f      	str	r7, [r5, #0]
 80093e6:	2000      	movs	r0, #0
 80093e8:	e022      	b.n	8009430 <__sflush_r+0xf8>
 80093ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ee:	b21b      	sxth	r3, r3
 80093f0:	e01b      	b.n	800942a <__sflush_r+0xf2>
 80093f2:	690f      	ldr	r7, [r1, #16]
 80093f4:	2f00      	cmp	r7, #0
 80093f6:	d0f6      	beq.n	80093e6 <__sflush_r+0xae>
 80093f8:	0793      	lsls	r3, r2, #30
 80093fa:	680e      	ldr	r6, [r1, #0]
 80093fc:	bf08      	it	eq
 80093fe:	694b      	ldreq	r3, [r1, #20]
 8009400:	600f      	str	r7, [r1, #0]
 8009402:	bf18      	it	ne
 8009404:	2300      	movne	r3, #0
 8009406:	eba6 0807 	sub.w	r8, r6, r7
 800940a:	608b      	str	r3, [r1, #8]
 800940c:	f1b8 0f00 	cmp.w	r8, #0
 8009410:	dde9      	ble.n	80093e6 <__sflush_r+0xae>
 8009412:	6a21      	ldr	r1, [r4, #32]
 8009414:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009416:	4643      	mov	r3, r8
 8009418:	463a      	mov	r2, r7
 800941a:	4628      	mov	r0, r5
 800941c:	47b0      	blx	r6
 800941e:	2800      	cmp	r0, #0
 8009420:	dc08      	bgt.n	8009434 <__sflush_r+0xfc>
 8009422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	4407      	add	r7, r0
 8009436:	eba8 0800 	sub.w	r8, r8, r0
 800943a:	e7e7      	b.n	800940c <__sflush_r+0xd4>
 800943c:	20400001 	.word	0x20400001

08009440 <_fflush_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	690b      	ldr	r3, [r1, #16]
 8009444:	4605      	mov	r5, r0
 8009446:	460c      	mov	r4, r1
 8009448:	b913      	cbnz	r3, 8009450 <_fflush_r+0x10>
 800944a:	2500      	movs	r5, #0
 800944c:	4628      	mov	r0, r5
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	b118      	cbz	r0, 800945a <_fflush_r+0x1a>
 8009452:	6a03      	ldr	r3, [r0, #32]
 8009454:	b90b      	cbnz	r3, 800945a <_fflush_r+0x1a>
 8009456:	f7ff faa1 	bl	800899c <__sinit>
 800945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0f3      	beq.n	800944a <_fflush_r+0xa>
 8009462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009464:	07d0      	lsls	r0, r2, #31
 8009466:	d404      	bmi.n	8009472 <_fflush_r+0x32>
 8009468:	0599      	lsls	r1, r3, #22
 800946a:	d402      	bmi.n	8009472 <_fflush_r+0x32>
 800946c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800946e:	f7ff fb9a 	bl	8008ba6 <__retarget_lock_acquire_recursive>
 8009472:	4628      	mov	r0, r5
 8009474:	4621      	mov	r1, r4
 8009476:	f7ff ff5f 	bl	8009338 <__sflush_r>
 800947a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800947c:	07da      	lsls	r2, r3, #31
 800947e:	4605      	mov	r5, r0
 8009480:	d4e4      	bmi.n	800944c <_fflush_r+0xc>
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	059b      	lsls	r3, r3, #22
 8009486:	d4e1      	bmi.n	800944c <_fflush_r+0xc>
 8009488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800948a:	f7ff fb8d 	bl	8008ba8 <__retarget_lock_release_recursive>
 800948e:	e7dd      	b.n	800944c <_fflush_r+0xc>

08009490 <__swbuf_r>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	460e      	mov	r6, r1
 8009494:	4614      	mov	r4, r2
 8009496:	4605      	mov	r5, r0
 8009498:	b118      	cbz	r0, 80094a2 <__swbuf_r+0x12>
 800949a:	6a03      	ldr	r3, [r0, #32]
 800949c:	b90b      	cbnz	r3, 80094a2 <__swbuf_r+0x12>
 800949e:	f7ff fa7d 	bl	800899c <__sinit>
 80094a2:	69a3      	ldr	r3, [r4, #24]
 80094a4:	60a3      	str	r3, [r4, #8]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	071a      	lsls	r2, r3, #28
 80094aa:	d501      	bpl.n	80094b0 <__swbuf_r+0x20>
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	b943      	cbnz	r3, 80094c2 <__swbuf_r+0x32>
 80094b0:	4621      	mov	r1, r4
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 f82a 	bl	800950c <__swsetup_r>
 80094b8:	b118      	cbz	r0, 80094c2 <__swbuf_r+0x32>
 80094ba:	f04f 37ff 	mov.w	r7, #4294967295
 80094be:	4638      	mov	r0, r7
 80094c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	6922      	ldr	r2, [r4, #16]
 80094c6:	1a98      	subs	r0, r3, r2
 80094c8:	6963      	ldr	r3, [r4, #20]
 80094ca:	b2f6      	uxtb	r6, r6
 80094cc:	4283      	cmp	r3, r0
 80094ce:	4637      	mov	r7, r6
 80094d0:	dc05      	bgt.n	80094de <__swbuf_r+0x4e>
 80094d2:	4621      	mov	r1, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	f7ff ffb3 	bl	8009440 <_fflush_r>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d1ed      	bne.n	80094ba <__swbuf_r+0x2a>
 80094de:	68a3      	ldr	r3, [r4, #8]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	60a3      	str	r3, [r4, #8]
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	6022      	str	r2, [r4, #0]
 80094ea:	701e      	strb	r6, [r3, #0]
 80094ec:	6962      	ldr	r2, [r4, #20]
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d004      	beq.n	80094fe <__swbuf_r+0x6e>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	07db      	lsls	r3, r3, #31
 80094f8:	d5e1      	bpl.n	80094be <__swbuf_r+0x2e>
 80094fa:	2e0a      	cmp	r6, #10
 80094fc:	d1df      	bne.n	80094be <__swbuf_r+0x2e>
 80094fe:	4621      	mov	r1, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f7ff ff9d 	bl	8009440 <_fflush_r>
 8009506:	2800      	cmp	r0, #0
 8009508:	d0d9      	beq.n	80094be <__swbuf_r+0x2e>
 800950a:	e7d6      	b.n	80094ba <__swbuf_r+0x2a>

0800950c <__swsetup_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4b29      	ldr	r3, [pc, #164]	@ (80095b4 <__swsetup_r+0xa8>)
 8009510:	4605      	mov	r5, r0
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	460c      	mov	r4, r1
 8009516:	b118      	cbz	r0, 8009520 <__swsetup_r+0x14>
 8009518:	6a03      	ldr	r3, [r0, #32]
 800951a:	b90b      	cbnz	r3, 8009520 <__swsetup_r+0x14>
 800951c:	f7ff fa3e 	bl	800899c <__sinit>
 8009520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009524:	0719      	lsls	r1, r3, #28
 8009526:	d422      	bmi.n	800956e <__swsetup_r+0x62>
 8009528:	06da      	lsls	r2, r3, #27
 800952a:	d407      	bmi.n	800953c <__swsetup_r+0x30>
 800952c:	2209      	movs	r2, #9
 800952e:	602a      	str	r2, [r5, #0]
 8009530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	f04f 30ff 	mov.w	r0, #4294967295
 800953a:	e033      	b.n	80095a4 <__swsetup_r+0x98>
 800953c:	0758      	lsls	r0, r3, #29
 800953e:	d512      	bpl.n	8009566 <__swsetup_r+0x5a>
 8009540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009542:	b141      	cbz	r1, 8009556 <__swsetup_r+0x4a>
 8009544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009548:	4299      	cmp	r1, r3
 800954a:	d002      	beq.n	8009552 <__swsetup_r+0x46>
 800954c:	4628      	mov	r0, r5
 800954e:	f7ff fb2d 	bl	8008bac <_free_r>
 8009552:	2300      	movs	r3, #0
 8009554:	6363      	str	r3, [r4, #52]	@ 0x34
 8009556:	89a3      	ldrh	r3, [r4, #12]
 8009558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	2300      	movs	r3, #0
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	6923      	ldr	r3, [r4, #16]
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f043 0308 	orr.w	r3, r3, #8
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	6923      	ldr	r3, [r4, #16]
 8009570:	b94b      	cbnz	r3, 8009586 <__swsetup_r+0x7a>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800957c:	d003      	beq.n	8009586 <__swsetup_r+0x7a>
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f000 f84f 	bl	8009624 <__smakebuf_r>
 8009586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958a:	f013 0201 	ands.w	r2, r3, #1
 800958e:	d00a      	beq.n	80095a6 <__swsetup_r+0x9a>
 8009590:	2200      	movs	r2, #0
 8009592:	60a2      	str	r2, [r4, #8]
 8009594:	6962      	ldr	r2, [r4, #20]
 8009596:	4252      	negs	r2, r2
 8009598:	61a2      	str	r2, [r4, #24]
 800959a:	6922      	ldr	r2, [r4, #16]
 800959c:	b942      	cbnz	r2, 80095b0 <__swsetup_r+0xa4>
 800959e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095a2:	d1c5      	bne.n	8009530 <__swsetup_r+0x24>
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	0799      	lsls	r1, r3, #30
 80095a8:	bf58      	it	pl
 80095aa:	6962      	ldrpl	r2, [r4, #20]
 80095ac:	60a2      	str	r2, [r4, #8]
 80095ae:	e7f4      	b.n	800959a <__swsetup_r+0x8e>
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7f7      	b.n	80095a4 <__swsetup_r+0x98>
 80095b4:	20000108 	.word	0x20000108

080095b8 <_sbrk_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d06      	ldr	r5, [pc, #24]	@ (80095d4 <_sbrk_r+0x1c>)
 80095bc:	2300      	movs	r3, #0
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	602b      	str	r3, [r5, #0]
 80095c4:	f7f7 fd72 	bl	80010ac <_sbrk>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_sbrk_r+0x1a>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_sbrk_r+0x1a>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	20001fbc 	.word	0x20001fbc

080095d8 <__swhatbuf_r>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	460c      	mov	r4, r1
 80095dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e0:	2900      	cmp	r1, #0
 80095e2:	b096      	sub	sp, #88	@ 0x58
 80095e4:	4615      	mov	r5, r2
 80095e6:	461e      	mov	r6, r3
 80095e8:	da0d      	bge.n	8009606 <__swhatbuf_r+0x2e>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095f0:	f04f 0100 	mov.w	r1, #0
 80095f4:	bf14      	ite	ne
 80095f6:	2340      	movne	r3, #64	@ 0x40
 80095f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095fc:	2000      	movs	r0, #0
 80095fe:	6031      	str	r1, [r6, #0]
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	b016      	add	sp, #88	@ 0x58
 8009604:	bd70      	pop	{r4, r5, r6, pc}
 8009606:	466a      	mov	r2, sp
 8009608:	f000 f848 	bl	800969c <_fstat_r>
 800960c:	2800      	cmp	r0, #0
 800960e:	dbec      	blt.n	80095ea <__swhatbuf_r+0x12>
 8009610:	9901      	ldr	r1, [sp, #4]
 8009612:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009616:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800961a:	4259      	negs	r1, r3
 800961c:	4159      	adcs	r1, r3
 800961e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009622:	e7eb      	b.n	80095fc <__swhatbuf_r+0x24>

08009624 <__smakebuf_r>:
 8009624:	898b      	ldrh	r3, [r1, #12]
 8009626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009628:	079d      	lsls	r5, r3, #30
 800962a:	4606      	mov	r6, r0
 800962c:	460c      	mov	r4, r1
 800962e:	d507      	bpl.n	8009640 <__smakebuf_r+0x1c>
 8009630:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	6123      	str	r3, [r4, #16]
 8009638:	2301      	movs	r3, #1
 800963a:	6163      	str	r3, [r4, #20]
 800963c:	b003      	add	sp, #12
 800963e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009640:	ab01      	add	r3, sp, #4
 8009642:	466a      	mov	r2, sp
 8009644:	f7ff ffc8 	bl	80095d8 <__swhatbuf_r>
 8009648:	9f00      	ldr	r7, [sp, #0]
 800964a:	4605      	mov	r5, r0
 800964c:	4639      	mov	r1, r7
 800964e:	4630      	mov	r0, r6
 8009650:	f7ff fb18 	bl	8008c84 <_malloc_r>
 8009654:	b948      	cbnz	r0, 800966a <__smakebuf_r+0x46>
 8009656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965a:	059a      	lsls	r2, r3, #22
 800965c:	d4ee      	bmi.n	800963c <__smakebuf_r+0x18>
 800965e:	f023 0303 	bic.w	r3, r3, #3
 8009662:	f043 0302 	orr.w	r3, r3, #2
 8009666:	81a3      	strh	r3, [r4, #12]
 8009668:	e7e2      	b.n	8009630 <__smakebuf_r+0xc>
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	6020      	str	r0, [r4, #0]
 800966e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800967a:	b15b      	cbz	r3, 8009694 <__smakebuf_r+0x70>
 800967c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f81d 	bl	80096c0 <_isatty_r>
 8009686:	b128      	cbz	r0, 8009694 <__smakebuf_r+0x70>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	431d      	orrs	r5, r3
 8009698:	81a5      	strh	r5, [r4, #12]
 800969a:	e7cf      	b.n	800963c <__smakebuf_r+0x18>

0800969c <_fstat_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d07      	ldr	r5, [pc, #28]	@ (80096bc <_fstat_r+0x20>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	4611      	mov	r1, r2
 80096a8:	602b      	str	r3, [r5, #0]
 80096aa:	f7f7 fcd6 	bl	800105a <_fstat>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	d102      	bne.n	80096b8 <_fstat_r+0x1c>
 80096b2:	682b      	ldr	r3, [r5, #0]
 80096b4:	b103      	cbz	r3, 80096b8 <_fstat_r+0x1c>
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	20001fbc 	.word	0x20001fbc

080096c0 <_isatty_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	@ (80096dc <_isatty_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f7 fcd5 	bl	800107a <_isatty>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_isatty_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_isatty_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20001fbc 	.word	0x20001fbc

080096e0 <_init>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	bf00      	nop
 80096e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e6:	bc08      	pop	{r3}
 80096e8:	469e      	mov	lr, r3
 80096ea:	4770      	bx	lr

080096ec <_fini>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr
