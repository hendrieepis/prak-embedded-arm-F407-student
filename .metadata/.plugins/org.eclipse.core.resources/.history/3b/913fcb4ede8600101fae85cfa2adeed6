
F4Disc-p04d-SEOSObjectDetected.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009edc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800a06c  0800a06c  0000b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a168  0800a168  0000c15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a168  0800a168  0000b168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a170  0800a170  0000c15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a170  0800a170  0000b170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a174  0800a174  0000b174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800a178  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c15c  2**0
                  CONTENTS
 10 .bss          00001ebc  2000015c  2000015c  0000c15c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002018  20002018  0000c15c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c15c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3e4  00000000  00000000  0000c18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000454b  00000000  00000000  00026570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d8  00000000  00000000  0002aac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001309  00000000  00000000  0002c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026feb  00000000  00000000  0002d6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000221d1  00000000  00000000  0005468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4dd3  00000000  00000000  0007685d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b630  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e70  00000000  00000000  0014b674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  001524e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a054 	.word	0x0800a054

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800a054 	.word	0x0800a054

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <checkBoard>:
 */

#include "checkboard.h"
#include "main.h"
#include "stdio.h"
void checkBoard(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
	  HAL_Delay(1000);
 80005a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a6:	f000 fe9d 	bl	80012e4 <HAL_Delay>
	  printf("Cek BarLED, buzzer, USER LED \n\r");
 80005aa:	482c      	ldr	r0, [pc, #176]	@ (800065c <checkBoard+0xc0>)
 80005ac:	f008 fee6 	bl	800937c <iprintf>
	  HAL_Delay(900);
 80005b0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80005b4:	f000 fe96 	bl	80012e4 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 80005b8:	2300      	movs	r3, #0
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	e044      	b.n	8000648 <checkBoard+0xac>

		  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 80005be:	2140      	movs	r1, #64	@ 0x40
 80005c0:	4827      	ldr	r0, [pc, #156]	@ (8000660 <checkBoard+0xc4>)
 80005c2:	f001 f992 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 80005c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ca:	4826      	ldr	r0, [pc, #152]	@ (8000664 <checkBoard+0xc8>)
 80005cc:	f001 f98d 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 80005d0:	2110      	movs	r1, #16
 80005d2:	4823      	ldr	r0, [pc, #140]	@ (8000660 <checkBoard+0xc4>)
 80005d4:	f001 f989 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 80005d8:	2120      	movs	r1, #32
 80005da:	4821      	ldr	r0, [pc, #132]	@ (8000660 <checkBoard+0xc4>)
 80005dc:	f001 f985 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 80005e0:	2104      	movs	r1, #4
 80005e2:	481f      	ldr	r0, [pc, #124]	@ (8000660 <checkBoard+0xc4>)
 80005e4:	f001 f981 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80005e8:	2110      	movs	r1, #16
 80005ea:	481f      	ldr	r0, [pc, #124]	@ (8000668 <checkBoard+0xcc>)
 80005ec:	f001 f97d 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 80005f0:	2120      	movs	r1, #32
 80005f2:	481d      	ldr	r0, [pc, #116]	@ (8000668 <checkBoard+0xcc>)
 80005f4:	f001 f979 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 80005f8:	2180      	movs	r1, #128	@ 0x80
 80005fa:	481c      	ldr	r0, [pc, #112]	@ (800066c <checkBoard+0xd0>)
 80005fc:	f001 f975 	bl	80018ea <HAL_GPIO_TogglePin>

		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000600:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000604:	4817      	ldr	r0, [pc, #92]	@ (8000664 <checkBoard+0xc8>)
 8000606:	f001 f970 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800060a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060e:	4817      	ldr	r0, [pc, #92]	@ (800066c <checkBoard+0xd0>)
 8000610:	f001 f96b 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000614:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000618:	4814      	ldr	r0, [pc, #80]	@ (800066c <checkBoard+0xd0>)
 800061a:	f001 f966 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800061e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000622:	4812      	ldr	r0, [pc, #72]	@ (800066c <checkBoard+0xd0>)
 8000624:	f001 f961 	bl	80018ea <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800062c:	480f      	ldr	r0, [pc, #60]	@ (800066c <checkBoard+0xd0>)
 800062e:	f001 f95c 	bl	80018ea <HAL_GPIO_TogglePin>
		  printf("count: %d \n\r",cnt);
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4619      	mov	r1, r3
 8000636:	480e      	ldr	r0, [pc, #56]	@ (8000670 <checkBoard+0xd4>)
 8000638:	f008 fea0 	bl	800937c <iprintf>
		  HAL_Delay(100);
 800063c:	2064      	movs	r0, #100	@ 0x64
 800063e:	f000 fe51 	bl	80012e4 <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	3301      	adds	r3, #1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b07      	cmp	r3, #7
 800064c:	d9b7      	bls.n	80005be <checkBoard+0x22>
	  }

	  printf("Cek Button \n\r");
 800064e:	4809      	ldr	r0, [pc, #36]	@ (8000674 <checkBoard+0xd8>)
 8000650:	f008 fe94 	bl	800937c <iprintf>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	0800a06c 	.word	0x0800a06c
 8000660:	40021000 	.word	0x40021000
 8000664:	40020800 	.word	0x40020800
 8000668:	40020400 	.word	0x40020400
 800066c:	40020c00 	.word	0x40020c00
 8000670:	0800a08c 	.word	0x0800a08c
 8000674:	0800a09c 	.word	0x0800a09c

08000678 <CounterUpdate>:
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
	return count;
}
void CounterUpdate(void){
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	++count;
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <CounterUpdate+0x1c>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <CounterUpdate+0x1c>)
 8000686:	801a      	strh	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000178 	.word	0x20000178

08000698 <CounterGetValue>:

void CounterZero(void){
	count=0;
}

uint8_t CounterGetValue(void){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	return (count);
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <CounterGetValue+0x14>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20000178 	.word	0x20000178

080006b0 <_write>:
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	68b8      	ldr	r0, [r7, #8]
 80006c4:	f008 f92e 	bl	8008924 <CDC_Transmit_FS>
 80006c8:	687b      	ldr	r3, [r7, #4]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	@ 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f008 fe9f 	bl	8009426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	@ (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	@ 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	@ (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800074c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000752:	2307      	movs	r3, #7
 8000754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f942 	bl	80039e4 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 f9fd 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2105      	movs	r1, #5
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fba3 	bl	8003ed4 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000794:	f000 f9e6 	bl	8000b64 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	@ 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f001 f89b 	bl	8001920 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f9b8 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000017c 	.word	0x2000017c
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2S3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_I2S3_Init+0x54>)
 800080a:	4a14      	ldr	r2, [pc, #80]	@ (800085c <MX_I2S3_Init+0x58>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000814:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_I2S3_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000828:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_I2S3_Init+0x54>)
 800082c:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <MX_I2S3_Init+0x5c>)
 800082e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_I2S3_Init+0x54>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_I2S3_Init+0x54>)
 8000844:	f001 f9b0 	bl	8001ba8 <HAL_I2S_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800084e:	f000 f989 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001d0 	.word	0x200001d0
 800085c:	40003c00 	.word	0x40003c00
 8000860:	00017700 	.word	0x00017700

08000864 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800086a:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <MX_SPI1_Init+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008b0:	220a      	movs	r2, #10
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_SPI1_Init+0x64>)
 80008b6:	f003 fe59 	bl	800456c <HAL_SPI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008c0:	f000 f950 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000218 	.word	0x20000218
 80008cc:	40013000 	.word	0x40013000

080008d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	4b98      	ldr	r3, [pc, #608]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a97      	ldr	r2, [pc, #604]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 80008f0:	f043 0310 	orr.w	r3, r3, #16
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b95      	ldr	r3, [pc, #596]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0310 	and.w	r3, r3, #16
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	4b91      	ldr	r3, [pc, #580]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a90      	ldr	r2, [pc, #576]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b8e      	ldr	r3, [pc, #568]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b8a      	ldr	r3, [pc, #552]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a89      	ldr	r2, [pc, #548]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b87      	ldr	r3, [pc, #540]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b83      	ldr	r3, [pc, #524]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a82      	ldr	r2, [pc, #520]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b80      	ldr	r3, [pc, #512]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b7c      	ldr	r3, [pc, #496]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a7b      	ldr	r2, [pc, #492]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b79      	ldr	r3, [pc, #484]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b75      	ldr	r3, [pc, #468]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a74      	ldr	r2, [pc, #464]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b72      	ldr	r3, [pc, #456]	@ (8000b4c <MX_GPIO_Init+0x27c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 800098e:	2200      	movs	r2, #0
 8000990:	217c      	movs	r1, #124	@ 0x7c
 8000992:	486f      	ldr	r0, [pc, #444]	@ (8000b50 <MX_GPIO_Init+0x280>)
 8000994:	f000 ff90 	bl	80018b8 <HAL_GPIO_WritePin>
                          |BAR0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800099e:	486d      	ldr	r0, [pc, #436]	@ (8000b54 <MX_GPIO_Init+0x284>)
 80009a0:	f000 ff8a 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2101      	movs	r1, #1
 80009a8:	486a      	ldr	r0, [pc, #424]	@ (8000b54 <MX_GPIO_Init+0x284>)
 80009aa:	f000 ff85 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ae:	2200      	movs	r2, #0
 80009b0:	f24f 0190 	movw	r1, #61584	@ 0xf090
 80009b4:	4868      	ldr	r0, [pc, #416]	@ (8000b58 <MX_GPIO_Init+0x288>)
 80009b6:	f000 ff7f 	bl	80018b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2130      	movs	r1, #48	@ 0x30
 80009be:	4867      	ldr	r0, [pc, #412]	@ (8000b5c <MX_GPIO_Init+0x28c>)
 80009c0:	f000 ff7a 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
  GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 80009c4:	237c      	movs	r3, #124	@ 0x7c
 80009c6:	61fb      	str	r3, [r7, #28]
                          |BAR0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	485d      	ldr	r0, [pc, #372]	@ (8000b50 <MX_GPIO_Init+0x280>)
 80009dc:	f000 fdb8 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 80009e0:	f642 0301 	movw	r3, #10241	@ 0x2801
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4856      	ldr	r0, [pc, #344]	@ (8000b54 <MX_GPIO_Init+0x284>)
 80009fa:	f000 fda9 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009fe:	2308      	movs	r3, #8
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	484e      	ldr	r0, [pc, #312]	@ (8000b54 <MX_GPIO_Init+0x284>)
 8000a1a:	f000 fd99 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a22:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	484b      	ldr	r0, [pc, #300]	@ (8000b60 <MX_GPIO_Init+0x290>)
 8000a34:	f000 fd8c 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000a38:	2330      	movs	r3, #48	@ 0x30
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4842      	ldr	r0, [pc, #264]	@ (8000b54 <MX_GPIO_Init+0x284>)
 8000a4c:	f000 fd80 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000a50:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	483d      	ldr	r0, [pc, #244]	@ (8000b5c <MX_GPIO_Init+0x28c>)
 8000a66:	f000 fd73 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4837      	ldr	r0, [pc, #220]	@ (8000b5c <MX_GPIO_Init+0x28c>)
 8000a7e:	f000 fd67 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000a82:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	482e      	ldr	r0, [pc, #184]	@ (8000b50 <MX_GPIO_Init+0x280>)
 8000a98:	f000 fd5a 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4828      	ldr	r0, [pc, #160]	@ (8000b5c <MX_GPIO_Init+0x28c>)
 8000aba:	f000 fd49 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000abe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4821      	ldr	r0, [pc, #132]	@ (8000b58 <MX_GPIO_Init+0x288>)
 8000ad4:	f000 fd3c 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ad8:	f24f 0390 	movw	r3, #61584	@ 0xf090
 8000adc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|BAR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4819      	ldr	r0, [pc, #100]	@ (8000b58 <MX_GPIO_Init+0x288>)
 8000af2:	f000 fd2d 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af6:	2320      	movs	r3, #32
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0x288>)
 8000b0a:	f000 fd21 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : BAR5_Pin BAR6_Pin */
  GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000b0e:	2330      	movs	r3, #48	@ 0x30
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_GPIO_Init+0x28c>)
 8000b26:	f000 fd13 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b2e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_GPIO_Init+0x280>)
 8000b40:	f000 fd06 	bl	8001550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b44:	bf00      	nop
 8000b46:	3730      	adds	r7, #48	@ 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020c00 	.word	0x40020c00
 8000b5c:	40020400 	.word	0x40020400
 8000b60:	40020000 	.word	0x40020000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <main>:
#include "seos.h"
#include "checkboard.h"
#include "counter.h"

int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  HAL_Init();
 8000b74:	f000 fb44 	bl	8001200 <HAL_Init>
  SystemClock_Config();
 8000b78:	f7ff fdac 	bl	80006d4 <SystemClock_Config>
  MX_GPIO_Init();
 8000b7c:	f7ff fea8 	bl	80008d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b80:	f7ff fe12 	bl	80007a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b84:	f7ff fe3e 	bl	8000804 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b88:	f7ff fe6c 	bl	8000864 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000b8c:	f007 fe0c 	bl	80087a8 <MX_USB_DEVICE_Init>
  checkBoard();
 8000b90:	f7ff fd04 	bl	800059c <checkBoard>
  SCH_INIT(2); //in ms
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 f895 	bl	8000cc4 <SCH_INIT>
  SCH_START();
 8000b9a:	f000 f89f 	bl	8000cdc <SCH_START>
  while (1)
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <main+0x2e>
	...

08000ba4 <sensorDetected>:
 *      Author: hendri
 */
#include "main.h"
#include "sensor.h"

unsigned char sensorDetected(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET){
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4811      	ldr	r0, [pc, #68]	@ (8000bf8 <sensorDetected+0x54>)
 8000bb2:	f000 fe69 	bl	8001888 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d106      	bne.n	8000bca <sensorDetected+0x26>
		debounce=(debounce<<1);
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <sensorDetected+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <sensorDetected+0x58>)
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e00a      	b.n	8000be0 <sensorDetected+0x3c>
	} else {
		debounce= (debounce<<1)|1;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <sensorDetected+0x58>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <sensorDetected+0x58>)
 8000bde:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <sensorDetected+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d101      	bne.n	8000bec <sensorDetected+0x48>
		detectedFLag=1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	20000000 	.word	0x20000000

08000c00 <HAL_TIM_PeriodElapsedCallback>:
#include "seos.h"
#include "task.h"

TIM_HandleTypeDef htim2;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	if((htim->Instance)==TIM2){
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c10:	d101      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x16>
//		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //debuging LED
		Task_Run();
 8000c12:	f000 fab7 	bl	8001184 <Task_Run>
	}
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM2_Init(uint32_t periode)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c46:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42000-1; // harusnya 16 bit (0-65536)
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c4a:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8000c4e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = (periode*2)-1;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a18      	ldr	r2, [pc, #96]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c5e:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c6c:	4814      	ldr	r0, [pc, #80]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c6e:	f003 fd06 	bl	800467e <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x5c>
	{
		Error_Handler();
 8000c78:	f7ff ff74 	bl	8000b64 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c80:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000c8a:	f003 febf 	bl	8004a0c <HAL_TIM_ConfigClockSource>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8000c94:	f7ff ff66 	bl	8000b64 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <MX_TIM2_Init+0xa0>)
 8000ca8:	f004 f8da 	bl	8004e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000cb2:	f7ff ff57 	bl	8000b64 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000270 	.word	0x20000270

08000cc4 <SCH_INIT>:


void SCH_INIT(uint32_t periode){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	/* Scheduler in ms */
	MX_TIM2_Init(periode);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ffa7 	bl	8000c20 <MX_TIM2_Init>

	/* USER CODE END 2 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <SCH_START>:

void SCH_START(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <SCH_START+0x14>)
 8000ce2:	f003 fd1b 	bl	800471c <HAL_TIM_Base_Start_IT>
	Task_Init();
 8000ce6:	f000 fa41 	bl	800116c <Task_Init>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000270 	.word	0x20000270

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f000 fbca 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a17      	ldr	r2, [pc, #92]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d82:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <HAL_I2C_MspInit+0x8c>)
 8000da0:	f000 fbd6 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000dae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_I2C_MspInit+0x88>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	@ 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	@ 0x38
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a31      	ldr	r2, [pc, #196]	@ (8000ec4 <HAL_I2S_MspInit+0xf0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d15a      	bne.n	8000eba <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e08:	23c0      	movs	r3, #192	@ 0xc0
 8000e0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fa69 	bl	80042ec <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e20:	f7ff fea0 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	4a26      	ldr	r2, [pc, #152]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e34:	4b24      	ldr	r3, [pc, #144]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <HAL_I2S_MspInit+0xf4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e88:	2306      	movs	r3, #6
 8000e8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <HAL_I2S_MspInit+0xf8>)
 8000e94:	f000 fb5c 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e98:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <HAL_I2S_MspInit+0xfc>)
 8000eb6:	f000 fb4b 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3738      	adds	r7, #56	@ 0x38
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40003c00 	.word	0x40003c00
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <HAL_SPI_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_SPI_MspInit+0x88>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f2e:	23e0      	movs	r3, #224	@ 0xe0
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <HAL_SPI_MspInit+0x8c>)
 8000f4a:	f000 fb01 	bl	8001550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	@ 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40013000 	.word	0x40013000
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000

08000f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f74:	d115      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_TIM_Base_MspInit+0x48>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <HAL_TIM_Base_MspInit+0x48>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_TIM_Base_MspInit+0x48>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201c      	movs	r0, #28
 8000f98:	f000 faa3 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f000 fabc 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f94d 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f003 fbf1 	bl	80047fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000270 	.word	0x20000270

08001024 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <OTG_FS_IRQHandler+0x10>)
 800102a:	f001 fbad 	bl	8002788 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200017a0 	.word	0x200017a0

08001038 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e00a      	b.n	8001060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104a:	f3af 8000 	nop.w
 800104e:	4601      	mov	r1, r0
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf0      	blt.n	800104a <_read+0x12>
  }

  return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800109a:	605a      	str	r2, [r3, #4]
  return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_isatty>:

int _isatty(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f008 f9da 	bl	80094c4 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	200002b8 	.word	0x200002b8
 8001144:	20002018 	.word	0x20002018

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Task_Init>:
#include "task.h"
#include "main.h"
#include "stdio.h"


void Task_Init(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  HAL_Delay(1);  //fix bug not display
 8001170:	2001      	movs	r0, #1
 8001172:	f000 f8b7 	bl	80012e4 <HAL_Delay>
  printf("Task init ..... Started \n\r");
 8001176:	4802      	ldr	r0, [pc, #8]	@ (8001180 <Task_Init+0x14>)
 8001178:	f008 f900 	bl	800937c <iprintf>

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800a0ac 	.word	0x0800a0ac

08001184 <Task_Run>:

void Task_Run(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	if(sensorDetected())
 8001188:	f7ff fd0c 	bl	8000ba4 <sensorDetected>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <Task_Run+0x20>
	{
//		printf("1-OK \n\r");
		CounterUpdate();
 8001192:	f7ff fa71 	bl	8000678 <CounterUpdate>
		printf ("count:%d \n\r",CounterGetValue());
 8001196:	f7ff fa7f 	bl	8000698 <CounterGetValue>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <Task_Run+0x24>)
 80011a0:	f008 f8ec 	bl	800937c <iprintf>
	}
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0800a0c8 	.word	0x0800a0c8

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b2:	490e      	ldr	r1, [pc, #56]	@ (80011ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b4:	4a0e      	ldr	r2, [pc, #56]	@ (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c8:	4c0b      	ldr	r4, [pc, #44]	@ (80011f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d6:	f7ff ffb7 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f008 f979 	bl	80094d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fcc7 	bl	8000b70 <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80011f0:	0800a178 	.word	0x0800a178
  ldr r2, =_sbss
 80011f4:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80011f8:	20002018 	.word	0x20002018

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <HAL_Init+0x40>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_Init+0x40>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800121a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <HAL_Init+0x40>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f94f 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff fd5e 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f967 	bl	8001536 <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f92f 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000004 	.word	0x20000004
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	200002bc 	.word	0x200002bc

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200002bc 	.word	0x200002bc

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000000c 	.word	0x2000000c

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	@ (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	@ (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	@ (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	@ 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	@ 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff29 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff3e 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff31 	bl	8001390 <__NVIC_EnableIRQ>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffa2 	bl	8001488 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	@ 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	e16b      	b.n	8001844 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	f040 815a 	bne.w	800183e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b01      	cmp	r3, #1
 8001594:	d005      	beq.n	80015a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d130      	bne.n	8001604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 0201 	and.w	r2, r3, #1
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b03      	cmp	r3, #3
 800160e:	d017      	beq.n	8001640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d123      	bne.n	8001694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	08da      	lsrs	r2, r3, #3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3208      	adds	r2, #8
 8001654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	220f      	movs	r2, #15
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3208      	adds	r2, #8
 800168e:	69b9      	ldr	r1, [r7, #24]
 8001690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	2203      	movs	r2, #3
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80b4 	beq.w	800183e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b60      	ldr	r3, [pc, #384]	@ (800185c <HAL_GPIO_Init+0x30c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	4a5f      	ldr	r2, [pc, #380]	@ (800185c <HAL_GPIO_Init+0x30c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e6:	4b5d      	ldr	r3, [pc, #372]	@ (800185c <HAL_GPIO_Init+0x30c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001860 <HAL_GPIO_Init+0x310>)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a52      	ldr	r2, [pc, #328]	@ (8001864 <HAL_GPIO_Init+0x314>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d02b      	beq.n	8001776 <HAL_GPIO_Init+0x226>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a51      	ldr	r2, [pc, #324]	@ (8001868 <HAL_GPIO_Init+0x318>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d025      	beq.n	8001772 <HAL_GPIO_Init+0x222>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a50      	ldr	r2, [pc, #320]	@ (800186c <HAL_GPIO_Init+0x31c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d01f      	beq.n	800176e <HAL_GPIO_Init+0x21e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4f      	ldr	r2, [pc, #316]	@ (8001870 <HAL_GPIO_Init+0x320>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x21a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4e      	ldr	r2, [pc, #312]	@ (8001874 <HAL_GPIO_Init+0x324>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x216>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4d      	ldr	r2, [pc, #308]	@ (8001878 <HAL_GPIO_Init+0x328>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x212>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4c      	ldr	r2, [pc, #304]	@ (800187c <HAL_GPIO_Init+0x32c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4b      	ldr	r2, [pc, #300]	@ (8001880 <HAL_GPIO_Init+0x330>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x20a>
 8001756:	2307      	movs	r3, #7
 8001758:	e00e      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800175a:	2308      	movs	r3, #8
 800175c:	e00c      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800175e:	2306      	movs	r3, #6
 8001760:	e00a      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001762:	2305      	movs	r3, #5
 8001764:	e008      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001766:	2304      	movs	r3, #4
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800176a:	2303      	movs	r3, #3
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x228>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x228>
 8001776:	2300      	movs	r3, #0
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001788:	4935      	ldr	r1, [pc, #212]	@ (8001860 <HAL_GPIO_Init+0x310>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <HAL_GPIO_Init+0x334>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a32      	ldr	r2, [pc, #200]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a27      	ldr	r2, [pc, #156]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <HAL_GPIO_Init+0x334>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180e:	4a1d      	ldr	r2, [pc, #116]	@ (8001884 <HAL_GPIO_Init+0x334>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001814:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <HAL_GPIO_Init+0x334>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001838:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <HAL_GPIO_Init+0x334>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	f67f ae90 	bls.w	800156c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40021400 	.word	0x40021400
 800187c:	40021800 	.word	0x40021800
 8001880:	40021c00 	.word	0x40021c00
 8001884:	40013c00 	.word	0x40013c00

08001888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d4:	e003      	b.n	80018de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d6:	887b      	ldrh	r3, [r7, #2]
 80018d8:	041a      	lsls	r2, r3, #16
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018fc:	887a      	ldrh	r2, [r7, #2]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4013      	ands	r3, r2
 8001902:	041a      	lsls	r2, r3, #16
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43d9      	mvns	r1, r3
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	400b      	ands	r3, r1
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e12b      	b.n	8001b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff f9fc 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2224      	movs	r2, #36	@ 0x24
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001984:	f002 fc9e 	bl	80042c4 <HAL_RCC_GetPCLK1Freq>
 8001988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4a81      	ldr	r2, [pc, #516]	@ (8001b94 <HAL_I2C_Init+0x274>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d807      	bhi.n	80019a4 <HAL_I2C_Init+0x84>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4a80      	ldr	r2, [pc, #512]	@ (8001b98 <HAL_I2C_Init+0x278>)
 8001998:	4293      	cmp	r3, r2
 800199a:	bf94      	ite	ls
 800199c:	2301      	movls	r3, #1
 800199e:	2300      	movhi	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e006      	b.n	80019b2 <HAL_I2C_Init+0x92>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a7d      	ldr	r2, [pc, #500]	@ (8001b9c <HAL_I2C_Init+0x27c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	bf94      	ite	ls
 80019ac:	2301      	movls	r3, #1
 80019ae:	2300      	movhi	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0e7      	b.n	8001b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a78      	ldr	r2, [pc, #480]	@ (8001ba0 <HAL_I2C_Init+0x280>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9b      	lsrs	r3, r3, #18
 80019c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b94 <HAL_I2C_Init+0x274>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d802      	bhi.n	80019f4 <HAL_I2C_Init+0xd4>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	e009      	b.n	8001a08 <HAL_I2C_Init+0xe8>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a69      	ldr	r2, [pc, #420]	@ (8001ba4 <HAL_I2C_Init+0x284>)
 8001a00:	fba2 2303 	umull	r2, r3, r2, r3
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	3301      	adds	r3, #1
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	495c      	ldr	r1, [pc, #368]	@ (8001b94 <HAL_I2C_Init+0x274>)
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d819      	bhi.n	8001a5c <HAL_I2C_Init+0x13c>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1e59      	subs	r1, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a36:	1c59      	adds	r1, r3, #1
 8001a38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00a      	beq.n	8001a58 <HAL_I2C_Init+0x138>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1e59      	subs	r1, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a56:	e051      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001a58:	2304      	movs	r3, #4
 8001a5a:	e04f      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <HAL_I2C_Init+0x168>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1e58      	subs	r0, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e012      	b.n	8001aae <HAL_I2C_Init+0x18e>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1e58      	subs	r0, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	0099      	lsls	r1, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Init+0x196>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e022      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10e      	bne.n	8001adc <HAL_I2C_Init+0x1bc>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1e58      	subs	r0, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	440b      	add	r3, r1
 8001acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ada:	e00f      	b.n	8001afc <HAL_I2C_Init+0x1dc>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1e58      	subs	r0, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	0099      	lsls	r1, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6809      	ldr	r1, [r1, #0]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6911      	ldr	r1, [r2, #16]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68d2      	ldr	r2, [r2, #12]
 8001b36:	4311      	orrs	r1, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	000186a0 	.word	0x000186a0
 8001b98:	001e847f 	.word	0x001e847f
 8001b9c:	003d08ff 	.word	0x003d08ff
 8001ba0:	431bde83 	.word	0x431bde83
 8001ba4:	10624dd3 	.word	0x10624dd3

08001ba8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e128      	b.n	8001e0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a90      	ldr	r2, [pc, #576]	@ (8001e14 <HAL_I2S_Init+0x26c>)
 8001bd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff f8fd 	bl	8000dd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001bf0:	f023 030f 	bic.w	r3, r3, #15
 8001bf4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d060      	beq.n	8001cc8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c0e:	2310      	movs	r3, #16
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e001      	b.n	8001c18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	d802      	bhi.n	8001c26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f002 fc42 	bl	80044b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c36:	d125      	bne.n	8001c84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	3305      	adds	r3, #5
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	e01f      	b.n	8001ca2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	3305      	adds	r3, #5
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	e00e      	b.n	8001ca2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	461a      	mov	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	3305      	adds	r3, #5
 8001ca0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4a5c      	ldr	r2, [pc, #368]	@ (8001e18 <HAL_I2S_Init+0x270>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	08db      	lsrs	r3, r3, #3
 8001cac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	085b      	lsrs	r3, r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	e003      	b.n	8001cd0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d902      	bls.n	8001cdc <HAL_I2S_Init+0x134>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2bff      	cmp	r3, #255	@ 0xff
 8001cda:	d907      	bls.n	8001cec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce0:	f043 0210 	orr.w	r2, r3, #16
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e08f      	b.n	8001e0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	ea42 0103 	orr.w	r1, r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d0a:	f023 030f 	bic.w	r3, r3, #15
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6851      	ldr	r1, [r2, #4]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6892      	ldr	r2, [r2, #8]
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68d2      	ldr	r2, [r2, #12]
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6992      	ldr	r2, [r2, #24]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d161      	bne.n	8001dfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a38      	ldr	r2, [pc, #224]	@ (8001e1c <HAL_I2S_Init+0x274>)
 8001d3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a37      	ldr	r2, [pc, #220]	@ (8001e20 <HAL_I2S_Init+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_I2S_Init+0x1a4>
 8001d48:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <HAL_I2S_Init+0x27c>)
 8001d4a:	e001      	b.n	8001d50 <HAL_I2S_Init+0x1a8>
 8001d4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	4932      	ldr	r1, [pc, #200]	@ (8001e20 <HAL_I2S_Init+0x278>)
 8001d58:	428a      	cmp	r2, r1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2S_Init+0x1b8>
 8001d5c:	4a31      	ldr	r2, [pc, #196]	@ (8001e24 <HAL_I2S_Init+0x27c>)
 8001d5e:	e001      	b.n	8001d64 <HAL_I2S_Init+0x1bc>
 8001d60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001d64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d68:	f023 030f 	bic.w	r3, r3, #15
 8001d6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2b      	ldr	r2, [pc, #172]	@ (8001e20 <HAL_I2S_Init+0x278>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <HAL_I2S_Init+0x1d4>
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <HAL_I2S_Init+0x27c>)
 8001d7a:	e001      	b.n	8001d80 <HAL_I2S_Init+0x1d8>
 8001d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d80:	2202      	movs	r2, #2
 8001d82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a25      	ldr	r2, [pc, #148]	@ (8001e20 <HAL_I2S_Init+0x278>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2S_Init+0x1ea>
 8001d8e:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <HAL_I2S_Init+0x27c>)
 8001d90:	e001      	b.n	8001d96 <HAL_I2S_Init+0x1ee>
 8001d92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001da2:	d003      	beq.n	8001dac <HAL_I2S_Init+0x204>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e001      	b.n	8001db8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001de4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <HAL_I2S_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d101      	bne.n	8001df4 <HAL_I2S_Init+0x24c>
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <HAL_I2S_Init+0x27c>)
 8001df2:	e001      	b.n	8001df8 <HAL_I2S_Init+0x250>
 8001df4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001df8:	897a      	ldrh	r2, [r7, #10]
 8001dfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	08001f1f 	.word	0x08001f1f
 8001e18:	cccccccd 	.word	0xcccccccd
 8001e1c:	08002035 	.word	0x08002035
 8001e20:	40003800 	.word	0x40003800
 8001e24:	40003400 	.word	0x40003400

08001e28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e70:	881a      	ldrh	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	1c9a      	adds	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10e      	bne.n	8001eb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ea8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffb8 	bl	8001e28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	1c9a      	adds	r2, r3, #2
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10e      	bne.n	8001f16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff93 	bl	8001e3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d13a      	bne.n	8001fb0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d109      	bne.n	8001f58 <I2S_IRQHandler+0x3a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4e:	2b40      	cmp	r3, #64	@ 0x40
 8001f50:	d102      	bne.n	8001f58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffb4 	bl	8001ec0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5e:	2b40      	cmp	r3, #64	@ 0x40
 8001f60:	d126      	bne.n	8001fb0 <I2S_IRQHandler+0x92>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d11f      	bne.n	8001fb0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f043 0202 	orr.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff50 	bl	8001e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d136      	bne.n	800202a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d109      	bne.n	8001fda <I2S_IRQHandler+0xbc>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd0:	2b80      	cmp	r3, #128	@ 0x80
 8001fd2:	d102      	bne.n	8001fda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff45 	bl	8001e64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d122      	bne.n	800202a <I2S_IRQHandler+0x10c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d11b      	bne.n	800202a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002000:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	f043 0204 	orr.w	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff13 	bl	8001e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a92      	ldr	r2, [pc, #584]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800204e:	4b92      	ldr	r3, [pc, #584]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002050:	e001      	b.n	8002056 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002052:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a8b      	ldr	r2, [pc, #556]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d101      	bne.n	8002070 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800206c:	4b8a      	ldr	r3, [pc, #552]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800206e:	e001      	b.n	8002074 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002070:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002080:	d004      	beq.n	800208c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 8099 	bne.w	80021be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f925 	bl	80022f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f9c8 	bl	8002450 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c6:	2b40      	cmp	r3, #64	@ 0x40
 80020c8:	d13a      	bne.n	8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d035      	beq.n	8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80020de:	4b6e      	ldr	r3, [pc, #440]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020e0:	e001      	b.n	80020e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80020e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4969      	ldr	r1, [pc, #420]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ee:	428b      	cmp	r3, r1
 80020f0:	d101      	bne.n	80020f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80020f2:	4b69      	ldr	r3, [pc, #420]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020f4:	e001      	b.n	80020fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80020f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800210e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f043 0202 	orr.w	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fe88 	bl	8001e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	f040 80c3 	bne.w	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80bd 	beq.w	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002166:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a49      	ldr	r2, [pc, #292]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002172:	4b49      	ldr	r3, [pc, #292]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002174:	e001      	b.n	800217a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002176:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4944      	ldr	r1, [pc, #272]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002182:	428b      	cmp	r3, r1
 8002184:	d101      	bne.n	800218a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002186:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002188:	e001      	b.n	800218e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800218a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800218e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002192:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f043 0204 	orr.w	r2, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fe4a 	bl	8001e50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021bc:	e089      	b.n	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d107      	bne.n	80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f8be 	bl	8002354 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f8fd 	bl	80023ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f8:	2b40      	cmp	r3, #64	@ 0x40
 80021fa:	d12f      	bne.n	800225c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02a      	beq.n	800225c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002214:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1e      	ldr	r2, [pc, #120]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d101      	bne.n	8002224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002220:	4b1d      	ldr	r3, [pc, #116]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002222:	e001      	b.n	8002228 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002224:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4919      	ldr	r1, [pc, #100]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002230:	428b      	cmp	r3, r1
 8002232:	d101      	bne.n	8002238 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002236:	e001      	b.n	800223c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800223c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002240:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f043 0202 	orr.w	r2, r3, #2
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fdfa 	bl	8001e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b08      	cmp	r3, #8
 8002264:	d136      	bne.n	80022d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d031      	beq.n	80022d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800227c:	e001      	b.n	8002282 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800227e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4902      	ldr	r1, [pc, #8]	@ (8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800228a:	428b      	cmp	r3, r1
 800228c:	d106      	bne.n	800229c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800228e:	4b02      	ldr	r3, [pc, #8]	@ (8002298 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002290:	e006      	b.n	80022a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002292:	bf00      	nop
 8002294:	40003800 	.word	0x40003800
 8002298:	40003400 	.word	0x40003400
 800229c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f043 0204 	orr.w	r2, r3, #4
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fdc0 	bl	8001e50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022d0:	e000      	b.n	80022d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022d2:	bf00      	nop
}
 80022d4:	bf00      	nop
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	1c99      	adds	r1, r3, #2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6251      	str	r1, [r2, #36]	@ 0x24
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002330:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ffc9 	bl	80022dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	1c99      	adds	r1, r3, #2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6251      	str	r1, [r2, #36]	@ 0x24
 8002366:	8819      	ldrh	r1, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <I2SEx_TxISR_I2SExt+0x90>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <I2SEx_TxISR_I2SExt+0x22>
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <I2SEx_TxISR_I2SExt+0x94>)
 8002374:	e001      	b.n	800237a <I2SEx_TxISR_I2SExt+0x26>
 8002376:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800237a:	460a      	mov	r2, r1
 800237c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d121      	bne.n	80023da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <I2SEx_TxISR_I2SExt+0x90>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d101      	bne.n	80023a4 <I2SEx_TxISR_I2SExt+0x50>
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <I2SEx_TxISR_I2SExt+0x94>)
 80023a2:	e001      	b.n	80023a8 <I2SEx_TxISR_I2SExt+0x54>
 80023a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	490d      	ldr	r1, [pc, #52]	@ (80023e4 <I2SEx_TxISR_I2SExt+0x90>)
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d101      	bne.n	80023b8 <I2SEx_TxISR_I2SExt+0x64>
 80023b4:	4b0c      	ldr	r3, [pc, #48]	@ (80023e8 <I2SEx_TxISR_I2SExt+0x94>)
 80023b6:	e001      	b.n	80023bc <I2SEx_TxISR_I2SExt+0x68>
 80023b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80023c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d106      	bne.n	80023da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff81 	bl	80022dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40003800 	.word	0x40003800
 80023e8:	40003400 	.word	0x40003400

080023ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68d8      	ldr	r0, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	1c99      	adds	r1, r3, #2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002404:	b282      	uxth	r2, r0
 8002406:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d113      	bne.n	8002448 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800242e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff4a 	bl	80022dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a20      	ldr	r2, [pc, #128]	@ (80024e0 <I2SEx_RxISR_I2SExt+0x90>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <I2SEx_RxISR_I2SExt+0x16>
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <I2SEx_RxISR_I2SExt+0x94>)
 8002464:	e001      	b.n	800246a <I2SEx_RxISR_I2SExt+0x1a>
 8002466:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800246a:	68d8      	ldr	r0, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	1c99      	adds	r1, r3, #2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002476:	b282      	uxth	r2, r0
 8002478:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d121      	bne.n	80024d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <I2SEx_RxISR_I2SExt+0x90>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <I2SEx_RxISR_I2SExt+0x50>
 800249c:	4b11      	ldr	r3, [pc, #68]	@ (80024e4 <I2SEx_RxISR_I2SExt+0x94>)
 800249e:	e001      	b.n	80024a4 <I2SEx_RxISR_I2SExt+0x54>
 80024a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <I2SEx_RxISR_I2SExt+0x90>)
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d101      	bne.n	80024b4 <I2SEx_RxISR_I2SExt+0x64>
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <I2SEx_RxISR_I2SExt+0x94>)
 80024b2:	e001      	b.n	80024b8 <I2SEx_RxISR_I2SExt+0x68>
 80024b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff03 	bl	80022dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40003800 	.word	0x40003800
 80024e4:	40003400 	.word	0x40003400

080024e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ea:	b08f      	sub	sp, #60	@ 0x3c
 80024ec:	af0a      	add	r7, sp, #40	@ 0x28
 80024ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e10f      	b.n	800271a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f006 fb4d 	bl	8008bb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fe36 	bl	80051aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	687e      	ldr	r6, [r7, #4]
 8002546:	466d      	mov	r5, sp
 8002548:	f106 0410 	add.w	r4, r6, #16
 800254c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002554:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002558:	e885 0003 	stmia.w	r5, {r0, r1}
 800255c:	1d33      	adds	r3, r6, #4
 800255e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002560:	6838      	ldr	r0, [r7, #0]
 8002562:	f002 fd0d 	bl	8004f80 <USB_CoreInit>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0d0      	b.n	800271a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f002 fe24 	bl	80051cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e04a      	b.n	8002620 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	333d      	adds	r3, #61	@ 0x3d
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	333c      	adds	r3, #60	@ 0x3c
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	b298      	uxth	r0, r3
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3344      	adds	r3, #68	@ 0x44
 80025c6:	4602      	mov	r2, r0
 80025c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3340      	adds	r3, #64	@ 0x40
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3348      	adds	r3, #72	@ 0x48
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	334c      	adds	r3, #76	@ 0x4c
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	3354      	adds	r3, #84	@ 0x54
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	3301      	adds	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	429a      	cmp	r2, r3
 8002628:	d3af      	bcc.n	800258a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e044      	b.n	80026ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	3301      	adds	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d3b5      	bcc.n	8002630 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	687e      	ldr	r6, [r7, #4]
 80026cc:	466d      	mov	r5, sp
 80026ce:	f106 0410 	add.w	r4, r6, #16
 80026d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026de:	e885 0003 	stmia.w	r5, {r0, r1}
 80026e2:	1d33      	adds	r3, r6, #4
 80026e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026e6:	6838      	ldr	r0, [r7, #0]
 80026e8:	f002 fdbc 	bl	8005264 <USB_DevInit>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00d      	b.n	800271a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 ff0b 	bl	800652e <USB_DevDisconnect>

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002722 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_PCD_Start+0x1c>
 800273a:	2302      	movs	r3, #2
 800273c:	e020      	b.n	8002780 <HAL_PCD_Start+0x5e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	2b01      	cmp	r3, #1
 800274c:	d109      	bne.n	8002762 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002752:	2b01      	cmp	r3, #1
 8002754:	d005      	beq.n	8002762 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fd0e 	bl	8005188 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 febb 	bl	80064ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b08d      	sub	sp, #52	@ 0x34
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 ff79 	bl	8006696 <USB_GetMode>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 848a 	bne.w	80030c0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 fedd 	bl	8006570 <USB_ReadInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8480 	beq.w	80030be <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 feca 	bl	8006570 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f002 0202 	and.w	r2, r2, #2
 80027f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 feb8 	bl	8006570 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b10      	cmp	r3, #16
 8002808:	d161      	bne.n	80028ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0210 	bic.w	r2, r2, #16
 8002818:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	3304      	adds	r3, #4
 8002838:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002844:	d124      	bne.n	8002890 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d035      	beq.n	80028be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800285c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	6a38      	ldr	r0, [r7, #32]
 8002866:	f003 fcef 	bl	8006248 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002876:	441a      	add	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002888:	441a      	add	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	621a      	str	r2, [r3, #32]
 800288e:	e016      	b.n	80028be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002896:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800289a:	d110      	bne.n	80028be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80028a2:	2208      	movs	r2, #8
 80028a4:	4619      	mov	r1, r3
 80028a6:	6a38      	ldr	r0, [r7, #32]
 80028a8:	f003 fcce 	bl	8006248 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	6a1a      	ldr	r2, [r3, #32]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b8:	441a      	add	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0210 	orr.w	r2, r2, #16
 80028cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 fe4c 	bl	8006570 <USB_ReadInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028e2:	f040 80a7 	bne.w	8002a34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f003 fe51 	bl	8006596 <USB_ReadDevAllOutEpInterrupt>
 80028f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028f6:	e099      	b.n	8002a2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 808e 	beq.w	8002a20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fe75 	bl	80065fe <USB_ReadDevOutEPInterrupt>
 8002914:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	2301      	movs	r3, #1
 8002930:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fec3 	bl	80036c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	2308      	movs	r3, #8
 8002954:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002956:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 ff99 	bl	8003890 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002974:	461a      	mov	r2, r3
 8002976:	2310      	movs	r3, #16
 8002978:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d030      	beq.n	80029e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298c:	2b80      	cmp	r3, #128	@ 0x80
 800298e:	d109      	bne.n	80029a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800299e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	3304      	adds	r3, #4
 80029b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	78db      	ldrb	r3, [r3, #3]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d108      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f006 fa04 	bl	8008ddc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029e0:	461a      	mov	r2, r3
 80029e2:	2302      	movs	r3, #2
 80029e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	2320      	movs	r3, #32
 8002a00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	3301      	adds	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f af62 	bne.w	80028f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fd99 	bl	8006570 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a48:	f040 80db 	bne.w	8002c02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f003 fdba 	bl	80065ca <USB_ReadDevAllInEpInterrupt>
 8002a56:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a5c:	e0cd      	b.n	8002bfa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80c2 	beq.w	8002bee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f003 fde0 	bl	800663a <USB_ReadDevInEPInterrupt>
 8002a7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d057      	beq.n	8002b36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69f9      	ldr	r1, [r7, #28]
 8002aa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2301      	movs	r3, #1
 8002aba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d132      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334c      	adds	r3, #76	@ 0x4c
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4403      	add	r3, r0
 8002ae4:	3348      	adds	r3, #72	@ 0x48
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4419      	add	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4403      	add	r3, r0
 8002af8:	334c      	adds	r3, #76	@ 0x4c
 8002afa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d113      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x3a2>
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3354      	adds	r3, #84	@ 0x54
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d108      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002b22:	461a      	mov	r2, r3
 8002b24:	2101      	movs	r1, #1
 8002b26:	f003 fde7 	bl	80066f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f006 f8ce 	bl	8008cd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2308      	movs	r3, #8
 8002b50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b84:	461a      	mov	r2, r3
 8002b86:	2340      	movs	r3, #64	@ 0x40
 8002b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d023      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b96:	6a38      	ldr	r0, [r7, #32]
 8002b98:	f002 fcc8 	bl	800552c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	3338      	adds	r3, #56	@ 0x38
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	78db      	ldrb	r3, [r3, #3]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f006 f91b 	bl	8008e00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2302      	movs	r3, #2
 8002bda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002be6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fcdb 	bl	80035a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f af2e 	bne.w	8002a5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 fcb2 	bl	8006570 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c16:	d122      	bne.n	8002c5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d108      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c3e:	2100      	movs	r1, #0
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fec3 	bl	80039cc <HAL_PCDEx_LPM_Callback>
 8002c46:	e002      	b.n	8002c4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f006 f8b9 	bl	8008dc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fc84 	bl	8006570 <USB_ReadInterrupts>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c72:	d112      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f006 f875 	bl	8008d74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c98:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fc66 	bl	8006570 <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cae:	f040 80b7 	bne.w	8002e20 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2110      	movs	r1, #16
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 fc2d 	bl	800552c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cd6:	e046      	b.n	8002d66 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfc:	0151      	lsls	r1, r2, #5
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	440a      	add	r2, r1
 8002d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d18:	461a      	mov	r2, r3
 8002d1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d30:	0151      	lsls	r1, r2, #5
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	440a      	add	r2, r1
 8002d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d50:	0151      	lsls	r1, r2, #5
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	440a      	add	r2, r1
 8002d56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d62:	3301      	adds	r3, #1
 8002d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3b3      	bcc.n	8002cd8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d7e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d016      	beq.n	8002dba <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9c:	f043 030b 	orr.w	r3, r3, #11
 8002da0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db2:	f043 030b 	orr.w	r3, r3, #11
 8002db6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002db8:	e015      	b.n	8002de6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dcc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002dd0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de0:	f043 030b 	orr.w	r3, r3, #11
 8002de4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002df8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f003 fc74 	bl	80066f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fba3 	bl	8006570 <USB_ReadInterrupts>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e34:	d124      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fc39 	bl	80066b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fbee 	bl	8005626 <USB_GetDevSpeed>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681c      	ldr	r4, [r3, #0]
 8002e56:	f001 fa29 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 8002e5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	4620      	mov	r0, r4
 8002e66:	f002 f8ed 	bl	8005044 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f005 ff59 	bl	8008d22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fb73 	bl	8006570 <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d10a      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f005 ff36 	bl	8008d06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f002 0208 	and.w	r2, r2, #8
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fb5e 	bl	8006570 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eba:	2b80      	cmp	r3, #128	@ 0x80
 8002ebc:	d122      	bne.n	8002f04 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eca:	2301      	movs	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ece:	e014      	b.n	8002efa <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fb27 	bl	8003542 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d3e5      	bcc.n	8002ed0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fb31 	bl	8006570 <USB_ReadInterrupts>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f18:	d13b      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1e:	e02b      	b.n	8002f78 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3340      	adds	r3, #64	@ 0x40
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d115      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da12      	bge.n	8002f72 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	333f      	adds	r3, #63	@ 0x3f
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fae8 	bl	8003542 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	3301      	adds	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3ce      	bcc.n	8002f20 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 faea 	bl	8006570 <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fa6:	d155      	bne.n	8003054 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa8:	2301      	movs	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fac:	e045      	b.n	800303a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d12e      	bne.n	8003034 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fd6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da2b      	bge.n	8003034 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002fe8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d121      	bne.n	8003034 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003030:	6053      	str	r3, [r2, #4]
            break;
 8003032:	e007      	b.n	8003044 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	3301      	adds	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003040:	429a      	cmp	r2, r3
 8003042:	d3b4      	bcc.n	8002fae <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f003 fa89 	bl	8006570 <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003068:	d10a      	bne.n	8003080 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f005 feda 	bl	8008e24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800307e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f003 fa73 	bl	8006570 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d115      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f005 feca 	bl	8008e40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	e000      	b.n	80030c0 <HAL_PCD_IRQHandler+0x938>
      return;
 80030be:	bf00      	nop
    }
  }
}
 80030c0:	3734      	adds	r7, #52	@ 0x34
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}

080030c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_PCD_SetAddress+0x1a>
 80030dc:	2302      	movs	r3, #2
 80030de:	e013      	b.n	8003108 <HAL_PCD_SetAddress+0x42>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 f9d1 	bl	80064a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	70fb      	strb	r3, [r7, #3]
 8003122:	460b      	mov	r3, r1
 8003124:	803b      	strh	r3, [r7, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800312e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003132:	2b00      	cmp	r3, #0
 8003134:	da0f      	bge.n	8003156 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 020f 	and.w	r2, r3, #15
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	3338      	adds	r3, #56	@ 0x38
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	705a      	strb	r2, [r3, #1]
 8003154:	e00f      	b.n	8003176 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003182:	883a      	ldrh	r2, [r7, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	78ba      	ldrb	r2, [r7, #2]
 800318c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031a0:	78bb      	ldrb	r3, [r7, #2]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d102      	bne.n	80031ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_PCD_EP_Open+0xaa>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e00e      	b.n	80031d8 <HAL_PCD_EP_Open+0xc8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f002 fa51 	bl	8005670 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80031d6:	7afb      	ldrb	r3, [r7, #11]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da0f      	bge.n	8003214 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	3338      	adds	r3, #56	@ 0x38
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	705a      	strb	r2, [r3, #1]
 8003212:	e00f      	b.n	8003234 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_PCD_EP_Close+0x6e>
 800324a:	2302      	movs	r3, #2
 800324c:	e00e      	b.n	800326c <HAL_PCD_EP_Close+0x8c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	4618      	mov	r0, r3
 800325e:	f002 fa8f 	bl	8005780 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	f003 020f 	and.w	r2, r3, #15
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2200      	movs	r2, #0
 80032b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d102      	bne.n	80032d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	6979      	ldr	r1, [r7, #20]
 80032e8:	f002 fd6e 	bl	8005dc8 <USB_EP0StartXfer>
 80032ec:	e008      	b.n	8003300 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	6979      	ldr	r1, [r7, #20]
 80032fc:	f002 fb1c 	bl	8005938 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800332c:	681b      	ldr	r3, [r3, #0]
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	460b      	mov	r3, r1
 8003348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3338      	adds	r3, #56	@ 0x38
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2200      	movs	r2, #0
 8003372:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2201      	movs	r2, #1
 8003378:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	b2da      	uxtb	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d102      	bne.n	8003394 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003394:	7afb      	ldrb	r3, [r7, #11]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	6979      	ldr	r1, [r7, #20]
 80033ac:	f002 fd0c 	bl	8005dc8 <USB_EP0StartXfer>
 80033b0:	e008      	b.n	80033c4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	f002 faba 	bl	8005938 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d901      	bls.n	80033ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e050      	b.n	800348e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da0f      	bge.n	8003414 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3338      	adds	r3, #56	@ 0x38
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	705a      	strb	r2, [r3, #1]
 8003412:	e00d      	b.n	8003430 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_PCD_EP_SetStall+0x82>
 800344c:	2302      	movs	r3, #2
 800344e:	e01e      	b.n	800348e <HAL_PCD_EP_SetStall+0xc0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68f9      	ldr	r1, [r7, #12]
 800345e:	4618      	mov	r0, r3
 8003460:	f002 ff4a 	bl	80062f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	b2d9      	uxtb	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800347e:	461a      	mov	r2, r3
 8003480:	f003 f93a 	bl	80066f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	f003 020f 	and.w	r2, r3, #15
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d901      	bls.n	80034b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e042      	b.n	800353a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	da0f      	bge.n	80034dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 020f 	and.w	r2, r3, #15
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	3338      	adds	r3, #56	@ 0x38
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	3304      	adds	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	705a      	strb	r2, [r3, #1]
 80034da:	e00f      	b.n	80034fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f003 020f 	and.w	r2, r3, #15
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	3304      	adds	r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_PCD_EP_ClrStall+0x86>
 8003518:	2302      	movs	r3, #2
 800351a:	e00e      	b.n	800353a <HAL_PCD_EP_ClrStall+0xa4>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	4618      	mov	r0, r3
 800352c:	f002 ff52 	bl	80063d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800354e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da0c      	bge.n	8003570 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 020f 	and.w	r2, r3, #15
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3338      	adds	r3, #56	@ 0x38
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	3304      	adds	r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e00c      	b.n	800358a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	4618      	mov	r0, r3
 8003592:	f002 fd71 	bl	8006078 <USB_EPStopXfer>
 8003596:	4603      	mov	r3, r0
 8003598:	72fb      	strb	r3, [r7, #11]

  return ret;
 800359a:	7afb      	ldrb	r3, [r7, #11]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	@ 0x28
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	3338      	adds	r3, #56	@ 0x38
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	3304      	adds	r3, #4
 80035ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d901      	bls.n	80035dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e06c      	b.n	80036b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d902      	bls.n	80035f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3303      	adds	r3, #3
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003600:	e02b      	b.n	800365a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	429a      	cmp	r2, r3
 8003616:	d902      	bls.n	800361e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3303      	adds	r3, #3
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6919      	ldr	r1, [r3, #16]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003636:	b2db      	uxtb	r3, r3
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	4603      	mov	r3, r0
 800363c:	6978      	ldr	r0, [r7, #20]
 800363e:	f002 fdc5 	bl	80061cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	441a      	add	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	441a      	add	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	429a      	cmp	r2, r3
 800366e:	d809      	bhi.n	8003684 <PCD_WriteEmptyTxFifo+0xe0>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1a      	ldr	r2, [r3, #32]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003678:	429a      	cmp	r2, r3
 800367a:	d203      	bcs.n	8003684 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1be      	bne.n	8003602 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d811      	bhi.n	80036b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	2201      	movs	r2, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	6939      	ldr	r1, [r7, #16]
 80036ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036b0:	4013      	ands	r3, r2
 80036b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	333c      	adds	r3, #60	@ 0x3c
 80036d8:	3304      	adds	r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d17b      	bne.n	80037ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4a61      	ldr	r2, [pc, #388]	@ (8003888 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	f240 80b9 	bls.w	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80b3 	beq.w	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003722:	461a      	mov	r2, r3
 8003724:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003728:	6093      	str	r3, [r2, #8]
 800372a:	e0a7      	b.n	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003742:	461a      	mov	r2, r3
 8003744:	2320      	movs	r3, #32
 8003746:	6093      	str	r3, [r2, #8]
 8003748:	e098      	b.n	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003750:	2b00      	cmp	r3, #0
 8003752:	f040 8093 	bne.w	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4a4b      	ldr	r2, [pc, #300]	@ (8003888 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d90f      	bls.n	800377e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377a:	6093      	str	r3, [r2, #8]
 800377c:	e07e      	b.n	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	3304      	adds	r3, #4
 8003792:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	440b      	add	r3, r1
 80037a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d114      	bne.n	80037e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80037c8:	461a      	mov	r2, r3
 80037ca:	2101      	movs	r1, #1
 80037cc:	f002 ff94 	bl	80066f8 <USB_EP0_OutStart>
 80037d0:	e006      	b.n	80037e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	441a      	add	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f005 fa58 	bl	8008c9c <HAL_PCD_DataOutStageCallback>
 80037ec:	e046      	b.n	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4a26      	ldr	r2, [pc, #152]	@ (800388c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d124      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	461a      	mov	r2, r3
 800380e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003812:	6093      	str	r3, [r2, #8]
 8003814:	e032      	b.n	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	2320      	movs	r3, #32
 8003830:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f005 fa2f 	bl	8008c9c <HAL_PCD_DataOutStageCallback>
 800383e:	e01d      	b.n	800387c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d114      	bne.n	8003870 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d108      	bne.n	8003870 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003868:	461a      	mov	r2, r3
 800386a:	2100      	movs	r1, #0
 800386c:	f002 ff44 	bl	80066f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f005 fa10 	bl	8008c9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	4f54300a 	.word	0x4f54300a
 800388c:	4f54310a 	.word	0x4f54310a

08003890 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	333c      	adds	r3, #60	@ 0x3c
 80038a8:	3304      	adds	r3, #4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <PCD_EP_OutSetupPacket_int+0x88>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d90e      	bls.n	80038e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038dc:	461a      	mov	r2, r3
 80038de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f005 f9c7 	bl	8008c78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003918 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d90c      	bls.n	800390c <PCD_EP_OutSetupPacket_int+0x7c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d108      	bne.n	800390c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003904:	461a      	mov	r2, r3
 8003906:	2101      	movs	r1, #1
 8003908:	f002 fef6 	bl	80066f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	4f54300a 	.word	0x4f54300a

0800391c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
 8003928:	4613      	mov	r3, r2
 800392a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d107      	bne.n	800394a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800393a:	883b      	ldrh	r3, [r7, #0]
 800393c:	0419      	lsls	r1, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	430a      	orrs	r2, r1
 8003946:	629a      	str	r2, [r3, #40]	@ 0x28
 8003948:	e028      	b.n	800399c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4413      	add	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e00d      	b.n	800397a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	3340      	adds	r3, #64	@ 0x40
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4413      	add	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	3301      	adds	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	3b01      	subs	r3, #1
 8003980:	429a      	cmp	r2, r3
 8003982:	d3ec      	bcc.n	800395e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003984:	883b      	ldrh	r3, [r7, #0]
 8003986:	0418      	lsls	r0, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6819      	ldr	r1, [r3, #0]
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	3b01      	subs	r3, #1
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	4302      	orrs	r2, r0
 8003994:	3340      	adds	r3, #64	@ 0x40
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e267      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d075      	beq.n	8003aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a02:	4b88      	ldr	r3, [pc, #544]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4b85      	ldr	r3, [pc, #532]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d112      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b82      	ldr	r3, [pc, #520]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	4b7e      	ldr	r3, [pc, #504]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05b      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d157      	bne.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e242      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCC_OscConfig+0x74>
 8003a4a:	4b76      	ldr	r3, [pc, #472]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e01d      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x98>
 8003a62:	4b70      	ldr	r3, [pc, #448]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6f      	ldr	r2, [pc, #444]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6c      	ldr	r2, [pc, #432]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	4b69      	ldr	r3, [pc, #420]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a68      	ldr	r2, [pc, #416]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b66      	ldr	r3, [pc, #408]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fd fc16 	bl	80012cc <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fd fc12 	bl	80012cc <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	@ 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e207      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fc02 	bl	80012cc <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fd fbfe 	bl	80012cc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	@ 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1f3      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b51      	ldr	r3, [pc, #324]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afa:	4b4a      	ldr	r3, [pc, #296]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b47      	ldr	r3, [pc, #284]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b44      	ldr	r3, [pc, #272]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	4b41      	ldr	r3, [pc, #260]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1c7      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4937      	ldr	r1, [pc, #220]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e03a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b54:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fbb7 	bl	80012cc <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b62:	f7fd fbb3 	bl	80012cc <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1a8      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	4b2b      	ldr	r3, [pc, #172]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4925      	ldr	r1, [pc, #148]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b24      	ldr	r3, [pc, #144]	@ (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fb96 	bl	80012cc <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fd fb92 	bl	80012cc <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e187      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d036      	beq.n	8003c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fd fb76 	bl	80012cc <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fd fb72 	bl	80012cc <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e167      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x200>
 8003c02:	e01b      	b.n	8003c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c04:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fb5f 	bl	80012cc <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	e00e      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fd fb5b 	bl	80012cc <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d907      	bls.n	8003c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e150      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	42470000 	.word	0x42470000
 8003c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	4b88      	ldr	r3, [pc, #544]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ea      	bne.n	8003c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8097 	beq.w	8003d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b81      	ldr	r3, [pc, #516]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	4a7c      	ldr	r2, [pc, #496]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b77      	ldr	r3, [pc, #476]	@ (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b74      	ldr	r3, [pc, #464]	@ (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a73      	ldr	r2, [pc, #460]	@ (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fd fb1b 	bl	80012cc <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fd fb17 	bl	80012cc <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e10c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b6a      	ldr	r3, [pc, #424]	@ (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x2ea>
 8003cc0:	4b64      	ldr	r3, [pc, #400]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a63      	ldr	r2, [pc, #396]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x30c>
 8003cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	4a5e      	ldr	r2, [pc, #376]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cf0:	4b58      	ldr	r3, [pc, #352]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf4:	4a57      	ldr	r2, [pc, #348]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cfc:	4b55      	ldr	r3, [pc, #340]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d00:	4a54      	ldr	r2, [pc, #336]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 0304 	bic.w	r3, r3, #4
 8003d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fd fadc 	bl	80012cc <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7fd fad8 	bl	80012cc <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0cb      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	4b49      	ldr	r3, [pc, #292]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0ee      	beq.n	8003d18 <HAL_RCC_OscConfig+0x334>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7fd fac6 	bl	80012cc <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fd fac2 	bl	80012cc <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0b5      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ee      	bne.n	8003d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	4a38      	ldr	r2, [pc, #224]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a1 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d82:	4b34      	ldr	r3, [pc, #208]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d05c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d141      	bne.n	8003e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fa96 	bl	80012cc <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fd fa92 	bl	80012cc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e087      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	491b      	ldr	r1, [pc, #108]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fd fa6b 	bl	80012cc <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fd fa67 	bl	80012cc <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e05c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0c:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x416>
 8003e18:	e054      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd fa54 	bl	80012cc <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd fa50 	bl	80012cc <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e045      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x444>
 8003e46:	e03d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e038      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <HAL_RCC_OscConfig+0x4ec>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d028      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d121      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d11a      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fd f982 	bl	80012cc <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fd f97e 	bl	80012cc <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	@ (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	@ (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd f8e2 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	0800a11c 	.word	0x0800a11c
 8004098:	20000004 	.word	0x20000004
 800409c:	20000008 	.word	0x20000008

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b094      	sub	sp, #80	@ 0x50
 80040a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ac:	2300      	movs	r3, #0
 80040ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b0:	2300      	movs	r3, #0
 80040b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b8:	4b79      	ldr	r3, [pc, #484]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d00d      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x40>
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	f200 80e1 	bhi.w	800428c <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d003      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x3a>
 80040d2:	e0db      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b73      	ldr	r3, [pc, #460]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80040d8:	e0db      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4b73      	ldr	r3, [pc, #460]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80040dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040de:	e0d8      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b6f      	ldr	r3, [pc, #444]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ea:	4b6d      	ldr	r3, [pc, #436]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d063      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b6a      	ldr	r3, [pc, #424]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	2200      	movs	r2, #0
 80040fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004100:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30
 800410a:	2300      	movs	r3, #0
 800410c:	637b      	str	r3, [r7, #52]	@ 0x34
 800410e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	f04f 0000 	mov.w	r0, #0
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	0159      	lsls	r1, r3, #5
 8004120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004124:	0150      	lsls	r0, r2, #5
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4621      	mov	r1, r4
 800412c:	1a51      	subs	r1, r2, r1
 800412e:	6139      	str	r1, [r7, #16]
 8004130:	4629      	mov	r1, r5
 8004132:	eb63 0301 	sbc.w	r3, r3, r1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004144:	4659      	mov	r1, fp
 8004146:	018b      	lsls	r3, r1, #6
 8004148:	4651      	mov	r1, sl
 800414a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800414e:	4651      	mov	r1, sl
 8004150:	018a      	lsls	r2, r1, #6
 8004152:	4651      	mov	r1, sl
 8004154:	ebb2 0801 	subs.w	r8, r2, r1
 8004158:	4659      	mov	r1, fp
 800415a:	eb63 0901 	sbc.w	r9, r3, r1
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800416e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004172:	4690      	mov	r8, r2
 8004174:	4699      	mov	r9, r3
 8004176:	4623      	mov	r3, r4
 8004178:	eb18 0303 	adds.w	r3, r8, r3
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	462b      	mov	r3, r5
 8004180:	eb49 0303 	adc.w	r3, r9, r3
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004192:	4629      	mov	r1, r5
 8004194:	024b      	lsls	r3, r1, #9
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800419c:	4621      	mov	r1, r4
 800419e:	024a      	lsls	r2, r1, #9
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041b0:	f7fc f85e 	bl	8000270 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	e058      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041be:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	2200      	movs	r2, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	4611      	mov	r1, r2
 80041ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	2300      	movs	r3, #0
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041d8:	4642      	mov	r2, r8
 80041da:	464b      	mov	r3, r9
 80041dc:	f04f 0000 	mov.w	r0, #0
 80041e0:	f04f 0100 	mov.w	r1, #0
 80041e4:	0159      	lsls	r1, r3, #5
 80041e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ea:	0150      	lsls	r0, r2, #5
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4641      	mov	r1, r8
 80041f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041f6:	4649      	mov	r1, r9
 80041f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800420c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004210:	ebb2 040a 	subs.w	r4, r2, sl
 8004214:	eb63 050b 	sbc.w	r5, r3, fp
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	00eb      	lsls	r3, r5, #3
 8004222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004226:	00e2      	lsls	r2, r4, #3
 8004228:	4614      	mov	r4, r2
 800422a:	461d      	mov	r5, r3
 800422c:	4643      	mov	r3, r8
 800422e:	18e3      	adds	r3, r4, r3
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	464b      	mov	r3, r9
 8004234:	eb45 0303 	adc.w	r3, r5, r3
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004246:	4629      	mov	r1, r5
 8004248:	028b      	lsls	r3, r1, #10
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004250:	4621      	mov	r1, r4
 8004252:	028a      	lsls	r2, r1, #10
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425a:	2200      	movs	r2, #0
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	61fa      	str	r2, [r7, #28]
 8004260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004264:	f7fc f804 	bl	8000270 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	3301      	adds	r3, #1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800428a:	e002      	b.n	8004292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800428e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004294:	4618      	mov	r0, r3
 8004296:	3750      	adds	r7, #80	@ 0x50
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429e:	bf00      	nop
 80042a0:	40023800 	.word	0x40023800
 80042a4:	00f42400 	.word	0x00f42400
 80042a8:	007a1200 	.word	0x007a1200

080042ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b0:	4b03      	ldr	r3, [pc, #12]	@ (80042c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	20000004 	.word	0x20000004

080042c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042c8:	f7ff fff0 	bl	80042ac <HAL_RCC_GetHCLKFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	0a9b      	lsrs	r3, r3, #10
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	4903      	ldr	r1, [pc, #12]	@ (80042e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	0800a12c 	.word	0x0800a12c

080042ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004310:	2b00      	cmp	r3, #0
 8004312:	d035      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004314:	4b62      	ldr	r3, [pc, #392]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800431a:	f7fc ffd7 	bl	80012cc <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004322:	f7fc ffd3 	bl	80012cc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0b0      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004334:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	019a      	lsls	r2, r3, #6
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	071b      	lsls	r3, r3, #28
 800434c:	4955      	ldr	r1, [pc, #340]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004354:	4b52      	ldr	r3, [pc, #328]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800435a:	f7fc ffb7 	bl	80012cc <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004362:	f7fc ffb3 	bl	80012cc <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e090      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004374:	4b4b      	ldr	r3, [pc, #300]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8083 	beq.w	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	4b44      	ldr	r3, [pc, #272]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	4a43      	ldr	r2, [pc, #268]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	@ 0x40
 800439e:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043aa:	4b3f      	ldr	r3, [pc, #252]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3e      	ldr	r2, [pc, #248]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043b6:	f7fc ff89 	bl	80012cc <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fc ff85 	bl	80012cc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e062      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d0:	4b35      	ldr	r3, [pc, #212]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d028      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043fa:	4b2a      	ldr	r3, [pc, #168]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004402:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004404:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800440a:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004410:	4a24      	ldr	r2, [pc, #144]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004416:	4b23      	ldr	r3, [pc, #140]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d114      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004422:	f7fc ff53 	bl	80012cc <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	e00a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fc ff4f 	bl	80012cc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e02a      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	4b18      	ldr	r3, [pc, #96]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0ee      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004458:	d10d      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800445a:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800446a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446e:	490d      	ldr	r1, [pc, #52]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	4313      	orrs	r3, r2
 8004472:	608b      	str	r3, [r1, #8]
 8004474:	e005      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004480:	6093      	str	r3, [r2, #8]
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004484:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448e:	4905      	ldr	r1, [pc, #20]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	42470068 	.word	0x42470068
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40007000 	.word	0x40007000
 80044ac:	42470e40 	.word	0x42470e40

080044b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d13e      	bne.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044ce:	4b23      	ldr	r3, [pc, #140]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d12f      	bne.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044e6:	617b      	str	r3, [r7, #20]
          break;
 80044e8:	e02f      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ea:	4b1c      	ldr	r3, [pc, #112]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f6:	d108      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044f8:	4b18      	ldr	r3, [pc, #96]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004500:	4a18      	ldr	r2, [pc, #96]	@ (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e007      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800450a:	4b14      	ldr	r3, [pc, #80]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004512:	4a15      	ldr	r2, [pc, #84]	@ (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800451a:	4b10      	ldr	r3, [pc, #64]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800451c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800452e:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004534:	0f1b      	lsrs	r3, r3, #28
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]
          break;
 8004542:	e002      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
          break;
 8004548:	bf00      	nop
        }
      }
      break;
 800454a:	bf00      	nop
    }
  }
  return frequency;
 800454c:	697b      	ldr	r3, [r7, #20]
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	00bb8000 	.word	0x00bb8000
 8004564:	007a1200 	.word	0x007a1200
 8004568:	00f42400 	.word	0x00f42400

0800456c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e07b      	b.n	8004676 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d108      	bne.n	8004598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800458e:	d009      	beq.n	80045a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	61da      	str	r2, [r3, #28]
 8004596:	e005      	b.n	80045a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc fc88 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004628:	ea42 0103 	orr.w	r1, r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	f003 0104 	and.w	r1, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	f003 0210 	and.w	r2, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e041      	b.n	8004714 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d106      	bne.n	80046aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fc fc5d 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4619      	mov	r1, r3
 80046bc:	4610      	mov	r0, r2
 80046be:	f000 fa95 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e04e      	b.n	80047d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a23      	ldr	r2, [pc, #140]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475e:	d01d      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1f      	ldr	r2, [pc, #124]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1c      	ldr	r2, [pc, #112]	@ (80047ec <HAL_TIM_Base_Start_IT+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x80>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a18      	ldr	r2, [pc, #96]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d111      	bne.n	80047c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b06      	cmp	r3, #6
 80047ac:	d010      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0201 	orr.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	e007      	b.n	80047d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40001800 	.word	0x40001800

080047fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d122      	bne.n	8004858 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b02      	cmp	r3, #2
 800481e:	d11b      	bne.n	8004858 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0202 	mvn.w	r2, #2
 8004828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f9b5 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9a7 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f9b8 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b04      	cmp	r3, #4
 8004864:	d122      	bne.n	80048ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d11b      	bne.n	80048ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0204 	mvn.w	r2, #4
 800487c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f98b 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f97d 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f98e 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0208 	mvn.w	r2, #8
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f961 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f953 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f964 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b10      	cmp	r3, #16
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b10      	cmp	r3, #16
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0210 	mvn.w	r2, #16
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2208      	movs	r2, #8
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f937 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f929 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f93a 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10e      	bne.n	8004980 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0201 	mvn.w	r2, #1
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc f940 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498a:	2b80      	cmp	r3, #128	@ 0x80
 800498c:	d10e      	bne.n	80049ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004998:	2b80      	cmp	r3, #128	@ 0x80
 800499a:	d107      	bne.n	80049ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fae0 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b40      	cmp	r3, #64	@ 0x40
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c4:	2b40      	cmp	r3, #64	@ 0x40
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8ff 	bl	8004bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0220 	mvn.w	r2, #32
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 faaa 	bl	8004f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_ConfigClockSource+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e0b4      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x186>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a60:	d03e      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a66:	f200 8087 	bhi.w	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6e:	f000 8086 	beq.w	8004b7e <HAL_TIM_ConfigClockSource+0x172>
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a76:	d87f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b70      	cmp	r3, #112	@ 0x70
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a7c:	2b70      	cmp	r3, #112	@ 0x70
 8004a7e:	d87b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b60      	cmp	r3, #96	@ 0x60
 8004a82:	d050      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x11a>
 8004a84:	2b60      	cmp	r3, #96	@ 0x60
 8004a86:	d877      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b50      	cmp	r3, #80	@ 0x50
 8004a8a:	d03c      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xfa>
 8004a8c:	2b50      	cmp	r3, #80	@ 0x50
 8004a8e:	d873      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b40      	cmp	r3, #64	@ 0x40
 8004a92:	d058      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x13a>
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d86f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b30      	cmp	r3, #48	@ 0x30
 8004a9a:	d064      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b30      	cmp	r3, #48	@ 0x30
 8004a9e:	d86b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d060      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d867      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05c      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d05a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	e062      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6899      	ldr	r1, [r3, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f000 f9ad 	bl	8004e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	609a      	str	r2, [r3, #8]
      break;
 8004ade:	e04f      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f000 f996 	bl	8004e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b02:	609a      	str	r2, [r3, #8]
      break;
 8004b04:	e03c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 f90a 	bl	8004d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2150      	movs	r1, #80	@ 0x50
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f963 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004b24:	e02c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 f929 	bl	8004d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2160      	movs	r1, #96	@ 0x60
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f953 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004b44:	e01c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 f8ea 	bl	8004d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2140      	movs	r1, #64	@ 0x40
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f943 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 f93a 	bl	8004dea <TIM_ITRx_SetConfig>
      break;
 8004b76:	e003      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e000      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	@ (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	@ (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	@ (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	@ (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4c:	d027      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	@ (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d023      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	@ (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	@ (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	@ (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d017      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a28      	ldr	r2, [pc, #160]	@ (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	@ (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	@ (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a25      	ldr	r2, [pc, #148]	@ (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a24      	ldr	r2, [pc, #144]	@ (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a23      	ldr	r2, [pc, #140]	@ (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d108      	bne.n	8004cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d00 <TIM_Base_SetConfig+0x114>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0c      	ldr	r2, [pc, #48]	@ (8004d10 <TIM_Base_SetConfig+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	40001800 	.word	0x40001800
 8004d24:	40001c00 	.word	0x40001c00
 8004d28:	40002000 	.word	0x40002000

08004d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 030a 	bic.w	r3, r3, #10
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b087      	sub	sp, #28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f023 0210 	bic.w	r2, r3, #16
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	031b      	lsls	r3, r3, #12
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f043 0307 	orr.w	r3, r3, #7
 8004e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	021a      	lsls	r2, r3, #8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e05a      	b.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec4:	d01d      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1d      	ldr	r2, [pc, #116]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1a      	ldr	r2, [pc, #104]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a17      	ldr	r2, [pc, #92]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10c      	bne.n	8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40010400 	.word	0x40010400
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40001800 	.word	0x40001800

08004f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f80:	b084      	sub	sp, #16
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	f107 001c 	add.w	r0, r7, #28
 8004f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d122      	bne.n	8004fde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f001 fbee 	bl	80067b4 <USB_CoreReset>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e01a      	b.n	8005014 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fbe2 	bl	80067b4 <USB_CoreReset>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	@ 0x38
 8005006:	e005      	b.n	8005014 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10b      	bne.n	8005032 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f043 0206 	orr.w	r2, r3, #6
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800503e:	b004      	add	sp, #16
 8005040:	4770      	bx	lr
	...

08005044 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d165      	bne.n	8005124 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a41      	ldr	r2, [pc, #260]	@ (8005160 <USB_SetTurnaroundTime+0x11c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d906      	bls.n	800506e <USB_SetTurnaroundTime+0x2a>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4a40      	ldr	r2, [pc, #256]	@ (8005164 <USB_SetTurnaroundTime+0x120>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d202      	bcs.n	800506e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005068:	230f      	movs	r3, #15
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e062      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4a3c      	ldr	r2, [pc, #240]	@ (8005164 <USB_SetTurnaroundTime+0x120>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d306      	bcc.n	8005084 <USB_SetTurnaroundTime+0x40>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4a3b      	ldr	r2, [pc, #236]	@ (8005168 <USB_SetTurnaroundTime+0x124>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d202      	bcs.n	8005084 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800507e:	230e      	movs	r3, #14
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e057      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a38      	ldr	r2, [pc, #224]	@ (8005168 <USB_SetTurnaroundTime+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d306      	bcc.n	800509a <USB_SetTurnaroundTime+0x56>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4a37      	ldr	r2, [pc, #220]	@ (800516c <USB_SetTurnaroundTime+0x128>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d202      	bcs.n	800509a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005094:	230d      	movs	r3, #13
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	e04c      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a33      	ldr	r2, [pc, #204]	@ (800516c <USB_SetTurnaroundTime+0x128>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d306      	bcc.n	80050b0 <USB_SetTurnaroundTime+0x6c>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4a32      	ldr	r2, [pc, #200]	@ (8005170 <USB_SetTurnaroundTime+0x12c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d802      	bhi.n	80050b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050aa:	230c      	movs	r3, #12
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e041      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005170 <USB_SetTurnaroundTime+0x12c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d906      	bls.n	80050c6 <USB_SetTurnaroundTime+0x82>
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005174 <USB_SetTurnaroundTime+0x130>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d802      	bhi.n	80050c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050c0:	230b      	movs	r3, #11
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e036      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005174 <USB_SetTurnaroundTime+0x130>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d906      	bls.n	80050dc <USB_SetTurnaroundTime+0x98>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4a29      	ldr	r2, [pc, #164]	@ (8005178 <USB_SetTurnaroundTime+0x134>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d802      	bhi.n	80050dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050d6:	230a      	movs	r3, #10
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e02b      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a26      	ldr	r2, [pc, #152]	@ (8005178 <USB_SetTurnaroundTime+0x134>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d906      	bls.n	80050f2 <USB_SetTurnaroundTime+0xae>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4a25      	ldr	r2, [pc, #148]	@ (800517c <USB_SetTurnaroundTime+0x138>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d202      	bcs.n	80050f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050ec:	2309      	movs	r3, #9
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e020      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a21      	ldr	r2, [pc, #132]	@ (800517c <USB_SetTurnaroundTime+0x138>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d306      	bcc.n	8005108 <USB_SetTurnaroundTime+0xc4>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a20      	ldr	r2, [pc, #128]	@ (8005180 <USB_SetTurnaroundTime+0x13c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d802      	bhi.n	8005108 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005102:	2308      	movs	r3, #8
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e015      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a1d      	ldr	r2, [pc, #116]	@ (8005180 <USB_SetTurnaroundTime+0x13c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d906      	bls.n	800511e <USB_SetTurnaroundTime+0xda>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <USB_SetTurnaroundTime+0x140>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d202      	bcs.n	800511e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005118:	2307      	movs	r3, #7
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e00a      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800511e:	2306      	movs	r3, #6
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e007      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800512a:	2309      	movs	r3, #9
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e001      	b.n	8005134 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005130:	2309      	movs	r3, #9
 8005132:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	029b      	lsls	r3, r3, #10
 8005148:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800514c:	431a      	orrs	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	00d8acbf 	.word	0x00d8acbf
 8005164:	00e4e1c0 	.word	0x00e4e1c0
 8005168:	00f42400 	.word	0x00f42400
 800516c:	01067380 	.word	0x01067380
 8005170:	011a499f 	.word	0x011a499f
 8005174:	01312cff 	.word	0x01312cff
 8005178:	014ca43f 	.word	0x014ca43f
 800517c:	016e3600 	.word	0x016e3600
 8005180:	01a6ab1f 	.word	0x01a6ab1f
 8005184:	01e84800 	.word	0x01e84800

08005188 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0201 	bic.w	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d115      	bne.n	800521a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f7fc f872 	bl	80012e4 <HAL_Delay>
      ms++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3301      	adds	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f001 fa45 	bl	8006696 <USB_GetMode>
 800520c:	4603      	mov	r3, r0
 800520e:	2b01      	cmp	r3, #1
 8005210:	d01e      	beq.n	8005250 <USB_SetCurrentMode+0x84>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b31      	cmp	r3, #49	@ 0x31
 8005216:	d9f0      	bls.n	80051fa <USB_SetCurrentMode+0x2e>
 8005218:	e01a      	b.n	8005250 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d115      	bne.n	800524c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800522c:	2001      	movs	r0, #1
 800522e:	f7fc f859 	bl	80012e4 <HAL_Delay>
      ms++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 fa2c 	bl	8006696 <USB_GetMode>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <USB_SetCurrentMode+0x84>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b31      	cmp	r3, #49	@ 0x31
 8005248:	d9f0      	bls.n	800522c <USB_SetCurrentMode+0x60>
 800524a:	e001      	b.n	8005250 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e005      	b.n	800525c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b32      	cmp	r3, #50	@ 0x32
 8005254:	d101      	bne.n	800525a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005264:	b084      	sub	sp, #16
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e009      	b.n	8005298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3340      	adds	r3, #64	@ 0x40
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	2200      	movs	r2, #0
 8005290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3301      	adds	r3, #1
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b0e      	cmp	r3, #14
 800529c:	d9f2      	bls.n	8005284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800529e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11c      	bne.n	80052de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	@ 0x38
 80052dc:	e00b      	b.n	80052f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052fc:	461a      	mov	r2, r3
 80052fe:	2300      	movs	r3, #0
 8005300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005308:	4619      	mov	r1, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005310:	461a      	mov	r2, r3
 8005312:	680b      	ldr	r3, [r1, #0]
 8005314:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	2b01      	cmp	r3, #1
 800531a:	d10c      	bne.n	8005336 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f965 	bl	80055f4 <USB_SetDevSpeed>
 800532a:	e008      	b.n	800533e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800532c:	2101      	movs	r1, #1
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f960 	bl	80055f4 <USB_SetDevSpeed>
 8005334:	e003      	b.n	800533e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005336:	2103      	movs	r1, #3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f95b 	bl	80055f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800533e:	2110      	movs	r1, #16
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f8f3 	bl	800552c <USB_FlushTxFifo>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f91f 	bl	8005594 <USB_FlushRxFifo>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005366:	461a      	mov	r2, r3
 8005368:	2300      	movs	r3, #0
 800536a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005372:	461a      	mov	r2, r3
 8005374:	2300      	movs	r3, #0
 8005376:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005384:	2300      	movs	r3, #0
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	e043      	b.n	8005412 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800539c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053a0:	d118      	bne.n	80053d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	e013      	b.n	80053e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ca:	461a      	mov	r2, r3
 80053cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e008      	b.n	80053e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	2300      	movs	r3, #0
 80053e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f2:	461a      	mov	r2, r3
 80053f4:	2300      	movs	r3, #0
 80053f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005404:	461a      	mov	r2, r3
 8005406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800540a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	3301      	adds	r3, #1
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d3b7      	bcc.n	800538a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800541a:	2300      	movs	r3, #0
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	e043      	b.n	80054a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005436:	d118      	bne.n	800546a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544a:	461a      	mov	r2, r3
 800544c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e013      	b.n	800547c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	461a      	mov	r2, r3
 8005462:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	e008      	b.n	800547c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005488:	461a      	mov	r2, r3
 800548a:	2300      	movs	r3, #0
 800548c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549a:	461a      	mov	r2, r3
 800549c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3301      	adds	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d3b7      	bcc.n	8005420 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80054d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005528 <USB_DevInit+0x2c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f043 0208 	orr.w	r2, r3, #8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d107      	bne.n	8005518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005524:	b004      	add	sp, #16
 8005526:	4770      	bx	lr
 8005528:	803c3800 	.word	0x803c3800

0800552c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a13      	ldr	r2, [pc, #76]	@ (8005590 <USB_FlushTxFifo+0x64>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d901      	bls.n	800554c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e01b      	b.n	8005584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	daf2      	bge.n	800553a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	019b      	lsls	r3, r3, #6
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a08      	ldr	r2, [pc, #32]	@ (8005590 <USB_FlushTxFifo+0x64>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e006      	b.n	8005584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d0f0      	beq.n	8005564 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	00030d40 	.word	0x00030d40

08005594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3301      	adds	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a11      	ldr	r2, [pc, #68]	@ (80055f0 <USB_FlushRxFifo+0x5c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e018      	b.n	80055e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	daf2      	bge.n	80055a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2210      	movs	r2, #16
 80055c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <USB_FlushRxFifo+0x5c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e006      	b.n	80055e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d0f0      	beq.n	80055c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	00030d40 	.word	0x00030d40

080055f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005614:	4313      	orrs	r3, r2
 8005616:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005626:	b480      	push	{r7}
 8005628:	b087      	sub	sp, #28
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0306 	and.w	r3, r3, #6
 800563e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]
 800564a:	e00a      	b.n	8005662 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d002      	beq.n	8005658 <USB_GetDevSpeed+0x32>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b06      	cmp	r3, #6
 8005656:	d102      	bne.n	800565e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005658:	2302      	movs	r3, #2
 800565a:	75fb      	strb	r3, [r7, #23]
 800565c:	e001      	b.n	8005662 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800565e:	230f      	movs	r3, #15
 8005660:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d13a      	bne.n	8005702 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	2101      	movs	r1, #1
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d155      	bne.n	8005770 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	791b      	ldrb	r3, [r3, #4]
 80056de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	059b      	lsls	r3, r3, #22
 80056e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056e8:	4313      	orrs	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e036      	b.n	8005770 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	2101      	movs	r1, #1
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005720:	4313      	orrs	r3, r2
 8005722:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11a      	bne.n	8005770 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	791b      	ldrb	r3, [r3, #4]
 8005754:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005756:	430b      	orrs	r3, r1
 8005758:	4313      	orrs	r3, r2
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800576a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800576e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d161      	bne.n	8005860 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057b2:	d11f      	bne.n	80057f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	2101      	movs	r1, #1
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	b29b      	uxth	r3, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005814:	4013      	ands	r3, r2
 8005816:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581e:	69da      	ldr	r2, [r3, #28]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2101      	movs	r1, #1
 800582a:	fa01 f303 	lsl.w	r3, r1, r3
 800582e:	b29b      	uxth	r3, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005838:	4013      	ands	r3, r2
 800583a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	0159      	lsls	r1, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	440b      	add	r3, r1
 8005852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005856:	4619      	mov	r1, r3
 8005858:	4b35      	ldr	r3, [pc, #212]	@ (8005930 <USB_DeactivateEndpoint+0x1b0>)
 800585a:	4013      	ands	r3, r2
 800585c:	600b      	str	r3, [r1, #0]
 800585e:	e060      	b.n	8005922 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005876:	d11f      	bne.n	80058b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005892:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005896:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	2101      	movs	r1, #1
 80058ca:	fa01 f303 	lsl.w	r3, r1, r3
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	43db      	mvns	r3, r3
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058d8:	4013      	ands	r3, r2
 80058da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f303 	lsl.w	r3, r1, r3
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	43db      	mvns	r3, r3
 80058f6:	68f9      	ldr	r1, [r7, #12]
 80058f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058fc:	4013      	ands	r3, r2
 80058fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0159      	lsls	r1, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	440b      	add	r3, r1
 8005916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591a:	4619      	mov	r1, r3
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <USB_DeactivateEndpoint+0x1b4>)
 800591e:	4013      	ands	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	ec337800 	.word	0xec337800
 8005934:	eff37800 	.word	0xeff37800

08005938 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	@ 0x28
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	4613      	mov	r3, r2
 8005944:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	f040 815c 	bne.w	8005c12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d132      	bne.n	80059c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005980:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c0:	0cdb      	lsrs	r3, r3, #19
 80059c2:	04db      	lsls	r3, r3, #19
 80059c4:	6113      	str	r3, [r2, #16]
 80059c6:	e074      	b.n	8005ab2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e2:	0cdb      	lsrs	r3, r3, #19
 80059e4:	04db      	lsls	r3, r3, #19
 80059e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	440b      	add	r3, r1
 8005a24:	1e59      	subs	r1, r3, #1
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a30:	4b9d      	ldr	r3, [pc, #628]	@ (8005ca8 <USB_EPStartXfer+0x370>)
 8005a32:	400b      	ands	r3, r1
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	0148      	lsls	r0, r1, #5
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a40:	4313      	orrs	r3, r2
 8005a42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5a:	69b9      	ldr	r1, [r7, #24]
 8005a5c:	0148      	lsls	r0, r1, #5
 8005a5e:	69f9      	ldr	r1, [r7, #28]
 8005a60:	4401      	add	r1, r0
 8005a62:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a66:	4313      	orrs	r3, r2
 8005a68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	791b      	ldrb	r3, [r3, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d11f      	bne.n	8005ab2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a8c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005a90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ab0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d14b      	bne.n	8005b50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005acc:	461a      	mov	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d128      	bne.n	8005b2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d110      	bne.n	8005b0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e00f      	b.n	8005b2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b48:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	e133      	b.n	8005db8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	791b      	ldrb	r3, [r3, #4]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d015      	beq.n	8005ba4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 811b 	beq.w	8005db8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	2101      	movs	r1, #1
 8005b94:	fa01 f303 	lsl.w	r3, r1, r3
 8005b98:	69f9      	ldr	r1, [r7, #28]
 8005b9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ba2:	e109      	b.n	8005db8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	e00f      	b.n	8005bf6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6919      	ldr	r1, [r3, #16]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	b298      	uxth	r0, r3
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	4603      	mov	r3, r0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fade 	bl	80061cc <USB_WritePacket>
 8005c10:	e0d2      	b.n	8005db8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c2c:	0cdb      	lsrs	r3, r3, #19
 8005c2e:	04db      	lsls	r3, r3, #19
 8005c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c4c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c50:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d126      	bne.n	8005cac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	0148      	lsls	r0, r1, #5
 8005c78:	69f9      	ldr	r1, [r7, #28]
 8005c7a:	4401      	add	r1, r0
 8005c7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c80:	4313      	orrs	r3, r2
 8005c82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca2:	6113      	str	r3, [r2, #16]
 8005ca4:	e03a      	b.n	8005d1c <USB_EPStartXfer+0x3e4>
 8005ca6:	bf00      	nop
 8005ca8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	1e5a      	subs	r2, r3, #1
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	8afa      	ldrh	r2, [r7, #22]
 8005cc8:	fb03 f202 	mul.w	r2, r3, r2
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	8afb      	ldrh	r3, [r7, #22]
 8005ce0:	04d9      	lsls	r1, r3, #19
 8005ce2:	4b38      	ldr	r3, [pc, #224]	@ (8005dc4 <USB_EPStartXfer+0x48c>)
 8005ce4:	400b      	ands	r3, r1
 8005ce6:	69b9      	ldr	r1, [r7, #24]
 8005ce8:	0148      	lsls	r0, r1, #5
 8005cea:	69f9      	ldr	r1, [r7, #28]
 8005cec:	4401      	add	r1, r0
 8005cee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d0c:	69b9      	ldr	r1, [r7, #24]
 8005d0e:	0148      	lsls	r0, r1, #5
 8005d10:	69f9      	ldr	r1, [r7, #28]
 8005d12:	4401      	add	r1, r0
 8005d14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d10d      	bne.n	8005d3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6919      	ldr	r1, [r3, #16]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	791b      	ldrb	r3, [r3, #4]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d128      	bne.n	8005d98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d110      	bne.n	8005d78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e00f      	b.n	8005d98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005db2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005db6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	1ff80000 	.word	0x1ff80000

08005dc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	f040 80ce 	bne.w	8005f86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d132      	bne.n	8005e58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e50:	0cdb      	lsrs	r3, r3, #19
 8005e52:	04db      	lsls	r3, r3, #19
 8005e54:	6113      	str	r3, [r2, #16]
 8005e56:	e04e      	b.n	8005ef6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e72:	0cdb      	lsrs	r3, r3, #19
 8005e74:	04db      	lsls	r3, r3, #19
 8005e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d903      	bls.n	8005eb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee6:	6939      	ldr	r1, [r7, #16]
 8005ee8:	0148      	lsls	r0, r1, #5
 8005eea:	6979      	ldr	r1, [r7, #20]
 8005eec:	4401      	add	r1, r0
 8005eee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d11e      	bne.n	8005f3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f10:	461a      	mov	r2, r3
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	e097      	b.n	800606a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f54:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8083 	beq.w	800606a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7a:	6979      	ldr	r1, [r7, #20]
 8005f7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f80:	4313      	orrs	r3, r2
 8005f82:	634b      	str	r3, [r1, #52]	@ 0x34
 8005f84:	e071      	b.n	800606a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fa0:	0cdb      	lsrs	r3, r3, #19
 8005fa2:	04db      	lsls	r3, r3, #19
 8005fa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fc0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005fc4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005fc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ffc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006018:	6939      	ldr	r1, [r7, #16]
 800601a:	0148      	lsls	r0, r1, #5
 800601c:	6979      	ldr	r1, [r7, #20]
 800601e:	4401      	add	r1, r0
 8006020:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006024:	4313      	orrs	r3, r2
 8006026:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d10d      	bne.n	800604a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6919      	ldr	r1, [r3, #16]
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006046:	460a      	mov	r2, r1
 8006048:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006064:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006068:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d14a      	bne.n	800612c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060ae:	f040 8086 	bne.w	80061be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	7812      	ldrb	r2, [r2, #0]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006106:	4293      	cmp	r3, r2
 8006108:	d902      	bls.n	8006110 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
          break;
 800610e:	e056      	b.n	80061be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006128:	d0e7      	beq.n	80060fa <USB_EPStopXfer+0x82>
 800612a:	e048      	b.n	80061be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006144:	d13b      	bne.n	80061be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006164:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006168:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800618c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3301      	adds	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f242 7210 	movw	r2, #10000	@ 0x2710
 800619a:	4293      	cmp	r3, r2
 800619c:	d902      	bls.n	80061a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
          break;
 80061a2:	e00c      	b.n	80061be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061bc:	d0e7      	beq.n	800618e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061be:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	@ 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4611      	mov	r1, r2
 80061d8:	461a      	mov	r2, r3
 80061da:	460b      	mov	r3, r1
 80061dc:	71fb      	strb	r3, [r7, #7]
 80061de:	4613      	mov	r3, r2
 80061e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d123      	bne.n	800623a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061f2:	88bb      	ldrh	r3, [r7, #4]
 80061f4:	3303      	adds	r3, #3
 80061f6:	089b      	lsrs	r3, r3, #2
 80061f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	e018      	b.n	8006232 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	031a      	lsls	r2, r3, #12
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620c:	461a      	mov	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	3301      	adds	r3, #1
 8006218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	3301      	adds	r3, #1
 800621e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3301      	adds	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	3301      	adds	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3e2      	bcc.n	8006200 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3724      	adds	r7, #36	@ 0x24
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006248:	b480      	push	{r7}
 800624a:	b08b      	sub	sp, #44	@ 0x2c
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	089b      	lsrs	r3, r3, #2
 8006262:	b29b      	uxth	r3, r3
 8006264:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	623b      	str	r3, [r7, #32]
 8006272:	e014      	b.n	800629e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	3301      	adds	r3, #1
 8006284:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	3301      	adds	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	3301      	adds	r3, #1
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	3301      	adds	r3, #1
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	3301      	adds	r3, #1
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d3e6      	bcc.n	8006274 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062a6:	8bfb      	ldrh	r3, [r7, #30]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01e      	beq.n	80062ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b6:	461a      	mov	r2, r3
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	701a      	strb	r2, [r3, #0]
      i++;
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	3301      	adds	r3, #1
 80062d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	3301      	adds	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80062de:	8bfb      	ldrh	r3, [r7, #30]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062e4:	8bfb      	ldrh	r3, [r7, #30]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ea      	bne.n	80062c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	372c      	adds	r7, #44	@ 0x2c
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d12c      	bne.n	800636e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	db12      	blt.n	800634c <USB_EPSetStall+0x54>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00f      	beq.n	800634c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006346:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800634a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	440a      	add	r2, r1
 8006362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006366:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e02b      	b.n	80063c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	db12      	blt.n	80063a6 <USB_EPSetStall+0xae>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00f      	beq.n	80063a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	0151      	lsls	r1, r2, #5
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	440a      	add	r2, r1
 800639c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	0151      	lsls	r1, r2, #5
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	440a      	add	r2, r1
 80063bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d128      	bne.n	8006442 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800640a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800640e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	791b      	ldrb	r3, [r3, #4]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d003      	beq.n	8006420 <USB_EPClearStall+0x4c>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	791b      	ldrb	r3, [r3, #4]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d138      	bne.n	8006492 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800643a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e027      	b.n	8006492 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800645c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006460:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	791b      	ldrb	r3, [r3, #4]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d003      	beq.n	8006472 <USB_EPClearStall+0x9e>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	791b      	ldrb	r3, [r3, #4]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d10f      	bne.n	8006492 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	440a      	add	r2, r1
 8006488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800648c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006490:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80064c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064da:	4313      	orrs	r3, r2
 80064dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800651a:	f023 0302 	bic.w	r3, r3, #2
 800651e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006548:	f023 0303 	bic.w	r3, r3, #3
 800654c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800655c:	f043 0302 	orr.w	r3, r3, #2
 8006560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4013      	ands	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	0c1b      	lsrs	r3, r3, #16
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	b29b      	uxth	r3, r3
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4013      	ands	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800662c:	68bb      	ldr	r3, [r7, #8]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800663a:	b480      	push	{r7}
 800663c:	b087      	sub	sp, #28
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800665a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	fa22 f303 	lsr.w	r3, r2, r3
 800666a:	01db      	lsls	r3, r3, #7
 800666c:	b2db      	uxtb	r3, r3
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4013      	ands	r3, r2
 8006686:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006688:	68bb      	ldr	r3, [r7, #8]
}
 800668a:	4618      	mov	r0, r3
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0301 	and.w	r3, r3, #1
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80066d0:	f023 0307 	bic.w	r3, r3, #7
 80066d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	460b      	mov	r3, r1
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	333c      	adds	r3, #60	@ 0x3c
 800670e:	3304      	adds	r3, #4
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4a26      	ldr	r2, [pc, #152]	@ (80067b0 <USB_EP0_OutStart+0xb8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d90a      	bls.n	8006732 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800672c:	d101      	bne.n	8006732 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	e037      	b.n	80067a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006738:	461a      	mov	r2, r3
 800673a:	2300      	movs	r3, #0
 800673c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800674c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006760:	f043 0318 	orr.w	r3, r3, #24
 8006764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006774:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006778:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800677a:	7afb      	ldrb	r3, [r7, #11]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d10f      	bne.n	80067a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800679a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800679e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	4f54300a 	.word	0x4f54300a

080067b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a13      	ldr	r2, [pc, #76]	@ (8006818 <USB_CoreReset+0x64>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e01b      	b.n	800680a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	daf2      	bge.n	80067c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3301      	adds	r3, #1
 80067ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a09      	ldr	r2, [pc, #36]	@ (8006818 <USB_CoreReset+0x64>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e006      	b.n	800680a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d0f0      	beq.n	80067ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	00030d40 	.word	0x00030d40

0800681c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006828:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800682c:	f002 fca0 	bl	8009170 <USBD_static_malloc>
 8006830:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	32b0      	adds	r2, #176	@ 0xb0
 8006842:	2100      	movs	r1, #0
 8006844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006848:	2302      	movs	r3, #2
 800684a:	e0d4      	b.n	80069f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800684c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006850:	2100      	movs	r1, #0
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f002 fde7 	bl	8009426 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	32b0      	adds	r2, #176	@ 0xb0
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	32b0      	adds	r2, #176	@ 0xb0
 8006872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	7c1b      	ldrb	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d138      	bne.n	80068f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006884:	4b5e      	ldr	r3, [pc, #376]	@ (8006a00 <USBD_CDC_Init+0x1e4>)
 8006886:	7819      	ldrb	r1, [r3, #0]
 8006888:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800688c:	2202      	movs	r2, #2
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 fb4b 	bl	8008f2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006894:	4b5a      	ldr	r3, [pc, #360]	@ (8006a00 <USBD_CDC_Init+0x1e4>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 020f 	and.w	r2, r3, #15
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	3324      	adds	r3, #36	@ 0x24
 80068aa:	2201      	movs	r2, #1
 80068ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068ae:	4b55      	ldr	r3, [pc, #340]	@ (8006a04 <USBD_CDC_Init+0x1e8>)
 80068b0:	7819      	ldrb	r1, [r3, #0]
 80068b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068b6:	2202      	movs	r2, #2
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f002 fb36 	bl	8008f2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068be:	4b51      	ldr	r3, [pc, #324]	@ (8006a04 <USBD_CDC_Init+0x1e8>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f003 020f 	and.w	r2, r3, #15
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068d6:	2201      	movs	r2, #1
 80068d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068da:	4b4b      	ldr	r3, [pc, #300]	@ (8006a08 <USBD_CDC_Init+0x1ec>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	f003 020f 	and.w	r2, r3, #15
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	440b      	add	r3, r1
 80068ee:	3326      	adds	r3, #38	@ 0x26
 80068f0:	2210      	movs	r2, #16
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e035      	b.n	8006962 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068f6:	4b42      	ldr	r3, [pc, #264]	@ (8006a00 <USBD_CDC_Init+0x1e4>)
 80068f8:	7819      	ldrb	r1, [r3, #0]
 80068fa:	2340      	movs	r3, #64	@ 0x40
 80068fc:	2202      	movs	r2, #2
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f002 fb13 	bl	8008f2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006904:	4b3e      	ldr	r3, [pc, #248]	@ (8006a00 <USBD_CDC_Init+0x1e4>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f003 020f 	and.w	r2, r3, #15
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	3324      	adds	r3, #36	@ 0x24
 800691a:	2201      	movs	r2, #1
 800691c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800691e:	4b39      	ldr	r3, [pc, #228]	@ (8006a04 <USBD_CDC_Init+0x1e8>)
 8006920:	7819      	ldrb	r1, [r3, #0]
 8006922:	2340      	movs	r3, #64	@ 0x40
 8006924:	2202      	movs	r2, #2
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f002 faff 	bl	8008f2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800692c:	4b35      	ldr	r3, [pc, #212]	@ (8006a04 <USBD_CDC_Init+0x1e8>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006944:	2201      	movs	r2, #1
 8006946:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006948:	4b2f      	ldr	r3, [pc, #188]	@ (8006a08 <USBD_CDC_Init+0x1ec>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 020f 	and.w	r2, r3, #15
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	440b      	add	r3, r1
 800695c:	3326      	adds	r3, #38	@ 0x26
 800695e:	2210      	movs	r2, #16
 8006960:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006962:	4b29      	ldr	r3, [pc, #164]	@ (8006a08 <USBD_CDC_Init+0x1ec>)
 8006964:	7819      	ldrb	r1, [r3, #0]
 8006966:	2308      	movs	r3, #8
 8006968:	2203      	movs	r2, #3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f002 fadd 	bl	8008f2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006970:	4b25      	ldr	r3, [pc, #148]	@ (8006a08 <USBD_CDC_Init+0x1ec>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 020f 	and.w	r2, r3, #15
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	3324      	adds	r3, #36	@ 0x24
 8006986:	2201      	movs	r2, #1
 8006988:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	33b0      	adds	r3, #176	@ 0xb0
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80069c0:	2302      	movs	r3, #2
 80069c2:	e018      	b.n	80069f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7c1b      	ldrb	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <USBD_CDC_Init+0x1e8>)
 80069ce:	7819      	ldrb	r1, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f002 fb94 	bl	8009108 <USBD_LL_PrepareReceive>
 80069e0:	e008      	b.n	80069f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069e2:	4b08      	ldr	r3, [pc, #32]	@ (8006a04 <USBD_CDC_Init+0x1e8>)
 80069e4:	7819      	ldrb	r1, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069ec:	2340      	movs	r3, #64	@ 0x40
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f002 fb8a 	bl	8009108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000097 	.word	0x20000097
 8006a04:	20000098 	.word	0x20000098
 8006a08:	20000099 	.word	0x20000099

08006a0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a18:	4b3a      	ldr	r3, [pc, #232]	@ (8006b04 <USBD_CDC_DeInit+0xf8>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f002 faa9 	bl	8008f76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a24:	4b37      	ldr	r3, [pc, #220]	@ (8006b04 <USBD_CDC_DeInit+0xf8>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	3324      	adds	r3, #36	@ 0x24
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a3e:	4b32      	ldr	r3, [pc, #200]	@ (8006b08 <USBD_CDC_DeInit+0xfc>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f002 fa96 	bl	8008f76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b08 <USBD_CDC_DeInit+0xfc>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	f003 020f 	and.w	r2, r3, #15
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006a62:	2200      	movs	r2, #0
 8006a64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a66:	4b29      	ldr	r3, [pc, #164]	@ (8006b0c <USBD_CDC_DeInit+0x100>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f002 fa82 	bl	8008f76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a72:	4b26      	ldr	r3, [pc, #152]	@ (8006b0c <USBD_CDC_DeInit+0x100>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	f003 020f 	and.w	r2, r3, #15
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	440b      	add	r3, r1
 8006a86:	3324      	adds	r3, #36	@ 0x24
 8006a88:	2200      	movs	r2, #0
 8006a8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8006b0c <USBD_CDC_DeInit+0x100>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	f003 020f 	and.w	r2, r3, #15
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3326      	adds	r3, #38	@ 0x26
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	32b0      	adds	r2, #176	@ 0xb0
 8006ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01f      	beq.n	8006af8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	33b0      	adds	r3, #176	@ 0xb0
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	32b0      	adds	r2, #176	@ 0xb0
 8006ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f002 fb56 	bl	800918c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	32b0      	adds	r2, #176	@ 0xb0
 8006aea:	2100      	movs	r1, #0
 8006aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000097 	.word	0x20000097
 8006b08:	20000098 	.word	0x20000098
 8006b0c:	20000099 	.word	0x20000099

08006b10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	32b0      	adds	r2, #176	@ 0xb0
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e0bf      	b.n	8006cc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d050      	beq.n	8006bee <USBD_CDC_Setup+0xde>
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	f040 80af 	bne.w	8006cb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	88db      	ldrh	r3, [r3, #6]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d03a      	beq.n	8006bd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	da1b      	bge.n	8006b9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	33b0      	adds	r3, #176	@ 0xb0
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	88d2      	ldrh	r2, [r2, #6]
 8006b80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	88db      	ldrh	r3, [r3, #6]
 8006b86:	2b07      	cmp	r3, #7
 8006b88:	bf28      	it	cs
 8006b8a:	2307      	movcs	r3, #7
 8006b8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	89fa      	ldrh	r2, [r7, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fd87 	bl	80086a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006b9a:	e090      	b.n	8006cbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	785a      	ldrb	r2, [r3, #1]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88db      	ldrh	r3, [r3, #6]
 8006baa:	2b3f      	cmp	r3, #63	@ 0x3f
 8006bac:	d803      	bhi.n	8006bb6 <USBD_CDC_Setup+0xa6>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	88db      	ldrh	r3, [r3, #6]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	e000      	b.n	8006bb8 <USBD_CDC_Setup+0xa8>
 8006bb6:	2240      	movs	r2, #64	@ 0x40
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006bbe:	6939      	ldr	r1, [r7, #16]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fd99 	bl	8008700 <USBD_CtlPrepareRx>
      break;
 8006bce:	e076      	b.n	8006cbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	33b0      	adds	r3, #176	@ 0xb0
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	7850      	ldrb	r0, [r2, #1]
 8006be6:	2200      	movs	r2, #0
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	4798      	blx	r3
      break;
 8006bec:	e067      	b.n	8006cbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	2b0b      	cmp	r3, #11
 8006bf4:	d851      	bhi.n	8006c9a <USBD_CDC_Setup+0x18a>
 8006bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bfc <USBD_CDC_Setup+0xec>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006ca9 	.word	0x08006ca9
 8006c04:	08006c9b 	.word	0x08006c9b
 8006c08:	08006c9b 	.word	0x08006c9b
 8006c0c:	08006c9b 	.word	0x08006c9b
 8006c10:	08006c9b 	.word	0x08006c9b
 8006c14:	08006c9b 	.word	0x08006c9b
 8006c18:	08006c9b 	.word	0x08006c9b
 8006c1c:	08006c9b 	.word	0x08006c9b
 8006c20:	08006c9b 	.word	0x08006c9b
 8006c24:	08006c57 	.word	0x08006c57
 8006c28:	08006c81 	.word	0x08006c81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d107      	bne.n	8006c48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c38:	f107 030a 	add.w	r3, r7, #10
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 fd31 	bl	80086a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c46:	e032      	b.n	8006cae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fcbb 	bl	80085c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	75fb      	strb	r3, [r7, #23]
          break;
 8006c54:	e02b      	b.n	8006cae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d107      	bne.n	8006c72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c62:	f107 030d 	add.w	r3, r7, #13
 8006c66:	2201      	movs	r2, #1
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fd1c 	bl	80086a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c70:	e01d      	b.n	8006cae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fca6 	bl	80085c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c7e:	e016      	b.n	8006cae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d00f      	beq.n	8006cac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fc99 	bl	80085c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c98:	e008      	b.n	8006cac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fc92 	bl	80085c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ca6:	e002      	b.n	8006cae <USBD_CDC_Setup+0x19e>
          break;
 8006ca8:	bf00      	nop
 8006caa:	e008      	b.n	8006cbe <USBD_CDC_Setup+0x1ae>
          break;
 8006cac:	bf00      	nop
      }
      break;
 8006cae:	e006      	b.n	8006cbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fc87 	bl	80085c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	75fb      	strb	r3, [r7, #23]
      break;
 8006cbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006cda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	32b0      	adds	r2, #176	@ 0xb0
 8006ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e065      	b.n	8006dbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	32b0      	adds	r2, #176	@ 0xb0
 8006cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3318      	adds	r3, #24
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d02f      	beq.n	8006d7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	f003 020f 	and.w	r2, r3, #15
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	3318      	adds	r3, #24
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	f003 010f 	and.w	r1, r3, #15
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	440b      	add	r3, r1
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4403      	add	r3, r0
 8006d44:	3348      	adds	r3, #72	@ 0x48
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d112      	bne.n	8006d7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	3318      	adds	r3, #24
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d6e:	78f9      	ldrb	r1, [r7, #3]
 8006d70:	2300      	movs	r3, #0
 8006d72:	2200      	movs	r2, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f002 f9a6 	bl	80090c6 <USBD_LL_Transmit>
 8006d7a:	e01f      	b.n	8006dbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	33b0      	adds	r3, #176	@ 0xb0
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d010      	beq.n	8006dbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	33b0      	adds	r3, #176	@ 0xb0
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	32b0      	adds	r2, #176	@ 0xb0
 8006ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32b0      	adds	r2, #176	@ 0xb0
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e01a      	b.n	8006e2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f002 f9a4 	bl	800914a <USBD_LL_GetRxDataSize>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	33b0      	adds	r3, #176	@ 0xb0
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	32b0      	adds	r2, #176	@ 0xb0
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e024      	b.n	8006ea2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	33b0      	adds	r3, #176	@ 0xb0
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d019      	beq.n	8006ea0 <USBD_CDC_EP0_RxReady+0x6a>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006e72:	2bff      	cmp	r3, #255	@ 0xff
 8006e74:	d014      	beq.n	8006ea0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	33b0      	adds	r3, #176	@ 0xb0
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e96:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	22ff      	movs	r2, #255	@ 0xff
 8006e9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006eb4:	2182      	movs	r1, #130	@ 0x82
 8006eb6:	4818      	ldr	r0, [pc, #96]	@ (8006f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006eb8:	f000 fd4f 	bl	800795a <USBD_GetEpDesc>
 8006ebc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4815      	ldr	r0, [pc, #84]	@ (8006f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ec2:	f000 fd4a 	bl	800795a <USBD_GetEpDesc>
 8006ec6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ec8:	2181      	movs	r1, #129	@ 0x81
 8006eca:	4813      	ldr	r0, [pc, #76]	@ (8006f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ecc:	f000 fd45 	bl	800795a <USBD_GetEpDesc>
 8006ed0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2210      	movs	r2, #16
 8006edc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d006      	beq.n	8006ef2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006eec:	711a      	strb	r2, [r3, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d006      	beq.n	8006f06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f00:	711a      	strb	r2, [r3, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2243      	movs	r2, #67	@ 0x43
 8006f0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f0c:	4b02      	ldr	r3, [pc, #8]	@ (8006f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000054 	.word	0x20000054

08006f1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f24:	2182      	movs	r1, #130	@ 0x82
 8006f26:	4818      	ldr	r0, [pc, #96]	@ (8006f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f28:	f000 fd17 	bl	800795a <USBD_GetEpDesc>
 8006f2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4815      	ldr	r0, [pc, #84]	@ (8006f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f32:	f000 fd12 	bl	800795a <USBD_GetEpDesc>
 8006f36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f38:	2181      	movs	r1, #129	@ 0x81
 8006f3a:	4813      	ldr	r0, [pc, #76]	@ (8006f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f3c:	f000 fd0d 	bl	800795a <USBD_GetEpDesc>
 8006f40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d006      	beq.n	8006f62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2200      	movs	r2, #0
 8006f58:	711a      	strb	r2, [r3, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f042 0202 	orr.w	r2, r2, #2
 8006f60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	711a      	strb	r2, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f042 0202 	orr.w	r2, r2, #2
 8006f74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2243      	movs	r2, #67	@ 0x43
 8006f7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f7c:	4b02      	ldr	r3, [pc, #8]	@ (8006f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000054 	.word	0x20000054

08006f8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f94:	2182      	movs	r1, #130	@ 0x82
 8006f96:	4818      	ldr	r0, [pc, #96]	@ (8006ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f98:	f000 fcdf 	bl	800795a <USBD_GetEpDesc>
 8006f9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	4815      	ldr	r0, [pc, #84]	@ (8006ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fa2:	f000 fcda 	bl	800795a <USBD_GetEpDesc>
 8006fa6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fa8:	2181      	movs	r1, #129	@ 0x81
 8006faa:	4813      	ldr	r0, [pc, #76]	@ (8006ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fac:	f000 fcd5 	bl	800795a <USBD_GetEpDesc>
 8006fb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2210      	movs	r2, #16
 8006fbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fcc:	711a      	strb	r2, [r3, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fe0:	711a      	strb	r2, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2243      	movs	r2, #67	@ 0x43
 8006fea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fec:	4b02      	ldr	r3, [pc, #8]	@ (8006ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000054 	.word	0x20000054

08006ffc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	220a      	movs	r2, #10
 8007008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800700a:	4b03      	ldr	r3, [pc, #12]	@ (8007018 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20000010 	.word	0x20000010

0800701c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	e009      	b.n	8007044 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	33b0      	adds	r3, #176	@ 0xb0
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	32b0      	adds	r2, #176	@ 0xb0
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007072:	2303      	movs	r3, #3
 8007074:	e008      	b.n	8007088 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	32b0      	adds	r2, #176	@ 0xb0
 80070a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e004      	b.n	80070c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	32b0      	adds	r2, #176	@ 0xb0
 80070e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32b0      	adds	r2, #176	@ 0xb0
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070fe:	2303      	movs	r3, #3
 8007100:	e025      	b.n	800714e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007108:	2b00      	cmp	r3, #0
 800710a:	d11f      	bne.n	800714c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2201      	movs	r2, #1
 8007110:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007114:	4b10      	ldr	r3, [pc, #64]	@ (8007158 <USBD_CDC_TransmitPacket+0x88>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 020f 	and.w	r2, r3, #15
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4403      	add	r3, r0
 800712e:	3318      	adds	r3, #24
 8007130:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <USBD_CDC_TransmitPacket+0x88>)
 8007134:	7819      	ldrb	r1, [r3, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 ffbf 	bl	80090c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000097 	.word	0x20000097

0800715c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32b0      	adds	r2, #176	@ 0xb0
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32b0      	adds	r2, #176	@ 0xb0
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	e018      	b.n	80071bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	7c1b      	ldrb	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007192:	4b0c      	ldr	r3, [pc, #48]	@ (80071c4 <USBD_CDC_ReceivePacket+0x68>)
 8007194:	7819      	ldrb	r1, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800719c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 ffb1 	bl	8009108 <USBD_LL_PrepareReceive>
 80071a6:	e008      	b.n	80071ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071a8:	4b06      	ldr	r3, [pc, #24]	@ (80071c4 <USBD_CDC_ReceivePacket+0x68>)
 80071aa:	7819      	ldrb	r1, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071b2:	2340      	movs	r3, #64	@ 0x40
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 ffa7 	bl	8009108 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000098 	.word	0x20000098

080071c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071dc:	2303      	movs	r3, #3
 80071de:	e01f      	b.n	8007220 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	79fa      	ldrb	r2, [r7, #7]
 8007212:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f001 fe21 	bl	8008e5c <USBD_LL_Init>
 800721a:	4603      	mov	r3, r0
 800721c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	e025      	b.n	800728c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32ae      	adds	r2, #174	@ 0xae
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00f      	beq.n	800727c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32ae      	adds	r2, #174	@ 0xae
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	f107 020e 	add.w	r2, r7, #14
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	4602      	mov	r2, r0
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fe29 	bl	8008ef4 <USBD_LL_Start>
 80072a2:	4603      	mov	r3, r0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	4611      	mov	r1, r2
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4798      	blx	r3
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	4611      	mov	r1, r2
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007320:	2303      	movs	r3, #3
 8007322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f001 f906 	bl	8008552 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2b02      	cmp	r3, #2
 8007368:	d01a      	beq.n	80073a0 <USBD_LL_SetupStage+0x72>
 800736a:	2b02      	cmp	r3, #2
 800736c:	d822      	bhi.n	80073b4 <USBD_LL_SetupStage+0x86>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <USBD_LL_SetupStage+0x4a>
 8007372:	2b01      	cmp	r3, #1
 8007374:	d00a      	beq.n	800738c <USBD_LL_SetupStage+0x5e>
 8007376:	e01d      	b.n	80073b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fb5d 	bl	8007a40 <USBD_StdDevReq>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
      break;
 800738a:	e020      	b.n	80073ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fbc5 	bl	8007b24 <USBD_StdItfReq>
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
      break;
 800739e:	e016      	b.n	80073ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc27 	bl	8007bfc <USBD_StdEPReq>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]
      break;
 80073b2:	e00c      	b.n	80073ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 fdf6 	bl	8008fb4 <USBD_LL_StallEP>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	bf00      	nop
  }

  return ret;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	460b      	mov	r3, r1
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d16e      	bne.n	80074ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80073f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f040 8098 	bne.w	8007534 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d913      	bls.n	8007438 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	4293      	cmp	r3, r2
 8007428:	bf28      	it	cs
 800742a:	4613      	movcs	r3, r2
 800742c:	461a      	mov	r2, r3
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f001 f982 	bl	800873a <USBD_CtlContinueRx>
 8007436:	e07d      	b.n	8007534 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2b02      	cmp	r3, #2
 8007444:	d014      	beq.n	8007470 <USBD_LL_DataOutStage+0x98>
 8007446:	2b02      	cmp	r3, #2
 8007448:	d81d      	bhi.n	8007486 <USBD_LL_DataOutStage+0xae>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <USBD_LL_DataOutStage+0x7c>
 800744e:	2b01      	cmp	r3, #1
 8007450:	d003      	beq.n	800745a <USBD_LL_DataOutStage+0x82>
 8007452:	e018      	b.n	8007486 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	75bb      	strb	r3, [r7, #22]
            break;
 8007458:	e018      	b.n	800748c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007460:	b2db      	uxtb	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 fa5e 	bl	8007926 <USBD_CoreFindIF>
 800746a:	4603      	mov	r3, r0
 800746c:	75bb      	strb	r3, [r7, #22]
            break;
 800746e:	e00d      	b.n	800748c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fa60 	bl	8007940 <USBD_CoreFindEP>
 8007480:	4603      	mov	r3, r0
 8007482:	75bb      	strb	r3, [r7, #22]
            break;
 8007484:	e002      	b.n	800748c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	75bb      	strb	r3, [r7, #22]
            break;
 800748a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800748c:	7dbb      	ldrb	r3, [r7, #22]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d119      	bne.n	80074c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d113      	bne.n	80074c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800749e:	7dba      	ldrb	r2, [r7, #22]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	32ae      	adds	r2, #174	@ 0xae
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80074ae:	7dba      	ldrb	r2, [r7, #22]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074b6:	7dba      	ldrb	r2, [r7, #22]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	32ae      	adds	r2, #174	@ 0xae
 80074bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f001 f948 	bl	800875c <USBD_CtlSendStatus>
 80074cc:	e032      	b.n	8007534 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fa31 	bl	8007940 <USBD_CoreFindEP>
 80074de:	4603      	mov	r3, r0
 80074e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074e2:	7dbb      	ldrb	r3, [r7, #22]
 80074e4:	2bff      	cmp	r3, #255	@ 0xff
 80074e6:	d025      	beq.n	8007534 <USBD_LL_DataOutStage+0x15c>
 80074e8:	7dbb      	ldrb	r3, [r7, #22]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d122      	bne.n	8007534 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d117      	bne.n	800752a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074fa:	7dba      	ldrb	r2, [r7, #22]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	32ae      	adds	r2, #174	@ 0xae
 8007500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00f      	beq.n	800752a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800750a:	7dba      	ldrb	r2, [r7, #22]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007512:	7dba      	ldrb	r2, [r7, #22]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	32ae      	adds	r2, #174	@ 0xae
 8007518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	7afa      	ldrb	r2, [r7, #11]
 8007520:	4611      	mov	r1, r2
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	e000      	b.n	8007536 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	460b      	mov	r3, r1
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d16f      	bne.n	8007632 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3314      	adds	r3, #20
 8007556:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800755e:	2b02      	cmp	r3, #2
 8007560:	d15a      	bne.n	8007618 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	429a      	cmp	r2, r3
 800756c:	d914      	bls.n	8007598 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	461a      	mov	r2, r3
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f001 f8aa 	bl	80086de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800758a:	2300      	movs	r3, #0
 800758c:	2200      	movs	r2, #0
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f001 fdb9 	bl	8009108 <USBD_LL_PrepareReceive>
 8007596:	e03f      	b.n	8007618 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d11c      	bne.n	80075de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d316      	bcc.n	80075de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d20f      	bcs.n	80075de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075be:	2200      	movs	r2, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f001 f88b 	bl	80086de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d0:	2300      	movs	r3, #0
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f001 fd96 	bl	8009108 <USBD_LL_PrepareReceive>
 80075dc:	e01c      	b.n	8007618 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d10f      	bne.n	800760a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d009      	beq.n	800760a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800760a:	2180      	movs	r1, #128	@ 0x80
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f001 fcd1 	bl	8008fb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f001 f8b5 	bl	8008782 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d03a      	beq.n	8007698 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff fe42 	bl	80072ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007630:	e032      	b.n	8007698 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007632:	7afb      	ldrb	r3, [r7, #11]
 8007634:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007638:	b2db      	uxtb	r3, r3
 800763a:	4619      	mov	r1, r3
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f97f 	bl	8007940 <USBD_CoreFindEP>
 8007642:	4603      	mov	r3, r0
 8007644:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	2bff      	cmp	r3, #255	@ 0xff
 800764a:	d025      	beq.n	8007698 <USBD_LL_DataInStage+0x15a>
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d122      	bne.n	8007698 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b03      	cmp	r3, #3
 800765c:	d11c      	bne.n	8007698 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800765e:	7dfa      	ldrb	r2, [r7, #23]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	32ae      	adds	r2, #174	@ 0xae
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d014      	beq.n	8007698 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800766e:	7dfa      	ldrb	r2, [r7, #23]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007676:	7dfa      	ldrb	r2, [r7, #23]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	32ae      	adds	r2, #174	@ 0xae
 800767c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	7afa      	ldrb	r2, [r7, #11]
 8007684:	4611      	mov	r1, r2
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	4798      	blx	r3
 800768a:	4603      	mov	r3, r0
 800768c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800768e:	7dbb      	ldrb	r3, [r7, #22]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007694:	7dbb      	ldrb	r3, [r7, #22]
 8007696:	e000      	b.n	800769a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d014      	beq.n	8007708 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00e      	beq.n	8007708 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6852      	ldr	r2, [r2, #4]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	4611      	mov	r1, r2
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007704:	2303      	movs	r3, #3
 8007706:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007708:	2340      	movs	r3, #64	@ 0x40
 800770a:	2200      	movs	r2, #0
 800770c:	2100      	movs	r1, #0
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 fc0b 	bl	8008f2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2240      	movs	r2, #64	@ 0x40
 8007720:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007724:	2340      	movs	r3, #64	@ 0x40
 8007726:	2200      	movs	r2, #0
 8007728:	2180      	movs	r1, #128	@ 0x80
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f001 fbfd 	bl	8008f2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2240      	movs	r2, #64	@ 0x40
 800773a:	621a      	str	r2, [r3, #32]

  return ret;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	78fa      	ldrb	r2, [r7, #3]
 8007756:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007774:	b2da      	uxtb	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2204      	movs	r2, #4
 8007780:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d106      	bne.n	80077b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d110      	bne.n	80077f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	32ae      	adds	r2, #174	@ 0xae
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	e01c      	b.n	800785e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b03      	cmp	r3, #3
 800782e:	d115      	bne.n	800785c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32ae      	adds	r2, #174	@ 0xae
 800783a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	32ae      	adds	r2, #174	@ 0xae
 800784e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	4611      	mov	r1, r2
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	32ae      	adds	r2, #174	@ 0xae
 800787c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007884:	2303      	movs	r3, #3
 8007886:	e01c      	b.n	80078c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b03      	cmp	r3, #3
 8007892:	d115      	bne.n	80078c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	32ae      	adds	r2, #174	@ 0xae
 800789e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	32ae      	adds	r2, #174	@ 0xae
 80078b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	4611      	mov	r1, r2
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00e      	beq.n	800791c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6852      	ldr	r2, [r2, #4]
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	4611      	mov	r1, r2
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007932:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800794c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	885b      	ldrh	r3, [r3, #2]
 8007976:	b29b      	uxth	r3, r3
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	7812      	ldrb	r2, [r2, #0]
 800797c:	4293      	cmp	r3, r2
 800797e:	d91f      	bls.n	80079c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007986:	e013      	b.n	80079b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007988:	f107 030a 	add.w	r3, r7, #10
 800798c:	4619      	mov	r1, r3
 800798e:	6978      	ldr	r0, [r7, #20]
 8007990:	f000 f81b 	bl	80079ca <USBD_GetNextDesc>
 8007994:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b05      	cmp	r3, #5
 800799c:	d108      	bne.n	80079b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	789b      	ldrb	r3, [r3, #2]
 80079a6:	78fa      	ldrb	r2, [r7, #3]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d008      	beq.n	80079be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	885b      	ldrh	r3, [r3, #2]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	897b      	ldrh	r3, [r7, #10]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d8e5      	bhi.n	8007988 <USBD_GetEpDesc+0x2e>
 80079bc:	e000      	b.n	80079c0 <USBD_GetEpDesc+0x66>
          break;
 80079be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80079c0:	693b      	ldr	r3, [r7, #16]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	4413      	add	r3, r2
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079f4:	68fb      	ldr	r3, [r7, #12]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b087      	sub	sp, #28
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	3301      	adds	r3, #1
 8007a18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	b21a      	sxth	r2, r3
 8007a28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	b21b      	sxth	r3, r3
 8007a30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a32:	89fb      	ldrh	r3, [r7, #14]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a56:	2b40      	cmp	r3, #64	@ 0x40
 8007a58:	d005      	beq.n	8007a66 <USBD_StdDevReq+0x26>
 8007a5a:	2b40      	cmp	r3, #64	@ 0x40
 8007a5c:	d857      	bhi.n	8007b0e <USBD_StdDevReq+0xce>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00f      	beq.n	8007a82 <USBD_StdDevReq+0x42>
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	d153      	bne.n	8007b0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	32ae      	adds	r2, #174	@ 0xae
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a80:	e04a      	b.n	8007b18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b09      	cmp	r3, #9
 8007a88:	d83b      	bhi.n	8007b02 <USBD_StdDevReq+0xc2>
 8007a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a90 <USBD_StdDevReq+0x50>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007af9 	.word	0x08007af9
 8007a98:	08007b03 	.word	0x08007b03
 8007a9c:	08007aef 	.word	0x08007aef
 8007aa0:	08007b03 	.word	0x08007b03
 8007aa4:	08007ac3 	.word	0x08007ac3
 8007aa8:	08007ab9 	.word	0x08007ab9
 8007aac:	08007b03 	.word	0x08007b03
 8007ab0:	08007adb 	.word	0x08007adb
 8007ab4:	08007acd 	.word	0x08007acd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa3c 	bl	8007f38 <USBD_GetDescriptor>
          break;
 8007ac0:	e024      	b.n	8007b0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fba1 	bl	800820c <USBD_SetAddress>
          break;
 8007aca:	e01f      	b.n	8007b0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fbe0 	bl	8008294 <USBD_SetConfig>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]
          break;
 8007ad8:	e018      	b.n	8007b0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fc83 	bl	80083e8 <USBD_GetConfig>
          break;
 8007ae2:	e013      	b.n	8007b0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fcb4 	bl	8008454 <USBD_GetStatus>
          break;
 8007aec:	e00e      	b.n	8007b0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fce3 	bl	80084bc <USBD_SetFeature>
          break;
 8007af6:	e009      	b.n	8007b0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fd07 	bl	800850e <USBD_ClrFeature>
          break;
 8007b00:	e004      	b.n	8007b0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fd5e 	bl	80085c6 <USBD_CtlError>
          break;
 8007b0a:	bf00      	nop
      }
      break;
 8007b0c:	e004      	b.n	8007b18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fd58 	bl	80085c6 <USBD_CtlError>
      break;
 8007b16:	bf00      	nop
  }

  return ret;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop

08007b24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b3a:	2b40      	cmp	r3, #64	@ 0x40
 8007b3c:	d005      	beq.n	8007b4a <USBD_StdItfReq+0x26>
 8007b3e:	2b40      	cmp	r3, #64	@ 0x40
 8007b40:	d852      	bhi.n	8007be8 <USBD_StdItfReq+0xc4>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <USBD_StdItfReq+0x26>
 8007b46:	2b20      	cmp	r3, #32
 8007b48:	d14e      	bne.n	8007be8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d840      	bhi.n	8007bda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	889b      	ldrh	r3, [r3, #4]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d836      	bhi.n	8007bd0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	889b      	ldrh	r3, [r3, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff fedb 	bl	8007926 <USBD_CoreFindIF>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2bff      	cmp	r3, #255	@ 0xff
 8007b78:	d01d      	beq.n	8007bb6 <USBD_StdItfReq+0x92>
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d11a      	bne.n	8007bb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b80:	7bba      	ldrb	r2, [r7, #14]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	@ 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00f      	beq.n	8007bb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b90:	7bba      	ldrb	r2, [r7, #14]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b98:	7bba      	ldrb	r2, [r7, #14]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	32ae      	adds	r2, #174	@ 0xae
 8007b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bae:	e004      	b.n	8007bba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bb4:	e001      	b.n	8007bba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	88db      	ldrh	r3, [r3, #6]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d110      	bne.n	8007be4 <USBD_StdItfReq+0xc0>
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10d      	bne.n	8007be4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fdc7 	bl	800875c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bce:	e009      	b.n	8007be4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fcf7 	bl	80085c6 <USBD_CtlError>
          break;
 8007bd8:	e004      	b.n	8007be4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fcf2 	bl	80085c6 <USBD_CtlError>
          break;
 8007be2:	e000      	b.n	8007be6 <USBD_StdItfReq+0xc2>
          break;
 8007be4:	bf00      	nop
      }
      break;
 8007be6:	e004      	b.n	8007bf2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fceb 	bl	80085c6 <USBD_CtlError>
      break;
 8007bf0:	bf00      	nop
  }

  return ret;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	889b      	ldrh	r3, [r3, #4]
 8007c0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	d007      	beq.n	8007c2c <USBD_StdEPReq+0x30>
 8007c1c:	2b40      	cmp	r3, #64	@ 0x40
 8007c1e:	f200 817f 	bhi.w	8007f20 <USBD_StdEPReq+0x324>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d02a      	beq.n	8007c7c <USBD_StdEPReq+0x80>
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	f040 817a 	bne.w	8007f20 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fe85 	bl	8007940 <USBD_CoreFindEP>
 8007c36:	4603      	mov	r3, r0
 8007c38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c3a:	7b7b      	ldrb	r3, [r7, #13]
 8007c3c:	2bff      	cmp	r3, #255	@ 0xff
 8007c3e:	f000 8174 	beq.w	8007f2a <USBD_StdEPReq+0x32e>
 8007c42:	7b7b      	ldrb	r3, [r7, #13]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f040 8170 	bne.w	8007f2a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c4a:	7b7a      	ldrb	r2, [r7, #13]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c52:	7b7a      	ldrb	r2, [r7, #13]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	32ae      	adds	r2, #174	@ 0xae
 8007c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8163 	beq.w	8007f2a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c64:	7b7a      	ldrb	r2, [r7, #13]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	32ae      	adds	r2, #174	@ 0xae
 8007c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c7a:	e156      	b.n	8007f2a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d008      	beq.n	8007c96 <USBD_StdEPReq+0x9a>
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	f300 8145 	bgt.w	8007f14 <USBD_StdEPReq+0x318>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 809b 	beq.w	8007dc6 <USBD_StdEPReq+0x1ca>
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d03c      	beq.n	8007d0e <USBD_StdEPReq+0x112>
 8007c94:	e13e      	b.n	8007f14 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d002      	beq.n	8007ca8 <USBD_StdEPReq+0xac>
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d016      	beq.n	8007cd4 <USBD_StdEPReq+0xd8>
 8007ca6:	e02c      	b.n	8007d02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <USBD_StdEPReq+0xce>
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b80      	cmp	r3, #128	@ 0x80
 8007cb2:	d00a      	beq.n	8007cca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f97b 	bl	8008fb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cbe:	2180      	movs	r1, #128	@ 0x80
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f977 	bl	8008fb4 <USBD_LL_StallEP>
 8007cc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc8:	e020      	b.n	8007d0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc7a 	bl	80085c6 <USBD_CtlError>
              break;
 8007cd2:	e01b      	b.n	8007d0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	885b      	ldrh	r3, [r3, #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10e      	bne.n	8007cfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00b      	beq.n	8007cfa <USBD_StdEPReq+0xfe>
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	2b80      	cmp	r3, #128	@ 0x80
 8007ce6:	d008      	beq.n	8007cfa <USBD_StdEPReq+0xfe>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	88db      	ldrh	r3, [r3, #6]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f95d 	bl	8008fb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fd2e 	bl	800875c <USBD_CtlSendStatus>

              break;
 8007d00:	e004      	b.n	8007d0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fc5e 	bl	80085c6 <USBD_CtlError>
              break;
 8007d0a:	bf00      	nop
          }
          break;
 8007d0c:	e107      	b.n	8007f1e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d002      	beq.n	8007d20 <USBD_StdEPReq+0x124>
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d016      	beq.n	8007d4c <USBD_StdEPReq+0x150>
 8007d1e:	e04b      	b.n	8007db8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00d      	beq.n	8007d42 <USBD_StdEPReq+0x146>
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	2b80      	cmp	r3, #128	@ 0x80
 8007d2a:	d00a      	beq.n	8007d42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 f93f 	bl	8008fb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d36:	2180      	movs	r1, #128	@ 0x80
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 f93b 	bl	8008fb4 <USBD_LL_StallEP>
 8007d3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d40:	e040      	b.n	8007dc4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fc3e 	bl	80085c6 <USBD_CtlError>
              break;
 8007d4a:	e03b      	b.n	8007dc4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	885b      	ldrh	r3, [r3, #2]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d136      	bne.n	8007dc2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 f945 	bl	8008ff2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fcf7 	bl	800875c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fde4 	bl	8007940 <USBD_CoreFindEP>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d7c:	7b7b      	ldrb	r3, [r7, #13]
 8007d7e:	2bff      	cmp	r3, #255	@ 0xff
 8007d80:	d01f      	beq.n	8007dc2 <USBD_StdEPReq+0x1c6>
 8007d82:	7b7b      	ldrb	r3, [r7, #13]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11c      	bne.n	8007dc2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d88:	7b7a      	ldrb	r2, [r7, #13]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d90:	7b7a      	ldrb	r2, [r7, #13]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32ae      	adds	r2, #174	@ 0xae
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d010      	beq.n	8007dc2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007da0:	7b7a      	ldrb	r2, [r7, #13]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	32ae      	adds	r2, #174	@ 0xae
 8007da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007db6:	e004      	b.n	8007dc2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fc03 	bl	80085c6 <USBD_CtlError>
              break;
 8007dc0:	e000      	b.n	8007dc4 <USBD_StdEPReq+0x1c8>
              break;
 8007dc2:	bf00      	nop
          }
          break;
 8007dc4:	e0ab      	b.n	8007f1e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d002      	beq.n	8007dd8 <USBD_StdEPReq+0x1dc>
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d032      	beq.n	8007e3c <USBD_StdEPReq+0x240>
 8007dd6:	e097      	b.n	8007f08 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <USBD_StdEPReq+0x1f2>
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b80      	cmp	r3, #128	@ 0x80
 8007de2:	d004      	beq.n	8007dee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fbed 	bl	80085c6 <USBD_CtlError>
                break;
 8007dec:	e091      	b.n	8007f12 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	da0b      	bge.n	8007e0e <USBD_StdEPReq+0x212>
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	3310      	adds	r3, #16
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	4413      	add	r3, r2
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	e00b      	b.n	8007e26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	3304      	adds	r3, #4
 8007e26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	2202      	movs	r2, #2
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fc37 	bl	80086a8 <USBD_CtlSendData>
              break;
 8007e3a:	e06a      	b.n	8007f12 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	da11      	bge.n	8007e68 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	f003 020f 	and.w	r2, r3, #15
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	3324      	adds	r3, #36	@ 0x24
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d117      	bne.n	8007e8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fbb0 	bl	80085c6 <USBD_CtlError>
                  break;
 8007e66:	e054      	b.n	8007f12 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	f003 020f 	and.w	r2, r3, #15
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	440b      	add	r3, r1
 8007e7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fb9d 	bl	80085c6 <USBD_CtlError>
                  break;
 8007e8c:	e041      	b.n	8007f12 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	da0b      	bge.n	8007eae <USBD_StdEPReq+0x2b2>
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	3310      	adds	r3, #16
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	3304      	adds	r3, #4
 8007eac:	e00b      	b.n	8007ec6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <USBD_StdEPReq+0x2d8>
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b80      	cmp	r3, #128	@ 0x80
 8007ed2:	d103      	bne.n	8007edc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e00e      	b.n	8007efa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f8a5 	bl	8009030 <USBD_LL_IsStallEP>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	e002      	b.n	8007efa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2202      	movs	r2, #2
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fbd1 	bl	80086a8 <USBD_CtlSendData>
              break;
 8007f06:	e004      	b.n	8007f12 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fb5b 	bl	80085c6 <USBD_CtlError>
              break;
 8007f10:	bf00      	nop
          }
          break;
 8007f12:	e004      	b.n	8007f1e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fb55 	bl	80085c6 <USBD_CtlError>
          break;
 8007f1c:	bf00      	nop
      }
      break;
 8007f1e:	e005      	b.n	8007f2c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fb4f 	bl	80085c6 <USBD_CtlError>
      break;
 8007f28:	e000      	b.n	8007f2c <USBD_StdEPReq+0x330>
      break;
 8007f2a:	bf00      	nop
  }

  return ret;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	885b      	ldrh	r3, [r3, #2]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2b06      	cmp	r3, #6
 8007f5a:	f200 8128 	bhi.w	80081ae <USBD_GetDescriptor+0x276>
 8007f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <USBD_GetDescriptor+0x2c>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	08007f99 	.word	0x08007f99
 8007f6c:	08007fd9 	.word	0x08007fd9
 8007f70:	080081af 	.word	0x080081af
 8007f74:	080081af 	.word	0x080081af
 8007f78:	0800814f 	.word	0x0800814f
 8007f7c:	0800817b 	.word	0x0800817b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	7c12      	ldrb	r2, [r2, #16]
 8007f8c:	f107 0108 	add.w	r1, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
      break;
 8007f96:	e112      	b.n	80081be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	7c1b      	ldrb	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10d      	bne.n	8007fbc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa8:	f107 0208 	add.w	r2, r7, #8
 8007fac:	4610      	mov	r0, r2
 8007fae:	4798      	blx	r3
 8007fb0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fba:	e100      	b.n	80081be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc4:	f107 0208 	add.w	r2, r7, #8
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
 8007fcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e0f2      	b.n	80081be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	885b      	ldrh	r3, [r3, #2]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	f200 80ac 	bhi.w	800813c <USBD_GetDescriptor+0x204>
 8007fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <USBD_GetDescriptor+0xb4>)
 8007fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fea:	bf00      	nop
 8007fec:	08008005 	.word	0x08008005
 8007ff0:	08008039 	.word	0x08008039
 8007ff4:	0800806d 	.word	0x0800806d
 8007ff8:	080080a1 	.word	0x080080a1
 8007ffc:	080080d5 	.word	0x080080d5
 8008000:	08008109 	.word	0x08008109
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	7c12      	ldrb	r2, [r2, #16]
 800801c:	f107 0108 	add.w	r1, r7, #8
 8008020:	4610      	mov	r0, r2
 8008022:	4798      	blx	r3
 8008024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008026:	e091      	b.n	800814c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 facb 	bl	80085c6 <USBD_CtlError>
            err++;
 8008030:	7afb      	ldrb	r3, [r7, #11]
 8008032:	3301      	adds	r3, #1
 8008034:	72fb      	strb	r3, [r7, #11]
          break;
 8008036:	e089      	b.n	800814c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	7c12      	ldrb	r2, [r2, #16]
 8008050:	f107 0108 	add.w	r1, r7, #8
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
 8008058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800805a:	e077      	b.n	800814c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fab1 	bl	80085c6 <USBD_CtlError>
            err++;
 8008064:	7afb      	ldrb	r3, [r7, #11]
 8008066:	3301      	adds	r3, #1
 8008068:	72fb      	strb	r3, [r7, #11]
          break;
 800806a:	e06f      	b.n	800814c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7c12      	ldrb	r2, [r2, #16]
 8008084:	f107 0108 	add.w	r1, r7, #8
 8008088:	4610      	mov	r0, r2
 800808a:	4798      	blx	r3
 800808c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808e:	e05d      	b.n	800814c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fa97 	bl	80085c6 <USBD_CtlError>
            err++;
 8008098:	7afb      	ldrb	r3, [r7, #11]
 800809a:	3301      	adds	r3, #1
 800809c:	72fb      	strb	r3, [r7, #11]
          break;
 800809e:	e055      	b.n	800814c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00b      	beq.n	80080c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	7c12      	ldrb	r2, [r2, #16]
 80080b8:	f107 0108 	add.w	r1, r7, #8
 80080bc:	4610      	mov	r0, r2
 80080be:	4798      	blx	r3
 80080c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080c2:	e043      	b.n	800814c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa7d 	bl	80085c6 <USBD_CtlError>
            err++;
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	3301      	adds	r3, #1
 80080d0:	72fb      	strb	r3, [r7, #11]
          break;
 80080d2:	e03b      	b.n	800814c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	7c12      	ldrb	r2, [r2, #16]
 80080ec:	f107 0108 	add.w	r1, r7, #8
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f6:	e029      	b.n	800814c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa63 	bl	80085c6 <USBD_CtlError>
            err++;
 8008100:	7afb      	ldrb	r3, [r7, #11]
 8008102:	3301      	adds	r3, #1
 8008104:	72fb      	strb	r3, [r7, #11]
          break;
 8008106:	e021      	b.n	800814c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00b      	beq.n	800812c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	7c12      	ldrb	r2, [r2, #16]
 8008120:	f107 0108 	add.w	r1, r7, #8
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812a:	e00f      	b.n	800814c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fa49 	bl	80085c6 <USBD_CtlError>
            err++;
 8008134:	7afb      	ldrb	r3, [r7, #11]
 8008136:	3301      	adds	r3, #1
 8008138:	72fb      	strb	r3, [r7, #11]
          break;
 800813a:	e007      	b.n	800814c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa41 	bl	80085c6 <USBD_CtlError>
          err++;
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	3301      	adds	r3, #1
 8008148:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800814a:	bf00      	nop
      }
      break;
 800814c:	e037      	b.n	80081be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7c1b      	ldrb	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800815c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800815e:	f107 0208 	add.w	r2, r7, #8
 8008162:	4610      	mov	r0, r2
 8008164:	4798      	blx	r3
 8008166:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008168:	e029      	b.n	80081be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fa2a 	bl	80085c6 <USBD_CtlError>
        err++;
 8008172:	7afb      	ldrb	r3, [r7, #11]
 8008174:	3301      	adds	r3, #1
 8008176:	72fb      	strb	r3, [r7, #11]
      break;
 8008178:	e021      	b.n	80081be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	7c1b      	ldrb	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10d      	bne.n	800819e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800818a:	f107 0208 	add.w	r2, r7, #8
 800818e:	4610      	mov	r0, r2
 8008190:	4798      	blx	r3
 8008192:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	2207      	movs	r2, #7
 800819a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800819c:	e00f      	b.n	80081be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fa10 	bl	80085c6 <USBD_CtlError>
        err++;
 80081a6:	7afb      	ldrb	r3, [r7, #11]
 80081a8:	3301      	adds	r3, #1
 80081aa:	72fb      	strb	r3, [r7, #11]
      break;
 80081ac:	e007      	b.n	80081be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fa08 	bl	80085c6 <USBD_CtlError>
      err++;
 80081b6:	7afb      	ldrb	r3, [r7, #11]
 80081b8:	3301      	adds	r3, #1
 80081ba:	72fb      	strb	r3, [r7, #11]
      break;
 80081bc:	bf00      	nop
  }

  if (err != 0U)
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11e      	bne.n	8008202 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	88db      	ldrh	r3, [r3, #6]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d016      	beq.n	80081fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80081cc:	893b      	ldrh	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	88da      	ldrh	r2, [r3, #6]
 80081d6:	893b      	ldrh	r3, [r7, #8]
 80081d8:	4293      	cmp	r3, r2
 80081da:	bf28      	it	cs
 80081dc:	4613      	movcs	r3, r2
 80081de:	b29b      	uxth	r3, r3
 80081e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081e2:	893b      	ldrh	r3, [r7, #8]
 80081e4:	461a      	mov	r2, r3
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fa5d 	bl	80086a8 <USBD_CtlSendData>
 80081ee:	e009      	b.n	8008204 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f9e7 	bl	80085c6 <USBD_CtlError>
 80081f8:	e004      	b.n	8008204 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 faae 	bl	800875c <USBD_CtlSendStatus>
 8008200:	e000      	b.n	8008204 <USBD_GetDescriptor+0x2cc>
    return;
 8008202:	bf00      	nop
  }
}
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop

0800820c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	889b      	ldrh	r3, [r3, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d131      	bne.n	8008282 <USBD_SetAddress+0x76>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	88db      	ldrh	r3, [r3, #6]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d12d      	bne.n	8008282 <USBD_SetAddress+0x76>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	2b7f      	cmp	r3, #127	@ 0x7f
 800822c:	d829      	bhi.n	8008282 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	885b      	ldrh	r3, [r3, #2]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008238:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b03      	cmp	r3, #3
 8008244:	d104      	bne.n	8008250 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f9bc 	bl	80085c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824e:	e01d      	b.n	800828c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	7bfa      	ldrb	r2, [r7, #15]
 8008254:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 ff13 	bl	8009088 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa7a 	bl	800875c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008276:	e009      	b.n	800828c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008280:	e004      	b.n	800828c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f99e 	bl	80085c6 <USBD_CtlError>
  }
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	4b4e      	ldr	r3, [pc, #312]	@ (80083e4 <USBD_SetConfig+0x150>)
 80082aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082ac:	4b4d      	ldr	r3, [pc, #308]	@ (80083e4 <USBD_SetConfig+0x150>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d905      	bls.n	80082c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f985 	bl	80085c6 <USBD_CtlError>
    return USBD_FAIL;
 80082bc:	2303      	movs	r3, #3
 80082be:	e08c      	b.n	80083da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d002      	beq.n	80082d2 <USBD_SetConfig+0x3e>
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d029      	beq.n	8008324 <USBD_SetConfig+0x90>
 80082d0:	e075      	b.n	80083be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082d2:	4b44      	ldr	r3, [pc, #272]	@ (80083e4 <USBD_SetConfig+0x150>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d020      	beq.n	800831c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082da:	4b42      	ldr	r3, [pc, #264]	@ (80083e4 <USBD_SetConfig+0x150>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082e4:	4b3f      	ldr	r3, [pc, #252]	@ (80083e4 <USBD_SetConfig+0x150>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fe ffe9 	bl	80072c2 <USBD_SetClassConfig>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d008      	beq.n	800830c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f962 	bl	80085c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800830a:	e065      	b.n	80083d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa25 	bl	800875c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2203      	movs	r2, #3
 8008316:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800831a:	e05d      	b.n	80083d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fa1d 	bl	800875c <USBD_CtlSendStatus>
      break;
 8008322:	e059      	b.n	80083d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008324:	4b2f      	ldr	r3, [pc, #188]	@ (80083e4 <USBD_SetConfig+0x150>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d112      	bne.n	8008352 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008334:	4b2b      	ldr	r3, [pc, #172]	@ (80083e4 <USBD_SetConfig+0x150>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800833e:	4b29      	ldr	r3, [pc, #164]	@ (80083e4 <USBD_SetConfig+0x150>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7fe ffd8 	bl	80072fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa06 	bl	800875c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008350:	e042      	b.n	80083d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008352:	4b24      	ldr	r3, [pc, #144]	@ (80083e4 <USBD_SetConfig+0x150>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	429a      	cmp	r2, r3
 800835e:	d02a      	beq.n	80083b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	b2db      	uxtb	r3, r3
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7fe ffc6 	bl	80072fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800836e:	4b1d      	ldr	r3, [pc, #116]	@ (80083e4 <USBD_SetConfig+0x150>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008378:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <USBD_SetConfig+0x150>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7fe ff9f 	bl	80072c2 <USBD_SetClassConfig>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00f      	beq.n	80083ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f918 	bl	80085c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b2db      	uxtb	r3, r3
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7fe ffab 	bl	80072fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083ac:	e014      	b.n	80083d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f9d4 	bl	800875c <USBD_CtlSendStatus>
      break;
 80083b4:	e010      	b.n	80083d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9d0 	bl	800875c <USBD_CtlSendStatus>
      break;
 80083bc:	e00c      	b.n	80083d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f900 	bl	80085c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083c6:	4b07      	ldr	r3, [pc, #28]	@ (80083e4 <USBD_SetConfig+0x150>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7fe ff94 	bl	80072fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083d2:	2303      	movs	r3, #3
 80083d4:	73fb      	strb	r3, [r7, #15]
      break;
 80083d6:	bf00      	nop
  }

  return ret;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	200002c0 	.word	0x200002c0

080083e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	88db      	ldrh	r3, [r3, #6]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d004      	beq.n	8008404 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f8e2 	bl	80085c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008402:	e023      	b.n	800844c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	dc02      	bgt.n	8008416 <USBD_GetConfig+0x2e>
 8008410:	2b00      	cmp	r3, #0
 8008412:	dc03      	bgt.n	800841c <USBD_GetConfig+0x34>
 8008414:	e015      	b.n	8008442 <USBD_GetConfig+0x5a>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d00b      	beq.n	8008432 <USBD_GetConfig+0x4a>
 800841a:	e012      	b.n	8008442 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3308      	adds	r3, #8
 8008426:	2201      	movs	r2, #1
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f93c 	bl	80086a8 <USBD_CtlSendData>
        break;
 8008430:	e00c      	b.n	800844c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3304      	adds	r3, #4
 8008436:	2201      	movs	r2, #1
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f934 	bl	80086a8 <USBD_CtlSendData>
        break;
 8008440:	e004      	b.n	800844c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8be 	bl	80085c6 <USBD_CtlError>
        break;
 800844a:	bf00      	nop
}
 800844c:	bf00      	nop
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008464:	b2db      	uxtb	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	2b02      	cmp	r3, #2
 800846a:	d81e      	bhi.n	80084aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	88db      	ldrh	r3, [r3, #6]
 8008470:	2b02      	cmp	r3, #2
 8008472:	d004      	beq.n	800847e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8a5 	bl	80085c6 <USBD_CtlError>
        break;
 800847c:	e01a      	b.n	80084b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f043 0202 	orr.w	r2, r3, #2
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	330c      	adds	r3, #12
 800849e:	2202      	movs	r2, #2
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f900 	bl	80086a8 <USBD_CtlSendData>
      break;
 80084a8:	e004      	b.n	80084b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f88a 	bl	80085c6 <USBD_CtlError>
      break;
 80084b2:	bf00      	nop
  }
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d107      	bne.n	80084de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f940 	bl	800875c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084dc:	e013      	b.n	8008506 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	885b      	ldrh	r3, [r3, #2]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d10b      	bne.n	80084fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	889b      	ldrh	r3, [r3, #4]
 80084ea:	0a1b      	lsrs	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f930 	bl	800875c <USBD_CtlSendStatus>
}
 80084fc:	e003      	b.n	8008506 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f860 	bl	80085c6 <USBD_CtlError>
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851e:	b2db      	uxtb	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	2b02      	cmp	r3, #2
 8008524:	d80b      	bhi.n	800853e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	885b      	ldrh	r3, [r3, #2]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d10c      	bne.n	8008548 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f910 	bl	800875c <USBD_CtlSendStatus>
      }
      break;
 800853c:	e004      	b.n	8008548 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f840 	bl	80085c6 <USBD_CtlError>
      break;
 8008546:	e000      	b.n	800854a <USBD_ClrFeature+0x3c>
      break;
 8008548:	bf00      	nop
  }
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	781a      	ldrb	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fa40 	bl	8007a02 <SWAPBYTE>
 8008582:	4603      	mov	r3, r0
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fa33 	bl	8007a02 <SWAPBYTE>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3301      	adds	r3, #1
 80085ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff fa26 	bl	8007a02 <SWAPBYTE>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	80da      	strh	r2, [r3, #6]
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085d0:	2180      	movs	r1, #128	@ 0x80
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fcee 	bl	8008fb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085d8:	2100      	movs	r1, #0
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fcea 	bl	8008fb4 <USBD_LL_StallEP>
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d036      	beq.n	800866c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008602:	6938      	ldr	r0, [r7, #16]
 8008604:	f000 f836 	bl	8008674 <USBD_GetLen>
 8008608:	4603      	mov	r3, r0
 800860a:	3301      	adds	r3, #1
 800860c:	b29b      	uxth	r3, r3
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	4413      	add	r3, r2
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7812      	ldrb	r2, [r2, #0]
 8008620:	701a      	strb	r2, [r3, #0]
  idx++;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	3301      	adds	r3, #1
 8008626:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008628:	7dfb      	ldrb	r3, [r7, #23]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4413      	add	r3, r2
 800862e:	2203      	movs	r2, #3
 8008630:	701a      	strb	r2, [r3, #0]
  idx++;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	3301      	adds	r3, #1
 8008636:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008638:	e013      	b.n	8008662 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	4413      	add	r3, r2
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	7812      	ldrb	r2, [r2, #0]
 8008644:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3301      	adds	r3, #1
 800864a:	613b      	str	r3, [r7, #16]
    idx++;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	3301      	adds	r3, #1
 8008650:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	4413      	add	r3, r2
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
    idx++;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	3301      	adds	r3, #1
 8008660:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e7      	bne.n	800863a <USBD_GetString+0x52>
 800866a:	e000      	b.n	800866e <USBD_GetString+0x86>
    return;
 800866c:	bf00      	nop
  }
}
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008684:	e005      	b.n	8008692 <USBD_GetLen+0x1e>
  {
    len++;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	3301      	adds	r3, #1
 800868a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	3301      	adds	r3, #1
 8008690:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f5      	bne.n	8008686 <USBD_GetLen+0x12>
  }

  return len;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	2100      	movs	r1, #0
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 fcf9 	bl	80090c6 <USBD_LL_Transmit>

  return USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	2100      	movs	r1, #0
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fce8 	bl	80090c6 <USBD_LL_Transmit>

  return USBD_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2203      	movs	r2, #3
 8008710:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	2100      	movs	r1, #0
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 fcec 	bl	8009108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	2100      	movs	r1, #0
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fcdb 	bl	8009108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2204      	movs	r2, #4
 8008768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800876c:	2300      	movs	r3, #0
 800876e:	2200      	movs	r2, #0
 8008770:	2100      	movs	r1, #0
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fca7 	bl	80090c6 <USBD_LL_Transmit>

  return USBD_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2205      	movs	r2, #5
 800878e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008792:	2300      	movs	r3, #0
 8008794:	2200      	movs	r2, #0
 8008796:	2100      	movs	r1, #0
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fcb5 	bl	8009108 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087ac:	2200      	movs	r2, #0
 80087ae:	4912      	ldr	r1, [pc, #72]	@ (80087f8 <MX_USB_DEVICE_Init+0x50>)
 80087b0:	4812      	ldr	r0, [pc, #72]	@ (80087fc <MX_USB_DEVICE_Init+0x54>)
 80087b2:	f7fe fd09 	bl	80071c8 <USBD_Init>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087bc:	f7f8 f9d2 	bl	8000b64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087c0:	490f      	ldr	r1, [pc, #60]	@ (8008800 <MX_USB_DEVICE_Init+0x58>)
 80087c2:	480e      	ldr	r0, [pc, #56]	@ (80087fc <MX_USB_DEVICE_Init+0x54>)
 80087c4:	f7fe fd30 	bl	8007228 <USBD_RegisterClass>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087ce:	f7f8 f9c9 	bl	8000b64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087d2:	490c      	ldr	r1, [pc, #48]	@ (8008804 <MX_USB_DEVICE_Init+0x5c>)
 80087d4:	4809      	ldr	r0, [pc, #36]	@ (80087fc <MX_USB_DEVICE_Init+0x54>)
 80087d6:	f7fe fc21 	bl	800701c <USBD_CDC_RegisterInterface>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087e0:	f7f8 f9c0 	bl	8000b64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087e4:	4805      	ldr	r0, [pc, #20]	@ (80087fc <MX_USB_DEVICE_Init+0x54>)
 80087e6:	f7fe fd55 	bl	8007294 <USBD_Start>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087f0:	f7f8 f9b8 	bl	8000b64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087f4:	bf00      	nop
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	200000b0 	.word	0x200000b0
 80087fc:	200002c4 	.word	0x200002c4
 8008800:	2000001c 	.word	0x2000001c
 8008804:	2000009c 	.word	0x2000009c

08008808 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800880c:	2200      	movs	r2, #0
 800880e:	4905      	ldr	r1, [pc, #20]	@ (8008824 <CDC_Init_FS+0x1c>)
 8008810:	4805      	ldr	r0, [pc, #20]	@ (8008828 <CDC_Init_FS+0x20>)
 8008812:	f7fe fc1d 	bl	8007050 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008816:	4905      	ldr	r1, [pc, #20]	@ (800882c <CDC_Init_FS+0x24>)
 8008818:	4803      	ldr	r0, [pc, #12]	@ (8008828 <CDC_Init_FS+0x20>)
 800881a:	f7fe fc3b 	bl	8007094 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800881e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008820:	4618      	mov	r0, r3
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20000da0 	.word	0x20000da0
 8008828:	200002c4 	.word	0x200002c4
 800882c:	200005a0 	.word	0x200005a0

08008830 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008830:	b480      	push	{r7}
 8008832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008834:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008836:	4618      	mov	r0, r3
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	71fb      	strb	r3, [r7, #7]
 800884c:	4613      	mov	r3, r2
 800884e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	2b23      	cmp	r3, #35	@ 0x23
 8008854:	d84a      	bhi.n	80088ec <CDC_Control_FS+0xac>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <CDC_Control_FS+0x1c>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	080088ed 	.word	0x080088ed
 8008860:	080088ed 	.word	0x080088ed
 8008864:	080088ed 	.word	0x080088ed
 8008868:	080088ed 	.word	0x080088ed
 800886c:	080088ed 	.word	0x080088ed
 8008870:	080088ed 	.word	0x080088ed
 8008874:	080088ed 	.word	0x080088ed
 8008878:	080088ed 	.word	0x080088ed
 800887c:	080088ed 	.word	0x080088ed
 8008880:	080088ed 	.word	0x080088ed
 8008884:	080088ed 	.word	0x080088ed
 8008888:	080088ed 	.word	0x080088ed
 800888c:	080088ed 	.word	0x080088ed
 8008890:	080088ed 	.word	0x080088ed
 8008894:	080088ed 	.word	0x080088ed
 8008898:	080088ed 	.word	0x080088ed
 800889c:	080088ed 	.word	0x080088ed
 80088a0:	080088ed 	.word	0x080088ed
 80088a4:	080088ed 	.word	0x080088ed
 80088a8:	080088ed 	.word	0x080088ed
 80088ac:	080088ed 	.word	0x080088ed
 80088b0:	080088ed 	.word	0x080088ed
 80088b4:	080088ed 	.word	0x080088ed
 80088b8:	080088ed 	.word	0x080088ed
 80088bc:	080088ed 	.word	0x080088ed
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	080088ed 	.word	0x080088ed
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	080088ed 	.word	0x080088ed
 80088d0:	080088ed 	.word	0x080088ed
 80088d4:	080088ed 	.word	0x080088ed
 80088d8:	080088ed 	.word	0x080088ed
 80088dc:	080088ed 	.word	0x080088ed
 80088e0:	080088ed 	.word	0x080088ed
 80088e4:	080088ed 	.word	0x080088ed
 80088e8:	080088ed 	.word	0x080088ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088ec:	bf00      	nop
  }

  return (USBD_OK);
 80088ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4805      	ldr	r0, [pc, #20]	@ (8008920 <CDC_Receive_FS+0x24>)
 800890a:	f7fe fbc3 	bl	8007094 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800890e:	4804      	ldr	r0, [pc, #16]	@ (8008920 <CDC_Receive_FS+0x24>)
 8008910:	f7fe fc24 	bl	800715c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008914:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	200002c4 	.word	0x200002c4

08008924 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008934:	4b0d      	ldr	r3, [pc, #52]	@ (800896c <CDC_Transmit_FS+0x48>)
 8008936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800893a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008946:	2301      	movs	r3, #1
 8008948:	e00b      	b.n	8008962 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800894a:	887b      	ldrh	r3, [r7, #2]
 800894c:	461a      	mov	r2, r3
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4806      	ldr	r0, [pc, #24]	@ (800896c <CDC_Transmit_FS+0x48>)
 8008952:	f7fe fb7d 	bl	8007050 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008956:	4805      	ldr	r0, [pc, #20]	@ (800896c <CDC_Transmit_FS+0x48>)
 8008958:	f7fe fbba 	bl	80070d0 <USBD_CDC_TransmitPacket>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200002c4 	.word	0x200002c4

08008970 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4613      	mov	r3, r2
 800897c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008986:	4618      	mov	r0, r3
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
	...

08008994 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2212      	movs	r2, #18
 80089a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089a6:	4b03      	ldr	r3, [pc, #12]	@ (80089b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	200000cc 	.word	0x200000cc

080089b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	6039      	str	r1, [r7, #0]
 80089c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2204      	movs	r2, #4
 80089c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089ca:	4b03      	ldr	r3, [pc, #12]	@ (80089d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	200000e0 	.word	0x200000e0

080089dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d105      	bne.n	80089fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4907      	ldr	r1, [pc, #28]	@ (8008a10 <USBD_FS_ProductStrDescriptor+0x34>)
 80089f2:	4808      	ldr	r0, [pc, #32]	@ (8008a14 <USBD_FS_ProductStrDescriptor+0x38>)
 80089f4:	f7ff fdf8 	bl	80085e8 <USBD_GetString>
 80089f8:	e004      	b.n	8008a04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4904      	ldr	r1, [pc, #16]	@ (8008a10 <USBD_FS_ProductStrDescriptor+0x34>)
 80089fe:	4805      	ldr	r0, [pc, #20]	@ (8008a14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a00:	f7ff fdf2 	bl	80085e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a04:	4b02      	ldr	r3, [pc, #8]	@ (8008a10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	200015a0 	.word	0x200015a0
 8008a14:	0800a0d4 	.word	0x0800a0d4

08008a18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	6039      	str	r1, [r7, #0]
 8008a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	4904      	ldr	r1, [pc, #16]	@ (8008a38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a28:	4804      	ldr	r0, [pc, #16]	@ (8008a3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a2a:	f7ff fddd 	bl	80085e8 <USBD_GetString>
  return USBD_StrDesc;
 8008a2e:	4b02      	ldr	r3, [pc, #8]	@ (8008a38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	200015a0 	.word	0x200015a0
 8008a3c:	0800a0ec 	.word	0x0800a0ec

08008a40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	6039      	str	r1, [r7, #0]
 8008a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	221a      	movs	r2, #26
 8008a50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a52:	f000 f843 	bl	8008adc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a56:	4b02      	ldr	r3, [pc, #8]	@ (8008a60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	200000e4 	.word	0x200000e4

08008a64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a70:	79fb      	ldrb	r3, [r7, #7]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d105      	bne.n	8008a82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	4907      	ldr	r1, [pc, #28]	@ (8008a98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a7a:	4808      	ldr	r0, [pc, #32]	@ (8008a9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a7c:	f7ff fdb4 	bl	80085e8 <USBD_GetString>
 8008a80:	e004      	b.n	8008a8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	4904      	ldr	r1, [pc, #16]	@ (8008a98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a86:	4805      	ldr	r0, [pc, #20]	@ (8008a9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a88:	f7ff fdae 	bl	80085e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a8c:	4b02      	ldr	r3, [pc, #8]	@ (8008a98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200015a0 	.word	0x200015a0
 8008a9c:	0800a100 	.word	0x0800a100

08008aa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	6039      	str	r1, [r7, #0]
 8008aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d105      	bne.n	8008abe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	4907      	ldr	r1, [pc, #28]	@ (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ab6:	4808      	ldr	r0, [pc, #32]	@ (8008ad8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ab8:	f7ff fd96 	bl	80085e8 <USBD_GetString>
 8008abc:	e004      	b.n	8008ac8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4904      	ldr	r1, [pc, #16]	@ (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ac2:	4805      	ldr	r0, [pc, #20]	@ (8008ad8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ac4:	f7ff fd90 	bl	80085e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac8:	4b02      	ldr	r3, [pc, #8]	@ (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200015a0 	.word	0x200015a0
 8008ad8:	0800a10c 	.word	0x0800a10c

08008adc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8008b20 <Get_SerialNum+0x44>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8008b24 <Get_SerialNum+0x48>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aee:	4b0e      	ldr	r3, [pc, #56]	@ (8008b28 <Get_SerialNum+0x4c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4413      	add	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b02:	2208      	movs	r2, #8
 8008b04:	4909      	ldr	r1, [pc, #36]	@ (8008b2c <Get_SerialNum+0x50>)
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f814 	bl	8008b34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b0c:	2204      	movs	r2, #4
 8008b0e:	4908      	ldr	r1, [pc, #32]	@ (8008b30 <Get_SerialNum+0x54>)
 8008b10:	68b8      	ldr	r0, [r7, #8]
 8008b12:	f000 f80f 	bl	8008b34 <IntToUnicode>
  }
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	1fff7a10 	.word	0x1fff7a10
 8008b24:	1fff7a14 	.word	0x1fff7a14
 8008b28:	1fff7a18 	.word	0x1fff7a18
 8008b2c:	200000e6 	.word	0x200000e6
 8008b30:	200000f6 	.word	0x200000f6

08008b34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b46:	2300      	movs	r3, #0
 8008b48:	75fb      	strb	r3, [r7, #23]
 8008b4a:	e027      	b.n	8008b9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	0f1b      	lsrs	r3, r3, #28
 8008b50:	2b09      	cmp	r3, #9
 8008b52:	d80b      	bhi.n	8008b6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	0f1b      	lsrs	r3, r3, #28
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	440b      	add	r3, r1
 8008b64:	3230      	adds	r2, #48	@ 0x30
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	e00a      	b.n	8008b82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	0f1b      	lsrs	r3, r3, #28
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4619      	mov	r1, r3
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	440b      	add	r3, r1
 8008b7c:	3237      	adds	r2, #55	@ 0x37
 8008b7e:	b2d2      	uxtb	r2, r2
 8008b80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	4413      	add	r3, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	75fb      	strb	r3, [r7, #23]
 8008b9c:	7dfa      	ldrb	r2, [r7, #23]
 8008b9e:	79fb      	ldrb	r3, [r7, #7]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d3d3      	bcc.n	8008b4c <IntToUnicode+0x18>
  }
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08a      	sub	sp, #40	@ 0x28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bbc:	f107 0314 	add.w	r3, r7, #20
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	605a      	str	r2, [r3, #4]
 8008bc6:	609a      	str	r2, [r3, #8]
 8008bc8:	60da      	str	r2, [r3, #12]
 8008bca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bd4:	d147      	bne.n	8008c66 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	4b25      	ldr	r3, [pc, #148]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bde:	4a24      	ldr	r2, [pc, #144]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008be0:	f043 0301 	orr.w	r3, r3, #1
 8008be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008be6:	4b22      	ldr	r3, [pc, #136]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	613b      	str	r3, [r7, #16]
 8008bf0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c00:	f107 0314 	add.w	r3, r7, #20
 8008c04:	4619      	mov	r1, r3
 8008c06:	481b      	ldr	r0, [pc, #108]	@ (8008c74 <HAL_PCD_MspInit+0xc0>)
 8008c08:	f7f8 fca2 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c0c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c12:	2302      	movs	r3, #2
 8008c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c1e:	230a      	movs	r3, #10
 8008c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c22:	f107 0314 	add.w	r3, r7, #20
 8008c26:	4619      	mov	r1, r3
 8008c28:	4812      	ldr	r0, [pc, #72]	@ (8008c74 <HAL_PCD_MspInit+0xc0>)
 8008c2a:	f7f8 fc91 	bl	8001550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c2e:	4b10      	ldr	r3, [pc, #64]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c32:	4a0f      	ldr	r2, [pc, #60]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c38:	6353      	str	r3, [r2, #52]	@ 0x34
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c42:	4a0b      	ldr	r2, [pc, #44]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8008c4a:	4b09      	ldr	r3, [pc, #36]	@ (8008c70 <HAL_PCD_MspInit+0xbc>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c56:	2200      	movs	r2, #0
 8008c58:	2100      	movs	r1, #0
 8008c5a:	2043      	movs	r0, #67	@ 0x43
 8008c5c:	f7f8 fc41 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c60:	2043      	movs	r0, #67	@ 0x43
 8008c62:	f7f8 fc5a 	bl	800151a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c66:	bf00      	nop
 8008c68:	3728      	adds	r7, #40	@ 0x28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	40023800 	.word	0x40023800
 8008c74:	40020000 	.word	0x40020000

08008c78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4610      	mov	r0, r2
 8008c90:	f7fe fb4d 	bl	800732e <USBD_LL_SetupStage>
}
 8008c94:	bf00      	nop
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f7fe fb87 	bl	80073d8 <USBD_LL_DataOutStage>
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	334c      	adds	r3, #76	@ 0x4c
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f7fe fc20 	bl	800753e <USBD_LL_DataInStage>
}
 8008cfe:	bf00      	nop
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe fd54 	bl	80077c2 <USBD_LL_SOF>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
 8008d3a:	e008      	b.n	8008d4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d102      	bne.n	8008d4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d44:	2301      	movs	r3, #1
 8008d46:	73fb      	strb	r3, [r7, #15]
 8008d48:	e001      	b.n	8008d4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d4a:	f7f7 ff0b 	bl	8000b64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008d54:	7bfa      	ldrb	r2, [r7, #15]
 8008d56:	4611      	mov	r1, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe fcf4 	bl	8007746 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fc9c 	bl	80076a2 <USBD_LL_Reset>
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fcef 	bl	8007766 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008da8:	4b04      	ldr	r3, [pc, #16]	@ (8008dbc <HAL_PCD_SuspendCallback+0x48>)
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	4a03      	ldr	r2, [pc, #12]	@ (8008dbc <HAL_PCD_SuspendCallback+0x48>)
 8008dae:	f043 0306 	orr.w	r3, r3, #6
 8008db2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	e000ed00 	.word	0xe000ed00

08008dc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fcdf 	bl	8007792 <USBD_LL_Resume>
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe fd37 	bl	8007866 <USBD_LL_IsoOUTIncomplete>
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fcf3 	bl	8007802 <USBD_LL_IsoINIncomplete>
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fe fd49 	bl	80078ca <USBD_LL_DevConnected>
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fd46 	bl	80078e0 <USBD_LL_DevDisconnected>
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d13c      	bne.n	8008ee6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e6c:	4a20      	ldr	r2, [pc, #128]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e78:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008e82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e84:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e86:	2204      	movs	r2, #4
 8008e88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e8a:	4b19      	ldr	r3, [pc, #100]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e90:	4b17      	ldr	r3, [pc, #92]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e96:	4b16      	ldr	r3, [pc, #88]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e98:	2202      	movs	r2, #2
 8008e9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e9c:	4b14      	ldr	r3, [pc, #80]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008ea2:	4b13      	ldr	r3, [pc, #76]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ea8:	4b11      	ldr	r3, [pc, #68]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008eae:	4b10      	ldr	r3, [pc, #64]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008eba:	480d      	ldr	r0, [pc, #52]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008ebc:	f7f9 fb14 	bl	80024e8 <HAL_PCD_Init>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ec6:	f7f7 fe4d 	bl	8000b64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008eca:	2180      	movs	r1, #128	@ 0x80
 8008ecc:	4808      	ldr	r0, [pc, #32]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008ece:	f7fa fd6c 	bl	80039aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ed2:	2240      	movs	r2, #64	@ 0x40
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4806      	ldr	r0, [pc, #24]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008ed8:	f7fa fd20 	bl	800391c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008edc:	2280      	movs	r2, #128	@ 0x80
 8008ede:	2101      	movs	r1, #1
 8008ee0:	4803      	ldr	r0, [pc, #12]	@ (8008ef0 <USBD_LL_Init+0x94>)
 8008ee2:	f7fa fd1b 	bl	800391c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	200017a0 	.word	0x200017a0

08008ef4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7f9 fc09 	bl	8002722 <HAL_PCD_Start>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f942 	bl	80091a0 <USBD_Get_USB_Status>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	4608      	mov	r0, r1
 8008f34:	4611      	mov	r1, r2
 8008f36:	461a      	mov	r2, r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	70fb      	strb	r3, [r7, #3]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70bb      	strb	r3, [r7, #2]
 8008f40:	4613      	mov	r3, r2
 8008f42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008f52:	78bb      	ldrb	r3, [r7, #2]
 8008f54:	883a      	ldrh	r2, [r7, #0]
 8008f56:	78f9      	ldrb	r1, [r7, #3]
 8008f58:	f7fa f8da 	bl	8003110 <HAL_PCD_EP_Open>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 f91c 	bl	80091a0 <USBD_Get_USB_Status>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fa f923 	bl	80031e0 <HAL_PCD_EP_Close>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f8fd 	bl	80091a0 <USBD_Get_USB_Status>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fa f9fb 	bl	80033ce <HAL_PCD_EP_SetStall>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f8de 	bl	80091a0 <USBD_Get_USB_Status>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800900c:	78fa      	ldrb	r2, [r7, #3]
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f7fa fa40 	bl	8003496 <HAL_PCD_EP_ClrStall>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f8bf 	bl	80091a0 <USBD_Get_USB_Status>
 8009022:	4603      	mov	r3, r0
 8009024:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009026:	7bbb      	ldrb	r3, [r7, #14]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009042:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009048:	2b00      	cmp	r3, #0
 800904a:	da0b      	bge.n	8009064 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	4613      	mov	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	333e      	adds	r3, #62	@ 0x3e
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	e00b      	b.n	800907c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	4613      	mov	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800907a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090a2:	78fa      	ldrb	r2, [r7, #3]
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fa f80d 	bl	80030c6 <HAL_PCD_SetAddress>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f874 	bl	80091a0 <USBD_Get_USB_Status>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	603b      	str	r3, [r7, #0]
 80090d2:	460b      	mov	r3, r1
 80090d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80090e4:	7af9      	ldrb	r1, [r7, #11]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	f7fa f926 	bl	800333a <HAL_PCD_EP_Transmit>
 80090ee:	4603      	mov	r3, r0
 80090f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f853 	bl	80091a0 <USBD_Get_USB_Status>
 80090fa:	4603      	mov	r3, r0
 80090fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	607a      	str	r2, [r7, #4]
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	460b      	mov	r3, r1
 8009116:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009126:	7af9      	ldrb	r1, [r7, #11]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	f7fa f8a2 	bl	8003274 <HAL_PCD_EP_Receive>
 8009130:	4603      	mov	r3, r0
 8009132:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f832 	bl	80091a0 <USBD_Get_USB_Status>
 800913c:	4603      	mov	r3, r0
 800913e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009140:	7dbb      	ldrb	r3, [r7, #22]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	4611      	mov	r1, r2
 8009160:	4618      	mov	r0, r3
 8009162:	f7fa f8d2 	bl	800330a <HAL_PCD_EP_GetRxCount>
 8009166:	4603      	mov	r3, r0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009178:	4b03      	ldr	r3, [pc, #12]	@ (8009188 <USBD_static_malloc+0x18>)
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	20001cac 	.word	0x20001cac

0800918c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d817      	bhi.n	80091e4 <USBD_Get_USB_Status+0x44>
 80091b4:	a201      	add	r2, pc, #4	@ (adr r2, 80091bc <USBD_Get_USB_Status+0x1c>)
 80091b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ba:	bf00      	nop
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091d3 	.word	0x080091d3
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091df 	.word	0x080091df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
    break;
 80091d0:	e00b      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091d2:	2303      	movs	r3, #3
 80091d4:	73fb      	strb	r3, [r7, #15]
    break;
 80091d6:	e008      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091d8:	2301      	movs	r3, #1
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	e005      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	73fb      	strb	r3, [r7, #15]
    break;
 80091e2:	e002      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	bf00      	nop
  }
  return usb_status;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <std>:
 80091f8:	2300      	movs	r3, #0
 80091fa:	b510      	push	{r4, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009206:	6083      	str	r3, [r0, #8]
 8009208:	8181      	strh	r1, [r0, #12]
 800920a:	6643      	str	r3, [r0, #100]	@ 0x64
 800920c:	81c2      	strh	r2, [r0, #14]
 800920e:	6183      	str	r3, [r0, #24]
 8009210:	4619      	mov	r1, r3
 8009212:	2208      	movs	r2, #8
 8009214:	305c      	adds	r0, #92	@ 0x5c
 8009216:	f000 f906 	bl	8009426 <memset>
 800921a:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <std+0x58>)
 800921c:	6263      	str	r3, [r4, #36]	@ 0x24
 800921e:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <std+0x5c>)
 8009220:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009222:	4b0d      	ldr	r3, [pc, #52]	@ (8009258 <std+0x60>)
 8009224:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009226:	4b0d      	ldr	r3, [pc, #52]	@ (800925c <std+0x64>)
 8009228:	6323      	str	r3, [r4, #48]	@ 0x30
 800922a:	4b0d      	ldr	r3, [pc, #52]	@ (8009260 <std+0x68>)
 800922c:	6224      	str	r4, [r4, #32]
 800922e:	429c      	cmp	r4, r3
 8009230:	d006      	beq.n	8009240 <std+0x48>
 8009232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009236:	4294      	cmp	r4, r2
 8009238:	d002      	beq.n	8009240 <std+0x48>
 800923a:	33d0      	adds	r3, #208	@ 0xd0
 800923c:	429c      	cmp	r4, r3
 800923e:	d105      	bne.n	800924c <std+0x54>
 8009240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009248:	f000 b966 	b.w	8009518 <__retarget_lock_init_recursive>
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	080093a1 	.word	0x080093a1
 8009254:	080093c3 	.word	0x080093c3
 8009258:	080093fb 	.word	0x080093fb
 800925c:	0800941f 	.word	0x0800941f
 8009260:	20001ecc 	.word	0x20001ecc

08009264 <stdio_exit_handler>:
 8009264:	4a02      	ldr	r2, [pc, #8]	@ (8009270 <stdio_exit_handler+0xc>)
 8009266:	4903      	ldr	r1, [pc, #12]	@ (8009274 <stdio_exit_handler+0x10>)
 8009268:	4803      	ldr	r0, [pc, #12]	@ (8009278 <stdio_exit_handler+0x14>)
 800926a:	f000 b869 	b.w	8009340 <_fwalk_sglue>
 800926e:	bf00      	nop
 8009270:	20000100 	.word	0x20000100
 8009274:	08009db5 	.word	0x08009db5
 8009278:	20000110 	.word	0x20000110

0800927c <cleanup_stdio>:
 800927c:	6841      	ldr	r1, [r0, #4]
 800927e:	4b0c      	ldr	r3, [pc, #48]	@ (80092b0 <cleanup_stdio+0x34>)
 8009280:	4299      	cmp	r1, r3
 8009282:	b510      	push	{r4, lr}
 8009284:	4604      	mov	r4, r0
 8009286:	d001      	beq.n	800928c <cleanup_stdio+0x10>
 8009288:	f000 fd94 	bl	8009db4 <_fflush_r>
 800928c:	68a1      	ldr	r1, [r4, #8]
 800928e:	4b09      	ldr	r3, [pc, #36]	@ (80092b4 <cleanup_stdio+0x38>)
 8009290:	4299      	cmp	r1, r3
 8009292:	d002      	beq.n	800929a <cleanup_stdio+0x1e>
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fd8d 	bl	8009db4 <_fflush_r>
 800929a:	68e1      	ldr	r1, [r4, #12]
 800929c:	4b06      	ldr	r3, [pc, #24]	@ (80092b8 <cleanup_stdio+0x3c>)
 800929e:	4299      	cmp	r1, r3
 80092a0:	d004      	beq.n	80092ac <cleanup_stdio+0x30>
 80092a2:	4620      	mov	r0, r4
 80092a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a8:	f000 bd84 	b.w	8009db4 <_fflush_r>
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	20001ecc 	.word	0x20001ecc
 80092b4:	20001f34 	.word	0x20001f34
 80092b8:	20001f9c 	.word	0x20001f9c

080092bc <global_stdio_init.part.0>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <global_stdio_init.part.0+0x30>)
 80092c0:	4c0b      	ldr	r4, [pc, #44]	@ (80092f0 <global_stdio_init.part.0+0x34>)
 80092c2:	4a0c      	ldr	r2, [pc, #48]	@ (80092f4 <global_stdio_init.part.0+0x38>)
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	4620      	mov	r0, r4
 80092c8:	2200      	movs	r2, #0
 80092ca:	2104      	movs	r1, #4
 80092cc:	f7ff ff94 	bl	80091f8 <std>
 80092d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092d4:	2201      	movs	r2, #1
 80092d6:	2109      	movs	r1, #9
 80092d8:	f7ff ff8e 	bl	80091f8 <std>
 80092dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092e0:	2202      	movs	r2, #2
 80092e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e6:	2112      	movs	r1, #18
 80092e8:	f7ff bf86 	b.w	80091f8 <std>
 80092ec:	20002004 	.word	0x20002004
 80092f0:	20001ecc 	.word	0x20001ecc
 80092f4:	08009265 	.word	0x08009265

080092f8 <__sfp_lock_acquire>:
 80092f8:	4801      	ldr	r0, [pc, #4]	@ (8009300 <__sfp_lock_acquire+0x8>)
 80092fa:	f000 b90e 	b.w	800951a <__retarget_lock_acquire_recursive>
 80092fe:	bf00      	nop
 8009300:	2000200d 	.word	0x2000200d

08009304 <__sfp_lock_release>:
 8009304:	4801      	ldr	r0, [pc, #4]	@ (800930c <__sfp_lock_release+0x8>)
 8009306:	f000 b909 	b.w	800951c <__retarget_lock_release_recursive>
 800930a:	bf00      	nop
 800930c:	2000200d 	.word	0x2000200d

08009310 <__sinit>:
 8009310:	b510      	push	{r4, lr}
 8009312:	4604      	mov	r4, r0
 8009314:	f7ff fff0 	bl	80092f8 <__sfp_lock_acquire>
 8009318:	6a23      	ldr	r3, [r4, #32]
 800931a:	b11b      	cbz	r3, 8009324 <__sinit+0x14>
 800931c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009320:	f7ff bff0 	b.w	8009304 <__sfp_lock_release>
 8009324:	4b04      	ldr	r3, [pc, #16]	@ (8009338 <__sinit+0x28>)
 8009326:	6223      	str	r3, [r4, #32]
 8009328:	4b04      	ldr	r3, [pc, #16]	@ (800933c <__sinit+0x2c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1f5      	bne.n	800931c <__sinit+0xc>
 8009330:	f7ff ffc4 	bl	80092bc <global_stdio_init.part.0>
 8009334:	e7f2      	b.n	800931c <__sinit+0xc>
 8009336:	bf00      	nop
 8009338:	0800927d 	.word	0x0800927d
 800933c:	20002004 	.word	0x20002004

08009340 <_fwalk_sglue>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	4607      	mov	r7, r0
 8009346:	4688      	mov	r8, r1
 8009348:	4614      	mov	r4, r2
 800934a:	2600      	movs	r6, #0
 800934c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009350:	f1b9 0901 	subs.w	r9, r9, #1
 8009354:	d505      	bpl.n	8009362 <_fwalk_sglue+0x22>
 8009356:	6824      	ldr	r4, [r4, #0]
 8009358:	2c00      	cmp	r4, #0
 800935a:	d1f7      	bne.n	800934c <_fwalk_sglue+0xc>
 800935c:	4630      	mov	r0, r6
 800935e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009362:	89ab      	ldrh	r3, [r5, #12]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d907      	bls.n	8009378 <_fwalk_sglue+0x38>
 8009368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800936c:	3301      	adds	r3, #1
 800936e:	d003      	beq.n	8009378 <_fwalk_sglue+0x38>
 8009370:	4629      	mov	r1, r5
 8009372:	4638      	mov	r0, r7
 8009374:	47c0      	blx	r8
 8009376:	4306      	orrs	r6, r0
 8009378:	3568      	adds	r5, #104	@ 0x68
 800937a:	e7e9      	b.n	8009350 <_fwalk_sglue+0x10>

0800937c <iprintf>:
 800937c:	b40f      	push	{r0, r1, r2, r3}
 800937e:	b507      	push	{r0, r1, r2, lr}
 8009380:	4906      	ldr	r1, [pc, #24]	@ (800939c <iprintf+0x20>)
 8009382:	ab04      	add	r3, sp, #16
 8009384:	6808      	ldr	r0, [r1, #0]
 8009386:	f853 2b04 	ldr.w	r2, [r3], #4
 800938a:	6881      	ldr	r1, [r0, #8]
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	f000 f9e9 	bl	8009764 <_vfiprintf_r>
 8009392:	b003      	add	sp, #12
 8009394:	f85d eb04 	ldr.w	lr, [sp], #4
 8009398:	b004      	add	sp, #16
 800939a:	4770      	bx	lr
 800939c:	2000010c 	.word	0x2000010c

080093a0 <__sread>:
 80093a0:	b510      	push	{r4, lr}
 80093a2:	460c      	mov	r4, r1
 80093a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a8:	f000 f868 	bl	800947c <_read_r>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	bfab      	itete	ge
 80093b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093b2:	89a3      	ldrhlt	r3, [r4, #12]
 80093b4:	181b      	addge	r3, r3, r0
 80093b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093ba:	bfac      	ite	ge
 80093bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093be:	81a3      	strhlt	r3, [r4, #12]
 80093c0:	bd10      	pop	{r4, pc}

080093c2 <__swrite>:
 80093c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c6:	461f      	mov	r7, r3
 80093c8:	898b      	ldrh	r3, [r1, #12]
 80093ca:	05db      	lsls	r3, r3, #23
 80093cc:	4605      	mov	r5, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	4616      	mov	r6, r2
 80093d2:	d505      	bpl.n	80093e0 <__swrite+0x1e>
 80093d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d8:	2302      	movs	r3, #2
 80093da:	2200      	movs	r2, #0
 80093dc:	f000 f83c 	bl	8009458 <_lseek_r>
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093ea:	81a3      	strh	r3, [r4, #12]
 80093ec:	4632      	mov	r2, r6
 80093ee:	463b      	mov	r3, r7
 80093f0:	4628      	mov	r0, r5
 80093f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f6:	f000 b853 	b.w	80094a0 <_write_r>

080093fa <__sseek>:
 80093fa:	b510      	push	{r4, lr}
 80093fc:	460c      	mov	r4, r1
 80093fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009402:	f000 f829 	bl	8009458 <_lseek_r>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	bf15      	itete	ne
 800940c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800940e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009416:	81a3      	strheq	r3, [r4, #12]
 8009418:	bf18      	it	ne
 800941a:	81a3      	strhne	r3, [r4, #12]
 800941c:	bd10      	pop	{r4, pc}

0800941e <__sclose>:
 800941e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009422:	f000 b809 	b.w	8009438 <_close_r>

08009426 <memset>:
 8009426:	4402      	add	r2, r0
 8009428:	4603      	mov	r3, r0
 800942a:	4293      	cmp	r3, r2
 800942c:	d100      	bne.n	8009430 <memset+0xa>
 800942e:	4770      	bx	lr
 8009430:	f803 1b01 	strb.w	r1, [r3], #1
 8009434:	e7f9      	b.n	800942a <memset+0x4>
	...

08009438 <_close_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d06      	ldr	r5, [pc, #24]	@ (8009454 <_close_r+0x1c>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	f7f7 fe15 	bl	8001072 <_close>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_close_r+0x1a>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_close_r+0x1a>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20002008 	.word	0x20002008

08009458 <_lseek_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4d07      	ldr	r5, [pc, #28]	@ (8009478 <_lseek_r+0x20>)
 800945c:	4604      	mov	r4, r0
 800945e:	4608      	mov	r0, r1
 8009460:	4611      	mov	r1, r2
 8009462:	2200      	movs	r2, #0
 8009464:	602a      	str	r2, [r5, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f7f7 fe2a 	bl	80010c0 <_lseek>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_lseek_r+0x1e>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_lseek_r+0x1e>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	20002008 	.word	0x20002008

0800947c <_read_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	@ (800949c <_read_r+0x20>)
 8009480:	4604      	mov	r4, r0
 8009482:	4608      	mov	r0, r1
 8009484:	4611      	mov	r1, r2
 8009486:	2200      	movs	r2, #0
 8009488:	602a      	str	r2, [r5, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	f7f7 fdd4 	bl	8001038 <_read>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_read_r+0x1e>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_read_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	20002008 	.word	0x20002008

080094a0 <_write_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d07      	ldr	r5, [pc, #28]	@ (80094c0 <_write_r+0x20>)
 80094a4:	4604      	mov	r4, r0
 80094a6:	4608      	mov	r0, r1
 80094a8:	4611      	mov	r1, r2
 80094aa:	2200      	movs	r2, #0
 80094ac:	602a      	str	r2, [r5, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	f7f7 f8fe 	bl	80006b0 <_write>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_write_r+0x1e>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	b103      	cbz	r3, 80094be <_write_r+0x1e>
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	20002008 	.word	0x20002008

080094c4 <__errno>:
 80094c4:	4b01      	ldr	r3, [pc, #4]	@ (80094cc <__errno+0x8>)
 80094c6:	6818      	ldr	r0, [r3, #0]
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	2000010c 	.word	0x2000010c

080094d0 <__libc_init_array>:
 80094d0:	b570      	push	{r4, r5, r6, lr}
 80094d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009508 <__libc_init_array+0x38>)
 80094d4:	4c0d      	ldr	r4, [pc, #52]	@ (800950c <__libc_init_array+0x3c>)
 80094d6:	1b64      	subs	r4, r4, r5
 80094d8:	10a4      	asrs	r4, r4, #2
 80094da:	2600      	movs	r6, #0
 80094dc:	42a6      	cmp	r6, r4
 80094de:	d109      	bne.n	80094f4 <__libc_init_array+0x24>
 80094e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009510 <__libc_init_array+0x40>)
 80094e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009514 <__libc_init_array+0x44>)
 80094e4:	f000 fdb6 	bl	800a054 <_init>
 80094e8:	1b64      	subs	r4, r4, r5
 80094ea:	10a4      	asrs	r4, r4, #2
 80094ec:	2600      	movs	r6, #0
 80094ee:	42a6      	cmp	r6, r4
 80094f0:	d105      	bne.n	80094fe <__libc_init_array+0x2e>
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f8:	4798      	blx	r3
 80094fa:	3601      	adds	r6, #1
 80094fc:	e7ee      	b.n	80094dc <__libc_init_array+0xc>
 80094fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009502:	4798      	blx	r3
 8009504:	3601      	adds	r6, #1
 8009506:	e7f2      	b.n	80094ee <__libc_init_array+0x1e>
 8009508:	0800a170 	.word	0x0800a170
 800950c:	0800a170 	.word	0x0800a170
 8009510:	0800a170 	.word	0x0800a170
 8009514:	0800a174 	.word	0x0800a174

08009518 <__retarget_lock_init_recursive>:
 8009518:	4770      	bx	lr

0800951a <__retarget_lock_acquire_recursive>:
 800951a:	4770      	bx	lr

0800951c <__retarget_lock_release_recursive>:
 800951c:	4770      	bx	lr
	...

08009520 <_free_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4605      	mov	r5, r0
 8009524:	2900      	cmp	r1, #0
 8009526:	d041      	beq.n	80095ac <_free_r+0x8c>
 8009528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800952c:	1f0c      	subs	r4, r1, #4
 800952e:	2b00      	cmp	r3, #0
 8009530:	bfb8      	it	lt
 8009532:	18e4      	addlt	r4, r4, r3
 8009534:	f000 f8e0 	bl	80096f8 <__malloc_lock>
 8009538:	4a1d      	ldr	r2, [pc, #116]	@ (80095b0 <_free_r+0x90>)
 800953a:	6813      	ldr	r3, [r2, #0]
 800953c:	b933      	cbnz	r3, 800954c <_free_r+0x2c>
 800953e:	6063      	str	r3, [r4, #4]
 8009540:	6014      	str	r4, [r2, #0]
 8009542:	4628      	mov	r0, r5
 8009544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009548:	f000 b8dc 	b.w	8009704 <__malloc_unlock>
 800954c:	42a3      	cmp	r3, r4
 800954e:	d908      	bls.n	8009562 <_free_r+0x42>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	1821      	adds	r1, r4, r0
 8009554:	428b      	cmp	r3, r1
 8009556:	bf01      	itttt	eq
 8009558:	6819      	ldreq	r1, [r3, #0]
 800955a:	685b      	ldreq	r3, [r3, #4]
 800955c:	1809      	addeq	r1, r1, r0
 800955e:	6021      	streq	r1, [r4, #0]
 8009560:	e7ed      	b.n	800953e <_free_r+0x1e>
 8009562:	461a      	mov	r2, r3
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	b10b      	cbz	r3, 800956c <_free_r+0x4c>
 8009568:	42a3      	cmp	r3, r4
 800956a:	d9fa      	bls.n	8009562 <_free_r+0x42>
 800956c:	6811      	ldr	r1, [r2, #0]
 800956e:	1850      	adds	r0, r2, r1
 8009570:	42a0      	cmp	r0, r4
 8009572:	d10b      	bne.n	800958c <_free_r+0x6c>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	4401      	add	r1, r0
 8009578:	1850      	adds	r0, r2, r1
 800957a:	4283      	cmp	r3, r0
 800957c:	6011      	str	r1, [r2, #0]
 800957e:	d1e0      	bne.n	8009542 <_free_r+0x22>
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	6053      	str	r3, [r2, #4]
 8009586:	4408      	add	r0, r1
 8009588:	6010      	str	r0, [r2, #0]
 800958a:	e7da      	b.n	8009542 <_free_r+0x22>
 800958c:	d902      	bls.n	8009594 <_free_r+0x74>
 800958e:	230c      	movs	r3, #12
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	e7d6      	b.n	8009542 <_free_r+0x22>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	1821      	adds	r1, r4, r0
 8009598:	428b      	cmp	r3, r1
 800959a:	bf04      	itt	eq
 800959c:	6819      	ldreq	r1, [r3, #0]
 800959e:	685b      	ldreq	r3, [r3, #4]
 80095a0:	6063      	str	r3, [r4, #4]
 80095a2:	bf04      	itt	eq
 80095a4:	1809      	addeq	r1, r1, r0
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	6054      	str	r4, [r2, #4]
 80095aa:	e7ca      	b.n	8009542 <_free_r+0x22>
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	20002014 	.word	0x20002014

080095b4 <sbrk_aligned>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	4e0f      	ldr	r6, [pc, #60]	@ (80095f4 <sbrk_aligned+0x40>)
 80095b8:	460c      	mov	r4, r1
 80095ba:	6831      	ldr	r1, [r6, #0]
 80095bc:	4605      	mov	r5, r0
 80095be:	b911      	cbnz	r1, 80095c6 <sbrk_aligned+0x12>
 80095c0:	f000 fcb4 	bl	8009f2c <_sbrk_r>
 80095c4:	6030      	str	r0, [r6, #0]
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f000 fcaf 	bl	8009f2c <_sbrk_r>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d103      	bne.n	80095da <sbrk_aligned+0x26>
 80095d2:	f04f 34ff 	mov.w	r4, #4294967295
 80095d6:	4620      	mov	r0, r4
 80095d8:	bd70      	pop	{r4, r5, r6, pc}
 80095da:	1cc4      	adds	r4, r0, #3
 80095dc:	f024 0403 	bic.w	r4, r4, #3
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d0f8      	beq.n	80095d6 <sbrk_aligned+0x22>
 80095e4:	1a21      	subs	r1, r4, r0
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 fca0 	bl	8009f2c <_sbrk_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	d1f2      	bne.n	80095d6 <sbrk_aligned+0x22>
 80095f0:	e7ef      	b.n	80095d2 <sbrk_aligned+0x1e>
 80095f2:	bf00      	nop
 80095f4:	20002010 	.word	0x20002010

080095f8 <_malloc_r>:
 80095f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	1ccd      	adds	r5, r1, #3
 80095fe:	f025 0503 	bic.w	r5, r5, #3
 8009602:	3508      	adds	r5, #8
 8009604:	2d0c      	cmp	r5, #12
 8009606:	bf38      	it	cc
 8009608:	250c      	movcc	r5, #12
 800960a:	2d00      	cmp	r5, #0
 800960c:	4606      	mov	r6, r0
 800960e:	db01      	blt.n	8009614 <_malloc_r+0x1c>
 8009610:	42a9      	cmp	r1, r5
 8009612:	d904      	bls.n	800961e <_malloc_r+0x26>
 8009614:	230c      	movs	r3, #12
 8009616:	6033      	str	r3, [r6, #0]
 8009618:	2000      	movs	r0, #0
 800961a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096f4 <_malloc_r+0xfc>
 8009622:	f000 f869 	bl	80096f8 <__malloc_lock>
 8009626:	f8d8 3000 	ldr.w	r3, [r8]
 800962a:	461c      	mov	r4, r3
 800962c:	bb44      	cbnz	r4, 8009680 <_malloc_r+0x88>
 800962e:	4629      	mov	r1, r5
 8009630:	4630      	mov	r0, r6
 8009632:	f7ff ffbf 	bl	80095b4 <sbrk_aligned>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	4604      	mov	r4, r0
 800963a:	d158      	bne.n	80096ee <_malloc_r+0xf6>
 800963c:	f8d8 4000 	ldr.w	r4, [r8]
 8009640:	4627      	mov	r7, r4
 8009642:	2f00      	cmp	r7, #0
 8009644:	d143      	bne.n	80096ce <_malloc_r+0xd6>
 8009646:	2c00      	cmp	r4, #0
 8009648:	d04b      	beq.n	80096e2 <_malloc_r+0xea>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	4639      	mov	r1, r7
 800964e:	4630      	mov	r0, r6
 8009650:	eb04 0903 	add.w	r9, r4, r3
 8009654:	f000 fc6a 	bl	8009f2c <_sbrk_r>
 8009658:	4581      	cmp	r9, r0
 800965a:	d142      	bne.n	80096e2 <_malloc_r+0xea>
 800965c:	6821      	ldr	r1, [r4, #0]
 800965e:	1a6d      	subs	r5, r5, r1
 8009660:	4629      	mov	r1, r5
 8009662:	4630      	mov	r0, r6
 8009664:	f7ff ffa6 	bl	80095b4 <sbrk_aligned>
 8009668:	3001      	adds	r0, #1
 800966a:	d03a      	beq.n	80096e2 <_malloc_r+0xea>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	442b      	add	r3, r5
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	f8d8 3000 	ldr.w	r3, [r8]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	bb62      	cbnz	r2, 80096d4 <_malloc_r+0xdc>
 800967a:	f8c8 7000 	str.w	r7, [r8]
 800967e:	e00f      	b.n	80096a0 <_malloc_r+0xa8>
 8009680:	6822      	ldr	r2, [r4, #0]
 8009682:	1b52      	subs	r2, r2, r5
 8009684:	d420      	bmi.n	80096c8 <_malloc_r+0xd0>
 8009686:	2a0b      	cmp	r2, #11
 8009688:	d917      	bls.n	80096ba <_malloc_r+0xc2>
 800968a:	1961      	adds	r1, r4, r5
 800968c:	42a3      	cmp	r3, r4
 800968e:	6025      	str	r5, [r4, #0]
 8009690:	bf18      	it	ne
 8009692:	6059      	strne	r1, [r3, #4]
 8009694:	6863      	ldr	r3, [r4, #4]
 8009696:	bf08      	it	eq
 8009698:	f8c8 1000 	streq.w	r1, [r8]
 800969c:	5162      	str	r2, [r4, r5]
 800969e:	604b      	str	r3, [r1, #4]
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 f82f 	bl	8009704 <__malloc_unlock>
 80096a6:	f104 000b 	add.w	r0, r4, #11
 80096aa:	1d23      	adds	r3, r4, #4
 80096ac:	f020 0007 	bic.w	r0, r0, #7
 80096b0:	1ac2      	subs	r2, r0, r3
 80096b2:	bf1c      	itt	ne
 80096b4:	1a1b      	subne	r3, r3, r0
 80096b6:	50a3      	strne	r3, [r4, r2]
 80096b8:	e7af      	b.n	800961a <_malloc_r+0x22>
 80096ba:	6862      	ldr	r2, [r4, #4]
 80096bc:	42a3      	cmp	r3, r4
 80096be:	bf0c      	ite	eq
 80096c0:	f8c8 2000 	streq.w	r2, [r8]
 80096c4:	605a      	strne	r2, [r3, #4]
 80096c6:	e7eb      	b.n	80096a0 <_malloc_r+0xa8>
 80096c8:	4623      	mov	r3, r4
 80096ca:	6864      	ldr	r4, [r4, #4]
 80096cc:	e7ae      	b.n	800962c <_malloc_r+0x34>
 80096ce:	463c      	mov	r4, r7
 80096d0:	687f      	ldr	r7, [r7, #4]
 80096d2:	e7b6      	b.n	8009642 <_malloc_r+0x4a>
 80096d4:	461a      	mov	r2, r3
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d1fb      	bne.n	80096d4 <_malloc_r+0xdc>
 80096dc:	2300      	movs	r3, #0
 80096de:	6053      	str	r3, [r2, #4]
 80096e0:	e7de      	b.n	80096a0 <_malloc_r+0xa8>
 80096e2:	230c      	movs	r3, #12
 80096e4:	6033      	str	r3, [r6, #0]
 80096e6:	4630      	mov	r0, r6
 80096e8:	f000 f80c 	bl	8009704 <__malloc_unlock>
 80096ec:	e794      	b.n	8009618 <_malloc_r+0x20>
 80096ee:	6005      	str	r5, [r0, #0]
 80096f0:	e7d6      	b.n	80096a0 <_malloc_r+0xa8>
 80096f2:	bf00      	nop
 80096f4:	20002014 	.word	0x20002014

080096f8 <__malloc_lock>:
 80096f8:	4801      	ldr	r0, [pc, #4]	@ (8009700 <__malloc_lock+0x8>)
 80096fa:	f7ff bf0e 	b.w	800951a <__retarget_lock_acquire_recursive>
 80096fe:	bf00      	nop
 8009700:	2000200c 	.word	0x2000200c

08009704 <__malloc_unlock>:
 8009704:	4801      	ldr	r0, [pc, #4]	@ (800970c <__malloc_unlock+0x8>)
 8009706:	f7ff bf09 	b.w	800951c <__retarget_lock_release_recursive>
 800970a:	bf00      	nop
 800970c:	2000200c 	.word	0x2000200c

08009710 <__sfputc_r>:
 8009710:	6893      	ldr	r3, [r2, #8]
 8009712:	3b01      	subs	r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	b410      	push	{r4}
 8009718:	6093      	str	r3, [r2, #8]
 800971a:	da08      	bge.n	800972e <__sfputc_r+0x1e>
 800971c:	6994      	ldr	r4, [r2, #24]
 800971e:	42a3      	cmp	r3, r4
 8009720:	db01      	blt.n	8009726 <__sfputc_r+0x16>
 8009722:	290a      	cmp	r1, #10
 8009724:	d103      	bne.n	800972e <__sfputc_r+0x1e>
 8009726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800972a:	f000 bb6b 	b.w	8009e04 <__swbuf_r>
 800972e:	6813      	ldr	r3, [r2, #0]
 8009730:	1c58      	adds	r0, r3, #1
 8009732:	6010      	str	r0, [r2, #0]
 8009734:	7019      	strb	r1, [r3, #0]
 8009736:	4608      	mov	r0, r1
 8009738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800973c:	4770      	bx	lr

0800973e <__sfputs_r>:
 800973e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009740:	4606      	mov	r6, r0
 8009742:	460f      	mov	r7, r1
 8009744:	4614      	mov	r4, r2
 8009746:	18d5      	adds	r5, r2, r3
 8009748:	42ac      	cmp	r4, r5
 800974a:	d101      	bne.n	8009750 <__sfputs_r+0x12>
 800974c:	2000      	movs	r0, #0
 800974e:	e007      	b.n	8009760 <__sfputs_r+0x22>
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	463a      	mov	r2, r7
 8009756:	4630      	mov	r0, r6
 8009758:	f7ff ffda 	bl	8009710 <__sfputc_r>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d1f3      	bne.n	8009748 <__sfputs_r+0xa>
 8009760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009764 <_vfiprintf_r>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	460d      	mov	r5, r1
 800976a:	b09d      	sub	sp, #116	@ 0x74
 800976c:	4614      	mov	r4, r2
 800976e:	4698      	mov	r8, r3
 8009770:	4606      	mov	r6, r0
 8009772:	b118      	cbz	r0, 800977c <_vfiprintf_r+0x18>
 8009774:	6a03      	ldr	r3, [r0, #32]
 8009776:	b90b      	cbnz	r3, 800977c <_vfiprintf_r+0x18>
 8009778:	f7ff fdca 	bl	8009310 <__sinit>
 800977c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800977e:	07d9      	lsls	r1, r3, #31
 8009780:	d405      	bmi.n	800978e <_vfiprintf_r+0x2a>
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	059a      	lsls	r2, r3, #22
 8009786:	d402      	bmi.n	800978e <_vfiprintf_r+0x2a>
 8009788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800978a:	f7ff fec6 	bl	800951a <__retarget_lock_acquire_recursive>
 800978e:	89ab      	ldrh	r3, [r5, #12]
 8009790:	071b      	lsls	r3, r3, #28
 8009792:	d501      	bpl.n	8009798 <_vfiprintf_r+0x34>
 8009794:	692b      	ldr	r3, [r5, #16]
 8009796:	b99b      	cbnz	r3, 80097c0 <_vfiprintf_r+0x5c>
 8009798:	4629      	mov	r1, r5
 800979a:	4630      	mov	r0, r6
 800979c:	f000 fb70 	bl	8009e80 <__swsetup_r>
 80097a0:	b170      	cbz	r0, 80097c0 <_vfiprintf_r+0x5c>
 80097a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097a4:	07dc      	lsls	r4, r3, #31
 80097a6:	d504      	bpl.n	80097b2 <_vfiprintf_r+0x4e>
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	b01d      	add	sp, #116	@ 0x74
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	89ab      	ldrh	r3, [r5, #12]
 80097b4:	0598      	lsls	r0, r3, #22
 80097b6:	d4f7      	bmi.n	80097a8 <_vfiprintf_r+0x44>
 80097b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097ba:	f7ff feaf 	bl	800951c <__retarget_lock_release_recursive>
 80097be:	e7f3      	b.n	80097a8 <_vfiprintf_r+0x44>
 80097c0:	2300      	movs	r3, #0
 80097c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80097c4:	2320      	movs	r3, #32
 80097c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ce:	2330      	movs	r3, #48	@ 0x30
 80097d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009980 <_vfiprintf_r+0x21c>
 80097d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097d8:	f04f 0901 	mov.w	r9, #1
 80097dc:	4623      	mov	r3, r4
 80097de:	469a      	mov	sl, r3
 80097e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e4:	b10a      	cbz	r2, 80097ea <_vfiprintf_r+0x86>
 80097e6:	2a25      	cmp	r2, #37	@ 0x25
 80097e8:	d1f9      	bne.n	80097de <_vfiprintf_r+0x7a>
 80097ea:	ebba 0b04 	subs.w	fp, sl, r4
 80097ee:	d00b      	beq.n	8009808 <_vfiprintf_r+0xa4>
 80097f0:	465b      	mov	r3, fp
 80097f2:	4622      	mov	r2, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ffa1 	bl	800973e <__sfputs_r>
 80097fc:	3001      	adds	r0, #1
 80097fe:	f000 80a7 	beq.w	8009950 <_vfiprintf_r+0x1ec>
 8009802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009804:	445a      	add	r2, fp
 8009806:	9209      	str	r2, [sp, #36]	@ 0x24
 8009808:	f89a 3000 	ldrb.w	r3, [sl]
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 809f 	beq.w	8009950 <_vfiprintf_r+0x1ec>
 8009812:	2300      	movs	r3, #0
 8009814:	f04f 32ff 	mov.w	r2, #4294967295
 8009818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800981c:	f10a 0a01 	add.w	sl, sl, #1
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	9307      	str	r3, [sp, #28]
 8009824:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009828:	931a      	str	r3, [sp, #104]	@ 0x68
 800982a:	4654      	mov	r4, sl
 800982c:	2205      	movs	r2, #5
 800982e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009832:	4853      	ldr	r0, [pc, #332]	@ (8009980 <_vfiprintf_r+0x21c>)
 8009834:	f7f6 fccc 	bl	80001d0 <memchr>
 8009838:	9a04      	ldr	r2, [sp, #16]
 800983a:	b9d8      	cbnz	r0, 8009874 <_vfiprintf_r+0x110>
 800983c:	06d1      	lsls	r1, r2, #27
 800983e:	bf44      	itt	mi
 8009840:	2320      	movmi	r3, #32
 8009842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009846:	0713      	lsls	r3, r2, #28
 8009848:	bf44      	itt	mi
 800984a:	232b      	movmi	r3, #43	@ 0x2b
 800984c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009850:	f89a 3000 	ldrb.w	r3, [sl]
 8009854:	2b2a      	cmp	r3, #42	@ 0x2a
 8009856:	d015      	beq.n	8009884 <_vfiprintf_r+0x120>
 8009858:	9a07      	ldr	r2, [sp, #28]
 800985a:	4654      	mov	r4, sl
 800985c:	2000      	movs	r0, #0
 800985e:	f04f 0c0a 	mov.w	ip, #10
 8009862:	4621      	mov	r1, r4
 8009864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009868:	3b30      	subs	r3, #48	@ 0x30
 800986a:	2b09      	cmp	r3, #9
 800986c:	d94b      	bls.n	8009906 <_vfiprintf_r+0x1a2>
 800986e:	b1b0      	cbz	r0, 800989e <_vfiprintf_r+0x13a>
 8009870:	9207      	str	r2, [sp, #28]
 8009872:	e014      	b.n	800989e <_vfiprintf_r+0x13a>
 8009874:	eba0 0308 	sub.w	r3, r0, r8
 8009878:	fa09 f303 	lsl.w	r3, r9, r3
 800987c:	4313      	orrs	r3, r2
 800987e:	9304      	str	r3, [sp, #16]
 8009880:	46a2      	mov	sl, r4
 8009882:	e7d2      	b.n	800982a <_vfiprintf_r+0xc6>
 8009884:	9b03      	ldr	r3, [sp, #12]
 8009886:	1d19      	adds	r1, r3, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	9103      	str	r1, [sp, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfbb      	ittet	lt
 8009890:	425b      	neglt	r3, r3
 8009892:	f042 0202 	orrlt.w	r2, r2, #2
 8009896:	9307      	strge	r3, [sp, #28]
 8009898:	9307      	strlt	r3, [sp, #28]
 800989a:	bfb8      	it	lt
 800989c:	9204      	strlt	r2, [sp, #16]
 800989e:	7823      	ldrb	r3, [r4, #0]
 80098a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80098a2:	d10a      	bne.n	80098ba <_vfiprintf_r+0x156>
 80098a4:	7863      	ldrb	r3, [r4, #1]
 80098a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80098a8:	d132      	bne.n	8009910 <_vfiprintf_r+0x1ac>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	1d1a      	adds	r2, r3, #4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	9203      	str	r2, [sp, #12]
 80098b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098b6:	3402      	adds	r4, #2
 80098b8:	9305      	str	r3, [sp, #20]
 80098ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009990 <_vfiprintf_r+0x22c>
 80098be:	7821      	ldrb	r1, [r4, #0]
 80098c0:	2203      	movs	r2, #3
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7f6 fc84 	bl	80001d0 <memchr>
 80098c8:	b138      	cbz	r0, 80098da <_vfiprintf_r+0x176>
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	eba0 000a 	sub.w	r0, r0, sl
 80098d0:	2240      	movs	r2, #64	@ 0x40
 80098d2:	4082      	lsls	r2, r0
 80098d4:	4313      	orrs	r3, r2
 80098d6:	3401      	adds	r4, #1
 80098d8:	9304      	str	r3, [sp, #16]
 80098da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098de:	4829      	ldr	r0, [pc, #164]	@ (8009984 <_vfiprintf_r+0x220>)
 80098e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098e4:	2206      	movs	r2, #6
 80098e6:	f7f6 fc73 	bl	80001d0 <memchr>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d03f      	beq.n	800996e <_vfiprintf_r+0x20a>
 80098ee:	4b26      	ldr	r3, [pc, #152]	@ (8009988 <_vfiprintf_r+0x224>)
 80098f0:	bb1b      	cbnz	r3, 800993a <_vfiprintf_r+0x1d6>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	3307      	adds	r3, #7
 80098f6:	f023 0307 	bic.w	r3, r3, #7
 80098fa:	3308      	adds	r3, #8
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009900:	443b      	add	r3, r7
 8009902:	9309      	str	r3, [sp, #36]	@ 0x24
 8009904:	e76a      	b.n	80097dc <_vfiprintf_r+0x78>
 8009906:	fb0c 3202 	mla	r2, ip, r2, r3
 800990a:	460c      	mov	r4, r1
 800990c:	2001      	movs	r0, #1
 800990e:	e7a8      	b.n	8009862 <_vfiprintf_r+0xfe>
 8009910:	2300      	movs	r3, #0
 8009912:	3401      	adds	r4, #1
 8009914:	9305      	str	r3, [sp, #20]
 8009916:	4619      	mov	r1, r3
 8009918:	f04f 0c0a 	mov.w	ip, #10
 800991c:	4620      	mov	r0, r4
 800991e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009922:	3a30      	subs	r2, #48	@ 0x30
 8009924:	2a09      	cmp	r2, #9
 8009926:	d903      	bls.n	8009930 <_vfiprintf_r+0x1cc>
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0c6      	beq.n	80098ba <_vfiprintf_r+0x156>
 800992c:	9105      	str	r1, [sp, #20]
 800992e:	e7c4      	b.n	80098ba <_vfiprintf_r+0x156>
 8009930:	fb0c 2101 	mla	r1, ip, r1, r2
 8009934:	4604      	mov	r4, r0
 8009936:	2301      	movs	r3, #1
 8009938:	e7f0      	b.n	800991c <_vfiprintf_r+0x1b8>
 800993a:	ab03      	add	r3, sp, #12
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	462a      	mov	r2, r5
 8009940:	4b12      	ldr	r3, [pc, #72]	@ (800998c <_vfiprintf_r+0x228>)
 8009942:	a904      	add	r1, sp, #16
 8009944:	4630      	mov	r0, r6
 8009946:	f3af 8000 	nop.w
 800994a:	4607      	mov	r7, r0
 800994c:	1c78      	adds	r0, r7, #1
 800994e:	d1d6      	bne.n	80098fe <_vfiprintf_r+0x19a>
 8009950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009952:	07d9      	lsls	r1, r3, #31
 8009954:	d405      	bmi.n	8009962 <_vfiprintf_r+0x1fe>
 8009956:	89ab      	ldrh	r3, [r5, #12]
 8009958:	059a      	lsls	r2, r3, #22
 800995a:	d402      	bmi.n	8009962 <_vfiprintf_r+0x1fe>
 800995c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800995e:	f7ff fddd 	bl	800951c <__retarget_lock_release_recursive>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	065b      	lsls	r3, r3, #25
 8009966:	f53f af1f 	bmi.w	80097a8 <_vfiprintf_r+0x44>
 800996a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800996c:	e71e      	b.n	80097ac <_vfiprintf_r+0x48>
 800996e:	ab03      	add	r3, sp, #12
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	462a      	mov	r2, r5
 8009974:	4b05      	ldr	r3, [pc, #20]	@ (800998c <_vfiprintf_r+0x228>)
 8009976:	a904      	add	r1, sp, #16
 8009978:	4630      	mov	r0, r6
 800997a:	f000 f879 	bl	8009a70 <_printf_i>
 800997e:	e7e4      	b.n	800994a <_vfiprintf_r+0x1e6>
 8009980:	0800a134 	.word	0x0800a134
 8009984:	0800a13e 	.word	0x0800a13e
 8009988:	00000000 	.word	0x00000000
 800998c:	0800973f 	.word	0x0800973f
 8009990:	0800a13a 	.word	0x0800a13a

08009994 <_printf_common>:
 8009994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009998:	4616      	mov	r6, r2
 800999a:	4698      	mov	r8, r3
 800999c:	688a      	ldr	r2, [r1, #8]
 800999e:	690b      	ldr	r3, [r1, #16]
 80099a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099a4:	4293      	cmp	r3, r2
 80099a6:	bfb8      	it	lt
 80099a8:	4613      	movlt	r3, r2
 80099aa:	6033      	str	r3, [r6, #0]
 80099ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80099b0:	4607      	mov	r7, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	b10a      	cbz	r2, 80099ba <_printf_common+0x26>
 80099b6:	3301      	adds	r3, #1
 80099b8:	6033      	str	r3, [r6, #0]
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	0699      	lsls	r1, r3, #26
 80099be:	bf42      	ittt	mi
 80099c0:	6833      	ldrmi	r3, [r6, #0]
 80099c2:	3302      	addmi	r3, #2
 80099c4:	6033      	strmi	r3, [r6, #0]
 80099c6:	6825      	ldr	r5, [r4, #0]
 80099c8:	f015 0506 	ands.w	r5, r5, #6
 80099cc:	d106      	bne.n	80099dc <_printf_common+0x48>
 80099ce:	f104 0a19 	add.w	sl, r4, #25
 80099d2:	68e3      	ldr	r3, [r4, #12]
 80099d4:	6832      	ldr	r2, [r6, #0]
 80099d6:	1a9b      	subs	r3, r3, r2
 80099d8:	42ab      	cmp	r3, r5
 80099da:	dc26      	bgt.n	8009a2a <_printf_common+0x96>
 80099dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099e0:	6822      	ldr	r2, [r4, #0]
 80099e2:	3b00      	subs	r3, #0
 80099e4:	bf18      	it	ne
 80099e6:	2301      	movne	r3, #1
 80099e8:	0692      	lsls	r2, r2, #26
 80099ea:	d42b      	bmi.n	8009a44 <_printf_common+0xb0>
 80099ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099f0:	4641      	mov	r1, r8
 80099f2:	4638      	mov	r0, r7
 80099f4:	47c8      	blx	r9
 80099f6:	3001      	adds	r0, #1
 80099f8:	d01e      	beq.n	8009a38 <_printf_common+0xa4>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	6922      	ldr	r2, [r4, #16]
 80099fe:	f003 0306 	and.w	r3, r3, #6
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	bf02      	ittt	eq
 8009a06:	68e5      	ldreq	r5, [r4, #12]
 8009a08:	6833      	ldreq	r3, [r6, #0]
 8009a0a:	1aed      	subeq	r5, r5, r3
 8009a0c:	68a3      	ldr	r3, [r4, #8]
 8009a0e:	bf0c      	ite	eq
 8009a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a14:	2500      	movne	r5, #0
 8009a16:	4293      	cmp	r3, r2
 8009a18:	bfc4      	itt	gt
 8009a1a:	1a9b      	subgt	r3, r3, r2
 8009a1c:	18ed      	addgt	r5, r5, r3
 8009a1e:	2600      	movs	r6, #0
 8009a20:	341a      	adds	r4, #26
 8009a22:	42b5      	cmp	r5, r6
 8009a24:	d11a      	bne.n	8009a5c <_printf_common+0xc8>
 8009a26:	2000      	movs	r0, #0
 8009a28:	e008      	b.n	8009a3c <_printf_common+0xa8>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4652      	mov	r2, sl
 8009a2e:	4641      	mov	r1, r8
 8009a30:	4638      	mov	r0, r7
 8009a32:	47c8      	blx	r9
 8009a34:	3001      	adds	r0, #1
 8009a36:	d103      	bne.n	8009a40 <_printf_common+0xac>
 8009a38:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a40:	3501      	adds	r5, #1
 8009a42:	e7c6      	b.n	80099d2 <_printf_common+0x3e>
 8009a44:	18e1      	adds	r1, r4, r3
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	2030      	movs	r0, #48	@ 0x30
 8009a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a4e:	4422      	add	r2, r4
 8009a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a58:	3302      	adds	r3, #2
 8009a5a:	e7c7      	b.n	80099ec <_printf_common+0x58>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	4622      	mov	r2, r4
 8009a60:	4641      	mov	r1, r8
 8009a62:	4638      	mov	r0, r7
 8009a64:	47c8      	blx	r9
 8009a66:	3001      	adds	r0, #1
 8009a68:	d0e6      	beq.n	8009a38 <_printf_common+0xa4>
 8009a6a:	3601      	adds	r6, #1
 8009a6c:	e7d9      	b.n	8009a22 <_printf_common+0x8e>
	...

08009a70 <_printf_i>:
 8009a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	7e0f      	ldrb	r7, [r1, #24]
 8009a76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a78:	2f78      	cmp	r7, #120	@ 0x78
 8009a7a:	4691      	mov	r9, r2
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	469a      	mov	sl, r3
 8009a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a86:	d807      	bhi.n	8009a98 <_printf_i+0x28>
 8009a88:	2f62      	cmp	r7, #98	@ 0x62
 8009a8a:	d80a      	bhi.n	8009aa2 <_printf_i+0x32>
 8009a8c:	2f00      	cmp	r7, #0
 8009a8e:	f000 80d1 	beq.w	8009c34 <_printf_i+0x1c4>
 8009a92:	2f58      	cmp	r7, #88	@ 0x58
 8009a94:	f000 80b8 	beq.w	8009c08 <_printf_i+0x198>
 8009a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009aa0:	e03a      	b.n	8009b18 <_printf_i+0xa8>
 8009aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009aa6:	2b15      	cmp	r3, #21
 8009aa8:	d8f6      	bhi.n	8009a98 <_printf_i+0x28>
 8009aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8009ab0 <_printf_i+0x40>)
 8009aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab0:	08009b09 	.word	0x08009b09
 8009ab4:	08009b1d 	.word	0x08009b1d
 8009ab8:	08009a99 	.word	0x08009a99
 8009abc:	08009a99 	.word	0x08009a99
 8009ac0:	08009a99 	.word	0x08009a99
 8009ac4:	08009a99 	.word	0x08009a99
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009a99 	.word	0x08009a99
 8009ad0:	08009a99 	.word	0x08009a99
 8009ad4:	08009a99 	.word	0x08009a99
 8009ad8:	08009a99 	.word	0x08009a99
 8009adc:	08009c1b 	.word	0x08009c1b
 8009ae0:	08009b47 	.word	0x08009b47
 8009ae4:	08009bd5 	.word	0x08009bd5
 8009ae8:	08009a99 	.word	0x08009a99
 8009aec:	08009a99 	.word	0x08009a99
 8009af0:	08009c3d 	.word	0x08009c3d
 8009af4:	08009a99 	.word	0x08009a99
 8009af8:	08009b47 	.word	0x08009b47
 8009afc:	08009a99 	.word	0x08009a99
 8009b00:	08009a99 	.word	0x08009a99
 8009b04:	08009bdd 	.word	0x08009bdd
 8009b08:	6833      	ldr	r3, [r6, #0]
 8009b0a:	1d1a      	adds	r2, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6032      	str	r2, [r6, #0]
 8009b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e09c      	b.n	8009c56 <_printf_i+0x1e6>
 8009b1c:	6833      	ldr	r3, [r6, #0]
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	1d19      	adds	r1, r3, #4
 8009b22:	6031      	str	r1, [r6, #0]
 8009b24:	0606      	lsls	r6, r0, #24
 8009b26:	d501      	bpl.n	8009b2c <_printf_i+0xbc>
 8009b28:	681d      	ldr	r5, [r3, #0]
 8009b2a:	e003      	b.n	8009b34 <_printf_i+0xc4>
 8009b2c:	0645      	lsls	r5, r0, #25
 8009b2e:	d5fb      	bpl.n	8009b28 <_printf_i+0xb8>
 8009b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	da03      	bge.n	8009b40 <_printf_i+0xd0>
 8009b38:	232d      	movs	r3, #45	@ 0x2d
 8009b3a:	426d      	negs	r5, r5
 8009b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b40:	4858      	ldr	r0, [pc, #352]	@ (8009ca4 <_printf_i+0x234>)
 8009b42:	230a      	movs	r3, #10
 8009b44:	e011      	b.n	8009b6a <_printf_i+0xfa>
 8009b46:	6821      	ldr	r1, [r4, #0]
 8009b48:	6833      	ldr	r3, [r6, #0]
 8009b4a:	0608      	lsls	r0, r1, #24
 8009b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b50:	d402      	bmi.n	8009b58 <_printf_i+0xe8>
 8009b52:	0649      	lsls	r1, r1, #25
 8009b54:	bf48      	it	mi
 8009b56:	b2ad      	uxthmi	r5, r5
 8009b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b5a:	4852      	ldr	r0, [pc, #328]	@ (8009ca4 <_printf_i+0x234>)
 8009b5c:	6033      	str	r3, [r6, #0]
 8009b5e:	bf14      	ite	ne
 8009b60:	230a      	movne	r3, #10
 8009b62:	2308      	moveq	r3, #8
 8009b64:	2100      	movs	r1, #0
 8009b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b6a:	6866      	ldr	r6, [r4, #4]
 8009b6c:	60a6      	str	r6, [r4, #8]
 8009b6e:	2e00      	cmp	r6, #0
 8009b70:	db05      	blt.n	8009b7e <_printf_i+0x10e>
 8009b72:	6821      	ldr	r1, [r4, #0]
 8009b74:	432e      	orrs	r6, r5
 8009b76:	f021 0104 	bic.w	r1, r1, #4
 8009b7a:	6021      	str	r1, [r4, #0]
 8009b7c:	d04b      	beq.n	8009c16 <_printf_i+0x1a6>
 8009b7e:	4616      	mov	r6, r2
 8009b80:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b84:	fb03 5711 	mls	r7, r3, r1, r5
 8009b88:	5dc7      	ldrb	r7, [r0, r7]
 8009b8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b8e:	462f      	mov	r7, r5
 8009b90:	42bb      	cmp	r3, r7
 8009b92:	460d      	mov	r5, r1
 8009b94:	d9f4      	bls.n	8009b80 <_printf_i+0x110>
 8009b96:	2b08      	cmp	r3, #8
 8009b98:	d10b      	bne.n	8009bb2 <_printf_i+0x142>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	07df      	lsls	r7, r3, #31
 8009b9e:	d508      	bpl.n	8009bb2 <_printf_i+0x142>
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	6861      	ldr	r1, [r4, #4]
 8009ba4:	4299      	cmp	r1, r3
 8009ba6:	bfde      	ittt	le
 8009ba8:	2330      	movle	r3, #48	@ 0x30
 8009baa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009bb2:	1b92      	subs	r2, r2, r6
 8009bb4:	6122      	str	r2, [r4, #16]
 8009bb6:	f8cd a000 	str.w	sl, [sp]
 8009bba:	464b      	mov	r3, r9
 8009bbc:	aa03      	add	r2, sp, #12
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	f7ff fee7 	bl	8009994 <_printf_common>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d14a      	bne.n	8009c60 <_printf_i+0x1f0>
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295
 8009bce:	b004      	add	sp, #16
 8009bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	f043 0320 	orr.w	r3, r3, #32
 8009bda:	6023      	str	r3, [r4, #0]
 8009bdc:	4832      	ldr	r0, [pc, #200]	@ (8009ca8 <_printf_i+0x238>)
 8009bde:	2778      	movs	r7, #120	@ 0x78
 8009be0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	6831      	ldr	r1, [r6, #0]
 8009be8:	061f      	lsls	r7, r3, #24
 8009bea:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bee:	d402      	bmi.n	8009bf6 <_printf_i+0x186>
 8009bf0:	065f      	lsls	r7, r3, #25
 8009bf2:	bf48      	it	mi
 8009bf4:	b2ad      	uxthmi	r5, r5
 8009bf6:	6031      	str	r1, [r6, #0]
 8009bf8:	07d9      	lsls	r1, r3, #31
 8009bfa:	bf44      	itt	mi
 8009bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8009c00:	6023      	strmi	r3, [r4, #0]
 8009c02:	b11d      	cbz	r5, 8009c0c <_printf_i+0x19c>
 8009c04:	2310      	movs	r3, #16
 8009c06:	e7ad      	b.n	8009b64 <_printf_i+0xf4>
 8009c08:	4826      	ldr	r0, [pc, #152]	@ (8009ca4 <_printf_i+0x234>)
 8009c0a:	e7e9      	b.n	8009be0 <_printf_i+0x170>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	f023 0320 	bic.w	r3, r3, #32
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	e7f6      	b.n	8009c04 <_printf_i+0x194>
 8009c16:	4616      	mov	r6, r2
 8009c18:	e7bd      	b.n	8009b96 <_printf_i+0x126>
 8009c1a:	6833      	ldr	r3, [r6, #0]
 8009c1c:	6825      	ldr	r5, [r4, #0]
 8009c1e:	6961      	ldr	r1, [r4, #20]
 8009c20:	1d18      	adds	r0, r3, #4
 8009c22:	6030      	str	r0, [r6, #0]
 8009c24:	062e      	lsls	r6, r5, #24
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	d501      	bpl.n	8009c2e <_printf_i+0x1be>
 8009c2a:	6019      	str	r1, [r3, #0]
 8009c2c:	e002      	b.n	8009c34 <_printf_i+0x1c4>
 8009c2e:	0668      	lsls	r0, r5, #25
 8009c30:	d5fb      	bpl.n	8009c2a <_printf_i+0x1ba>
 8009c32:	8019      	strh	r1, [r3, #0]
 8009c34:	2300      	movs	r3, #0
 8009c36:	6123      	str	r3, [r4, #16]
 8009c38:	4616      	mov	r6, r2
 8009c3a:	e7bc      	b.n	8009bb6 <_printf_i+0x146>
 8009c3c:	6833      	ldr	r3, [r6, #0]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	6032      	str	r2, [r6, #0]
 8009c42:	681e      	ldr	r6, [r3, #0]
 8009c44:	6862      	ldr	r2, [r4, #4]
 8009c46:	2100      	movs	r1, #0
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7f6 fac1 	bl	80001d0 <memchr>
 8009c4e:	b108      	cbz	r0, 8009c54 <_printf_i+0x1e4>
 8009c50:	1b80      	subs	r0, r0, r6
 8009c52:	6060      	str	r0, [r4, #4]
 8009c54:	6863      	ldr	r3, [r4, #4]
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c5e:	e7aa      	b.n	8009bb6 <_printf_i+0x146>
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	4632      	mov	r2, r6
 8009c64:	4649      	mov	r1, r9
 8009c66:	4640      	mov	r0, r8
 8009c68:	47d0      	blx	sl
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	d0ad      	beq.n	8009bca <_printf_i+0x15a>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	079b      	lsls	r3, r3, #30
 8009c72:	d413      	bmi.n	8009c9c <_printf_i+0x22c>
 8009c74:	68e0      	ldr	r0, [r4, #12]
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	4298      	cmp	r0, r3
 8009c7a:	bfb8      	it	lt
 8009c7c:	4618      	movlt	r0, r3
 8009c7e:	e7a6      	b.n	8009bce <_printf_i+0x15e>
 8009c80:	2301      	movs	r3, #1
 8009c82:	4632      	mov	r2, r6
 8009c84:	4649      	mov	r1, r9
 8009c86:	4640      	mov	r0, r8
 8009c88:	47d0      	blx	sl
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d09d      	beq.n	8009bca <_printf_i+0x15a>
 8009c8e:	3501      	adds	r5, #1
 8009c90:	68e3      	ldr	r3, [r4, #12]
 8009c92:	9903      	ldr	r1, [sp, #12]
 8009c94:	1a5b      	subs	r3, r3, r1
 8009c96:	42ab      	cmp	r3, r5
 8009c98:	dcf2      	bgt.n	8009c80 <_printf_i+0x210>
 8009c9a:	e7eb      	b.n	8009c74 <_printf_i+0x204>
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	f104 0619 	add.w	r6, r4, #25
 8009ca2:	e7f5      	b.n	8009c90 <_printf_i+0x220>
 8009ca4:	0800a145 	.word	0x0800a145
 8009ca8:	0800a156 	.word	0x0800a156

08009cac <__sflush_r>:
 8009cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb4:	0716      	lsls	r6, r2, #28
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	d454      	bmi.n	8009d66 <__sflush_r+0xba>
 8009cbc:	684b      	ldr	r3, [r1, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dc02      	bgt.n	8009cc8 <__sflush_r+0x1c>
 8009cc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dd48      	ble.n	8009d5a <__sflush_r+0xae>
 8009cc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cca:	2e00      	cmp	r6, #0
 8009ccc:	d045      	beq.n	8009d5a <__sflush_r+0xae>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009cd4:	682f      	ldr	r7, [r5, #0]
 8009cd6:	6a21      	ldr	r1, [r4, #32]
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	d030      	beq.n	8009d3e <__sflush_r+0x92>
 8009cdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	0759      	lsls	r1, r3, #29
 8009ce2:	d505      	bpl.n	8009cf0 <__sflush_r+0x44>
 8009ce4:	6863      	ldr	r3, [r4, #4]
 8009ce6:	1ad2      	subs	r2, r2, r3
 8009ce8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cea:	b10b      	cbz	r3, 8009cf0 <__sflush_r+0x44>
 8009cec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cf4:	6a21      	ldr	r1, [r4, #32]
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b0      	blx	r6
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	d106      	bne.n	8009d0e <__sflush_r+0x62>
 8009d00:	6829      	ldr	r1, [r5, #0]
 8009d02:	291d      	cmp	r1, #29
 8009d04:	d82b      	bhi.n	8009d5e <__sflush_r+0xb2>
 8009d06:	4a2a      	ldr	r2, [pc, #168]	@ (8009db0 <__sflush_r+0x104>)
 8009d08:	40ca      	lsrs	r2, r1
 8009d0a:	07d6      	lsls	r6, r2, #31
 8009d0c:	d527      	bpl.n	8009d5e <__sflush_r+0xb2>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	6062      	str	r2, [r4, #4]
 8009d12:	04d9      	lsls	r1, r3, #19
 8009d14:	6922      	ldr	r2, [r4, #16]
 8009d16:	6022      	str	r2, [r4, #0]
 8009d18:	d504      	bpl.n	8009d24 <__sflush_r+0x78>
 8009d1a:	1c42      	adds	r2, r0, #1
 8009d1c:	d101      	bne.n	8009d22 <__sflush_r+0x76>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	b903      	cbnz	r3, 8009d24 <__sflush_r+0x78>
 8009d22:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d26:	602f      	str	r7, [r5, #0]
 8009d28:	b1b9      	cbz	r1, 8009d5a <__sflush_r+0xae>
 8009d2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d2e:	4299      	cmp	r1, r3
 8009d30:	d002      	beq.n	8009d38 <__sflush_r+0x8c>
 8009d32:	4628      	mov	r0, r5
 8009d34:	f7ff fbf4 	bl	8009520 <_free_r>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d3c:	e00d      	b.n	8009d5a <__sflush_r+0xae>
 8009d3e:	2301      	movs	r3, #1
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b0      	blx	r6
 8009d44:	4602      	mov	r2, r0
 8009d46:	1c50      	adds	r0, r2, #1
 8009d48:	d1c9      	bne.n	8009cde <__sflush_r+0x32>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0c6      	beq.n	8009cde <__sflush_r+0x32>
 8009d50:	2b1d      	cmp	r3, #29
 8009d52:	d001      	beq.n	8009d58 <__sflush_r+0xac>
 8009d54:	2b16      	cmp	r3, #22
 8009d56:	d11e      	bne.n	8009d96 <__sflush_r+0xea>
 8009d58:	602f      	str	r7, [r5, #0]
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	e022      	b.n	8009da4 <__sflush_r+0xf8>
 8009d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d62:	b21b      	sxth	r3, r3
 8009d64:	e01b      	b.n	8009d9e <__sflush_r+0xf2>
 8009d66:	690f      	ldr	r7, [r1, #16]
 8009d68:	2f00      	cmp	r7, #0
 8009d6a:	d0f6      	beq.n	8009d5a <__sflush_r+0xae>
 8009d6c:	0793      	lsls	r3, r2, #30
 8009d6e:	680e      	ldr	r6, [r1, #0]
 8009d70:	bf08      	it	eq
 8009d72:	694b      	ldreq	r3, [r1, #20]
 8009d74:	600f      	str	r7, [r1, #0]
 8009d76:	bf18      	it	ne
 8009d78:	2300      	movne	r3, #0
 8009d7a:	eba6 0807 	sub.w	r8, r6, r7
 8009d7e:	608b      	str	r3, [r1, #8]
 8009d80:	f1b8 0f00 	cmp.w	r8, #0
 8009d84:	dde9      	ble.n	8009d5a <__sflush_r+0xae>
 8009d86:	6a21      	ldr	r1, [r4, #32]
 8009d88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d8a:	4643      	mov	r3, r8
 8009d8c:	463a      	mov	r2, r7
 8009d8e:	4628      	mov	r0, r5
 8009d90:	47b0      	blx	r6
 8009d92:	2800      	cmp	r0, #0
 8009d94:	dc08      	bgt.n	8009da8 <__sflush_r+0xfc>
 8009d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da8:	4407      	add	r7, r0
 8009daa:	eba8 0800 	sub.w	r8, r8, r0
 8009dae:	e7e7      	b.n	8009d80 <__sflush_r+0xd4>
 8009db0:	20400001 	.word	0x20400001

08009db4 <_fflush_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	690b      	ldr	r3, [r1, #16]
 8009db8:	4605      	mov	r5, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	b913      	cbnz	r3, 8009dc4 <_fflush_r+0x10>
 8009dbe:	2500      	movs	r5, #0
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	b118      	cbz	r0, 8009dce <_fflush_r+0x1a>
 8009dc6:	6a03      	ldr	r3, [r0, #32]
 8009dc8:	b90b      	cbnz	r3, 8009dce <_fflush_r+0x1a>
 8009dca:	f7ff faa1 	bl	8009310 <__sinit>
 8009dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0f3      	beq.n	8009dbe <_fflush_r+0xa>
 8009dd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dd8:	07d0      	lsls	r0, r2, #31
 8009dda:	d404      	bmi.n	8009de6 <_fflush_r+0x32>
 8009ddc:	0599      	lsls	r1, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_fflush_r+0x32>
 8009de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009de2:	f7ff fb9a 	bl	800951a <__retarget_lock_acquire_recursive>
 8009de6:	4628      	mov	r0, r5
 8009de8:	4621      	mov	r1, r4
 8009dea:	f7ff ff5f 	bl	8009cac <__sflush_r>
 8009dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009df0:	07da      	lsls	r2, r3, #31
 8009df2:	4605      	mov	r5, r0
 8009df4:	d4e4      	bmi.n	8009dc0 <_fflush_r+0xc>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	059b      	lsls	r3, r3, #22
 8009dfa:	d4e1      	bmi.n	8009dc0 <_fflush_r+0xc>
 8009dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dfe:	f7ff fb8d 	bl	800951c <__retarget_lock_release_recursive>
 8009e02:	e7dd      	b.n	8009dc0 <_fflush_r+0xc>

08009e04 <__swbuf_r>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	460e      	mov	r6, r1
 8009e08:	4614      	mov	r4, r2
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	b118      	cbz	r0, 8009e16 <__swbuf_r+0x12>
 8009e0e:	6a03      	ldr	r3, [r0, #32]
 8009e10:	b90b      	cbnz	r3, 8009e16 <__swbuf_r+0x12>
 8009e12:	f7ff fa7d 	bl	8009310 <__sinit>
 8009e16:	69a3      	ldr	r3, [r4, #24]
 8009e18:	60a3      	str	r3, [r4, #8]
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	071a      	lsls	r2, r3, #28
 8009e1e:	d501      	bpl.n	8009e24 <__swbuf_r+0x20>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	b943      	cbnz	r3, 8009e36 <__swbuf_r+0x32>
 8009e24:	4621      	mov	r1, r4
 8009e26:	4628      	mov	r0, r5
 8009e28:	f000 f82a 	bl	8009e80 <__swsetup_r>
 8009e2c:	b118      	cbz	r0, 8009e36 <__swbuf_r+0x32>
 8009e2e:	f04f 37ff 	mov.w	r7, #4294967295
 8009e32:	4638      	mov	r0, r7
 8009e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	6922      	ldr	r2, [r4, #16]
 8009e3a:	1a98      	subs	r0, r3, r2
 8009e3c:	6963      	ldr	r3, [r4, #20]
 8009e3e:	b2f6      	uxtb	r6, r6
 8009e40:	4283      	cmp	r3, r0
 8009e42:	4637      	mov	r7, r6
 8009e44:	dc05      	bgt.n	8009e52 <__swbuf_r+0x4e>
 8009e46:	4621      	mov	r1, r4
 8009e48:	4628      	mov	r0, r5
 8009e4a:	f7ff ffb3 	bl	8009db4 <_fflush_r>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d1ed      	bne.n	8009e2e <__swbuf_r+0x2a>
 8009e52:	68a3      	ldr	r3, [r4, #8]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	60a3      	str	r3, [r4, #8]
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	6022      	str	r2, [r4, #0]
 8009e5e:	701e      	strb	r6, [r3, #0]
 8009e60:	6962      	ldr	r2, [r4, #20]
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d004      	beq.n	8009e72 <__swbuf_r+0x6e>
 8009e68:	89a3      	ldrh	r3, [r4, #12]
 8009e6a:	07db      	lsls	r3, r3, #31
 8009e6c:	d5e1      	bpl.n	8009e32 <__swbuf_r+0x2e>
 8009e6e:	2e0a      	cmp	r6, #10
 8009e70:	d1df      	bne.n	8009e32 <__swbuf_r+0x2e>
 8009e72:	4621      	mov	r1, r4
 8009e74:	4628      	mov	r0, r5
 8009e76:	f7ff ff9d 	bl	8009db4 <_fflush_r>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d0d9      	beq.n	8009e32 <__swbuf_r+0x2e>
 8009e7e:	e7d6      	b.n	8009e2e <__swbuf_r+0x2a>

08009e80 <__swsetup_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4b29      	ldr	r3, [pc, #164]	@ (8009f28 <__swsetup_r+0xa8>)
 8009e84:	4605      	mov	r5, r0
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	460c      	mov	r4, r1
 8009e8a:	b118      	cbz	r0, 8009e94 <__swsetup_r+0x14>
 8009e8c:	6a03      	ldr	r3, [r0, #32]
 8009e8e:	b90b      	cbnz	r3, 8009e94 <__swsetup_r+0x14>
 8009e90:	f7ff fa3e 	bl	8009310 <__sinit>
 8009e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e98:	0719      	lsls	r1, r3, #28
 8009e9a:	d422      	bmi.n	8009ee2 <__swsetup_r+0x62>
 8009e9c:	06da      	lsls	r2, r3, #27
 8009e9e:	d407      	bmi.n	8009eb0 <__swsetup_r+0x30>
 8009ea0:	2209      	movs	r2, #9
 8009ea2:	602a      	str	r2, [r5, #0]
 8009ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea8:	81a3      	strh	r3, [r4, #12]
 8009eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009eae:	e033      	b.n	8009f18 <__swsetup_r+0x98>
 8009eb0:	0758      	lsls	r0, r3, #29
 8009eb2:	d512      	bpl.n	8009eda <__swsetup_r+0x5a>
 8009eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eb6:	b141      	cbz	r1, 8009eca <__swsetup_r+0x4a>
 8009eb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	d002      	beq.n	8009ec6 <__swsetup_r+0x46>
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7ff fb2d 	bl	8009520 <_free_r>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f043 0308 	orr.w	r3, r3, #8
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	6923      	ldr	r3, [r4, #16]
 8009ee4:	b94b      	cbnz	r3, 8009efa <__swsetup_r+0x7a>
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef0:	d003      	beq.n	8009efa <__swsetup_r+0x7a>
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f000 f84f 	bl	8009f98 <__smakebuf_r>
 8009efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efe:	f013 0201 	ands.w	r2, r3, #1
 8009f02:	d00a      	beq.n	8009f1a <__swsetup_r+0x9a>
 8009f04:	2200      	movs	r2, #0
 8009f06:	60a2      	str	r2, [r4, #8]
 8009f08:	6962      	ldr	r2, [r4, #20]
 8009f0a:	4252      	negs	r2, r2
 8009f0c:	61a2      	str	r2, [r4, #24]
 8009f0e:	6922      	ldr	r2, [r4, #16]
 8009f10:	b942      	cbnz	r2, 8009f24 <__swsetup_r+0xa4>
 8009f12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f16:	d1c5      	bne.n	8009ea4 <__swsetup_r+0x24>
 8009f18:	bd38      	pop	{r3, r4, r5, pc}
 8009f1a:	0799      	lsls	r1, r3, #30
 8009f1c:	bf58      	it	pl
 8009f1e:	6962      	ldrpl	r2, [r4, #20]
 8009f20:	60a2      	str	r2, [r4, #8]
 8009f22:	e7f4      	b.n	8009f0e <__swsetup_r+0x8e>
 8009f24:	2000      	movs	r0, #0
 8009f26:	e7f7      	b.n	8009f18 <__swsetup_r+0x98>
 8009f28:	2000010c 	.word	0x2000010c

08009f2c <_sbrk_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d06      	ldr	r5, [pc, #24]	@ (8009f48 <_sbrk_r+0x1c>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	f7f7 f8d0 	bl	80010dc <_sbrk>
 8009f3c:	1c43      	adds	r3, r0, #1
 8009f3e:	d102      	bne.n	8009f46 <_sbrk_r+0x1a>
 8009f40:	682b      	ldr	r3, [r5, #0]
 8009f42:	b103      	cbz	r3, 8009f46 <_sbrk_r+0x1a>
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	20002008 	.word	0x20002008

08009f4c <__swhatbuf_r>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	460c      	mov	r4, r1
 8009f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f54:	2900      	cmp	r1, #0
 8009f56:	b096      	sub	sp, #88	@ 0x58
 8009f58:	4615      	mov	r5, r2
 8009f5a:	461e      	mov	r6, r3
 8009f5c:	da0d      	bge.n	8009f7a <__swhatbuf_r+0x2e>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f64:	f04f 0100 	mov.w	r1, #0
 8009f68:	bf14      	ite	ne
 8009f6a:	2340      	movne	r3, #64	@ 0x40
 8009f6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f70:	2000      	movs	r0, #0
 8009f72:	6031      	str	r1, [r6, #0]
 8009f74:	602b      	str	r3, [r5, #0]
 8009f76:	b016      	add	sp, #88	@ 0x58
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
 8009f7a:	466a      	mov	r2, sp
 8009f7c:	f000 f848 	bl	800a010 <_fstat_r>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	dbec      	blt.n	8009f5e <__swhatbuf_r+0x12>
 8009f84:	9901      	ldr	r1, [sp, #4]
 8009f86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f8e:	4259      	negs	r1, r3
 8009f90:	4159      	adcs	r1, r3
 8009f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f96:	e7eb      	b.n	8009f70 <__swhatbuf_r+0x24>

08009f98 <__smakebuf_r>:
 8009f98:	898b      	ldrh	r3, [r1, #12]
 8009f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f9c:	079d      	lsls	r5, r3, #30
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	d507      	bpl.n	8009fb4 <__smakebuf_r+0x1c>
 8009fa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	2301      	movs	r3, #1
 8009fae:	6163      	str	r3, [r4, #20]
 8009fb0:	b003      	add	sp, #12
 8009fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb4:	ab01      	add	r3, sp, #4
 8009fb6:	466a      	mov	r2, sp
 8009fb8:	f7ff ffc8 	bl	8009f4c <__swhatbuf_r>
 8009fbc:	9f00      	ldr	r7, [sp, #0]
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f7ff fb18 	bl	80095f8 <_malloc_r>
 8009fc8:	b948      	cbnz	r0, 8009fde <__smakebuf_r+0x46>
 8009fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fce:	059a      	lsls	r2, r3, #22
 8009fd0:	d4ee      	bmi.n	8009fb0 <__smakebuf_r+0x18>
 8009fd2:	f023 0303 	bic.w	r3, r3, #3
 8009fd6:	f043 0302 	orr.w	r3, r3, #2
 8009fda:	81a3      	strh	r3, [r4, #12]
 8009fdc:	e7e2      	b.n	8009fa4 <__smakebuf_r+0xc>
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	6020      	str	r0, [r4, #0]
 8009fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fee:	b15b      	cbz	r3, 800a008 <__smakebuf_r+0x70>
 8009ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f81d 	bl	800a034 <_isatty_r>
 8009ffa:	b128      	cbz	r0, 800a008 <__smakebuf_r+0x70>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f023 0303 	bic.w	r3, r3, #3
 800a002:	f043 0301 	orr.w	r3, r3, #1
 800a006:	81a3      	strh	r3, [r4, #12]
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	431d      	orrs	r5, r3
 800a00c:	81a5      	strh	r5, [r4, #12]
 800a00e:	e7cf      	b.n	8009fb0 <__smakebuf_r+0x18>

0800a010 <_fstat_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4d07      	ldr	r5, [pc, #28]	@ (800a030 <_fstat_r+0x20>)
 800a014:	2300      	movs	r3, #0
 800a016:	4604      	mov	r4, r0
 800a018:	4608      	mov	r0, r1
 800a01a:	4611      	mov	r1, r2
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	f7f7 f834 	bl	800108a <_fstat>
 800a022:	1c43      	adds	r3, r0, #1
 800a024:	d102      	bne.n	800a02c <_fstat_r+0x1c>
 800a026:	682b      	ldr	r3, [r5, #0]
 800a028:	b103      	cbz	r3, 800a02c <_fstat_r+0x1c>
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	bd38      	pop	{r3, r4, r5, pc}
 800a02e:	bf00      	nop
 800a030:	20002008 	.word	0x20002008

0800a034 <_isatty_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d06      	ldr	r5, [pc, #24]	@ (800a050 <_isatty_r+0x1c>)
 800a038:	2300      	movs	r3, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	f7f7 f833 	bl	80010aa <_isatty>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_isatty_r+0x1a>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_isatty_r+0x1a>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	20002008 	.word	0x20002008

0800a054 <_init>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr

0800a060 <_fini>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr
