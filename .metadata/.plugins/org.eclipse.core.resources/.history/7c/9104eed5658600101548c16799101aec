
F4Disc-01b-ObjectCountingFunction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009520  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080096b0  080096b0  0000a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800979c  0800979c  0000b158  2**0
                  CONTENTS
  4 .ARM          00000008  0800979c  0800979c  0000a79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097a4  080097a4  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097a4  080097a4  0000a7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097a8  080097a8  0000a7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080097ac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b158  2**0
                  CONTENTS
 10 .bss          00001e74  20000158  20000158  0000b158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fcc  20001fcc  0000b158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ba8  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039fe  00000000  00000000  0001fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00023730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e33  00000000  00000000  000249e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025123  00000000  00000000  00025813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000197cd  00000000  00000000  0004a936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc66f  00000000  00000000  00064103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130772  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005490  00000000  00000000  001307b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00135c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009698 	.word	0x08009698

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	08009698 	.word	0x08009698

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <_write>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	68b8      	ldr	r0, [r7, #8]
 80005b0:	f007 fcda 	bl	8007f68 <CDC_Transmit_FS>
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <counterShow>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void counterShow(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 80005c4:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <counterShow+0xbc>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	482a      	ldr	r0, [pc, #168]	@ (8000680 <counterShow+0xc0>)
 80005d6:	f001 f913 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR1_GPIO_Port,BAR1_Pin,count & (1<<1));
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <counterShow+0xbc>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	f003 0302 	and.w	r3, r3, #2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	4825      	ldr	r0, [pc, #148]	@ (8000684 <counterShow+0xc4>)
 80005ee:	f001 f907 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR2_GPIO_Port,BAR2_Pin,count & (1<<2));
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <counterShow+0xbc>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	2110      	movs	r1, #16
 8000602:	481f      	ldr	r0, [pc, #124]	@ (8000680 <counterShow+0xc0>)
 8000604:	f001 f8fc 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR3_GPIO_Port,BAR3_Pin,count & (1<<3));
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <counterShow+0xbc>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0308 	and.w	r3, r3, #8
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	2120      	movs	r1, #32
 8000618:	4819      	ldr	r0, [pc, #100]	@ (8000680 <counterShow+0xc0>)
 800061a:	f001 f8f1 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR4_GPIO_Port,BAR4_Pin,count & (1<<4));
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <counterShow+0xbc>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	f003 0310 	and.w	r3, r3, #16
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	2104      	movs	r1, #4
 800062e:	4814      	ldr	r0, [pc, #80]	@ (8000680 <counterShow+0xc0>)
 8000630:	f001 f8e6 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <counterShow+0xbc>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	2110      	movs	r1, #16
 8000644:	4810      	ldr	r0, [pc, #64]	@ (8000688 <counterShow+0xc8>)
 8000646:	f001 f8db 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <counterShow+0xbc>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	2120      	movs	r1, #32
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <counterShow+0xc8>)
 800065c:	f001 f8d0 	bl	8001800 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <counterShow+0xbc>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	2180      	movs	r1, #128	@ 0x80
 8000670:	4806      	ldr	r0, [pc, #24]	@ (800068c <counterShow+0xcc>)
 8000672:	f001 f8c5 	bl	8001800 <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000268 	.word	0x20000268
 8000680:	40021000 	.word	0x40021000
 8000684:	40020800 	.word	0x40020800
 8000688:	40020400 	.word	0x40020400
 800068c:	40020c00 	.word	0x40020c00

08000690 <CounterUpdate>:
void CounterUpdate(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	++count;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <CounterUpdate+0x1c>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b29a      	uxth	r2, r3
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <CounterUpdate+0x1c>)
 800069e:	801a      	strh	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000268 	.word	0x20000268

080006b0 <sensorDetected>:

// sensor.c dan sensor.h
uint8_t sensorDetected(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint32_t db_ms=20;
 80006b6:	2314      	movs	r3, #20
 80006b8:	603b      	str	r3, [r7, #0]
	uint8_t FlagDetect=0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 80006be:	2102      	movs	r1, #2
 80006c0:	4814      	ldr	r0, [pc, #80]	@ (8000714 <sensorDetected+0x64>)
 80006c2:	f001 f885 	bl	80017d0 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d11d      	bne.n	8000708 <sensorDetected+0x58>
		HAL_Delay(db_ms);
 80006cc:	6838      	ldr	r0, [r7, #0]
 80006ce:	f000 fdad 	bl	800122c <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 80006d2:	2102      	movs	r1, #2
 80006d4:	480f      	ldr	r0, [pc, #60]	@ (8000714 <sensorDetected+0x64>)
 80006d6:	f001 f87b 	bl	80017d0 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d113      	bne.n	8000708 <sensorDetected+0x58>
			while(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET);
 80006e0:	bf00      	nop
 80006e2:	2102      	movs	r1, #2
 80006e4:	480b      	ldr	r0, [pc, #44]	@ (8000714 <sensorDetected+0x64>)
 80006e6:	f001 f873 	bl	80017d0 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0f8      	beq.n	80006e2 <sensorDetected+0x32>
			 // tunggu release stabil
			HAL_Delay(db_ms);
 80006f0:	6838      	ldr	r0, [r7, #0]
 80006f2:	f000 fd9b 	bl	800122c <HAL_Delay>
			if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_SET) {
 80006f6:	2102      	movs	r1, #2
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <sensorDetected+0x64>)
 80006fa:	f001 f869 	bl	80017d0 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d101      	bne.n	8000708 <sensorDetected+0x58>
				FlagDetect=1; // valid press
 8000704:	2301      	movs	r3, #1
 8000706:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return FlagDetect;
 8000708:	79fb      	ldrb	r3, [r7, #7]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40020400 	.word	0x40020400

08000718 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800071e:	f000 fd13 	bl	8001148 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000722:	f000 f88d 	bl	8000840 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000726:	f000 f989 	bl	8000a3c <MX_GPIO_Init>
	MX_I2C1_Init();
 800072a:	f000 f8f3 	bl	8000914 <MX_I2C1_Init>
	MX_I2S3_Init();
 800072e:	f000 f91f 	bl	8000970 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000732:	f000 f94d 	bl	80009d0 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000736:	f007 fb59 	bl	8007dec <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	  HAL_Delay(5000);
 800073a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800073e:	f000 fd75 	bl	800122c <HAL_Delay>
	  printf("Cek BarLED, buzzer, USER LED \n\r");
 8000742:	4836      	ldr	r0, [pc, #216]	@ (800081c <main+0x104>)
 8000744:	f008 f93c 	bl	80089c0 <iprintf>
	  HAL_Delay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074c:	f000 fd6e 	bl	800122c <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 8000750:	2300      	movs	r3, #0
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	e044      	b.n	80007e0 <main+0xc8>

		  HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 8000756:	2140      	movs	r1, #64	@ 0x40
 8000758:	4831      	ldr	r0, [pc, #196]	@ (8000820 <main+0x108>)
 800075a:	f001 f86a 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 800075e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000762:	4830      	ldr	r0, [pc, #192]	@ (8000824 <main+0x10c>)
 8000764:	f001 f865 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 8000768:	2110      	movs	r1, #16
 800076a:	482d      	ldr	r0, [pc, #180]	@ (8000820 <main+0x108>)
 800076c:	f001 f861 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 8000770:	2120      	movs	r1, #32
 8000772:	482b      	ldr	r0, [pc, #172]	@ (8000820 <main+0x108>)
 8000774:	f001 f85d 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 8000778:	2104      	movs	r1, #4
 800077a:	4829      	ldr	r0, [pc, #164]	@ (8000820 <main+0x108>)
 800077c:	f001 f859 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 8000780:	2110      	movs	r1, #16
 8000782:	4829      	ldr	r0, [pc, #164]	@ (8000828 <main+0x110>)
 8000784:	f001 f855 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 8000788:	2120      	movs	r1, #32
 800078a:	4827      	ldr	r0, [pc, #156]	@ (8000828 <main+0x110>)
 800078c:	f001 f851 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	4826      	ldr	r0, [pc, #152]	@ (800082c <main+0x114>)
 8000794:	f001 f84d 	bl	8001832 <HAL_GPIO_TogglePin>

		  HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8000798:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800079c:	4821      	ldr	r0, [pc, #132]	@ (8000824 <main+0x10c>)
 800079e:	f001 f848 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	4821      	ldr	r0, [pc, #132]	@ (800082c <main+0x114>)
 80007a8:	f001 f843 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80007ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b0:	481e      	ldr	r0, [pc, #120]	@ (800082c <main+0x114>)
 80007b2:	f001 f83e 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80007b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ba:	481c      	ldr	r0, [pc, #112]	@ (800082c <main+0x114>)
 80007bc:	f001 f839 	bl	8001832 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80007c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c4:	4819      	ldr	r0, [pc, #100]	@ (800082c <main+0x114>)
 80007c6:	f001 f834 	bl	8001832 <HAL_GPIO_TogglePin>
		  printf("count: %d \n\r",cnt);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4818      	ldr	r0, [pc, #96]	@ (8000830 <main+0x118>)
 80007d0:	f008 f8f6 	bl	80089c0 <iprintf>
		  HAL_Delay(100);
 80007d4:	2064      	movs	r0, #100	@ 0x64
 80007d6:	f000 fd29 	bl	800122c <HAL_Delay>
	  for (uint8_t cnt=0;cnt<8;cnt++){
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	3301      	adds	r3, #1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b07      	cmp	r3, #7
 80007e4:	d9b7      	bls.n	8000756 <main+0x3e>
	  }

	  printf("Cek Button \n\r");
 80007e6:	4813      	ldr	r0, [pc, #76]	@ (8000834 <main+0x11c>)
 80007e8:	f008 f8ea 	bl	80089c0 <iprintf>
	  counterShow();
 80007ec:	f7ff fee8 	bl	80005c0 <counterShow>
	  printf("nilai counter: %d \n\r",count);
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <main+0x120>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4811      	ldr	r0, [pc, #68]	@ (800083c <main+0x124>)
 80007f8:	f008 f8e2 	bl	80089c0 <iprintf>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */


        if(sensorDetected()){
 80007fc:	f7ff ff58 	bl	80006b0 <sensorDetected>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0fa      	beq.n	80007fc <main+0xe4>
        	CounterUpdate();
 8000806:	f7ff ff43 	bl	8000690 <CounterUpdate>
        	counterShow();
 800080a:	f7ff fed9 	bl	80005c0 <counterShow>
        	printf("nilai counter: %d \n\r",count);
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <main+0x120>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <main+0x124>)
 8000816:	f008 f8d3 	bl	80089c0 <iprintf>
        if(sensorDetected()){
 800081a:	e7ef      	b.n	80007fc <main+0xe4>
 800081c:	080096b0 	.word	0x080096b0
 8000820:	40021000 	.word	0x40021000
 8000824:	40020800 	.word	0x40020800
 8000828:	40020400 	.word	0x40020400
 800082c:	40020c00 	.word	0x40020c00
 8000830:	080096d0 	.word	0x080096d0
 8000834:	080096e0 	.word	0x080096e0
 8000838:	20000268 	.word	0x20000268
 800083c:	080096f0 	.word	0x080096f0

08000840 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	@ 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f008 f90b 	bl	8008a6a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b28      	ldr	r3, [pc, #160]	@ (800090c <SystemClock_Config+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a27      	ldr	r2, [pc, #156]	@ (800090c <SystemClock_Config+0xcc>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <SystemClock_Config+0xcc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <SystemClock_Config+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <SystemClock_Config+0xd0>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <SystemClock_Config+0xd0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80008b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008b8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008be:	2307      	movs	r3, #7
 80008c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 f830 	bl	800392c <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80008d2:	f000 f9fd 	bl	8000cd0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2105      	movs	r1, #5
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fa91 	bl	8003e1c <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000900:	f000 f9e6 	bl	8000cd0 <Error_Handler>
	}
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	@ 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C1_Init+0x50>)
 800091a:	4a13      	ldr	r2, [pc, #76]	@ (8000968 <MX_I2C1_Init+0x54>)
 800091c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_I2C1_Init+0x50>)
 8000920:	4a12      	ldr	r2, [pc, #72]	@ (800096c <MX_I2C1_Init+0x58>)
 8000922:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_I2C1_Init+0x50>)
 8000932:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000936:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_I2C1_Init+0x50>)
 8000952:	f000 ff89 	bl	8001868 <HAL_I2C_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800095c:	f000 f9b8 	bl	8000cd0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000174 	.word	0x20000174
 8000968:	40005400 	.word	0x40005400
 800096c:	000186a0 	.word	0x000186a0

08000970 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <MX_I2S3_Init+0x54>)
 8000976:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <MX_I2S3_Init+0x58>)
 8000978:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_I2S3_Init+0x54>)
 800097c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000980:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_I2S3_Init+0x54>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_I2S3_Init+0x54>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <MX_I2S3_Init+0x54>)
 8000990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000994:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_I2S3_Init+0x54>)
 8000998:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <MX_I2S3_Init+0x5c>)
 800099a:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_I2S3_Init+0x54>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_I2S3_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_I2S3_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_I2S3_Init+0x54>)
 80009b0:	f001 f89e 	bl	8001af0 <HAL_I2S_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 80009ba:	f000 f989 	bl	8000cd0 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200001c8 	.word	0x200001c8
 80009c8:	40003c00 	.word	0x40003c00
 80009cc:	00017700 	.word	0x00017700

080009d0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <MX_SPI1_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_SPI1_Init+0x64>)
 80009fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a00:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_SPI1_Init+0x64>)
 8000a22:	f003 fd47 	bl	80044b4 <HAL_SPI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000a2c:	f000 f950 	bl	8000cd0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000210 	.word	0x20000210
 8000a38:	40013000 	.word	0x40013000

08000a3c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	4b98      	ldr	r3, [pc, #608]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a97      	ldr	r2, [pc, #604]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b95      	ldr	r3, [pc, #596]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	4b91      	ldr	r3, [pc, #580]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a90      	ldr	r2, [pc, #576]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b8e      	ldr	r3, [pc, #568]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b8a      	ldr	r3, [pc, #552]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a89      	ldr	r2, [pc, #548]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b87      	ldr	r3, [pc, #540]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b83      	ldr	r3, [pc, #524]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a82      	ldr	r2, [pc, #520]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b80      	ldr	r3, [pc, #512]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a7b      	ldr	r2, [pc, #492]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b79      	ldr	r3, [pc, #484]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b75      	ldr	r3, [pc, #468]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a74      	ldr	r2, [pc, #464]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b72      	ldr	r3, [pc, #456]	@ (8000cb8 <MX_GPIO_Init+0x27c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000afa:	2200      	movs	r2, #0
 8000afc:	217c      	movs	r1, #124	@ 0x7c
 8000afe:	486f      	ldr	r0, [pc, #444]	@ (8000cbc <MX_GPIO_Init+0x280>)
 8000b00:	f000 fe7e 	bl	8001800 <HAL_GPIO_WritePin>
			|BAR0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8000b0a:	486d      	ldr	r0, [pc, #436]	@ (8000cc0 <MX_GPIO_Init+0x284>)
 8000b0c:	f000 fe78 	bl	8001800 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2101      	movs	r1, #1
 8000b14:	486a      	ldr	r0, [pc, #424]	@ (8000cc0 <MX_GPIO_Init+0x284>)
 8000b16:	f000 fe73 	bl	8001800 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f24f 0190 	movw	r1, #61584	@ 0xf090
 8000b20:	4868      	ldr	r0, [pc, #416]	@ (8000cc4 <MX_GPIO_Init+0x288>)
 8000b22:	f000 fe6d 	bl	8001800 <HAL_GPIO_WritePin>
			|Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2130      	movs	r1, #48	@ 0x30
 8000b2a:	4867      	ldr	r0, [pc, #412]	@ (8000cc8 <MX_GPIO_Init+0x28c>)
 8000b2c:	f000 fe68 	bl	8001800 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
	GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000b30:	237c      	movs	r3, #124	@ 0x7c
 8000b32:	61fb      	str	r3, [r7, #28]
			|BAR0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	485d      	ldr	r0, [pc, #372]	@ (8000cbc <MX_GPIO_Init+0x280>)
 8000b48:	f000 fca6 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000b4c:	f642 0301 	movw	r3, #10241	@ 0x2801
 8000b50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4856      	ldr	r0, [pc, #344]	@ (8000cc0 <MX_GPIO_Init+0x284>)
 8000b66:	f000 fc97 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	484e      	ldr	r0, [pc, #312]	@ (8000cc0 <MX_GPIO_Init+0x284>)
 8000b86:	f000 fc87 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	484b      	ldr	r0, [pc, #300]	@ (8000ccc <MX_GPIO_Init+0x290>)
 8000ba0:	f000 fc7a 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000ba4:	2330      	movs	r3, #48	@ 0x30
 8000ba6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4842      	ldr	r0, [pc, #264]	@ (8000cc0 <MX_GPIO_Init+0x284>)
 8000bb8:	f000 fc6e 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
	GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000bbc:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000bc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483d      	ldr	r0, [pc, #244]	@ (8000cc8 <MX_GPIO_Init+0x28c>)
 8000bd2:	f000 fc61 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4837      	ldr	r0, [pc, #220]	@ (8000cc8 <MX_GPIO_Init+0x28c>)
 8000bea:	f000 fc55 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000bee:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000bf2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	482e      	ldr	r0, [pc, #184]	@ (8000cbc <MX_GPIO_Init+0x280>)
 8000c04:	f000 fc48 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4828      	ldr	r0, [pc, #160]	@ (8000cc8 <MX_GPIO_Init+0x28c>)
 8000c26:	f000 fc37 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW2_Pin SW1_Pin */
	GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000c2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4821      	ldr	r0, [pc, #132]	@ (8000cc4 <MX_GPIO_Init+0x288>)
 8000c40:	f000 fc2a 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c44:	f24f 0390 	movw	r3, #61584	@ 0xf090
 8000c48:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin|BAR7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4819      	ldr	r0, [pc, #100]	@ (8000cc4 <MX_GPIO_Init+0x288>)
 8000c5e:	f000 fc1b 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c62:	2320      	movs	r3, #32
 8000c64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4813      	ldr	r0, [pc, #76]	@ (8000cc4 <MX_GPIO_Init+0x288>)
 8000c76:	f000 fc0f 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR5_Pin BAR6_Pin */
	GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000c7a:	2330      	movs	r3, #48	@ 0x30
 8000c7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <MX_GPIO_Init+0x28c>)
 8000c92:	f000 fc01 	bl	8001498 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c9a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_GPIO_Init+0x280>)
 8000cac:	f000 fbf4 	bl	8001498 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	@ 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020c00 	.word	0x40020c00
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <Error_Handler+0x8>

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d1a:	2007      	movs	r0, #7
 8000d1c:	f000 fb7a 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	@ (8000db0 <HAL_I2C_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12c      	bne.n	8000da8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d6a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <HAL_I2C_MspInit+0x8c>)
 8000d88:	f000 fb86 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	@ 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40005400 	.word	0x40005400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020400 	.word	0x40020400

08000dbc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a31      	ldr	r2, [pc, #196]	@ (8000eac <HAL_I2S_MspInit+0xf0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d15a      	bne.n	8000ea2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dec:	2301      	movs	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000df0:	23c0      	movs	r3, #192	@ 0xc0
 8000df2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 fa19 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e08:	f7ff ff62 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	4a26      	ldr	r2, [pc, #152]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1c:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	4a18      	ldr	r2, [pc, #96]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_I2S_MspInit+0xf4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e60:	2310      	movs	r3, #16
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e70:	2306      	movs	r3, #6
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <HAL_I2S_MspInit+0xf8>)
 8000e7c:	f000 fb0c 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e80:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e92:	2306      	movs	r3, #6
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <HAL_I2S_MspInit+0xfc>)
 8000e9e:	f000 fafb 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3738      	adds	r7, #56	@ 0x38
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40003c00 	.word	0x40003c00
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020800 	.word	0x40020800

08000ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	@ (8000f40 <HAL_SPI_MspInit+0x84>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d12b      	bne.n	8000f36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ee8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a10      	ldr	r2, [pc, #64]	@ (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f16:	23e0      	movs	r3, #224	@ 0xe0
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f26:	2305      	movs	r3, #5
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <HAL_SPI_MspInit+0x8c>)
 8000f32:	f000 fab1 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	@ 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f923 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <OTG_FS_IRQHandler+0x10>)
 8000fb2:	f001 fb8d 	bl	80026d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20001754 	.word	0x20001754

08000fc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
  }

  return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001022:	605a      	str	r2, [r3, #4]
  return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <_isatty>:

int _isatty(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f007 fd38 	bl	8008b08 <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20020000 	.word	0x20020000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	2000026c 	.word	0x2000026c
 80010cc:	20001fd0 	.word	0x20001fd0

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800112c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f8:	480d      	ldr	r0, [pc, #52]	@ (8001130 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fa:	490e      	ldr	r1, [pc, #56]	@ (8001134 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001110:	4c0b      	ldr	r4, [pc, #44]	@ (8001140 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111e:	f7ff ffd7 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f007 fcf7 	bl	8008b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff faf7 	bl	8000718 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800112c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001138:	080097ac 	.word	0x080097ac
  ldr r2, =_sbss
 800113c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001140:	20001fcc 	.word	0x20001fcc

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 f94f 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fdae 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f967 	bl	800147e <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 f92f 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	@ (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000004 	.word	0x20000004

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20000270 	.word	0x20000270

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000270 	.word	0x20000270

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff ffee 	bl	8001214 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffde 	bl	8001214 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	@ (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	@ (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	@ (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff29 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff3e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff31 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	@ 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e16b      	b.n	800178c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b4:	2201      	movs	r2, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	f040 815a 	bne.w	8001786 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d130      	bne.n	800154c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0201 	and.w	r2, r3, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d017      	beq.n	8001588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d123      	bne.n	80015dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	691a      	ldr	r2, [r3, #16]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0203 	and.w	r2, r3, #3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80b4 	beq.w	8001786 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b60      	ldr	r3, [pc, #384]	@ (80017a4 <HAL_GPIO_Init+0x30c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	4a5f      	ldr	r2, [pc, #380]	@ (80017a4 <HAL_GPIO_Init+0x30c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162c:	6453      	str	r3, [r2, #68]	@ 0x44
 800162e:	4b5d      	ldr	r3, [pc, #372]	@ (80017a4 <HAL_GPIO_Init+0x30c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163a:	4a5b      	ldr	r2, [pc, #364]	@ (80017a8 <HAL_GPIO_Init+0x310>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <HAL_GPIO_Init+0x314>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d02b      	beq.n	80016be <HAL_GPIO_Init+0x226>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a51      	ldr	r2, [pc, #324]	@ (80017b0 <HAL_GPIO_Init+0x318>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d025      	beq.n	80016ba <HAL_GPIO_Init+0x222>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a50      	ldr	r2, [pc, #320]	@ (80017b4 <HAL_GPIO_Init+0x31c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01f      	beq.n	80016b6 <HAL_GPIO_Init+0x21e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4f      	ldr	r2, [pc, #316]	@ (80017b8 <HAL_GPIO_Init+0x320>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x21a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4e      	ldr	r2, [pc, #312]	@ (80017bc <HAL_GPIO_Init+0x324>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x216>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4d      	ldr	r2, [pc, #308]	@ (80017c0 <HAL_GPIO_Init+0x328>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x212>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4c      	ldr	r2, [pc, #304]	@ (80017c4 <HAL_GPIO_Init+0x32c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x20e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4b      	ldr	r2, [pc, #300]	@ (80017c8 <HAL_GPIO_Init+0x330>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x20a>
 800169e:	2307      	movs	r3, #7
 80016a0:	e00e      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016a2:	2308      	movs	r3, #8
 80016a4:	e00c      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016a6:	2306      	movs	r3, #6
 80016a8:	e00a      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e008      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e004      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_GPIO_Init+0x228>
 80016be:	2300      	movs	r3, #0
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f002 0203 	and.w	r2, r2, #3
 80016c6:	0092      	lsls	r2, r2, #2
 80016c8:	4093      	lsls	r3, r2
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d0:	4935      	ldr	r1, [pc, #212]	@ (80017a8 <HAL_GPIO_Init+0x310>)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	3302      	adds	r3, #2
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016de:	4b3b      	ldr	r3, [pc, #236]	@ (80017cc <HAL_GPIO_Init+0x334>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001702:	4a32      	ldr	r2, [pc, #200]	@ (80017cc <HAL_GPIO_Init+0x334>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001708:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <HAL_GPIO_Init+0x334>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800172c:	4a27      	ldr	r2, [pc, #156]	@ (80017cc <HAL_GPIO_Init+0x334>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001732:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <HAL_GPIO_Init+0x334>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001756:	4a1d      	ldr	r2, [pc, #116]	@ (80017cc <HAL_GPIO_Init+0x334>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_GPIO_Init+0x334>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001780:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <HAL_GPIO_Init+0x334>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3301      	adds	r3, #1
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	f67f ae90 	bls.w	80014b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3724      	adds	r7, #36	@ 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40013800 	.word	0x40013800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020c00 	.word	0x40020c00
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40021400 	.word	0x40021400
 80017c4:	40021800 	.word	0x40021800
 80017c8:	40021c00 	.word	0x40021c00
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800181c:	e003      	b.n	8001826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43d9      	mvns	r1, r3
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	400b      	ands	r3, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e12b      	b.n	8001ad2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fa4c 	bl	8000d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2224      	movs	r2, #36	@ 0x24
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018cc:	f002 fc9e 	bl	800420c <HAL_RCC_GetPCLK1Freq>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a81      	ldr	r2, [pc, #516]	@ (8001adc <HAL_I2C_Init+0x274>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d807      	bhi.n	80018ec <HAL_I2C_Init+0x84>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a80      	ldr	r2, [pc, #512]	@ (8001ae0 <HAL_I2C_Init+0x278>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	bf94      	ite	ls
 80018e4:	2301      	movls	r3, #1
 80018e6:	2300      	movhi	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	e006      	b.n	80018fa <HAL_I2C_Init+0x92>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a7d      	ldr	r2, [pc, #500]	@ (8001ae4 <HAL_I2C_Init+0x27c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bf94      	ite	ls
 80018f4:	2301      	movls	r3, #1
 80018f6:	2300      	movhi	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0e7      	b.n	8001ad2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4a78      	ldr	r2, [pc, #480]	@ (8001ae8 <HAL_I2C_Init+0x280>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9b      	lsrs	r3, r3, #18
 800190c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a6a      	ldr	r2, [pc, #424]	@ (8001adc <HAL_I2C_Init+0x274>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d802      	bhi.n	800193c <HAL_I2C_Init+0xd4>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	e009      	b.n	8001950 <HAL_I2C_Init+0xe8>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	4a69      	ldr	r2, [pc, #420]	@ (8001aec <HAL_I2C_Init+0x284>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	3301      	adds	r3, #1
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	430b      	orrs	r3, r1
 8001956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001962:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	495c      	ldr	r1, [pc, #368]	@ (8001adc <HAL_I2C_Init+0x274>)
 800196c:	428b      	cmp	r3, r1
 800196e:	d819      	bhi.n	80019a4 <HAL_I2C_Init+0x13c>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e59      	subs	r1, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fbb1 f3f3 	udiv	r3, r1, r3
 800197e:	1c59      	adds	r1, r3, #1
 8001980:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001984:	400b      	ands	r3, r1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00a      	beq.n	80019a0 <HAL_I2C_Init+0x138>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1e59      	subs	r1, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fbb1 f3f3 	udiv	r3, r1, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199e:	e051      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e04f      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d111      	bne.n	80019d0 <HAL_I2C_Init+0x168>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	440b      	add	r3, r1
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	e012      	b.n	80019f6 <HAL_I2C_Init+0x18e>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Init+0x196>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e022      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10e      	bne.n	8001a24 <HAL_I2C_Init+0x1bc>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1e58      	subs	r0, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6859      	ldr	r1, [r3, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	440b      	add	r3, r1
 8001a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a22:	e00f      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	0099      	lsls	r1, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6809      	ldr	r1, [r1, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6911      	ldr	r1, [r2, #16]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68d2      	ldr	r2, [r2, #12]
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	000186a0 	.word	0x000186a0
 8001ae0:	001e847f 	.word	0x001e847f
 8001ae4:	003d08ff 	.word	0x003d08ff
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e128      	b.n	8001d54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a90      	ldr	r2, [pc, #576]	@ (8001d5c <HAL_I2S_Init+0x26c>)
 8001b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff f94d 	bl	8000dbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b38:	f023 030f 	bic.w	r3, r3, #15
 8001b3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d060      	beq.n	8001c10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b56:	2310      	movs	r3, #16
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e001      	b.n	8001b60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	d802      	bhi.n	8001b6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f002 fc42 	bl	80043f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b74:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b7e:	d125      	bne.n	8001bcc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d010      	beq.n	8001baa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	3305      	adds	r3, #5
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	e01f      	b.n	8001bea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	3305      	adds	r3, #5
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	e00e      	b.n	8001bea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	3305      	adds	r3, #5
 8001be8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4a5c      	ldr	r2, [pc, #368]	@ (8001d60 <HAL_I2S_Init+0x270>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	e003      	b.n	8001c18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d902      	bls.n	8001c24 <HAL_I2S_Init+0x134>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	2bff      	cmp	r3, #255	@ 0xff
 8001c22:	d907      	bls.n	8001c34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c28:	f043 0210 	orr.w	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e08f      	b.n	8001d54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	ea42 0103 	orr.w	r1, r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c52:	f023 030f 	bic.w	r3, r3, #15
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6851      	ldr	r1, [r2, #4]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6892      	ldr	r2, [r2, #8]
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68d2      	ldr	r2, [r2, #12]
 8001c64:	4311      	orrs	r1, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6992      	ldr	r2, [r2, #24]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d161      	bne.n	8001d44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a38      	ldr	r2, [pc, #224]	@ (8001d64 <HAL_I2S_Init+0x274>)
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a37      	ldr	r2, [pc, #220]	@ (8001d68 <HAL_I2S_Init+0x278>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_I2S_Init+0x1a4>
 8001c90:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <HAL_I2S_Init+0x27c>)
 8001c92:	e001      	b.n	8001c98 <HAL_I2S_Init+0x1a8>
 8001c94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	4932      	ldr	r1, [pc, #200]	@ (8001d68 <HAL_I2S_Init+0x278>)
 8001ca0:	428a      	cmp	r2, r1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_I2S_Init+0x1b8>
 8001ca4:	4a31      	ldr	r2, [pc, #196]	@ (8001d6c <HAL_I2S_Init+0x27c>)
 8001ca6:	e001      	b.n	8001cac <HAL_I2S_Init+0x1bc>
 8001ca8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001cac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001cb0:	f023 030f 	bic.w	r3, r3, #15
 8001cb4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2b      	ldr	r2, [pc, #172]	@ (8001d68 <HAL_I2S_Init+0x278>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_I2S_Init+0x1d4>
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <HAL_I2S_Init+0x27c>)
 8001cc2:	e001      	b.n	8001cc8 <HAL_I2S_Init+0x1d8>
 8001cc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cc8:	2202      	movs	r2, #2
 8001cca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <HAL_I2S_Init+0x278>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d101      	bne.n	8001cda <HAL_I2S_Init+0x1ea>
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_I2S_Init+0x27c>)
 8001cd8:	e001      	b.n	8001cde <HAL_I2S_Init+0x1ee>
 8001cda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cea:	d003      	beq.n	8001cf4 <HAL_I2S_Init+0x204>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001cf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	e001      	b.n	8001d00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <HAL_I2S_Init+0x278>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_I2S_Init+0x24c>
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_I2S_Init+0x27c>)
 8001d3a:	e001      	b.n	8001d40 <HAL_I2S_Init+0x250>
 8001d3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d40:	897a      	ldrh	r2, [r7, #10]
 8001d42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	08001e67 	.word	0x08001e67
 8001d60:	cccccccd 	.word	0xcccccccd
 8001d64:	08001f7d 	.word	0x08001f7d
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	40003400 	.word	0x40003400

08001d70 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	881a      	ldrh	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	1c9a      	adds	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001df0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffb8 	bl	8001d70 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e22:	1c9a      	adds	r2, r3, #2
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10e      	bne.n	8001e5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff93 	bl	8001d84 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d13a      	bne.n	8001ef8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d109      	bne.n	8001ea0 <I2S_IRQHandler+0x3a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	d102      	bne.n	8001ea0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffb4 	bl	8001e08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea6:	2b40      	cmp	r3, #64	@ 0x40
 8001ea8:	d126      	bne.n	8001ef8 <I2S_IRQHandler+0x92>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d11f      	bne.n	8001ef8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ec6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ff50 	bl	8001d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d136      	bne.n	8001f72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d109      	bne.n	8001f22 <I2S_IRQHandler+0xbc>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f18:	2b80      	cmp	r3, #128	@ 0x80
 8001f1a:	d102      	bne.n	8001f22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff45 	bl	8001dac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d122      	bne.n	8001f72 <I2S_IRQHandler+0x10c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d11b      	bne.n	8001f72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff13 	bl	8001d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a92      	ldr	r2, [pc, #584]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f96:	4b92      	ldr	r3, [pc, #584]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f98:	e001      	b.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a8b      	ldr	r2, [pc, #556]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d101      	bne.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fb4:	4b8a      	ldr	r3, [pc, #552]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fb6:	e001      	b.n	8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fc8:	d004      	beq.n	8001fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 8099 	bne.w	8002106 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d107      	bne.n	8001fee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f925 	bl	8002238 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f9c8 	bl	8002398 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200e:	2b40      	cmp	r3, #64	@ 0x40
 8002010:	d13a      	bne.n	8002088 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d035      	beq.n	8002088 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6e      	ldr	r2, [pc, #440]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002026:	4b6e      	ldr	r3, [pc, #440]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002028:	e001      	b.n	800202e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800202a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4969      	ldr	r1, [pc, #420]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002036:	428b      	cmp	r3, r1
 8002038:	d101      	bne.n	800203e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800203a:	4b69      	ldr	r3, [pc, #420]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800203c:	e001      	b.n	8002042 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800203e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002042:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002046:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002056:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fe88 	bl	8001d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b08      	cmp	r3, #8
 8002090:	f040 80c3 	bne.w	800221a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80bd 	beq.w	800221a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020ba:	4b49      	ldr	r3, [pc, #292]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020bc:	e001      	b.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4944      	ldr	r1, [pc, #272]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ca:	428b      	cmp	r3, r1
 80020cc:	d101      	bne.n	80020d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020ce:	4b44      	ldr	r3, [pc, #272]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020d0:	e001      	b.n	80020d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80020d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fe4a 	bl	8001d98 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002104:	e089      	b.n	800221a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d107      	bne.n	8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8be 	bl	800229c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f8fd 	bl	8002334 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b40      	cmp	r3, #64	@ 0x40
 8002142:	d12f      	bne.n	80021a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b00      	cmp	r3, #0
 800214c:	d02a      	beq.n	80021a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800215c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1e      	ldr	r2, [pc, #120]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800216a:	e001      	b.n	8002170 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800216c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4919      	ldr	r1, [pc, #100]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002178:	428b      	cmp	r3, r1
 800217a:	d101      	bne.n	8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800217c:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800217e:	e001      	b.n	8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002180:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002184:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002188:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fdfa 	bl	8001d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d136      	bne.n	800221c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d031      	beq.n	800221c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021c4:	e001      	b.n	80021ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4902      	ldr	r1, [pc, #8]	@ (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021d2:	428b      	cmp	r3, r1
 80021d4:	d106      	bne.n	80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80021d6:	4b02      	ldr	r3, [pc, #8]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021d8:	e006      	b.n	80021e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80021da:	bf00      	nop
 80021dc:	40003800 	.word	0x40003800
 80021e0:	40003400 	.word	0x40003400
 80021e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021ec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	f043 0204 	orr.w	r2, r3, #4
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fdc0 	bl	8001d98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002218:	e000      	b.n	800221c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800221a:	bf00      	nop
}
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	1c99      	adds	r1, r3, #2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6251      	str	r1, [r2, #36]	@ 0x24
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d113      	bne.n	8002292 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002278:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d106      	bne.n	8002292 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffc9 	bl	8002224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	1c99      	adds	r1, r3, #2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80022ae:	8819      	ldrh	r1, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1d      	ldr	r2, [pc, #116]	@ (800232c <I2SEx_TxISR_I2SExt+0x90>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <I2SEx_TxISR_I2SExt+0x22>
 80022ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002330 <I2SEx_TxISR_I2SExt+0x94>)
 80022bc:	e001      	b.n	80022c2 <I2SEx_TxISR_I2SExt+0x26>
 80022be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022c2:	460a      	mov	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d121      	bne.n	8002322 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a12      	ldr	r2, [pc, #72]	@ (800232c <I2SEx_TxISR_I2SExt+0x90>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <I2SEx_TxISR_I2SExt+0x50>
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <I2SEx_TxISR_I2SExt+0x94>)
 80022ea:	e001      	b.n	80022f0 <I2SEx_TxISR_I2SExt+0x54>
 80022ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	490d      	ldr	r1, [pc, #52]	@ (800232c <I2SEx_TxISR_I2SExt+0x90>)
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d101      	bne.n	8002300 <I2SEx_TxISR_I2SExt+0x64>
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <I2SEx_TxISR_I2SExt+0x94>)
 80022fe:	e001      	b.n	8002304 <I2SEx_TxISR_I2SExt+0x68>
 8002300:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002304:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002308:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff81 	bl	8002224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40003800 	.word	0x40003800
 8002330:	40003400 	.word	0x40003400

08002334 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d8      	ldr	r0, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	1c99      	adds	r1, r3, #2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800234c:	b282      	uxth	r2, r0
 800234e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d113      	bne.n	8002390 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002376:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ff4a 	bl	8002224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a20      	ldr	r2, [pc, #128]	@ (8002428 <I2SEx_RxISR_I2SExt+0x90>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <I2SEx_RxISR_I2SExt+0x16>
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <I2SEx_RxISR_I2SExt+0x94>)
 80023ac:	e001      	b.n	80023b2 <I2SEx_RxISR_I2SExt+0x1a>
 80023ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023b2:	68d8      	ldr	r0, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	1c99      	adds	r1, r3, #2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80023be:	b282      	uxth	r2, r0
 80023c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d121      	bne.n	800241e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <I2SEx_RxISR_I2SExt+0x90>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <I2SEx_RxISR_I2SExt+0x50>
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <I2SEx_RxISR_I2SExt+0x94>)
 80023e6:	e001      	b.n	80023ec <I2SEx_RxISR_I2SExt+0x54>
 80023e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	490d      	ldr	r1, [pc, #52]	@ (8002428 <I2SEx_RxISR_I2SExt+0x90>)
 80023f4:	428b      	cmp	r3, r1
 80023f6:	d101      	bne.n	80023fc <I2SEx_RxISR_I2SExt+0x64>
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <I2SEx_RxISR_I2SExt+0x94>)
 80023fa:	e001      	b.n	8002400 <I2SEx_RxISR_I2SExt+0x68>
 80023fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002400:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002404:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff03 	bl	8002224 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40003800 	.word	0x40003800
 800242c:	40003400 	.word	0x40003400

08002430 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002432:	b08f      	sub	sp, #60	@ 0x3c
 8002434:	af0a      	add	r7, sp, #40	@ 0x28
 8002436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e10f      	b.n	8002662 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f005 fecb 	bl	80081f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2203      	movs	r2, #3
 8002466:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f002 f9b4 	bl	80047ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	687e      	ldr	r6, [r7, #4]
 800248e:	466d      	mov	r5, sp
 8002490:	f106 0410 	add.w	r4, r6, #16
 8002494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a4:	1d33      	adds	r3, r6, #4
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	6838      	ldr	r0, [r7, #0]
 80024aa:	f002 f88c 	bl	80045c6 <USB_CoreInit>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0d0      	b.n	8002662 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 f9a2 	bl	8004810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e04a      	b.n	8002568 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	333d      	adds	r3, #61	@ 0x3d
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	333c      	adds	r3, #60	@ 0x3c
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	b298      	uxth	r0, r3
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3344      	adds	r3, #68	@ 0x44
 800250e:	4602      	mov	r2, r0
 8002510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3340      	adds	r3, #64	@ 0x40
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002526:	7bfa      	ldrb	r2, [r7, #15]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3348      	adds	r3, #72	@ 0x48
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	334c      	adds	r3, #76	@ 0x4c
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3354      	adds	r3, #84	@ 0x54
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	3301      	adds	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	d3af      	bcc.n	80024d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e044      	b.n	8002602 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d3b5      	bcc.n	8002578 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	687e      	ldr	r6, [r7, #4]
 8002614:	466d      	mov	r5, sp
 8002616:	f106 0410 	add.w	r4, r6, #16
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002626:	e885 0003 	stmia.w	r5, {r0, r1}
 800262a:	1d33      	adds	r3, r6, #4
 800262c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	f002 f93a 	bl	80048a8 <USB_DevInit>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00d      	b.n	8002662 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fa89 	bl	8005b72 <USB_DevDisconnect>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_PCD_Start+0x1c>
 8002682:	2302      	movs	r3, #2
 8002684:	e020      	b.n	80026c8 <HAL_PCD_Start+0x5e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	2b01      	cmp	r3, #1
 8002694:	d109      	bne.n	80026aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800269a:	2b01      	cmp	r3, #1
 800269c:	d005      	beq.n	80026aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 f88c 	bl	80047cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fa39 	bl	8005b30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b08d      	sub	sp, #52	@ 0x34
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 faf7 	bl	8005cda <USB_GetMode>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 848a 	bne.w	8003008 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fa5b 	bl	8005bb4 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8480 	beq.w	8003006 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fa48 	bl	8005bb4 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d107      	bne.n	800273e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 0202 	and.w	r2, r2, #2
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fa36 	bl	8005bb4 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	d161      	bne.n	8002816 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0210 	bic.w	r2, r2, #16
 8002760:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f003 020f 	and.w	r2, r3, #15
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800278c:	d124      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d035      	beq.n	8002806 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	6a38      	ldr	r0, [r7, #32]
 80027ae:	f003 f86d 	bl	800588c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027be:	441a      	add	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	6a1a      	ldr	r2, [r3, #32]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d0:	441a      	add	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]
 80027d6:	e016      	b.n	8002806 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80027de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027e2:	d110      	bne.n	8002806 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80027ea:	2208      	movs	r2, #8
 80027ec:	4619      	mov	r1, r3
 80027ee:	6a38      	ldr	r0, [r7, #32]
 80027f0:	f003 f84c 	bl	800588c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002800:	441a      	add	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0210 	orr.w	r2, r2, #16
 8002814:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 f9ca 	bl	8005bb4 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002826:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800282a:	f040 80a7 	bne.w	800297c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f003 f9cf 	bl	8005bda <USB_ReadDevAllOutEpInterrupt>
 800283c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800283e:	e099      	b.n	8002974 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 808e 	beq.w	8002968 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f003 f9f3 	bl	8005c42 <USB_ReadDevOutEPInterrupt>
 800285c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2301      	movs	r3, #1
 8002878:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800287a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fec3 	bl	8003608 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00c      	beq.n	80028a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	2308      	movs	r3, #8
 800289c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800289e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 ff99 	bl	80037d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028bc:	461a      	mov	r2, r3
 80028be:	2310      	movs	r3, #16
 80028c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d030      	beq.n	800292e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b80      	cmp	r3, #128	@ 0x80
 80028d6:	d109      	bne.n	80028ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	78db      	ldrb	r3, [r3, #3]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	b2db      	uxtb	r3, r3
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fd82 	bl	8008420 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002928:	461a      	mov	r2, r3
 800292a:	2302      	movs	r3, #2
 800292c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0320 	and.w	r3, r3, #32
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	2320      	movs	r3, #32
 8002948:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d009      	beq.n	8002968 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002966:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	3301      	adds	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	f47f af62 	bne.w	8002840 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 f917 	bl	8005bb4 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800298c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002990:	f040 80db 	bne.w	8002b4a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f003 f938 	bl	8005c0e <USB_ReadDevAllInEpInterrupt>
 800299e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029a4:	e0cd      	b.n	8002b42 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80c2 	beq.w	8002b36 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 f95e 	bl	8005c7e <USB_ReadDevInEPInterrupt>
 80029c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d057      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	2201      	movs	r2, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69f9      	ldr	r1, [r7, #28]
 80029ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80029ee:	4013      	ands	r3, r2
 80029f0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029fe:	461a      	mov	r2, r3
 8002a00:	2301      	movs	r3, #1
 8002a02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d132      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	334c      	adds	r3, #76	@ 0x4c
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	3348      	adds	r3, #72	@ 0x48
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4419      	add	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4403      	add	r3, r0
 8002a40:	334c      	adds	r3, #76	@ 0x4c
 8002a42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d113      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x3a2>
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3354      	adds	r3, #84	@ 0x54
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d108      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	f003 f965 	bl	8005d3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f005 fc4c 	bl	8008316 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a94:	461a      	mov	r2, r3
 8002a96:	2308      	movs	r3, #8
 8002a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002acc:	461a      	mov	r2, r3
 8002ace:	2340      	movs	r3, #64	@ 0x40
 8002ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d023      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ade:	6a38      	ldr	r0, [r7, #32]
 8002ae0:	f002 f846 	bl	8004b70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	3338      	adds	r3, #56	@ 0x38
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	78db      	ldrb	r3, [r3, #3]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 fc99 	bl	8008444 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2302      	movs	r3, #2
 8002b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fcdb 	bl	80034ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	3301      	adds	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f af2e 	bne.w	80029a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 f830 	bl	8005bb4 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b5e:	d122      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b86:	2100      	movs	r1, #0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fec3 	bl	8003914 <HAL_PCDEx_LPM_Callback>
 8002b8e:	e002      	b.n	8002b96 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f005 fc37 	bl	8008404 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 f802 	bl	8005bb4 <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bba:	d112      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f005 fbf3 	bl	80083b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002be0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 ffe4 	bl	8005bb4 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf6:	f040 80b7 	bne.w	8002d68 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2110      	movs	r1, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 ffab 	bl	8004b70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c1e:	e046      	b.n	8002cae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c44:	0151      	lsls	r1, r2, #5
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	440a      	add	r2, r1
 8002c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c78:	0151      	lsls	r1, r2, #5
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	440a      	add	r2, r1
 8002c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002c82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ca6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	3301      	adds	r3, #1
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d3b3      	bcc.n	8002c20 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce4:	f043 030b 	orr.w	r3, r3, #11
 8002ce8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cfa:	f043 030b 	orr.w	r3, r3, #11
 8002cfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d00:	e015      	b.n	8002d2e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d14:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d28:	f043 030b 	orr.w	r3, r3, #11
 8002d2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d52:	461a      	mov	r2, r3
 8002d54:	f002 fff2 	bl	8005d3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 ff21 	bl	8005bb4 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7c:	d124      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 ffb7 	bl	8005cf6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 ff6c 	bl	8004c6a <USB_GetDevSpeed>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681c      	ldr	r4, [r3, #0]
 8002d9e:	f001 fa29 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8002da2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	4620      	mov	r0, r4
 8002dae:	f001 fc6b 	bl	8004688 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f005 fad7 	bl	8008366 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fef1 	bl	8005bb4 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d10a      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f005 fab4 	bl	800834a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f002 0208 	and.w	r2, r2, #8
 8002df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fedc 	bl	8005bb4 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e02:	2b80      	cmp	r3, #128	@ 0x80
 8002e04:	d122      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e12:	2301      	movs	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	e014      	b.n	8002e42 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d105      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fb27 	bl	800348a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	3301      	adds	r3, #1
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d3e5      	bcc.n	8002e18 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 feaf 	bl	8005bb4 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e60:	d13b      	bne.n	8002eda <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e62:	2301      	movs	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e66:	e02b      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3340      	adds	r3, #64	@ 0x40
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d115      	bne.n	8002eba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da12      	bge.n	8002eba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	333f      	adds	r3, #63	@ 0x3f
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fae8 	bl	800348a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d3ce      	bcc.n	8002e68 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fe68 	bl	8005bb4 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eee:	d155      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	e045      	b.n	8002f82 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12e      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da2b      	bge.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002f30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d121      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f78:	6053      	str	r3, [r2, #4]
            break;
 8002f7a:	e007      	b.n	8002f8c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	3301      	adds	r3, #1
 8002f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3b4      	bcc.n	8002ef6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f002 fe07 	bl	8005bb4 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f005 fa58 	bl	8008468 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fdf1 	bl	8005bb4 <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d115      	bne.n	8003008 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f005 fa48 	bl	8008484 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	e000      	b.n	8003008 <HAL_PCD_IRQHandler+0x938>
      return;
 8003006:	bf00      	nop
    }
  }
}
 8003008:	3734      	adds	r7, #52	@ 0x34
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}

0800300e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_PCD_SetAddress+0x1a>
 8003024:	2302      	movs	r3, #2
 8003026:	e013      	b.n	8003050 <HAL_PCD_SetAddress+0x42>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f002 fd4f 	bl	8005ae4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	70fb      	strb	r3, [r7, #3]
 800306a:	460b      	mov	r3, r1
 800306c:	803b      	strh	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800307a:	2b00      	cmp	r3, #0
 800307c:	da0f      	bge.n	800309e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	3338      	adds	r3, #56	@ 0x38
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	3304      	adds	r3, #4
 8003094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	705a      	strb	r2, [r3, #1]
 800309c:	e00f      	b.n	80030be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ca:	883a      	ldrh	r2, [r7, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	78ba      	ldrb	r2, [r7, #2]
 80030d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	785b      	ldrb	r3, [r3, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030e8:	78bb      	ldrb	r3, [r7, #2]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d102      	bne.n	80030f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_PCD_EP_Open+0xaa>
 80030fe:	2302      	movs	r3, #2
 8003100:	e00e      	b.n	8003120 <HAL_PCD_EP_Open+0xc8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68f9      	ldr	r1, [r7, #12]
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fdcf 	bl	8004cb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 800311e:	7afb      	ldrb	r3, [r7, #11]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da0f      	bge.n	800315c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3338      	adds	r3, #56	@ 0x38
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	3304      	adds	r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	705a      	strb	r2, [r3, #1]
 800315a:	e00f      	b.n	800317c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_PCD_EP_Close+0x6e>
 8003192:	2302      	movs	r3, #2
 8003194:	e00e      	b.n	80031b4 <HAL_PCD_EP_Close+0x8c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 fe0d 	bl	8004dc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	460b      	mov	r3, r1
 80031ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	7afb      	ldrb	r3, [r7, #11]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2200      	movs	r2, #0
 80031fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	b2da      	uxtb	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	f002 f8ec 	bl	800540c <USB_EP0StartXfer>
 8003234:	e008      	b.n	8003248 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	f001 fe9a 	bl	8004f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003274:	681b      	ldr	r3, [r3, #0]
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	460b      	mov	r3, r1
 8003290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3338      	adds	r3, #56	@ 0x38
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	3304      	adds	r3, #4
 80032a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2201      	movs	r2, #1
 80032c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c2:	7afb      	ldrb	r3, [r7, #11]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032dc:	7afb      	ldrb	r3, [r7, #11]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	6979      	ldr	r1, [r7, #20]
 80032f4:	f002 f88a 	bl	800540c <USB_EP0StartXfer>
 80032f8:	e008      	b.n	800330c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6979      	ldr	r1, [r7, #20]
 8003308:	f001 fe38 	bl	8004f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	d901      	bls.n	8003334 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e050      	b.n	80033d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003338:	2b00      	cmp	r3, #0
 800333a:	da0f      	bge.n	800335c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	3338      	adds	r3, #56	@ 0x38
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	705a      	strb	r2, [r3, #1]
 800335a:	e00d      	b.n	8003378 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_PCD_EP_SetStall+0x82>
 8003394:	2302      	movs	r3, #2
 8003396:	e01e      	b.n	80033d6 <HAL_PCD_EP_SetStall+0xc0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68f9      	ldr	r1, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fac8 	bl	800593c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	b2d9      	uxtb	r1, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80033c6:	461a      	mov	r2, r3
 80033c8:	f002 fcb8 	bl	8005d3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d901      	bls.n	80033fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e042      	b.n	8003482 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	da0f      	bge.n	8003424 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	f003 020f 	and.w	r2, r3, #15
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	3338      	adds	r3, #56	@ 0x38
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4413      	add	r3, r2
 8003418:	3304      	adds	r3, #4
 800341a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	705a      	strb	r2, [r3, #1]
 8003422:	e00f      	b.n	8003444 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_PCD_EP_ClrStall+0x86>
 8003460:	2302      	movs	r3, #2
 8003462:	e00e      	b.n	8003482 <HAL_PCD_EP_ClrStall+0xa4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fad0 	bl	8005a18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0c      	bge.n	80034b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3338      	adds	r3, #56	@ 0x38
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e00c      	b.n	80034d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f002 f8ef 	bl	80056bc <USB_EPStopXfer>
 80034de:	4603      	mov	r3, r0
 80034e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034e2:	7afb      	ldrb	r3, [r7, #11]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	@ 0x28
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	3338      	adds	r3, #56	@ 0x38
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	3304      	adds	r3, #4
 8003512:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d901      	bls.n	8003524 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e06c      	b.n	80035fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	429a      	cmp	r2, r3
 8003538:	d902      	bls.n	8003540 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3303      	adds	r3, #3
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003548:	e02b      	b.n	80035a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d902      	bls.n	8003566 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3303      	adds	r3, #3
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6919      	ldr	r1, [r3, #16]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800357e:	b2db      	uxtb	r3, r3
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4603      	mov	r3, r0
 8003584:	6978      	ldr	r0, [r7, #20]
 8003586:	f002 f943 	bl	8005810 <USB_WritePacket>

    ep->xfer_buff  += len;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	441a      	add	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	441a      	add	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d809      	bhi.n	80035cc <PCD_WriteEmptyTxFifo+0xe0>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1a      	ldr	r2, [r3, #32]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d203      	bcs.n	80035cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1be      	bne.n	800354a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d811      	bhi.n	80035fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	2201      	movs	r2, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	6939      	ldr	r1, [r7, #16]
 80035f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035f8:	4013      	ands	r3, r2
 80035fa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	333c      	adds	r3, #60	@ 0x3c
 8003620:	3304      	adds	r3, #4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d17b      	bne.n	8003736 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4a61      	ldr	r2, [pc, #388]	@ (80037d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	f240 80b9 	bls.w	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80b3 	beq.w	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366a:	461a      	mov	r2, r3
 800366c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003670:	6093      	str	r3, [r2, #8]
 8003672:	e0a7      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800368a:	461a      	mov	r2, r3
 800368c:	2320      	movs	r3, #32
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	e098      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 8093 	bne.w	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4a4b      	ldr	r2, [pc, #300]	@ (80037d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d90f      	bls.n	80036c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036bc:	461a      	mov	r2, r3
 80036be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036c2:	6093      	str	r3, [r2, #8]
 80036c4:	e07e      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	3304      	adds	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	0159      	lsls	r1, r3, #5
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	440b      	add	r3, r1
 80036e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	1ad2      	subs	r2, r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d114      	bne.n	8003728 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003710:	461a      	mov	r2, r3
 8003712:	2101      	movs	r1, #1
 8003714:	f002 fb12 	bl	8005d3c <USB_EP0_OutStart>
 8003718:	e006      	b.n	8003728 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	441a      	add	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f004 fdd6 	bl	80082e0 <HAL_PCD_DataOutStageCallback>
 8003734:	e046      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4a26      	ldr	r2, [pc, #152]	@ (80037d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d124      	bne.n	8003788 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003754:	461a      	mov	r2, r3
 8003756:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800375a:	6093      	str	r3, [r2, #8]
 800375c:	e032      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	2320      	movs	r3, #32
 8003778:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f004 fdad 	bl	80082e0 <HAL_PCD_DataOutStageCallback>
 8003786:	e01d      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d114      	bne.n	80037b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80037b0:	461a      	mov	r2, r3
 80037b2:	2100      	movs	r1, #0
 80037b4:	f002 fac2 	bl	8005d3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f004 fd8e 	bl	80082e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	4f54300a 	.word	0x4f54300a
 80037d4:	4f54310a 	.word	0x4f54310a

080037d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	333c      	adds	r3, #60	@ 0x3c
 80037f0:	3304      	adds	r3, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <PCD_EP_OutSetupPacket_int+0x88>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d90e      	bls.n	800382c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003814:	2b00      	cmp	r3, #0
 8003816:	d009      	beq.n	800382c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003824:	461a      	mov	r2, r3
 8003826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800382a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f004 fd45 	bl	80082bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <PCD_EP_OutSetupPacket_int+0x88>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d90c      	bls.n	8003854 <PCD_EP_OutSetupPacket_int+0x7c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d108      	bne.n	8003854 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800384c:	461a      	mov	r2, r3
 800384e:	2101      	movs	r1, #1
 8003850:	f002 fa74 	bl	8005d3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	4f54300a 	.word	0x4f54300a

08003864 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
 8003870:	4613      	mov	r3, r2
 8003872:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003882:	883b      	ldrh	r3, [r7, #0]
 8003884:	0419      	lsls	r1, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	430a      	orrs	r2, r1
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003890:	e028      	b.n	80038e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	4413      	add	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
 80038a4:	e00d      	b.n	80038c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	3340      	adds	r3, #64	@ 0x40
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4413      	add	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	3301      	adds	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d3ec      	bcc.n	80038a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038cc:	883b      	ldrh	r3, [r7, #0]
 80038ce:	0418      	lsls	r0, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4302      	orrs	r2, r0
 80038dc:	3340      	adds	r3, #64	@ 0x40
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e267      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d075      	beq.n	8003a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394a:	4b88      	ldr	r3, [pc, #544]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b04      	cmp	r3, #4
 8003954:	d00c      	beq.n	8003970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003956:	4b85      	ldr	r3, [pc, #532]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395e:	2b08      	cmp	r3, #8
 8003960:	d112      	bne.n	8003988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003962:	4b82      	ldr	r3, [pc, #520]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800396e:	d10b      	bne.n	8003988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	4b7e      	ldr	r3, [pc, #504]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d05b      	beq.n	8003a34 <HAL_RCC_OscConfig+0x108>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d157      	bne.n	8003a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e242      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d106      	bne.n	80039a0 <HAL_RCC_OscConfig+0x74>
 8003992:	4b76      	ldr	r3, [pc, #472]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a75      	ldr	r2, [pc, #468]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e01d      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b70      	ldr	r3, [pc, #448]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6f      	ldr	r2, [pc, #444]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6c      	ldr	r2, [pc, #432]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0xb0>
 80039c4:	4b69      	ldr	r3, [pc, #420]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a68      	ldr	r2, [pc, #416]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b66      	ldr	r3, [pc, #408]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a65      	ldr	r2, [pc, #404]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fd fc16 	bl	8001214 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fd fc12 	bl	8001214 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	@ 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e207      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b5b      	ldr	r3, [pc, #364]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0xc0>
 8003a0a:	e014      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fc02 	bl	8001214 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd fbfe 	bl	8001214 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	@ 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1f3      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	4b51      	ldr	r3, [pc, #324]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0xe8>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d063      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a42:	4b4a      	ldr	r3, [pc, #296]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d11c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5a:	4b44      	ldr	r3, [pc, #272]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x152>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e1c7      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4937      	ldr	r1, [pc, #220]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	e03a      	b.n	8003b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b34      	ldr	r3, [pc, #208]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd fbb7 	bl	8001214 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fd fbb3 	bl	8001214 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1a8      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b28      	ldr	r3, [pc, #160]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4925      	ldr	r1, [pc, #148]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ade:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_RCC_OscConfig+0x244>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fb96 	bl	8001214 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fd fb92 	bl	8001214 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e187      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d036      	beq.n	8003b84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <HAL_RCC_OscConfig+0x248>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd fb76 	bl	8001214 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fd fb72 	bl	8001214 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e167      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_OscConfig+0x240>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x200>
 8003b4a:	e01b      	b.n	8003b84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCC_OscConfig+0x248>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b52:	f7fd fb5f 	bl	8001214 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	e00e      	b.n	8003b78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fd fb5b 	bl	8001214 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d907      	bls.n	8003b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e150      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470000 	.word	0x42470000
 8003b74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b88      	ldr	r3, [pc, #544]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ea      	bne.n	8003b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8097 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b96:	4b81      	ldr	r3, [pc, #516]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b7d      	ldr	r3, [pc, #500]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	4a7c      	ldr	r2, [pc, #496]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b77      	ldr	r3, [pc, #476]	@ (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bce:	4b74      	ldr	r3, [pc, #464]	@ (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a73      	ldr	r2, [pc, #460]	@ (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bda:	f7fd fb1b 	bl	8001214 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7fd fb17 	bl	8001214 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e10c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8003da0 <HAL_RCC_OscConfig+0x474>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2ea>
 8003c08:	4b64      	ldr	r3, [pc, #400]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0c:	4a63      	ldr	r2, [pc, #396]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x324>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x30c>
 8003c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	4a5e      	ldr	r2, [pc, #376]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0x324>
 8003c38:	4b58      	ldr	r3, [pc, #352]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	4a57      	ldr	r2, [pc, #348]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c44:	4b55      	ldr	r3, [pc, #340]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a54      	ldr	r2, [pc, #336]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 0304 	bic.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd fadc 	bl	8001214 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fd fad8 	bl	8001214 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0cb      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	4b49      	ldr	r3, [pc, #292]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ee      	beq.n	8003c60 <HAL_RCC_OscConfig+0x334>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c84:	f7fd fac6 	bl	8001214 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fd fac2 	bl	8001214 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0b5      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ee      	bne.n	8003c8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b39      	ldr	r3, [pc, #228]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	4a38      	ldr	r2, [pc, #224]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a1 	beq.w	8003e0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cca:	4b34      	ldr	r3, [pc, #208]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d05c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d141      	bne.n	8003d62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b31      	ldr	r3, [pc, #196]	@ (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fa96 	bl	8001214 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fd fa92 	bl	8001214 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e087      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	491b      	ldr	r1, [pc, #108]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d34:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fd fa6b 	bl	8001214 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd fa67 	bl	8001214 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e05c      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d54:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x416>
 8003d60:	e054      	b.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <HAL_RCC_OscConfig+0x478>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fd fa54 	bl	8001214 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd fa50 	bl	8001214 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e045      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCC_OscConfig+0x470>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x444>
 8003d8e:	e03d      	b.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e038      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40007000 	.word	0x40007000
 8003da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x4ec>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d028      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d121      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d111      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	3b01      	subs	r3, #1
 8003df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800

08003e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0cc      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b68      	ldr	r3, [pc, #416]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d90c      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b65      	ldr	r3, [pc, #404]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b63      	ldr	r3, [pc, #396]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b8      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e70:	4b59      	ldr	r3, [pc, #356]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a58      	ldr	r2, [pc, #352]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e88:	4b53      	ldr	r3, [pc, #332]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a52      	ldr	r2, [pc, #328]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e94:	4b50      	ldr	r3, [pc, #320]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	494d      	ldr	r1, [pc, #308]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d044      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b47      	ldr	r3, [pc, #284]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d119      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e06f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eea:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e067      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efa:	4b37      	ldr	r3, [pc, #220]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4934      	ldr	r1, [pc, #208]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fd f982 	bl	8001214 <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f14:	f7fd f97e 	bl	8001214 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b25      	ldr	r3, [pc, #148]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20c      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b22      	ldr	r3, [pc, #136]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b20      	ldr	r3, [pc, #128]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e032      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4916      	ldr	r1, [pc, #88]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b12      	ldr	r3, [pc, #72]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490e      	ldr	r1, [pc, #56]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa2:	f000 f821 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490a      	ldr	r1, [pc, #40]	@ (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	4a09      	ldr	r2, [pc, #36]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fd f8e2 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	08009750 	.word	0x08009750
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	20000004 	.word	0x20000004

08003fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fec:	b094      	sub	sp, #80	@ 0x50
 8003fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004000:	4b79      	ldr	r3, [pc, #484]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d00d      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x40>
 800400c:	2b08      	cmp	r3, #8
 800400e:	f200 80e1 	bhi.w	80041d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x34>
 8004016:	2b04      	cmp	r3, #4
 8004018:	d003      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x3a>
 800401a:	e0db      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800401c:	4b73      	ldr	r3, [pc, #460]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x204>)
 800401e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004020:	e0db      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004022:	4b73      	ldr	r3, [pc, #460]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004024:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004026:	e0d8      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4b6f      	ldr	r3, [pc, #444]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004030:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004032:	4b6d      	ldr	r3, [pc, #436]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d063      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403e:	4b6a      	ldr	r3, [pc, #424]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	2200      	movs	r2, #0
 8004046:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004048:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800404a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	633b      	str	r3, [r7, #48]	@ 0x30
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	@ 0x34
 8004056:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	f04f 0000 	mov.w	r0, #0
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	0159      	lsls	r1, r3, #5
 8004068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406c:	0150      	lsls	r0, r2, #5
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4621      	mov	r1, r4
 8004074:	1a51      	subs	r1, r2, r1
 8004076:	6139      	str	r1, [r7, #16]
 8004078:	4629      	mov	r1, r5
 800407a:	eb63 0301 	sbc.w	r3, r3, r1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800408c:	4659      	mov	r1, fp
 800408e:	018b      	lsls	r3, r1, #6
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004096:	4651      	mov	r1, sl
 8004098:	018a      	lsls	r2, r1, #6
 800409a:	4651      	mov	r1, sl
 800409c:	ebb2 0801 	subs.w	r8, r2, r1
 80040a0:	4659      	mov	r1, fp
 80040a2:	eb63 0901 	sbc.w	r9, r3, r1
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ba:	4690      	mov	r8, r2
 80040bc:	4699      	mov	r9, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	eb18 0303 	adds.w	r3, r8, r3
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	462b      	mov	r3, r5
 80040c8:	eb49 0303 	adc.w	r3, r9, r3
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040da:	4629      	mov	r1, r5
 80040dc:	024b      	lsls	r3, r1, #9
 80040de:	4621      	mov	r1, r4
 80040e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e4:	4621      	mov	r1, r4
 80040e6:	024a      	lsls	r2, r1, #9
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ee:	2200      	movs	r2, #0
 80040f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040f8:	f7fc f8ba 	bl	8000270 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004104:	e058      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004106:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	2200      	movs	r2, #0
 800410e:	4618      	mov	r0, r3
 8004110:	4611      	mov	r1, r2
 8004112:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	2300      	movs	r3, #0
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
 800411c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	0159      	lsls	r1, r3, #5
 800412e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004132:	0150      	lsls	r0, r2, #5
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4641      	mov	r1, r8
 800413a:	ebb2 0a01 	subs.w	sl, r2, r1
 800413e:	4649      	mov	r1, r9
 8004140:	eb63 0b01 	sbc.w	fp, r3, r1
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004150:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004154:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004158:	ebb2 040a 	subs.w	r4, r2, sl
 800415c:	eb63 050b 	sbc.w	r5, r3, fp
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	00eb      	lsls	r3, r5, #3
 800416a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416e:	00e2      	lsls	r2, r4, #3
 8004170:	4614      	mov	r4, r2
 8004172:	461d      	mov	r5, r3
 8004174:	4643      	mov	r3, r8
 8004176:	18e3      	adds	r3, r4, r3
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	464b      	mov	r3, r9
 800417c:	eb45 0303 	adc.w	r3, r5, r3
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800418e:	4629      	mov	r1, r5
 8004190:	028b      	lsls	r3, r1, #10
 8004192:	4621      	mov	r1, r4
 8004194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004198:	4621      	mov	r1, r4
 800419a:	028a      	lsls	r2, r1, #10
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a2:	2200      	movs	r2, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	61fa      	str	r2, [r7, #28]
 80041a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ac:	f7fc f860 	bl	8000270 <__aeabi_uldivmod>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4613      	mov	r3, r2
 80041b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	0c1b      	lsrs	r3, r3, #16
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	3301      	adds	r3, #1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80041c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041d2:	e002      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x204>)
 80041d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3750      	adds	r7, #80	@ 0x50
 80041e0:	46bd      	mov	sp, r7
 80041e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e6:	bf00      	nop
 80041e8:	40023800 	.word	0x40023800
 80041ec:	00f42400 	.word	0x00f42400
 80041f0:	007a1200 	.word	0x007a1200

080041f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f8:	4b03      	ldr	r3, [pc, #12]	@ (8004208 <HAL_RCC_GetHCLKFreq+0x14>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000000 	.word	0x20000000

0800420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004210:	f7ff fff0 	bl	80041f4 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0a9b      	lsrs	r3, r3, #10
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4903      	ldr	r1, [pc, #12]	@ (8004230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	08009760 	.word	0x08009760

08004234 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d105      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004258:	2b00      	cmp	r3, #0
 800425a:	d035      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800425c:	4b62      	ldr	r3, [pc, #392]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004262:	f7fc ffd7 	bl	8001214 <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800426a:	f7fc ffd3 	bl	8001214 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e0b0      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800427c:	4b5b      	ldr	r3, [pc, #364]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	019a      	lsls	r2, r3, #6
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	071b      	lsls	r3, r3, #28
 8004294:	4955      	ldr	r1, [pc, #340]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800429c:	4b52      	ldr	r3, [pc, #328]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800429e:	2201      	movs	r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042a2:	f7fc ffb7 	bl	8001214 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042aa:	f7fc ffb3 	bl	8001214 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e090      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042bc:	4b4b      	ldr	r3, [pc, #300]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8083 	beq.w	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	4b44      	ldr	r3, [pc, #272]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	4a43      	ldr	r2, [pc, #268]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e6:	4b41      	ldr	r3, [pc, #260]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042f2:	4b3f      	ldr	r3, [pc, #252]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3e      	ldr	r2, [pc, #248]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042fe:	f7fc ff89 	bl	8001214 <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fc ff85 	bl	8001214 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e062      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004318:	4b35      	ldr	r3, [pc, #212]	@ (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004324:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02f      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	d028      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004342:	4b2a      	ldr	r3, [pc, #168]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800434a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800434c:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800434e:	2201      	movs	r2, #1
 8004350:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004352:	4b28      	ldr	r3, [pc, #160]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004358:	4a24      	ldr	r2, [pc, #144]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800435e:	4b23      	ldr	r3, [pc, #140]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d114      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800436a:	f7fc ff53 	bl	8001214 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004370:	e00a      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fc ff4f 	bl	8001214 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e02a      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004388:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ee      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800439c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043a0:	d10d      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043a2:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80043b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b6:	490d      	ldr	r1, [pc, #52]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	608b      	str	r3, [r1, #8]
 80043bc:	e005      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4a0a      	ldr	r2, [pc, #40]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80043c8:	6093      	str	r3, [r2, #8]
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d6:	4905      	ldr	r1, [pc, #20]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	42470068 	.word	0x42470068
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40007000 	.word	0x40007000
 80043f4:	42470e40 	.word	0x42470e40

080043f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d13e      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004416:	4b23      	ldr	r3, [pc, #140]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800441e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d12f      	bne.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800442c:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800442e:	617b      	str	r3, [r7, #20]
          break;
 8004430:	e02f      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004432:	4b1c      	ldr	r3, [pc, #112]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800443e:	d108      	bne.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004440:	4b18      	ldr	r3, [pc, #96]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004448:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e007      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800445a:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004462:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004468:	099b      	lsrs	r3, r3, #6
 800446a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004476:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447c:	0f1b      	lsrs	r3, r3, #28
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
          break;
 800448a:	e002      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
          break;
 8004490:	bf00      	nop
        }
      }
      break;
 8004492:	bf00      	nop
    }
  }
  return frequency;
 8004494:	697b      	ldr	r3, [r7, #20]
}
 8004496:	4618      	mov	r0, r3
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800
 80044a8:	00bb8000 	.word	0x00bb8000
 80044ac:	007a1200 	.word	0x007a1200
 80044b0:	00f42400 	.word	0x00f42400

080044b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e07b      	b.n	80045be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d6:	d009      	beq.n	80044ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	61da      	str	r2, [r3, #28]
 80044de:	e005      	b.n	80044ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fcd8 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004522:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004570:	ea42 0103 	orr.w	r1, r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0104 	and.w	r1, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	f003 0210 	and.w	r2, r3, #16
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c6:	b084      	sub	sp, #16
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	f107 001c 	add.w	r0, r7, #28
 80045d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d122      	bne.n	8004624 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80045f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 fbed 	bl	8005df8 <USB_CoreReset>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	e01a      	b.n	800465a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 fbe1 	bl	8005df8 <USB_CoreReset>
 8004636:	4603      	mov	r3, r0
 8004638:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800463a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	@ 0x38
 800464c:	e005      	b.n	800465a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800465a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10b      	bne.n	8004678 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f043 0206 	orr.w	r2, r3, #6
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004684:	b004      	add	sp, #16
 8004686:	4770      	bx	lr

08004688 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d165      	bne.n	8004768 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4a41      	ldr	r2, [pc, #260]	@ (80047a4 <USB_SetTurnaroundTime+0x11c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d906      	bls.n	80046b2 <USB_SetTurnaroundTime+0x2a>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4a40      	ldr	r2, [pc, #256]	@ (80047a8 <USB_SetTurnaroundTime+0x120>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d202      	bcs.n	80046b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046ac:	230f      	movs	r3, #15
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e062      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4a3c      	ldr	r2, [pc, #240]	@ (80047a8 <USB_SetTurnaroundTime+0x120>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d306      	bcc.n	80046c8 <USB_SetTurnaroundTime+0x40>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4a3b      	ldr	r2, [pc, #236]	@ (80047ac <USB_SetTurnaroundTime+0x124>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d202      	bcs.n	80046c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046c2:	230e      	movs	r3, #14
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e057      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4a38      	ldr	r2, [pc, #224]	@ (80047ac <USB_SetTurnaroundTime+0x124>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d306      	bcc.n	80046de <USB_SetTurnaroundTime+0x56>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4a37      	ldr	r2, [pc, #220]	@ (80047b0 <USB_SetTurnaroundTime+0x128>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d202      	bcs.n	80046de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046d8:	230d      	movs	r3, #13
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e04c      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4a33      	ldr	r2, [pc, #204]	@ (80047b0 <USB_SetTurnaroundTime+0x128>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d306      	bcc.n	80046f4 <USB_SetTurnaroundTime+0x6c>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4a32      	ldr	r2, [pc, #200]	@ (80047b4 <USB_SetTurnaroundTime+0x12c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d802      	bhi.n	80046f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046ee:	230c      	movs	r3, #12
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	e041      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4a2f      	ldr	r2, [pc, #188]	@ (80047b4 <USB_SetTurnaroundTime+0x12c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d906      	bls.n	800470a <USB_SetTurnaroundTime+0x82>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a2e      	ldr	r2, [pc, #184]	@ (80047b8 <USB_SetTurnaroundTime+0x130>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d802      	bhi.n	800470a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004704:	230b      	movs	r3, #11
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e036      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4a2a      	ldr	r2, [pc, #168]	@ (80047b8 <USB_SetTurnaroundTime+0x130>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d906      	bls.n	8004720 <USB_SetTurnaroundTime+0x98>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4a29      	ldr	r2, [pc, #164]	@ (80047bc <USB_SetTurnaroundTime+0x134>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d802      	bhi.n	8004720 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800471a:	230a      	movs	r3, #10
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e02b      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4a26      	ldr	r2, [pc, #152]	@ (80047bc <USB_SetTurnaroundTime+0x134>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d906      	bls.n	8004736 <USB_SetTurnaroundTime+0xae>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a25      	ldr	r2, [pc, #148]	@ (80047c0 <USB_SetTurnaroundTime+0x138>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d202      	bcs.n	8004736 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004730:	2309      	movs	r3, #9
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e020      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <USB_SetTurnaroundTime+0x138>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d306      	bcc.n	800474c <USB_SetTurnaroundTime+0xc4>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a20      	ldr	r2, [pc, #128]	@ (80047c4 <USB_SetTurnaroundTime+0x13c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d802      	bhi.n	800474c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004746:	2308      	movs	r3, #8
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e015      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <USB_SetTurnaroundTime+0x13c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d906      	bls.n	8004762 <USB_SetTurnaroundTime+0xda>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a1c      	ldr	r2, [pc, #112]	@ (80047c8 <USB_SetTurnaroundTime+0x140>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d202      	bcs.n	8004762 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800475c:	2307      	movs	r3, #7
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	e00a      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004762:	2306      	movs	r3, #6
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e007      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800476e:	2309      	movs	r3, #9
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e001      	b.n	8004778 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004774:	2309      	movs	r3, #9
 8004776:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	029b      	lsls	r3, r3, #10
 800478c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004790:	431a      	orrs	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	00d8acbf 	.word	0x00d8acbf
 80047a8:	00e4e1c0 	.word	0x00e4e1c0
 80047ac:	00f42400 	.word	0x00f42400
 80047b0:	01067380 	.word	0x01067380
 80047b4:	011a499f 	.word	0x011a499f
 80047b8:	01312cff 	.word	0x01312cff
 80047bc:	014ca43f 	.word	0x014ca43f
 80047c0:	016e3600 	.word	0x016e3600
 80047c4:	01a6ab1f 	.word	0x01a6ab1f
 80047c8:	01e84800 	.word	0x01e84800

080047cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 0201 	bic.w	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d115      	bne.n	800485e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800483e:	2001      	movs	r0, #1
 8004840:	f7fc fcf4 	bl	800122c <HAL_Delay>
      ms++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f001 fa45 	bl	8005cda <USB_GetMode>
 8004850:	4603      	mov	r3, r0
 8004852:	2b01      	cmp	r3, #1
 8004854:	d01e      	beq.n	8004894 <USB_SetCurrentMode+0x84>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b31      	cmp	r3, #49	@ 0x31
 800485a:	d9f0      	bls.n	800483e <USB_SetCurrentMode+0x2e>
 800485c:	e01a      	b.n	8004894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d115      	bne.n	8004890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004870:	2001      	movs	r0, #1
 8004872:	f7fc fcdb 	bl	800122c <HAL_Delay>
      ms++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f001 fa2c 	bl	8005cda <USB_GetMode>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <USB_SetCurrentMode+0x84>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b31      	cmp	r3, #49	@ 0x31
 800488c:	d9f0      	bls.n	8004870 <USB_SetCurrentMode+0x60>
 800488e:	e001      	b.n	8004894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e005      	b.n	80048a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b32      	cmp	r3, #50	@ 0x32
 8004898:	d101      	bne.n	800489e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a8:	b084      	sub	sp, #16
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80048b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	e009      	b.n	80048dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3340      	adds	r3, #64	@ 0x40
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	2200      	movs	r2, #0
 80048d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3301      	adds	r3, #1
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b0e      	cmp	r3, #14
 80048e0:	d9f2      	bls.n	80048c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11c      	bne.n	8004922 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048f6:	f043 0302 	orr.w	r3, r3, #2
 80048fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004920:	e00b      	b.n	800493a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494c:	4619      	mov	r1, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004954:	461a      	mov	r2, r3
 8004956:	680b      	ldr	r3, [r1, #0]
 8004958:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10c      	bne.n	800497a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004966:	2100      	movs	r1, #0
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f965 	bl	8004c38 <USB_SetDevSpeed>
 800496e:	e008      	b.n	8004982 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004970:	2101      	movs	r1, #1
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f960 	bl	8004c38 <USB_SetDevSpeed>
 8004978:	e003      	b.n	8004982 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800497a:	2103      	movs	r1, #3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f95b 	bl	8004c38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004982:	2110      	movs	r1, #16
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f8f3 	bl	8004b70 <USB_FlushTxFifo>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f91f 	bl	8004bd8 <USB_FlushRxFifo>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049aa:	461a      	mov	r2, r3
 80049ac:	2300      	movs	r3, #0
 80049ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b6:	461a      	mov	r2, r3
 80049b8:	2300      	movs	r3, #0
 80049ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c2:	461a      	mov	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	e043      	b.n	8004a56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e4:	d118      	bne.n	8004a18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	e013      	b.n	8004a2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e008      	b.n	8004a2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a24:	461a      	mov	r2, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	3301      	adds	r3, #1
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3b7      	bcc.n	80049ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e043      	b.n	8004aec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a7a:	d118      	bne.n	8004aae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e013      	b.n	8004ac0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e008      	b.n	8004ac0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ae4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d3b7      	bcc.n	8004a64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004b14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f043 0210 	orr.w	r2, r3, #16
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b6c <USB_DevInit+0x2c4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f043 0208 	orr.w	r2, r3, #8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d107      	bne.n	8004b5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b68:	b004      	add	sp, #16
 8004b6a:	4770      	bx	lr
 8004b6c:	803c3800 	.word	0x803c3800

08004b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <USB_FlushTxFifo+0x64>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e01b      	b.n	8004bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	daf2      	bge.n	8004b7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	019b      	lsls	r3, r3, #6
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4a08      	ldr	r2, [pc, #32]	@ (8004bd4 <USB_FlushTxFifo+0x64>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e006      	b.n	8004bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d0f0      	beq.n	8004ba8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	00030d40 	.word	0x00030d40

08004bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a11      	ldr	r2, [pc, #68]	@ (8004c34 <USB_FlushRxFifo+0x5c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e018      	b.n	8004c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	daf2      	bge.n	8004be4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2210      	movs	r2, #16
 8004c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a08      	ldr	r2, [pc, #32]	@ (8004c34 <USB_FlushRxFifo+0x5c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e006      	b.n	8004c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d0f0      	beq.n	8004c08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	00030d40 	.word	0x00030d40

08004c38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b087      	sub	sp, #28
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0306 	and.w	r3, r3, #6
 8004c82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]
 8004c8e:	e00a      	b.n	8004ca6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d002      	beq.n	8004c9c <USB_GetDevSpeed+0x32>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d102      	bne.n	8004ca2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	75fb      	strb	r3, [r7, #23]
 8004ca0:	e001      	b.n	8004ca6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ca2:	230f      	movs	r3, #15
 8004ca4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d13a      	bne.n	8004d46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	68f9      	ldr	r1, [r7, #12]
 8004cea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d155      	bne.n	8004db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	791b      	ldrb	r3, [r3, #4]
 8004d22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	059b      	lsls	r3, r3, #22
 8004d2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e036      	b.n	8004db4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11a      	bne.n	8004db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	791b      	ldrb	r3, [r3, #4]
 8004d98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
	...

08004dc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d161      	bne.n	8004ea4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df6:	d11f      	bne.n	8004e38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	0151      	lsls	r1, r2, #5
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	440a      	add	r2, r1
 8004e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e58:	4013      	ands	r3, r2
 8004e5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	0159      	lsls	r1, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	440b      	add	r3, r1
 8004e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4b35      	ldr	r3, [pc, #212]	@ (8004f74 <USB_DeactivateEndpoint+0x1b0>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]
 8004ea2:	e060      	b.n	8004f66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eba:	d11f      	bne.n	8004efc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ed6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004eda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ef6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	43db      	mvns	r3, r3
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	2101      	movs	r1, #1
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f40:	4013      	ands	r3, r2
 8004f42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	0159      	lsls	r1, r3, #5
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	440b      	add	r3, r1
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4b05      	ldr	r3, [pc, #20]	@ (8004f78 <USB_DeactivateEndpoint+0x1b4>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	ec337800 	.word	0xec337800
 8004f78:	eff37800 	.word	0xeff37800

08004f7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	@ 0x28
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 815c 	bne.w	8005256 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d132      	bne.n	800500c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fc0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fc4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005004:	0cdb      	lsrs	r3, r3, #19
 8005006:	04db      	lsls	r3, r3, #19
 8005008:	6113      	str	r3, [r2, #16]
 800500a:	e074      	b.n	80050f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005026:	0cdb      	lsrs	r3, r3, #19
 8005028:	04db      	lsls	r3, r3, #19
 800502a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005046:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800504a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800504e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6999      	ldr	r1, [r3, #24]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	440b      	add	r3, r1
 8005068:	1e59      	subs	r1, r3, #1
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005072:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005074:	4b9d      	ldr	r3, [pc, #628]	@ (80052ec <USB_EPStartXfer+0x370>)
 8005076:	400b      	ands	r3, r1
 8005078:	69b9      	ldr	r1, [r7, #24]
 800507a:	0148      	lsls	r0, r1, #5
 800507c:	69f9      	ldr	r1, [r7, #28]
 800507e:	4401      	add	r1, r0
 8005080:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005084:	4313      	orrs	r3, r2
 8005086:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800509e:	69b9      	ldr	r1, [r7, #24]
 80050a0:	0148      	lsls	r0, r1, #5
 80050a2:	69f9      	ldr	r1, [r7, #28]
 80050a4:	4401      	add	r1, r0
 80050a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80050aa:	4313      	orrs	r3, r2
 80050ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	791b      	ldrb	r3, [r3, #4]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d11f      	bne.n	80050f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050d0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80050d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d14b      	bne.n	8005194 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	791b      	ldrb	r3, [r3, #4]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d128      	bne.n	8005172 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d110      	bne.n	8005152 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800514a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e00f      	b.n	8005172 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005170:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800518c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e133      	b.n	80053fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	0151      	lsls	r1, r2, #5
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	440a      	add	r2, r1
 80051aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	791b      	ldrb	r3, [r3, #4]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d015      	beq.n	80051e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 811b 	beq.w	80053fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	2101      	movs	r1, #1
 80051d8:	fa01 f303 	lsl.w	r3, r1, r3
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051e2:	4313      	orrs	r3, r2
 80051e4:	634b      	str	r3, [r1, #52]	@ 0x34
 80051e6:	e109      	b.n	80053fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d110      	bne.n	800521a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005212:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	e00f      	b.n	800523a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005238:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6919      	ldr	r1, [r3, #16]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781a      	ldrb	r2, [r3, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	b298      	uxth	r0, r3
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	4603      	mov	r3, r0
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fade 	bl	8005810 <USB_WritePacket>
 8005254:	e0d2      	b.n	80053fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005270:	0cdb      	lsrs	r3, r3, #19
 8005272:	04db      	lsls	r3, r3, #19
 8005274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005290:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005294:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005298:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d126      	bne.n	80052f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b8:	69b9      	ldr	r1, [r7, #24]
 80052ba:	0148      	lsls	r0, r1, #5
 80052bc:	69f9      	ldr	r1, [r7, #28]
 80052be:	4401      	add	r1, r0
 80052c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052c4:	4313      	orrs	r3, r2
 80052c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052e6:	6113      	str	r3, [r2, #16]
 80052e8:	e03a      	b.n	8005360 <USB_EPStartXfer+0x3e4>
 80052ea:	bf00      	nop
 80052ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	1e5a      	subs	r2, r3, #1
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	8afa      	ldrh	r2, [r7, #22]
 800530c:	fb03 f202 	mul.w	r2, r3, r2
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	8afb      	ldrh	r3, [r7, #22]
 8005324:	04d9      	lsls	r1, r3, #19
 8005326:	4b38      	ldr	r3, [pc, #224]	@ (8005408 <USB_EPStartXfer+0x48c>)
 8005328:	400b      	ands	r3, r1
 800532a:	69b9      	ldr	r1, [r7, #24]
 800532c:	0148      	lsls	r0, r1, #5
 800532e:	69f9      	ldr	r1, [r7, #28]
 8005330:	4401      	add	r1, r0
 8005332:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005336:	4313      	orrs	r3, r2
 8005338:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005350:	69b9      	ldr	r1, [r7, #24]
 8005352:	0148      	lsls	r0, r1, #5
 8005354:	69f9      	ldr	r1, [r7, #28]
 8005356:	4401      	add	r1, r0
 8005358:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800535c:	4313      	orrs	r3, r2
 800535e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10d      	bne.n	8005382 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6919      	ldr	r1, [r3, #16]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537e:	460a      	mov	r2, r1
 8005380:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	791b      	ldrb	r3, [r3, #4]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d128      	bne.n	80053dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005396:	2b00      	cmp	r3, #0
 8005398:	d110      	bne.n	80053bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e00f      	b.n	80053dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	1ff80000 	.word	0x1ff80000

0800540c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b01      	cmp	r3, #1
 800542a:	f040 80ce 	bne.w	80055ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d132      	bne.n	800549c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005450:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005454:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005474:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005494:	0cdb      	lsrs	r3, r3, #19
 8005496:	04db      	lsls	r3, r3, #19
 8005498:	6113      	str	r3, [r2, #16]
 800549a:	e04e      	b.n	800553a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b6:	0cdb      	lsrs	r3, r3, #19
 80054b8:	04db      	lsls	r3, r3, #19
 80054ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d903      	bls.n	80054f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800550e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552a:	6939      	ldr	r1, [r7, #16]
 800552c:	0148      	lsls	r0, r1, #5
 800552e:	6979      	ldr	r1, [r7, #20]
 8005530:	4401      	add	r1, r0
 8005532:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005536:	4313      	orrs	r3, r2
 8005538:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d11e      	bne.n	800557e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005554:	461a      	mov	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005576:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e097      	b.n	80056ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005598:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800559c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8083 	beq.w	80056ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	6979      	ldr	r1, [r7, #20]
 80055c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055c4:	4313      	orrs	r3, r2
 80055c6:	634b      	str	r3, [r1, #52]	@ 0x34
 80055c8:	e071      	b.n	80056ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055e4:	0cdb      	lsrs	r3, r3, #19
 80055e6:	04db      	lsls	r3, r3, #19
 80055e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005604:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005608:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800560c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005640:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800565c:	6939      	ldr	r1, [r7, #16]
 800565e:	0148      	lsls	r0, r1, #5
 8005660:	6979      	ldr	r1, [r7, #20]
 8005662:	4401      	add	r1, r0
 8005664:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005668:	4313      	orrs	r3, r2
 800566a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10d      	bne.n	800568e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6919      	ldr	r1, [r3, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568a:	460a      	mov	r2, r1
 800568c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d14a      	bne.n	8005770 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056f2:	f040 8086 	bne.w	8005802 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005714:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005718:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	7812      	ldrb	r2, [r2, #0]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005738:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800573c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f242 7210 	movw	r2, #10000	@ 0x2710
 800574a:	4293      	cmp	r3, r2
 800574c:	d902      	bls.n	8005754 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
          break;
 8005752:	e056      	b.n	8005802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800576c:	d0e7      	beq.n	800573e <USB_EPStopXfer+0x82>
 800576e:	e048      	b.n	8005802 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005788:	d13b      	bne.n	8005802 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3301      	adds	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80057de:	4293      	cmp	r3, r2
 80057e0:	d902      	bls.n	80057e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
          break;
 80057e6:	e00c      	b.n	8005802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005800:	d0e7      	beq.n	80057d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005802:	7dfb      	ldrb	r3, [r7, #23]
}
 8005804:	4618      	mov	r0, r3
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	@ 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4611      	mov	r1, r2
 800581c:	461a      	mov	r2, r3
 800581e:	460b      	mov	r3, r1
 8005820:	71fb      	strb	r3, [r7, #7]
 8005822:	4613      	mov	r3, r2
 8005824:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800582e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d123      	bne.n	800587e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005836:	88bb      	ldrh	r3, [r7, #4]
 8005838:	3303      	adds	r3, #3
 800583a:	089b      	lsrs	r3, r3, #2
 800583c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e018      	b.n	8005876 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	031a      	lsls	r2, r3, #12
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005850:	461a      	mov	r2, r3
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3301      	adds	r3, #1
 800585c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3301      	adds	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	3301      	adds	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	3301      	adds	r3, #1
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d3e2      	bcc.n	8005844 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3724      	adds	r7, #36	@ 0x24
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800588c:	b480      	push	{r7}
 800588e:	b08b      	sub	sp, #44	@ 0x2c
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	e014      	b.n	80058e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	3301      	adds	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	3301      	adds	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	3301      	adds	r3, #1
 80058e0:	623b      	str	r3, [r7, #32]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d3e6      	bcc.n	80058b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058ea:	8bfb      	ldrh	r3, [r7, #30]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01e      	beq.n	800592e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058fa:	461a      	mov	r2, r3
 80058fc:	f107 0310 	add.w	r3, r7, #16
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	b2da      	uxtb	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	701a      	strb	r2, [r3, #0]
      i++;
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	3301      	adds	r3, #1
 800591a:	623b      	str	r3, [r7, #32]
      pDest++;
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	3301      	adds	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005922:	8bfb      	ldrh	r3, [r7, #30]
 8005924:	3b01      	subs	r3, #1
 8005926:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005928:	8bfb      	ldrh	r3, [r7, #30]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1ea      	bne.n	8005904 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005930:	4618      	mov	r0, r3
 8005932:	372c      	adds	r7, #44	@ 0x2c
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d12c      	bne.n	80059b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	db12      	blt.n	8005990 <USB_EPSetStall+0x54>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00f      	beq.n	8005990 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800598a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800598e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	e02b      	b.n	8005a0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	db12      	blt.n	80059ea <USB_EPSetStall+0xae>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00f      	beq.n	80059ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d128      	bne.n	8005a86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	791b      	ldrb	r3, [r3, #4]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d003      	beq.n	8005a64 <USB_EPClearStall+0x4c>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	791b      	ldrb	r3, [r3, #4]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d138      	bne.n	8005ad6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e027      	b.n	8005ad6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005aa4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d003      	beq.n	8005ab6 <USB_EPClearStall+0x9e>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	791b      	ldrb	r3, [r3, #4]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d10f      	bne.n	8005ad6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ad4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005b18:	68f9      	ldr	r1, [r7, #12]
 8005b1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b5e:	f023 0302 	bic.w	r3, r3, #2
 8005b62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b8c:	f023 0303 	bic.w	r3, r3, #3
 8005b90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0c1b      	lsrs	r3, r3, #16
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	b29b      	uxth	r3, r3
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c70:	68bb      	ldr	r3, [r7, #8]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	01db      	lsls	r3, r3, #7
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d14:	f023 0307 	bic.w	r3, r3, #7
 8005d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	460b      	mov	r3, r1
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	333c      	adds	r3, #60	@ 0x3c
 8005d52:	3304      	adds	r3, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4a26      	ldr	r2, [pc, #152]	@ (8005df4 <USB_EP0_OutStart+0xb8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d90a      	bls.n	8005d76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d70:	d101      	bne.n	8005d76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	e037      	b.n	8005de6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da4:	f043 0318 	orr.w	r3, r3, #24
 8005da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005db8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005dbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10f      	bne.n	8005de4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dca:	461a      	mov	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dde:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	4f54300a 	.word	0x4f54300a

08005df8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4a13      	ldr	r2, [pc, #76]	@ (8005e5c <USB_CoreReset+0x64>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e01b      	b.n	8005e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	daf2      	bge.n	8005e04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f043 0201 	orr.w	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a09      	ldr	r2, [pc, #36]	@ (8005e5c <USB_CoreReset+0x64>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d901      	bls.n	8005e40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e006      	b.n	8005e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d0f0      	beq.n	8005e2e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	00030d40 	.word	0x00030d40

08005e60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e6c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e70:	f002 fca0 	bl	80087b4 <USBD_static_malloc>
 8005e74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	32b0      	adds	r2, #176	@ 0xb0
 8005e86:	2100      	movs	r1, #0
 8005e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e0d4      	b.n	800603a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e90:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e94:	2100      	movs	r1, #0
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f002 fde7 	bl	8008a6a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32b0      	adds	r2, #176	@ 0xb0
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	32b0      	adds	r2, #176	@ 0xb0
 8005eb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	7c1b      	ldrb	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d138      	bne.n	8005f3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8006044 <USBD_CDC_Init+0x1e4>)
 8005eca:	7819      	ldrb	r1, [r3, #0]
 8005ecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f002 fb4b 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8006044 <USBD_CDC_Init+0x1e4>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 020f 	and.w	r2, r3, #15
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3324      	adds	r3, #36	@ 0x24
 8005eee:	2201      	movs	r2, #1
 8005ef0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ef2:	4b55      	ldr	r3, [pc, #340]	@ (8006048 <USBD_CDC_Init+0x1e8>)
 8005ef4:	7819      	ldrb	r1, [r3, #0]
 8005ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005efa:	2202      	movs	r2, #2
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f002 fb36 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f02:	4b51      	ldr	r3, [pc, #324]	@ (8006048 <USBD_CDC_Init+0x1e8>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800604c <USBD_CDC_Init+0x1ec>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f003 020f 	and.w	r2, r3, #15
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	3326      	adds	r3, #38	@ 0x26
 8005f34:	2210      	movs	r2, #16
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e035      	b.n	8005fa6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f3a:	4b42      	ldr	r3, [pc, #264]	@ (8006044 <USBD_CDC_Init+0x1e4>)
 8005f3c:	7819      	ldrb	r1, [r3, #0]
 8005f3e:	2340      	movs	r3, #64	@ 0x40
 8005f40:	2202      	movs	r2, #2
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f002 fb13 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f48:	4b3e      	ldr	r3, [pc, #248]	@ (8006044 <USBD_CDC_Init+0x1e4>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3324      	adds	r3, #36	@ 0x24
 8005f5e:	2201      	movs	r2, #1
 8005f60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f62:	4b39      	ldr	r3, [pc, #228]	@ (8006048 <USBD_CDC_Init+0x1e8>)
 8005f64:	7819      	ldrb	r1, [r3, #0]
 8005f66:	2340      	movs	r3, #64	@ 0x40
 8005f68:	2202      	movs	r2, #2
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f002 faff 	bl	800856e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f70:	4b35      	ldr	r3, [pc, #212]	@ (8006048 <USBD_CDC_Init+0x1e8>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f88:	2201      	movs	r2, #1
 8005f8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800604c <USBD_CDC_Init+0x1ec>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3326      	adds	r3, #38	@ 0x26
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fa6:	4b29      	ldr	r3, [pc, #164]	@ (800604c <USBD_CDC_Init+0x1ec>)
 8005fa8:	7819      	ldrb	r1, [r3, #0]
 8005faa:	2308      	movs	r3, #8
 8005fac:	2203      	movs	r2, #3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f002 fadd 	bl	800856e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005fb4:	4b25      	ldr	r3, [pc, #148]	@ (800604c <USBD_CDC_Init+0x1ec>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f003 020f 	and.w	r2, r3, #15
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3324      	adds	r3, #36	@ 0x24
 8005fca:	2201      	movs	r2, #1
 8005fcc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	33b0      	adds	r3, #176	@ 0xb0
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006004:	2302      	movs	r3, #2
 8006006:	e018      	b.n	800603a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	7c1b      	ldrb	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006010:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <USBD_CDC_Init+0x1e8>)
 8006012:	7819      	ldrb	r1, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800601a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f002 fb94 	bl	800874c <USBD_LL_PrepareReceive>
 8006024:	e008      	b.n	8006038 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006026:	4b08      	ldr	r3, [pc, #32]	@ (8006048 <USBD_CDC_Init+0x1e8>)
 8006028:	7819      	ldrb	r1, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006030:	2340      	movs	r3, #64	@ 0x40
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f002 fb8a 	bl	800874c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000093 	.word	0x20000093
 8006048:	20000094 	.word	0x20000094
 800604c:	20000095 	.word	0x20000095

08006050 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800605c:	4b3a      	ldr	r3, [pc, #232]	@ (8006148 <USBD_CDC_DeInit+0xf8>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f002 faa9 	bl	80085ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006068:	4b37      	ldr	r3, [pc, #220]	@ (8006148 <USBD_CDC_DeInit+0xf8>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f003 020f 	and.w	r2, r3, #15
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	3324      	adds	r3, #36	@ 0x24
 800607e:	2200      	movs	r2, #0
 8006080:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006082:	4b32      	ldr	r3, [pc, #200]	@ (800614c <USBD_CDC_DeInit+0xfc>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f002 fa96 	bl	80085ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800608e:	4b2f      	ldr	r3, [pc, #188]	@ (800614c <USBD_CDC_DeInit+0xfc>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f003 020f 	and.w	r2, r3, #15
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060a6:	2200      	movs	r2, #0
 80060a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060aa:	4b29      	ldr	r3, [pc, #164]	@ (8006150 <USBD_CDC_DeInit+0x100>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f002 fa82 	bl	80085ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80060b6:	4b26      	ldr	r3, [pc, #152]	@ (8006150 <USBD_CDC_DeInit+0x100>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f003 020f 	and.w	r2, r3, #15
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	3324      	adds	r3, #36	@ 0x24
 80060cc:	2200      	movs	r2, #0
 80060ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80060d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006150 <USBD_CDC_DeInit+0x100>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 020f 	and.w	r2, r3, #15
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3326      	adds	r3, #38	@ 0x26
 80060e6:	2200      	movs	r2, #0
 80060e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	32b0      	adds	r2, #176	@ 0xb0
 80060f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01f      	beq.n	800613c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	33b0      	adds	r3, #176	@ 0xb0
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	32b0      	adds	r2, #176	@ 0xb0
 800611a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611e:	4618      	mov	r0, r3
 8006120:	f002 fb56 	bl	80087d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	32b0      	adds	r2, #176	@ 0xb0
 800612e:	2100      	movs	r1, #0
 8006130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000093 	.word	0x20000093
 800614c:	20000094 	.word	0x20000094
 8006150:	20000095 	.word	0x20000095

08006154 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	32b0      	adds	r2, #176	@ 0xb0
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006180:	2303      	movs	r3, #3
 8006182:	e0bf      	b.n	8006304 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800618c:	2b00      	cmp	r3, #0
 800618e:	d050      	beq.n	8006232 <USBD_CDC_Setup+0xde>
 8006190:	2b20      	cmp	r3, #32
 8006192:	f040 80af 	bne.w	80062f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	88db      	ldrh	r3, [r3, #6]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d03a      	beq.n	8006214 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	da1b      	bge.n	80061e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	33b0      	adds	r3, #176	@ 0xb0
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80061be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	88d2      	ldrh	r2, [r2, #6]
 80061c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	88db      	ldrh	r3, [r3, #6]
 80061ca:	2b07      	cmp	r3, #7
 80061cc:	bf28      	it	cs
 80061ce:	2307      	movcs	r3, #7
 80061d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	89fa      	ldrh	r2, [r7, #14]
 80061d6:	4619      	mov	r1, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f001 fd87 	bl	8007cec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80061de:	e090      	b.n	8006302 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	785a      	ldrb	r2, [r3, #1]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	88db      	ldrh	r3, [r3, #6]
 80061ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80061f0:	d803      	bhi.n	80061fa <USBD_CDC_Setup+0xa6>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	88db      	ldrh	r3, [r3, #6]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	e000      	b.n	80061fc <USBD_CDC_Setup+0xa8>
 80061fa:	2240      	movs	r2, #64	@ 0x40
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006202:	6939      	ldr	r1, [r7, #16]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800620a:	461a      	mov	r2, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 fd99 	bl	8007d44 <USBD_CtlPrepareRx>
      break;
 8006212:	e076      	b.n	8006302 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	33b0      	adds	r3, #176	@ 0xb0
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	7850      	ldrb	r0, [r2, #1]
 800622a:	2200      	movs	r2, #0
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	4798      	blx	r3
      break;
 8006230:	e067      	b.n	8006302 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b0b      	cmp	r3, #11
 8006238:	d851      	bhi.n	80062de <USBD_CDC_Setup+0x18a>
 800623a:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <USBD_CDC_Setup+0xec>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006271 	.word	0x08006271
 8006244:	080062ed 	.word	0x080062ed
 8006248:	080062df 	.word	0x080062df
 800624c:	080062df 	.word	0x080062df
 8006250:	080062df 	.word	0x080062df
 8006254:	080062df 	.word	0x080062df
 8006258:	080062df 	.word	0x080062df
 800625c:	080062df 	.word	0x080062df
 8006260:	080062df 	.word	0x080062df
 8006264:	080062df 	.word	0x080062df
 8006268:	0800629b 	.word	0x0800629b
 800626c:	080062c5 	.word	0x080062c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b03      	cmp	r3, #3
 800627a:	d107      	bne.n	800628c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800627c:	f107 030a 	add.w	r3, r7, #10
 8006280:	2202      	movs	r2, #2
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fd31 	bl	8007cec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800628a:	e032      	b.n	80062f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fcbb 	bl	8007c0a <USBD_CtlError>
            ret = USBD_FAIL;
 8006294:	2303      	movs	r3, #3
 8006296:	75fb      	strb	r3, [r7, #23]
          break;
 8006298:	e02b      	b.n	80062f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d107      	bne.n	80062b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062a6:	f107 030d 	add.w	r3, r7, #13
 80062aa:	2201      	movs	r2, #1
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fd1c 	bl	8007cec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062b4:	e01d      	b.n	80062f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f001 fca6 	bl	8007c0a <USBD_CtlError>
            ret = USBD_FAIL;
 80062be:	2303      	movs	r3, #3
 80062c0:	75fb      	strb	r3, [r7, #23]
          break;
 80062c2:	e016      	b.n	80062f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d00f      	beq.n	80062f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fc99 	bl	8007c0a <USBD_CtlError>
            ret = USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062dc:	e008      	b.n	80062f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fc92 	bl	8007c0a <USBD_CtlError>
          ret = USBD_FAIL;
 80062e6:	2303      	movs	r3, #3
 80062e8:	75fb      	strb	r3, [r7, #23]
          break;
 80062ea:	e002      	b.n	80062f2 <USBD_CDC_Setup+0x19e>
          break;
 80062ec:	bf00      	nop
 80062ee:	e008      	b.n	8006302 <USBD_CDC_Setup+0x1ae>
          break;
 80062f0:	bf00      	nop
      }
      break;
 80062f2:	e006      	b.n	8006302 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fc87 	bl	8007c0a <USBD_CtlError>
      ret = USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006300:	bf00      	nop
  }

  return (uint8_t)ret;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800631e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	32b0      	adds	r2, #176	@ 0xb0
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006332:	2303      	movs	r3, #3
 8006334:	e065      	b.n	8006402 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	32b0      	adds	r2, #176	@ 0xb0
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3318      	adds	r3, #24
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d02f      	beq.n	80063c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	f003 020f 	and.w	r2, r3, #15
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	3318      	adds	r3, #24
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	f003 010f 	and.w	r1, r3, #15
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	460b      	mov	r3, r1
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	440b      	add	r3, r1
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4403      	add	r3, r0
 8006388:	3348      	adds	r3, #72	@ 0x48
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006396:	2b00      	cmp	r3, #0
 8006398:	d112      	bne.n	80063c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3318      	adds	r3, #24
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063b2:	78f9      	ldrb	r1, [r7, #3]
 80063b4:	2300      	movs	r3, #0
 80063b6:	2200      	movs	r2, #0
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f002 f9a6 	bl	800870a <USBD_LL_Transmit>
 80063be:	e01f      	b.n	8006400 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	33b0      	adds	r3, #176	@ 0xb0
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d010      	beq.n	8006400 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	33b0      	adds	r3, #176	@ 0xb0
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	32b0      	adds	r2, #176	@ 0xb0
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	32b0      	adds	r2, #176	@ 0xb0
 8006430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006438:	2303      	movs	r3, #3
 800643a:	e01a      	b.n	8006472 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 f9a4 	bl	800878e <USBD_LL_GetRxDataSize>
 8006446:	4602      	mov	r2, r0
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	33b0      	adds	r3, #176	@ 0xb0
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800646c:	4611      	mov	r1, r2
 800646e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	32b0      	adds	r2, #176	@ 0xb0
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	e024      	b.n	80064e6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	33b0      	adds	r3, #176	@ 0xb0
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d019      	beq.n	80064e4 <USBD_CDC_EP0_RxReady+0x6a>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80064b6:	2bff      	cmp	r3, #255	@ 0xff
 80064b8:	d014      	beq.n	80064e4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	33b0      	adds	r3, #176	@ 0xb0
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80064d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	22ff      	movs	r2, #255	@ 0xff
 80064e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064f8:	2182      	movs	r1, #130	@ 0x82
 80064fa:	4818      	ldr	r0, [pc, #96]	@ (800655c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064fc:	f000 fd4f 	bl	8006f9e <USBD_GetEpDesc>
 8006500:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006502:	2101      	movs	r1, #1
 8006504:	4815      	ldr	r0, [pc, #84]	@ (800655c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006506:	f000 fd4a 	bl	8006f9e <USBD_GetEpDesc>
 800650a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800650c:	2181      	movs	r1, #129	@ 0x81
 800650e:	4813      	ldr	r0, [pc, #76]	@ (800655c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006510:	f000 fd45 	bl	8006f9e <USBD_GetEpDesc>
 8006514:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2210      	movs	r2, #16
 8006520:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d006      	beq.n	8006536 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2200      	movs	r2, #0
 800652c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006530:	711a      	strb	r2, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006544:	711a      	strb	r2, [r3, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2243      	movs	r2, #67	@ 0x43
 800654e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006550:	4b02      	ldr	r3, [pc, #8]	@ (800655c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20000050 	.word	0x20000050

08006560 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006568:	2182      	movs	r1, #130	@ 0x82
 800656a:	4818      	ldr	r0, [pc, #96]	@ (80065cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800656c:	f000 fd17 	bl	8006f9e <USBD_GetEpDesc>
 8006570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006572:	2101      	movs	r1, #1
 8006574:	4815      	ldr	r0, [pc, #84]	@ (80065cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006576:	f000 fd12 	bl	8006f9e <USBD_GetEpDesc>
 800657a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800657c:	2181      	movs	r1, #129	@ 0x81
 800657e:	4813      	ldr	r0, [pc, #76]	@ (80065cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006580:	f000 fd0d 	bl	8006f9e <USBD_GetEpDesc>
 8006584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2210      	movs	r2, #16
 8006590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d006      	beq.n	80065a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2200      	movs	r2, #0
 800659c:	711a      	strb	r2, [r3, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f042 0202 	orr.w	r2, r2, #2
 80065a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	711a      	strb	r2, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f042 0202 	orr.w	r2, r2, #2
 80065b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2243      	movs	r2, #67	@ 0x43
 80065be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065c0:	4b02      	ldr	r3, [pc, #8]	@ (80065cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000050 	.word	0x20000050

080065d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065d8:	2182      	movs	r1, #130	@ 0x82
 80065da:	4818      	ldr	r0, [pc, #96]	@ (800663c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065dc:	f000 fcdf 	bl	8006f9e <USBD_GetEpDesc>
 80065e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065e2:	2101      	movs	r1, #1
 80065e4:	4815      	ldr	r0, [pc, #84]	@ (800663c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065e6:	f000 fcda 	bl	8006f9e <USBD_GetEpDesc>
 80065ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065ec:	2181      	movs	r1, #129	@ 0x81
 80065ee:	4813      	ldr	r0, [pc, #76]	@ (800663c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065f0:	f000 fcd5 	bl	8006f9e <USBD_GetEpDesc>
 80065f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2210      	movs	r2, #16
 8006600:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d006      	beq.n	8006616 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2200      	movs	r2, #0
 800660c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006610:	711a      	strb	r2, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d006      	beq.n	800662a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006624:	711a      	strb	r2, [r3, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2243      	movs	r2, #67	@ 0x43
 800662e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006630:	4b02      	ldr	r3, [pc, #8]	@ (800663c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000050 	.word	0x20000050

08006640 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	220a      	movs	r2, #10
 800664c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800664e:	4b03      	ldr	r3, [pc, #12]	@ (800665c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	2000000c 	.word	0x2000000c

08006660 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	e009      	b.n	8006688 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	33b0      	adds	r3, #176	@ 0xb0
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	32b0      	adds	r2, #176	@ 0xb0
 80066aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e008      	b.n	80066cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	32b0      	adds	r2, #176	@ 0xb0
 80066ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e004      	b.n	8006706 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32b0      	adds	r2, #176	@ 0xb0
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	32b0      	adds	r2, #176	@ 0xb0
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006742:	2303      	movs	r3, #3
 8006744:	e025      	b.n	8006792 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11f      	bne.n	8006790 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2201      	movs	r2, #1
 8006754:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006758:	4b10      	ldr	r3, [pc, #64]	@ (800679c <USBD_CDC_TransmitPacket+0x88>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4403      	add	r3, r0
 8006772:	3318      	adds	r3, #24
 8006774:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006776:	4b09      	ldr	r3, [pc, #36]	@ (800679c <USBD_CDC_TransmitPacket+0x88>)
 8006778:	7819      	ldrb	r1, [r3, #0]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 ffbf 	bl	800870a <USBD_LL_Transmit>

    ret = USBD_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000093 	.word	0x20000093

080067a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	32b0      	adds	r2, #176	@ 0xb0
 80067b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32b0      	adds	r2, #176	@ 0xb0
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e018      	b.n	8006800 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	7c1b      	ldrb	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006808 <USBD_CDC_ReceivePacket+0x68>)
 80067d8:	7819      	ldrb	r1, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 ffb1 	bl	800874c <USBD_LL_PrepareReceive>
 80067ea:	e008      	b.n	80067fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067ec:	4b06      	ldr	r3, [pc, #24]	@ (8006808 <USBD_CDC_ReceivePacket+0x68>)
 80067ee:	7819      	ldrb	r1, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067f6:	2340      	movs	r3, #64	@ 0x40
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 ffa7 	bl	800874c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000094 	.word	0x20000094

0800680c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	e01f      	b.n	8006864 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	79fa      	ldrb	r2, [r7, #7]
 8006856:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f001 fe21 	bl	80084a0 <USBD_LL_Init>
 800685e:	4603      	mov	r3, r0
 8006860:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e025      	b.n	80068d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32ae      	adds	r2, #174	@ 0xae
 8006896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00f      	beq.n	80068c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	32ae      	adds	r2, #174	@ 0xae
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b0:	f107 020e 	add.w	r2, r7, #14
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
 80068b8:	4602      	mov	r2, r0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fe29 	bl	8008538 <USBD_LL_Start>
 80068e6:	4603      	mov	r3, r0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d009      	beq.n	8006934 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4611      	mov	r1, r2
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	4611      	mov	r1, r2
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006964:	2303      	movs	r3, #3
 8006966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f906 	bl	8007b96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006998:	461a      	mov	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d01a      	beq.n	80069e4 <USBD_LL_SetupStage+0x72>
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d822      	bhi.n	80069f8 <USBD_LL_SetupStage+0x86>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <USBD_LL_SetupStage+0x4a>
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d00a      	beq.n	80069d0 <USBD_LL_SetupStage+0x5e>
 80069ba:	e01d      	b.n	80069f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fb5d 	bl	8007084 <USBD_StdDevReq>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]
      break;
 80069ce:	e020      	b.n	8006a12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fbc5 	bl	8007168 <USBD_StdItfReq>
 80069de:	4603      	mov	r3, r0
 80069e0:	73fb      	strb	r3, [r7, #15]
      break;
 80069e2:	e016      	b.n	8006a12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc27 	bl	8007240 <USBD_StdEPReq>
 80069f2:	4603      	mov	r3, r0
 80069f4:	73fb      	strb	r3, [r7, #15]
      break;
 80069f6:	e00c      	b.n	8006a12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fdf6 	bl	80085f8 <USBD_LL_StallEP>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	bf00      	nop
  }

  return ret;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	460b      	mov	r3, r1
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d16e      	bne.n	8006b12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	f040 8098 	bne.w	8006b78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d913      	bls.n	8006a7c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	1ad2      	subs	r2, r2, r3
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	bf28      	it	cs
 8006a6e:	4613      	movcs	r3, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f001 f982 	bl	8007d7e <USBD_CtlContinueRx>
 8006a7a:	e07d      	b.n	8006b78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d014      	beq.n	8006ab4 <USBD_LL_DataOutStage+0x98>
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d81d      	bhi.n	8006aca <USBD_LL_DataOutStage+0xae>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <USBD_LL_DataOutStage+0x7c>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d003      	beq.n	8006a9e <USBD_LL_DataOutStage+0x82>
 8006a96:	e018      	b.n	8006aca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	75bb      	strb	r3, [r7, #22]
            break;
 8006a9c:	e018      	b.n	8006ad0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fa5e 	bl	8006f6a <USBD_CoreFindIF>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ab2:	e00d      	b.n	8006ad0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fa60 	bl	8006f84 <USBD_CoreFindEP>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ac8:	e002      	b.n	8006ad0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75bb      	strb	r3, [r7, #22]
            break;
 8006ace:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ad0:	7dbb      	ldrb	r3, [r7, #22]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d119      	bne.n	8006b0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d113      	bne.n	8006b0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ae2:	7dba      	ldrb	r2, [r7, #22]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	32ae      	adds	r2, #174	@ 0xae
 8006ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006af2:	7dba      	ldrb	r2, [r7, #22]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006afa:	7dba      	ldrb	r2, [r7, #22]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	32ae      	adds	r2, #174	@ 0xae
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 f948 	bl	8007da0 <USBD_CtlSendStatus>
 8006b10:	e032      	b.n	8006b78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fa31 	bl	8006f84 <USBD_CoreFindEP>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b26:	7dbb      	ldrb	r3, [r7, #22]
 8006b28:	2bff      	cmp	r3, #255	@ 0xff
 8006b2a:	d025      	beq.n	8006b78 <USBD_LL_DataOutStage+0x15c>
 8006b2c:	7dbb      	ldrb	r3, [r7, #22]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d122      	bne.n	8006b78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d117      	bne.n	8006b6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b3e:	7dba      	ldrb	r2, [r7, #22]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	32ae      	adds	r2, #174	@ 0xae
 8006b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00f      	beq.n	8006b6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b4e:	7dba      	ldrb	r2, [r7, #22]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b56:	7dba      	ldrb	r2, [r7, #22]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	32ae      	adds	r2, #174	@ 0xae
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	7afa      	ldrb	r2, [r7, #11]
 8006b64:	4611      	mov	r1, r2
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	e000      	b.n	8006b7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d16f      	bne.n	8006c76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d15a      	bne.n	8006c5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d914      	bls.n	8006bdc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	1ad2      	subs	r2, r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6879      	ldr	r1, [r7, #4]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f001 f8aa 	bl	8007d22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f001 fdb9 	bl	800874c <USBD_LL_PrepareReceive>
 8006bda:	e03f      	b.n	8006c5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d11c      	bne.n	8006c22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d316      	bcc.n	8006c22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d20f      	bcs.n	8006c22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f001 f88b 	bl	8007d22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c14:	2300      	movs	r3, #0
 8006c16:	2200      	movs	r2, #0
 8006c18:	2100      	movs	r1, #0
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f001 fd96 	bl	800874c <USBD_LL_PrepareReceive>
 8006c20:	e01c      	b.n	8006c5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d10f      	bne.n	8006c4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c4e:	2180      	movs	r1, #128	@ 0x80
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f001 fcd1 	bl	80085f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f001 f8b5 	bl	8007dc6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d03a      	beq.n	8006cdc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fe42 	bl	80068f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c74:	e032      	b.n	8006cdc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c76:	7afb      	ldrb	r3, [r7, #11]
 8006c78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 f97f 	bl	8006f84 <USBD_CoreFindEP>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	2bff      	cmp	r3, #255	@ 0xff
 8006c8e:	d025      	beq.n	8006cdc <USBD_LL_DataInStage+0x15a>
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d122      	bne.n	8006cdc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d11c      	bne.n	8006cdc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ca2:	7dfa      	ldrb	r2, [r7, #23]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	32ae      	adds	r2, #174	@ 0xae
 8006ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d014      	beq.n	8006cdc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006cb2:	7dfa      	ldrb	r2, [r7, #23]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006cba:	7dfa      	ldrb	r2, [r7, #23]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	32ae      	adds	r2, #174	@ 0xae
 8006cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	7afa      	ldrb	r2, [r7, #11]
 8006cc8:	4611      	mov	r1, r2
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	4798      	blx	r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006cd2:	7dbb      	ldrb	r3, [r7, #22]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006cd8:	7dbb      	ldrb	r3, [r7, #22]
 8006cda:	e000      	b.n	8006cde <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d014      	beq.n	8006d4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6852      	ldr	r2, [r2, #4]
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d4c:	2340      	movs	r3, #64	@ 0x40
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fc0b 	bl	800856e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2240      	movs	r2, #64	@ 0x40
 8006d64:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d68:	2340      	movs	r3, #64	@ 0x40
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2180      	movs	r1, #128	@ 0x80
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fbfd 	bl	800856e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2240      	movs	r2, #64	@ 0x40
 8006d7e:	621a      	str	r2, [r3, #32]

  return ret;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	78fa      	ldrb	r2, [r7, #3]
 8006d9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d106      	bne.n	8006df8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d110      	bne.n	8006e3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	32ae      	adds	r2, #174	@ 0xae
 8006e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e01c      	b.n	8006ea2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d115      	bne.n	8006ea0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	32ae      	adds	r2, #174	@ 0xae
 8006e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	32ae      	adds	r2, #174	@ 0xae
 8006e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	78fa      	ldrb	r2, [r7, #3]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b082      	sub	sp, #8
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	32ae      	adds	r2, #174	@ 0xae
 8006ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e01c      	b.n	8006f06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d115      	bne.n	8006f04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32ae      	adds	r2, #174	@ 0xae
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	32ae      	adds	r2, #174	@ 0xae
 8006ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	4611      	mov	r1, r2
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6852      	ldr	r2, [r2, #4]
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	4611      	mov	r1, r2
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d91f      	bls.n	8007004 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006fca:	e013      	b.n	8006ff4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006fcc:	f107 030a 	add.w	r3, r7, #10
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6978      	ldr	r0, [r7, #20]
 8006fd4:	f000 f81b 	bl	800700e <USBD_GetNextDesc>
 8006fd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	2b05      	cmp	r3, #5
 8006fe0:	d108      	bne.n	8006ff4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	789b      	ldrb	r3, [r3, #2]
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d008      	beq.n	8007002 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	885b      	ldrh	r3, [r3, #2]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	897b      	ldrh	r3, [r7, #10]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d8e5      	bhi.n	8006fcc <USBD_GetEpDesc+0x2e>
 8007000:	e000      	b.n	8007004 <USBD_GetEpDesc+0x66>
          break;
 8007002:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007004:	693b      	ldr	r3, [r7, #16]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	4413      	add	r3, r2
 8007026:	b29a      	uxth	r2, r3
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4413      	add	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007046:	b480      	push	{r7}
 8007048:	b087      	sub	sp, #28
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	3301      	adds	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007064:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	b21a      	sxth	r2, r3
 800706c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007070:	4313      	orrs	r3, r2
 8007072:	b21b      	sxth	r3, r3
 8007074:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007076:	89fb      	ldrh	r3, [r7, #14]
}
 8007078:	4618      	mov	r0, r3
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800709a:	2b40      	cmp	r3, #64	@ 0x40
 800709c:	d005      	beq.n	80070aa <USBD_StdDevReq+0x26>
 800709e:	2b40      	cmp	r3, #64	@ 0x40
 80070a0:	d857      	bhi.n	8007152 <USBD_StdDevReq+0xce>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00f      	beq.n	80070c6 <USBD_StdDevReq+0x42>
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d153      	bne.n	8007152 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	32ae      	adds	r2, #174	@ 0xae
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
 80070c0:	4603      	mov	r3, r0
 80070c2:	73fb      	strb	r3, [r7, #15]
      break;
 80070c4:	e04a      	b.n	800715c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	785b      	ldrb	r3, [r3, #1]
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	d83b      	bhi.n	8007146 <USBD_StdDevReq+0xc2>
 80070ce:	a201      	add	r2, pc, #4	@ (adr r2, 80070d4 <USBD_StdDevReq+0x50>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	08007129 	.word	0x08007129
 80070d8:	0800713d 	.word	0x0800713d
 80070dc:	08007147 	.word	0x08007147
 80070e0:	08007133 	.word	0x08007133
 80070e4:	08007147 	.word	0x08007147
 80070e8:	08007107 	.word	0x08007107
 80070ec:	080070fd 	.word	0x080070fd
 80070f0:	08007147 	.word	0x08007147
 80070f4:	0800711f 	.word	0x0800711f
 80070f8:	08007111 	.word	0x08007111
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa3c 	bl	800757c <USBD_GetDescriptor>
          break;
 8007104:	e024      	b.n	8007150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fba1 	bl	8007850 <USBD_SetAddress>
          break;
 800710e:	e01f      	b.n	8007150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fbe0 	bl	80078d8 <USBD_SetConfig>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
          break;
 800711c:	e018      	b.n	8007150 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fc83 	bl	8007a2c <USBD_GetConfig>
          break;
 8007126:	e013      	b.n	8007150 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fcb4 	bl	8007a98 <USBD_GetStatus>
          break;
 8007130:	e00e      	b.n	8007150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fce3 	bl	8007b00 <USBD_SetFeature>
          break;
 800713a:	e009      	b.n	8007150 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fd07 	bl	8007b52 <USBD_ClrFeature>
          break;
 8007144:	e004      	b.n	8007150 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fd5e 	bl	8007c0a <USBD_CtlError>
          break;
 800714e:	bf00      	nop
      }
      break;
 8007150:	e004      	b.n	800715c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd58 	bl	8007c0a <USBD_CtlError>
      break;
 800715a:	bf00      	nop
  }

  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800717e:	2b40      	cmp	r3, #64	@ 0x40
 8007180:	d005      	beq.n	800718e <USBD_StdItfReq+0x26>
 8007182:	2b40      	cmp	r3, #64	@ 0x40
 8007184:	d852      	bhi.n	800722c <USBD_StdItfReq+0xc4>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <USBD_StdItfReq+0x26>
 800718a:	2b20      	cmp	r3, #32
 800718c:	d14e      	bne.n	800722c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007194:	b2db      	uxtb	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	2b02      	cmp	r3, #2
 800719a:	d840      	bhi.n	800721e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	889b      	ldrh	r3, [r3, #4]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d836      	bhi.n	8007214 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	889b      	ldrh	r3, [r3, #4]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fedb 	bl	8006f6a <USBD_CoreFindIF>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2bff      	cmp	r3, #255	@ 0xff
 80071bc:	d01d      	beq.n	80071fa <USBD_StdItfReq+0x92>
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d11a      	bne.n	80071fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80071c4:	7bba      	ldrb	r2, [r7, #14]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	32ae      	adds	r2, #174	@ 0xae
 80071ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00f      	beq.n	80071f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80071d4:	7bba      	ldrb	r2, [r7, #14]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071dc:	7bba      	ldrb	r2, [r7, #14]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	32ae      	adds	r2, #174	@ 0xae
 80071e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071f2:	e004      	b.n	80071fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80071f4:	2303      	movs	r3, #3
 80071f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071f8:	e001      	b.n	80071fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80071fa:	2303      	movs	r3, #3
 80071fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	88db      	ldrh	r3, [r3, #6]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d110      	bne.n	8007228 <USBD_StdItfReq+0xc0>
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10d      	bne.n	8007228 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fdc7 	bl	8007da0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007212:	e009      	b.n	8007228 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fcf7 	bl	8007c0a <USBD_CtlError>
          break;
 800721c:	e004      	b.n	8007228 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fcf2 	bl	8007c0a <USBD_CtlError>
          break;
 8007226:	e000      	b.n	800722a <USBD_StdItfReq+0xc2>
          break;
 8007228:	bf00      	nop
      }
      break;
 800722a:	e004      	b.n	8007236 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fceb 	bl	8007c0a <USBD_CtlError>
      break;
 8007234:	bf00      	nop
  }

  return ret;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	889b      	ldrh	r3, [r3, #4]
 8007252:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800725c:	2b40      	cmp	r3, #64	@ 0x40
 800725e:	d007      	beq.n	8007270 <USBD_StdEPReq+0x30>
 8007260:	2b40      	cmp	r3, #64	@ 0x40
 8007262:	f200 817f 	bhi.w	8007564 <USBD_StdEPReq+0x324>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d02a      	beq.n	80072c0 <USBD_StdEPReq+0x80>
 800726a:	2b20      	cmp	r3, #32
 800726c:	f040 817a 	bne.w	8007564 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fe85 	bl	8006f84 <USBD_CoreFindEP>
 800727a:	4603      	mov	r3, r0
 800727c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800727e:	7b7b      	ldrb	r3, [r7, #13]
 8007280:	2bff      	cmp	r3, #255	@ 0xff
 8007282:	f000 8174 	beq.w	800756e <USBD_StdEPReq+0x32e>
 8007286:	7b7b      	ldrb	r3, [r7, #13]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 8170 	bne.w	800756e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800728e:	7b7a      	ldrb	r2, [r7, #13]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007296:	7b7a      	ldrb	r2, [r7, #13]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	32ae      	adds	r2, #174	@ 0xae
 800729c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8163 	beq.w	800756e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072a8:	7b7a      	ldrb	r2, [r7, #13]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32ae      	adds	r2, #174	@ 0xae
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
 80072ba:	4603      	mov	r3, r0
 80072bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072be:	e156      	b.n	800756e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	785b      	ldrb	r3, [r3, #1]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d008      	beq.n	80072da <USBD_StdEPReq+0x9a>
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	f300 8145 	bgt.w	8007558 <USBD_StdEPReq+0x318>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 809b 	beq.w	800740a <USBD_StdEPReq+0x1ca>
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d03c      	beq.n	8007352 <USBD_StdEPReq+0x112>
 80072d8:	e13e      	b.n	8007558 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d002      	beq.n	80072ec <USBD_StdEPReq+0xac>
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d016      	beq.n	8007318 <USBD_StdEPReq+0xd8>
 80072ea:	e02c      	b.n	8007346 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00d      	beq.n	800730e <USBD_StdEPReq+0xce>
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b80      	cmp	r3, #128	@ 0x80
 80072f6:	d00a      	beq.n	800730e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f97b 	bl	80085f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007302:	2180      	movs	r1, #128	@ 0x80
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f977 	bl	80085f8 <USBD_LL_StallEP>
 800730a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800730c:	e020      	b.n	8007350 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc7a 	bl	8007c0a <USBD_CtlError>
              break;
 8007316:	e01b      	b.n	8007350 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	885b      	ldrh	r3, [r3, #2]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10e      	bne.n	800733e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00b      	beq.n	800733e <USBD_StdEPReq+0xfe>
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b80      	cmp	r3, #128	@ 0x80
 800732a:	d008      	beq.n	800733e <USBD_StdEPReq+0xfe>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	88db      	ldrh	r3, [r3, #6]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d104      	bne.n	800733e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f95d 	bl	80085f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fd2e 	bl	8007da0 <USBD_CtlSendStatus>

              break;
 8007344:	e004      	b.n	8007350 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc5e 	bl	8007c0a <USBD_CtlError>
              break;
 800734e:	bf00      	nop
          }
          break;
 8007350:	e107      	b.n	8007562 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d002      	beq.n	8007364 <USBD_StdEPReq+0x124>
 800735e:	2b03      	cmp	r3, #3
 8007360:	d016      	beq.n	8007390 <USBD_StdEPReq+0x150>
 8007362:	e04b      	b.n	80073fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <USBD_StdEPReq+0x146>
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b80      	cmp	r3, #128	@ 0x80
 800736e:	d00a      	beq.n	8007386 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f93f 	bl	80085f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800737a:	2180      	movs	r1, #128	@ 0x80
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f93b 	bl	80085f8 <USBD_LL_StallEP>
 8007382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007384:	e040      	b.n	8007408 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc3e 	bl	8007c0a <USBD_CtlError>
              break;
 800738e:	e03b      	b.n	8007408 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	885b      	ldrh	r3, [r3, #2]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d136      	bne.n	8007406 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d004      	beq.n	80073ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 f945 	bl	8008636 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fcf7 	bl	8007da0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fde4 	bl	8006f84 <USBD_CoreFindEP>
 80073bc:	4603      	mov	r3, r0
 80073be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073c0:	7b7b      	ldrb	r3, [r7, #13]
 80073c2:	2bff      	cmp	r3, #255	@ 0xff
 80073c4:	d01f      	beq.n	8007406 <USBD_StdEPReq+0x1c6>
 80073c6:	7b7b      	ldrb	r3, [r7, #13]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d11c      	bne.n	8007406 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80073cc:	7b7a      	ldrb	r2, [r7, #13]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80073d4:	7b7a      	ldrb	r2, [r7, #13]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	32ae      	adds	r2, #174	@ 0xae
 80073da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d010      	beq.n	8007406 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073e4:	7b7a      	ldrb	r2, [r7, #13]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	32ae      	adds	r2, #174	@ 0xae
 80073ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80073fa:	e004      	b.n	8007406 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fc03 	bl	8007c0a <USBD_CtlError>
              break;
 8007404:	e000      	b.n	8007408 <USBD_StdEPReq+0x1c8>
              break;
 8007406:	bf00      	nop
          }
          break;
 8007408:	e0ab      	b.n	8007562 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d002      	beq.n	800741c <USBD_StdEPReq+0x1dc>
 8007416:	2b03      	cmp	r3, #3
 8007418:	d032      	beq.n	8007480 <USBD_StdEPReq+0x240>
 800741a:	e097      	b.n	800754c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <USBD_StdEPReq+0x1f2>
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b80      	cmp	r3, #128	@ 0x80
 8007426:	d004      	beq.n	8007432 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fbed 	bl	8007c0a <USBD_CtlError>
                break;
 8007430:	e091      	b.n	8007556 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007436:	2b00      	cmp	r3, #0
 8007438:	da0b      	bge.n	8007452 <USBD_StdEPReq+0x212>
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	3310      	adds	r3, #16
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	3304      	adds	r3, #4
 8007450:	e00b      	b.n	800746a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	3304      	adds	r3, #4
 800746a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2202      	movs	r2, #2
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fc37 	bl	8007cec <USBD_CtlSendData>
              break;
 800747e:	e06a      	b.n	8007556 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007484:	2b00      	cmp	r3, #0
 8007486:	da11      	bge.n	80074ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	f003 020f 	and.w	r2, r3, #15
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	3324      	adds	r3, #36	@ 0x24
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d117      	bne.n	80074d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fbb0 	bl	8007c0a <USBD_CtlError>
                  break;
 80074aa:	e054      	b.n	8007556 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	f003 020f 	and.w	r2, r3, #15
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fb9d 	bl	8007c0a <USBD_CtlError>
                  break;
 80074d0:	e041      	b.n	8007556 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da0b      	bge.n	80074f2 <USBD_StdEPReq+0x2b2>
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	3310      	adds	r3, #16
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	3304      	adds	r3, #4
 80074f0:	e00b      	b.n	800750a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	3304      	adds	r3, #4
 800750a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <USBD_StdEPReq+0x2d8>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b80      	cmp	r3, #128	@ 0x80
 8007516:	d103      	bne.n	8007520 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e00e      	b.n	800753e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f8a5 	bl	8008674 <USBD_LL_IsStallEP>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e002      	b.n	800753e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2202      	movs	r2, #2
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fbd1 	bl	8007cec <USBD_CtlSendData>
              break;
 800754a:	e004      	b.n	8007556 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fb5b 	bl	8007c0a <USBD_CtlError>
              break;
 8007554:	bf00      	nop
          }
          break;
 8007556:	e004      	b.n	8007562 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fb55 	bl	8007c0a <USBD_CtlError>
          break;
 8007560:	bf00      	nop
      }
      break;
 8007562:	e005      	b.n	8007570 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fb4f 	bl	8007c0a <USBD_CtlError>
      break;
 800756c:	e000      	b.n	8007570 <USBD_StdEPReq+0x330>
      break;
 800756e:	bf00      	nop
  }

  return ret;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	885b      	ldrh	r3, [r3, #2]
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	2b06      	cmp	r3, #6
 800759e:	f200 8128 	bhi.w	80077f2 <USBD_GetDescriptor+0x276>
 80075a2:	a201      	add	r2, pc, #4	@ (adr r2, 80075a8 <USBD_GetDescriptor+0x2c>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	080075c5 	.word	0x080075c5
 80075ac:	080075dd 	.word	0x080075dd
 80075b0:	0800761d 	.word	0x0800761d
 80075b4:	080077f3 	.word	0x080077f3
 80075b8:	080077f3 	.word	0x080077f3
 80075bc:	08007793 	.word	0x08007793
 80075c0:	080077bf 	.word	0x080077bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
      break;
 80075da:	e112      	b.n	8007802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7c1b      	ldrb	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10d      	bne.n	8007600 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	f107 0208 	add.w	r2, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	2202      	movs	r2, #2
 80075fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075fe:	e100      	b.n	8007802 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007608:	f107 0208 	add.w	r2, r7, #8
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	2202      	movs	r2, #2
 8007618:	701a      	strb	r2, [r3, #0]
      break;
 800761a:	e0f2      	b.n	8007802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	885b      	ldrh	r3, [r3, #2]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b05      	cmp	r3, #5
 8007624:	f200 80ac 	bhi.w	8007780 <USBD_GetDescriptor+0x204>
 8007628:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <USBD_GetDescriptor+0xb4>)
 800762a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762e:	bf00      	nop
 8007630:	08007649 	.word	0x08007649
 8007634:	0800767d 	.word	0x0800767d
 8007638:	080076b1 	.word	0x080076b1
 800763c:	080076e5 	.word	0x080076e5
 8007640:	08007719 	.word	0x08007719
 8007644:	0800774d 	.word	0x0800774d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 0108 	add.w	r1, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766a:	e091      	b.n	8007790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 facb 	bl	8007c0a <USBD_CtlError>
            err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
          break;
 800767a:	e089      	b.n	8007790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e077      	b.n	8007790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fab1 	bl	8007c0a <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e06f      	b.n	8007790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e05d      	b.n	8007790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa97 	bl	8007c0a <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e055      	b.n	8007790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007706:	e043      	b.n	8007790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa7d 	bl	8007c0a <USBD_CtlError>
            err++;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	3301      	adds	r3, #1
 8007714:	72fb      	strb	r3, [r7, #11]
          break;
 8007716:	e03b      	b.n	8007790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7c12      	ldrb	r2, [r2, #16]
 8007730:	f107 0108 	add.w	r1, r7, #8
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773a:	e029      	b.n	8007790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa63 	bl	8007c0a <USBD_CtlError>
            err++;
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	3301      	adds	r3, #1
 8007748:	72fb      	strb	r3, [r7, #11]
          break;
 800774a:	e021      	b.n	8007790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00b      	beq.n	8007770 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	7c12      	ldrb	r2, [r2, #16]
 8007764:	f107 0108 	add.w	r1, r7, #8
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800776e:	e00f      	b.n	8007790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fa49 	bl	8007c0a <USBD_CtlError>
            err++;
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	3301      	adds	r3, #1
 800777c:	72fb      	strb	r3, [r7, #11]
          break;
 800777e:	e007      	b.n	8007790 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa41 	bl	8007c0a <USBD_CtlError>
          err++;
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	3301      	adds	r3, #1
 800778c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800778e:	bf00      	nop
      }
      break;
 8007790:	e037      	b.n	8007802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7c1b      	ldrb	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a2:	f107 0208 	add.w	r2, r7, #8
 80077a6:	4610      	mov	r0, r2
 80077a8:	4798      	blx	r3
 80077aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077ac:	e029      	b.n	8007802 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fa2a 	bl	8007c0a <USBD_CtlError>
        err++;
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	3301      	adds	r3, #1
 80077ba:	72fb      	strb	r3, [r7, #11]
      break;
 80077bc:	e021      	b.n	8007802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7c1b      	ldrb	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10d      	bne.n	80077e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ce:	f107 0208 	add.w	r2, r7, #8
 80077d2:	4610      	mov	r0, r2
 80077d4:	4798      	blx	r3
 80077d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	2207      	movs	r2, #7
 80077de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e0:	e00f      	b.n	8007802 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fa10 	bl	8007c0a <USBD_CtlError>
        err++;
 80077ea:	7afb      	ldrb	r3, [r7, #11]
 80077ec:	3301      	adds	r3, #1
 80077ee:	72fb      	strb	r3, [r7, #11]
      break;
 80077f0:	e007      	b.n	8007802 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fa08 	bl	8007c0a <USBD_CtlError>
      err++;
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	3301      	adds	r3, #1
 80077fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007800:	bf00      	nop
  }

  if (err != 0U)
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d11e      	bne.n	8007846 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	88db      	ldrh	r3, [r3, #6]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d016      	beq.n	800783e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007810:	893b      	ldrh	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00e      	beq.n	8007834 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88da      	ldrh	r2, [r3, #6]
 800781a:	893b      	ldrh	r3, [r7, #8]
 800781c:	4293      	cmp	r3, r2
 800781e:	bf28      	it	cs
 8007820:	4613      	movcs	r3, r2
 8007822:	b29b      	uxth	r3, r3
 8007824:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007826:	893b      	ldrh	r3, [r7, #8]
 8007828:	461a      	mov	r2, r3
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fa5d 	bl	8007cec <USBD_CtlSendData>
 8007832:	e009      	b.n	8007848 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f9e7 	bl	8007c0a <USBD_CtlError>
 800783c:	e004      	b.n	8007848 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 faae 	bl	8007da0 <USBD_CtlSendStatus>
 8007844:	e000      	b.n	8007848 <USBD_GetDescriptor+0x2cc>
    return;
 8007846:	bf00      	nop
  }
}
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop

08007850 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	889b      	ldrh	r3, [r3, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d131      	bne.n	80078c6 <USBD_SetAddress+0x76>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	88db      	ldrh	r3, [r3, #6]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d12d      	bne.n	80078c6 <USBD_SetAddress+0x76>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	885b      	ldrh	r3, [r3, #2]
 800786e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007870:	d829      	bhi.n	80078c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	885b      	ldrh	r3, [r3, #2]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800787c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b03      	cmp	r3, #3
 8007888:	d104      	bne.n	8007894 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f9bc 	bl	8007c0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007892:	e01d      	b.n	80078d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7bfa      	ldrb	r2, [r7, #15]
 8007898:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 ff13 	bl	80086cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa7a 	bl	8007da0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	e009      	b.n	80078d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c4:	e004      	b.n	80078d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f99e 	bl	8007c0a <USBD_CtlError>
  }
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007a28 <USBD_SetConfig+0x150>)
 80078ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007a28 <USBD_SetConfig+0x150>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d905      	bls.n	8007904 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f985 	bl	8007c0a <USBD_CtlError>
    return USBD_FAIL;
 8007900:	2303      	movs	r3, #3
 8007902:	e08c      	b.n	8007a1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d002      	beq.n	8007916 <USBD_SetConfig+0x3e>
 8007910:	2b03      	cmp	r3, #3
 8007912:	d029      	beq.n	8007968 <USBD_SetConfig+0x90>
 8007914:	e075      	b.n	8007a02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007916:	4b44      	ldr	r3, [pc, #272]	@ (8007a28 <USBD_SetConfig+0x150>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d020      	beq.n	8007960 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800791e:	4b42      	ldr	r3, [pc, #264]	@ (8007a28 <USBD_SetConfig+0x150>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007928:	4b3f      	ldr	r3, [pc, #252]	@ (8007a28 <USBD_SetConfig+0x150>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe ffe9 	bl	8006906 <USBD_SetClassConfig>
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d008      	beq.n	8007950 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f962 	bl	8007c0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800794e:	e065      	b.n	8007a1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fa25 	bl	8007da0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2203      	movs	r2, #3
 800795a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800795e:	e05d      	b.n	8007a1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa1d 	bl	8007da0 <USBD_CtlSendStatus>
      break;
 8007966:	e059      	b.n	8007a1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007968:	4b2f      	ldr	r3, [pc, #188]	@ (8007a28 <USBD_SetConfig+0x150>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d112      	bne.n	8007996 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007978:	4b2b      	ldr	r3, [pc, #172]	@ (8007a28 <USBD_SetConfig+0x150>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007982:	4b29      	ldr	r3, [pc, #164]	@ (8007a28 <USBD_SetConfig+0x150>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7fe ffd8 	bl	800693e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa06 	bl	8007da0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007994:	e042      	b.n	8007a1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007996:	4b24      	ldr	r3, [pc, #144]	@ (8007a28 <USBD_SetConfig+0x150>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d02a      	beq.n	80079fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7fe ffc6 	bl	800693e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a28 <USBD_SetConfig+0x150>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <USBD_SetConfig+0x150>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fe ff9f 	bl	8006906 <USBD_SetClassConfig>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00f      	beq.n	80079f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f918 	bl	8007c0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fe ffab 	bl	800693e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079f0:	e014      	b.n	8007a1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9d4 	bl	8007da0 <USBD_CtlSendStatus>
      break;
 80079f8:	e010      	b.n	8007a1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f9d0 	bl	8007da0 <USBD_CtlSendStatus>
      break;
 8007a00:	e00c      	b.n	8007a1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f900 	bl	8007c0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a0a:	4b07      	ldr	r3, [pc, #28]	@ (8007a28 <USBD_SetConfig+0x150>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fe ff94 	bl	800693e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1a:	bf00      	nop
  }

  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000274 	.word	0x20000274

08007a2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	88db      	ldrh	r3, [r3, #6]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d004      	beq.n	8007a48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f8e2 	bl	8007c0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a46:	e023      	b.n	8007a90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	dc02      	bgt.n	8007a5a <USBD_GetConfig+0x2e>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dc03      	bgt.n	8007a60 <USBD_GetConfig+0x34>
 8007a58:	e015      	b.n	8007a86 <USBD_GetConfig+0x5a>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d00b      	beq.n	8007a76 <USBD_GetConfig+0x4a>
 8007a5e:	e012      	b.n	8007a86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f93c 	bl	8007cec <USBD_CtlSendData>
        break;
 8007a74:	e00c      	b.n	8007a90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f934 	bl	8007cec <USBD_CtlSendData>
        break;
 8007a84:	e004      	b.n	8007a90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f8be 	bl	8007c0a <USBD_CtlError>
        break;
 8007a8e:	bf00      	nop
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d81e      	bhi.n	8007aee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	88db      	ldrh	r3, [r3, #6]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d004      	beq.n	8007ac2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f8a5 	bl	8007c0a <USBD_CtlError>
        break;
 8007ac0:	e01a      	b.n	8007af8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f043 0202 	orr.w	r2, r3, #2
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f900 	bl	8007cec <USBD_CtlSendData>
      break;
 8007aec:	e004      	b.n	8007af8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f88a 	bl	8007c0a <USBD_CtlError>
      break;
 8007af6:	bf00      	nop
  }
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	885b      	ldrh	r3, [r3, #2]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d107      	bne.n	8007b22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f940 	bl	8007da0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b20:	e013      	b.n	8007b4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	885b      	ldrh	r3, [r3, #2]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d10b      	bne.n	8007b42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	889b      	ldrh	r3, [r3, #4]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f930 	bl	8007da0 <USBD_CtlSendStatus>
}
 8007b40:	e003      	b.n	8007b4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f860 	bl	8007c0a <USBD_CtlError>
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d80b      	bhi.n	8007b82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	885b      	ldrh	r3, [r3, #2]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d10c      	bne.n	8007b8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f910 	bl	8007da0 <USBD_CtlSendStatus>
      }
      break;
 8007b80:	e004      	b.n	8007b8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f840 	bl	8007c0a <USBD_CtlError>
      break;
 8007b8a:	e000      	b.n	8007b8e <USBD_ClrFeature+0x3c>
      break;
 8007b8c:	bf00      	nop
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	781a      	ldrb	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff fa40 	bl	8007046 <SWAPBYTE>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fa33 	bl	8007046 <SWAPBYTE>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff fa26 	bl	8007046 <SWAPBYTE>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	80da      	strh	r2, [r3, #6]
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c14:	2180      	movs	r1, #128	@ 0x80
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fcee 	bl	80085f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fcea 	bl	80085f8 <USBD_LL_StallEP>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d036      	beq.n	8007cb0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c46:	6938      	ldr	r0, [r7, #16]
 8007c48:	f000 f836 	bl	8007cb8 <USBD_GetLen>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	3301      	adds	r3, #1
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	4413      	add	r3, r2
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	2203      	movs	r2, #3
 8007c74:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c7c:	e013      	b.n	8007ca6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	4413      	add	r3, r2
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	7812      	ldrb	r2, [r2, #0]
 8007c88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	613b      	str	r3, [r7, #16]
    idx++;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	3301      	adds	r3, #1
 8007c94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e7      	bne.n	8007c7e <USBD_GetString+0x52>
 8007cae:	e000      	b.n	8007cb2 <USBD_GetString+0x86>
    return;
 8007cb0:	bf00      	nop
  }
}
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cc8:	e005      	b.n	8007cd6 <USBD_GetLen+0x1e>
  {
    len++;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f5      	bne.n	8007cca <USBD_GetLen+0x12>
  }

  return len;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	2100      	movs	r1, #0
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fcf9 	bl	800870a <USBD_LL_Transmit>

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	2100      	movs	r1, #0
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fce8 	bl	800870a <USBD_LL_Transmit>

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fcec 	bl	800874c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	2100      	movs	r1, #0
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 fcdb 	bl	800874c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2204      	movs	r2, #4
 8007dac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007db0:	2300      	movs	r3, #0
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fca7 	bl	800870a <USBD_LL_Transmit>

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fcb5 	bl	800874c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007df0:	2200      	movs	r2, #0
 8007df2:	4912      	ldr	r1, [pc, #72]	@ (8007e3c <MX_USB_DEVICE_Init+0x50>)
 8007df4:	4812      	ldr	r0, [pc, #72]	@ (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007df6:	f7fe fd09 	bl	800680c <USBD_Init>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e00:	f7f8 ff66 	bl	8000cd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e04:	490f      	ldr	r1, [pc, #60]	@ (8007e44 <MX_USB_DEVICE_Init+0x58>)
 8007e06:	480e      	ldr	r0, [pc, #56]	@ (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007e08:	f7fe fd30 	bl	800686c <USBD_RegisterClass>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e12:	f7f8 ff5d 	bl	8000cd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e16:	490c      	ldr	r1, [pc, #48]	@ (8007e48 <MX_USB_DEVICE_Init+0x5c>)
 8007e18:	4809      	ldr	r0, [pc, #36]	@ (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007e1a:	f7fe fc21 	bl	8006660 <USBD_CDC_RegisterInterface>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e24:	f7f8 ff54 	bl	8000cd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e28:	4805      	ldr	r0, [pc, #20]	@ (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007e2a:	f7fe fd55 	bl	80068d8 <USBD_Start>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e34:	f7f8 ff4c 	bl	8000cd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e38:	bf00      	nop
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	200000ac 	.word	0x200000ac
 8007e40:	20000278 	.word	0x20000278
 8007e44:	20000018 	.word	0x20000018
 8007e48:	20000098 	.word	0x20000098

08007e4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e50:	2200      	movs	r2, #0
 8007e52:	4905      	ldr	r1, [pc, #20]	@ (8007e68 <CDC_Init_FS+0x1c>)
 8007e54:	4805      	ldr	r0, [pc, #20]	@ (8007e6c <CDC_Init_FS+0x20>)
 8007e56:	f7fe fc1d 	bl	8006694 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e5a:	4905      	ldr	r1, [pc, #20]	@ (8007e70 <CDC_Init_FS+0x24>)
 8007e5c:	4803      	ldr	r0, [pc, #12]	@ (8007e6c <CDC_Init_FS+0x20>)
 8007e5e:	f7fe fc3b 	bl	80066d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20000d54 	.word	0x20000d54
 8007e6c:	20000278 	.word	0x20000278
 8007e70:	20000554 	.word	0x20000554

08007e74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
 8007e90:	4613      	mov	r3, r2
 8007e92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	2b23      	cmp	r3, #35	@ 0x23
 8007e98:	d84a      	bhi.n	8007f30 <CDC_Control_FS+0xac>
 8007e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea0 <CDC_Control_FS+0x1c>)
 8007e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea0:	08007f31 	.word	0x08007f31
 8007ea4:	08007f31 	.word	0x08007f31
 8007ea8:	08007f31 	.word	0x08007f31
 8007eac:	08007f31 	.word	0x08007f31
 8007eb0:	08007f31 	.word	0x08007f31
 8007eb4:	08007f31 	.word	0x08007f31
 8007eb8:	08007f31 	.word	0x08007f31
 8007ebc:	08007f31 	.word	0x08007f31
 8007ec0:	08007f31 	.word	0x08007f31
 8007ec4:	08007f31 	.word	0x08007f31
 8007ec8:	08007f31 	.word	0x08007f31
 8007ecc:	08007f31 	.word	0x08007f31
 8007ed0:	08007f31 	.word	0x08007f31
 8007ed4:	08007f31 	.word	0x08007f31
 8007ed8:	08007f31 	.word	0x08007f31
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	08007f31 	.word	0x08007f31
 8007ee4:	08007f31 	.word	0x08007f31
 8007ee8:	08007f31 	.word	0x08007f31
 8007eec:	08007f31 	.word	0x08007f31
 8007ef0:	08007f31 	.word	0x08007f31
 8007ef4:	08007f31 	.word	0x08007f31
 8007ef8:	08007f31 	.word	0x08007f31
 8007efc:	08007f31 	.word	0x08007f31
 8007f00:	08007f31 	.word	0x08007f31
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f31 	.word	0x08007f31
 8007f10:	08007f31 	.word	0x08007f31
 8007f14:	08007f31 	.word	0x08007f31
 8007f18:	08007f31 	.word	0x08007f31
 8007f1c:	08007f31 	.word	0x08007f31
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f31 	.word	0x08007f31
 8007f28:	08007f31 	.word	0x08007f31
 8007f2c:	08007f31 	.word	0x08007f31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f30:	bf00      	nop
  }

  return (USBD_OK);
 8007f32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4805      	ldr	r0, [pc, #20]	@ (8007f64 <CDC_Receive_FS+0x24>)
 8007f4e:	f7fe fbc3 	bl	80066d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f52:	4804      	ldr	r0, [pc, #16]	@ (8007f64 <CDC_Receive_FS+0x24>)
 8007f54:	f7fe fc24 	bl	80067a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000278 	.word	0x20000278

08007f68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f78:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <CDC_Transmit_FS+0x48>)
 8007f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e00b      	b.n	8007fa6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f8e:	887b      	ldrh	r3, [r7, #2]
 8007f90:	461a      	mov	r2, r3
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	4806      	ldr	r0, [pc, #24]	@ (8007fb0 <CDC_Transmit_FS+0x48>)
 8007f96:	f7fe fb7d 	bl	8006694 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f9a:	4805      	ldr	r0, [pc, #20]	@ (8007fb0 <CDC_Transmit_FS+0x48>)
 8007f9c:	f7fe fbba 	bl	8006714 <USBD_CDC_TransmitPacket>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000278 	.word	0x20000278

08007fb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	6039      	str	r1, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2212      	movs	r2, #18
 8007fe8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fea:	4b03      	ldr	r3, [pc, #12]	@ (8007ff8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	200000c8 	.word	0x200000c8

08007ffc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2204      	movs	r2, #4
 800800c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800800e:	4b03      	ldr	r3, [pc, #12]	@ (800801c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	200000dc 	.word	0x200000dc

08008020 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d105      	bne.n	800803e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4907      	ldr	r1, [pc, #28]	@ (8008054 <USBD_FS_ProductStrDescriptor+0x34>)
 8008036:	4808      	ldr	r0, [pc, #32]	@ (8008058 <USBD_FS_ProductStrDescriptor+0x38>)
 8008038:	f7ff fdf8 	bl	8007c2c <USBD_GetString>
 800803c:	e004      	b.n	8008048 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <USBD_FS_ProductStrDescriptor+0x34>)
 8008042:	4805      	ldr	r0, [pc, #20]	@ (8008058 <USBD_FS_ProductStrDescriptor+0x38>)
 8008044:	f7ff fdf2 	bl	8007c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008048:	4b02      	ldr	r3, [pc, #8]	@ (8008054 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20001554 	.word	0x20001554
 8008058:	08009708 	.word	0x08009708

0800805c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	4904      	ldr	r1, [pc, #16]	@ (800807c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800806c:	4804      	ldr	r0, [pc, #16]	@ (8008080 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800806e:	f7ff fddd 	bl	8007c2c <USBD_GetString>
  return USBD_StrDesc;
 8008072:	4b02      	ldr	r3, [pc, #8]	@ (800807c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20001554 	.word	0x20001554
 8008080:	08009720 	.word	0x08009720

08008084 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	221a      	movs	r2, #26
 8008094:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008096:	f000 f843 	bl	8008120 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800809a:	4b02      	ldr	r3, [pc, #8]	@ (80080a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200000e0 	.word	0x200000e0

080080a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4907      	ldr	r1, [pc, #28]	@ (80080dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080be:	4808      	ldr	r0, [pc, #32]	@ (80080e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080c0:	f7ff fdb4 	bl	8007c2c <USBD_GetString>
 80080c4:	e004      	b.n	80080d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4904      	ldr	r1, [pc, #16]	@ (80080dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ca:	4805      	ldr	r0, [pc, #20]	@ (80080e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080cc:	f7ff fdae 	bl	8007c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 80080d0:	4b02      	ldr	r3, [pc, #8]	@ (80080dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20001554 	.word	0x20001554
 80080e0:	08009734 	.word	0x08009734

080080e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4907      	ldr	r1, [pc, #28]	@ (8008118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080fa:	4808      	ldr	r0, [pc, #32]	@ (800811c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080fc:	f7ff fd96 	bl	8007c2c <USBD_GetString>
 8008100:	e004      	b.n	800810c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4904      	ldr	r1, [pc, #16]	@ (8008118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008106:	4805      	ldr	r0, [pc, #20]	@ (800811c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008108:	f7ff fd90 	bl	8007c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800810c:	4b02      	ldr	r3, [pc, #8]	@ (8008118 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20001554 	.word	0x20001554
 800811c:	08009740 	.word	0x08009740

08008120 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008126:	4b0f      	ldr	r3, [pc, #60]	@ (8008164 <Get_SerialNum+0x44>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800812c:	4b0e      	ldr	r3, [pc, #56]	@ (8008168 <Get_SerialNum+0x48>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008132:	4b0e      	ldr	r3, [pc, #56]	@ (800816c <Get_SerialNum+0x4c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4413      	add	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008146:	2208      	movs	r2, #8
 8008148:	4909      	ldr	r1, [pc, #36]	@ (8008170 <Get_SerialNum+0x50>)
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f814 	bl	8008178 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008150:	2204      	movs	r2, #4
 8008152:	4908      	ldr	r1, [pc, #32]	@ (8008174 <Get_SerialNum+0x54>)
 8008154:	68b8      	ldr	r0, [r7, #8]
 8008156:	f000 f80f 	bl	8008178 <IntToUnicode>
  }
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	1fff7a10 	.word	0x1fff7a10
 8008168:	1fff7a14 	.word	0x1fff7a14
 800816c:	1fff7a18 	.word	0x1fff7a18
 8008170:	200000e2 	.word	0x200000e2
 8008174:	200000f2 	.word	0x200000f2

08008178 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
 800818e:	e027      	b.n	80081e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	0f1b      	lsrs	r3, r3, #28
 8008194:	2b09      	cmp	r3, #9
 8008196:	d80b      	bhi.n	80081b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	0f1b      	lsrs	r3, r3, #28
 800819c:	b2da      	uxtb	r2, r3
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4619      	mov	r1, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	440b      	add	r3, r1
 80081a8:	3230      	adds	r2, #48	@ 0x30
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	e00a      	b.n	80081c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	0f1b      	lsrs	r3, r3, #28
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	4619      	mov	r1, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	440b      	add	r3, r1
 80081c0:	3237      	adds	r2, #55	@ 0x37
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	3301      	adds	r3, #1
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	3301      	adds	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
 80081e0:	7dfa      	ldrb	r2, [r7, #23]
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d3d3      	bcc.n	8008190 <IntToUnicode+0x18>
  }
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
	...

080081f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	@ 0x28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008200:	f107 0314 	add.w	r3, r7, #20
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	60da      	str	r2, [r3, #12]
 800820e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008218:	d147      	bne.n	80082aa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800821a:	2300      	movs	r3, #0
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	4b25      	ldr	r3, [pc, #148]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008222:	4a24      	ldr	r2, [pc, #144]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	6313      	str	r3, [r2, #48]	@ 0x30
 800822a:	4b22      	ldr	r3, [pc, #136]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008236:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800823a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800823c:	2300      	movs	r3, #0
 800823e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008240:	2300      	movs	r3, #0
 8008242:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	4619      	mov	r1, r3
 800824a:	481b      	ldr	r0, [pc, #108]	@ (80082b8 <HAL_PCD_MspInit+0xc0>)
 800824c:	f7f9 f924 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008250:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008256:	2302      	movs	r3, #2
 8008258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800825a:	2300      	movs	r3, #0
 800825c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800825e:	2300      	movs	r3, #0
 8008260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008262:	230a      	movs	r3, #10
 8008264:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008266:	f107 0314 	add.w	r3, r7, #20
 800826a:	4619      	mov	r1, r3
 800826c:	4812      	ldr	r0, [pc, #72]	@ (80082b8 <HAL_PCD_MspInit+0xc0>)
 800826e:	f7f9 f913 	bl	8001498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008272:	4b10      	ldr	r3, [pc, #64]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 8008274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008276:	4a0f      	ldr	r2, [pc, #60]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 8008278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800827c:	6353      	str	r3, [r2, #52]	@ 0x34
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	4b0c      	ldr	r3, [pc, #48]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 8008284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008286:	4a0b      	ldr	r2, [pc, #44]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 8008288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800828c:	6453      	str	r3, [r2, #68]	@ 0x44
 800828e:	4b09      	ldr	r3, [pc, #36]	@ (80082b4 <HAL_PCD_MspInit+0xbc>)
 8008290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800829a:	2200      	movs	r2, #0
 800829c:	2100      	movs	r1, #0
 800829e:	2043      	movs	r0, #67	@ 0x43
 80082a0:	f7f9 f8c3 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082a4:	2043      	movs	r0, #67	@ 0x43
 80082a6:	f7f9 f8dc 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082aa:	bf00      	nop
 80082ac:	3728      	adds	r7, #40	@ 0x28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	40023800 	.word	0x40023800
 80082b8:	40020000 	.word	0x40020000

080082bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f7fe fb4d 	bl	8006972 <USBD_LL_SetupStage>
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	4613      	mov	r3, r2
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	4619      	mov	r1, r3
 800830a:	f7fe fb87 	bl	8006a1c <USBD_LL_DataOutStage>
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	4613      	mov	r3, r2
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	334c      	adds	r3, #76	@ 0x4c
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	4619      	mov	r1, r3
 800833e:	f7fe fc20 	bl	8006b82 <USBD_LL_DataInStage>
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008358:	4618      	mov	r0, r3
 800835a:	f7fe fd54 	bl	8006e06 <USBD_LL_SOF>
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800836e:	2301      	movs	r3, #1
 8008370:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]
 800837e:	e008      	b.n	8008392 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d102      	bne.n	800838e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
 800838c:	e001      	b.n	8008392 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800838e:	f7f8 fc9f 	bl	8000cd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008398:	7bfa      	ldrb	r2, [r7, #15]
 800839a:	4611      	mov	r1, r2
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe fcf4 	bl	8006d8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fe fc9c 	bl	8006ce6 <USBD_LL_Reset>
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fcef 	bl	8006daa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d005      	beq.n	80083f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083ec:	4b04      	ldr	r3, [pc, #16]	@ (8008400 <HAL_PCD_SuspendCallback+0x48>)
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	4a03      	ldr	r2, [pc, #12]	@ (8008400 <HAL_PCD_SuspendCallback+0x48>)
 80083f2:	f043 0306 	orr.w	r3, r3, #6
 80083f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	e000ed00 	.word	0xe000ed00

08008404 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fcdf 	bl	8006dd6 <USBD_LL_Resume>
}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008432:	78fa      	ldrb	r2, [r7, #3]
 8008434:	4611      	mov	r1, r2
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fd37 	bl	8006eaa <USBD_LL_IsoOUTIncomplete>
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008456:	78fa      	ldrb	r2, [r7, #3]
 8008458:	4611      	mov	r1, r2
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fcf3 	bl	8006e46 <USBD_LL_IsoINIncomplete>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fd49 	bl	8006f0e <USBD_LL_DevConnected>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fd46 	bl	8006f24 <USBD_LL_DevDisconnected>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d13c      	bne.n	800852a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084b0:	4a20      	ldr	r2, [pc, #128]	@ (8008534 <USBD_LL_Init+0x94>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008534 <USBD_LL_Init+0x94>)
 80084bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008534 <USBD_LL_Init+0x94>)
 80084c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008534 <USBD_LL_Init+0x94>)
 80084ca:	2204      	movs	r2, #4
 80084cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084ce:	4b19      	ldr	r3, [pc, #100]	@ (8008534 <USBD_LL_Init+0x94>)
 80084d0:	2202      	movs	r2, #2
 80084d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084d4:	4b17      	ldr	r3, [pc, #92]	@ (8008534 <USBD_LL_Init+0x94>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084da:	4b16      	ldr	r3, [pc, #88]	@ (8008534 <USBD_LL_Init+0x94>)
 80084dc:	2202      	movs	r2, #2
 80084de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084e0:	4b14      	ldr	r3, [pc, #80]	@ (8008534 <USBD_LL_Init+0x94>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084e6:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <USBD_LL_Init+0x94>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <USBD_LL_Init+0x94>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <USBD_LL_Init+0x94>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80084f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008534 <USBD_LL_Init+0x94>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084fe:	480d      	ldr	r0, [pc, #52]	@ (8008534 <USBD_LL_Init+0x94>)
 8008500:	f7f9 ff96 	bl	8002430 <HAL_PCD_Init>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800850a:	f7f8 fbe1 	bl	8000cd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800850e:	2180      	movs	r1, #128	@ 0x80
 8008510:	4808      	ldr	r0, [pc, #32]	@ (8008534 <USBD_LL_Init+0x94>)
 8008512:	f7fb f9ee 	bl	80038f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008516:	2240      	movs	r2, #64	@ 0x40
 8008518:	2100      	movs	r1, #0
 800851a:	4806      	ldr	r0, [pc, #24]	@ (8008534 <USBD_LL_Init+0x94>)
 800851c:	f7fb f9a2 	bl	8003864 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008520:	2280      	movs	r2, #128	@ 0x80
 8008522:	2101      	movs	r1, #1
 8008524:	4803      	ldr	r0, [pc, #12]	@ (8008534 <USBD_LL_Init+0x94>)
 8008526:	f7fb f99d 	bl	8003864 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20001754 	.word	0x20001754

08008538 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800854e:	4618      	mov	r0, r3
 8008550:	f7fa f88b 	bl	800266a <HAL_PCD_Start>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f942 	bl	80087e4 <USBD_Get_USB_Status>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	4608      	mov	r0, r1
 8008578:	4611      	mov	r1, r2
 800857a:	461a      	mov	r2, r3
 800857c:	4603      	mov	r3, r0
 800857e:	70fb      	strb	r3, [r7, #3]
 8008580:	460b      	mov	r3, r1
 8008582:	70bb      	strb	r3, [r7, #2]
 8008584:	4613      	mov	r3, r2
 8008586:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008596:	78bb      	ldrb	r3, [r7, #2]
 8008598:	883a      	ldrh	r2, [r7, #0]
 800859a:	78f9      	ldrb	r1, [r7, #3]
 800859c:	f7fa fd5c 	bl	8003058 <HAL_PCD_EP_Open>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f91c 	bl	80087e4 <USBD_Get_USB_Status>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fa fda5 	bl	8003128 <HAL_PCD_EP_Close>
 80085de:	4603      	mov	r3, r0
 80085e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 f8fd 	bl	80087e4 <USBD_Get_USB_Status>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fa fe7d 	bl	8003316 <HAL_PCD_EP_SetStall>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f8de 	bl	80087e4 <USBD_Get_USB_Status>
 8008628:	4603      	mov	r3, r0
 800862a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800862c:	7bbb      	ldrb	r3, [r7, #14]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f7fa fec2 	bl	80033de <HAL_PCD_EP_ClrStall>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f8bf 	bl	80087e4 <USBD_Get_USB_Status>
 8008666:	4603      	mov	r3, r0
 8008668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800866a:	7bbb      	ldrb	r3, [r7, #14]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008686:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800868c:	2b00      	cmp	r3, #0
 800868e:	da0b      	bge.n	80086a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	4613      	mov	r3, r2
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	440b      	add	r3, r1
 80086a2:	333e      	adds	r3, #62	@ 0x3e
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	e00b      	b.n	80086c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	4613      	mov	r3, r2
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80086be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fa fc8f 	bl	800300e <HAL_PCD_SetAddress>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f874 	bl	80087e4 <USBD_Get_USB_Status>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008700:	7bbb      	ldrb	r3, [r7, #14]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	603b      	str	r3, [r7, #0]
 8008716:	460b      	mov	r3, r1
 8008718:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008728:	7af9      	ldrb	r1, [r7, #11]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	f7fa fda8 	bl	8003282 <HAL_PCD_EP_Transmit>
 8008732:	4603      	mov	r3, r0
 8008734:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f853 	bl	80087e4 <USBD_Get_USB_Status>
 800873e:	4603      	mov	r3, r0
 8008740:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008742:	7dbb      	ldrb	r3, [r7, #22]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	460b      	mov	r3, r1
 800875a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800876a:	7af9      	ldrb	r1, [r7, #11]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	f7fa fd24 	bl	80031bc <HAL_PCD_EP_Receive>
 8008774:	4603      	mov	r3, r0
 8008776:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 f832 	bl	80087e4 <USBD_Get_USB_Status>
 8008780:	4603      	mov	r3, r0
 8008782:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008784:	7dbb      	ldrb	r3, [r7, #22]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087a0:	78fa      	ldrb	r2, [r7, #3]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fa fd54 	bl	8003252 <HAL_PCD_EP_GetRxCount>
 80087aa:	4603      	mov	r3, r0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087bc:	4b03      	ldr	r3, [pc, #12]	@ (80087cc <USBD_static_malloc+0x18>)
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	20001c60 	.word	0x20001c60

080087d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d817      	bhi.n	8008828 <USBD_Get_USB_Status+0x44>
 80087f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008800 <USBD_Get_USB_Status+0x1c>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008811 	.word	0x08008811
 8008804:	08008817 	.word	0x08008817
 8008808:	0800881d 	.word	0x0800881d
 800880c:	08008823 	.word	0x08008823
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
    break;
 8008814:	e00b      	b.n	800882e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008816:	2303      	movs	r3, #3
 8008818:	73fb      	strb	r3, [r7, #15]
    break;
 800881a:	e008      	b.n	800882e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800881c:	2301      	movs	r3, #1
 800881e:	73fb      	strb	r3, [r7, #15]
    break;
 8008820:	e005      	b.n	800882e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008822:	2303      	movs	r3, #3
 8008824:	73fb      	strb	r3, [r7, #15]
    break;
 8008826:	e002      	b.n	800882e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008828:	2303      	movs	r3, #3
 800882a:	73fb      	strb	r3, [r7, #15]
    break;
 800882c:	bf00      	nop
  }
  return usb_status;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <std>:
 800883c:	2300      	movs	r3, #0
 800883e:	b510      	push	{r4, lr}
 8008840:	4604      	mov	r4, r0
 8008842:	e9c0 3300 	strd	r3, r3, [r0]
 8008846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800884a:	6083      	str	r3, [r0, #8]
 800884c:	8181      	strh	r1, [r0, #12]
 800884e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008850:	81c2      	strh	r2, [r0, #14]
 8008852:	6183      	str	r3, [r0, #24]
 8008854:	4619      	mov	r1, r3
 8008856:	2208      	movs	r2, #8
 8008858:	305c      	adds	r0, #92	@ 0x5c
 800885a:	f000 f906 	bl	8008a6a <memset>
 800885e:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <std+0x58>)
 8008860:	6263      	str	r3, [r4, #36]	@ 0x24
 8008862:	4b0d      	ldr	r3, [pc, #52]	@ (8008898 <std+0x5c>)
 8008864:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008866:	4b0d      	ldr	r3, [pc, #52]	@ (800889c <std+0x60>)
 8008868:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800886a:	4b0d      	ldr	r3, [pc, #52]	@ (80088a0 <std+0x64>)
 800886c:	6323      	str	r3, [r4, #48]	@ 0x30
 800886e:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <std+0x68>)
 8008870:	6224      	str	r4, [r4, #32]
 8008872:	429c      	cmp	r4, r3
 8008874:	d006      	beq.n	8008884 <std+0x48>
 8008876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800887a:	4294      	cmp	r4, r2
 800887c:	d002      	beq.n	8008884 <std+0x48>
 800887e:	33d0      	adds	r3, #208	@ 0xd0
 8008880:	429c      	cmp	r4, r3
 8008882:	d105      	bne.n	8008890 <std+0x54>
 8008884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888c:	f000 b966 	b.w	8008b5c <__retarget_lock_init_recursive>
 8008890:	bd10      	pop	{r4, pc}
 8008892:	bf00      	nop
 8008894:	080089e5 	.word	0x080089e5
 8008898:	08008a07 	.word	0x08008a07
 800889c:	08008a3f 	.word	0x08008a3f
 80088a0:	08008a63 	.word	0x08008a63
 80088a4:	20001e80 	.word	0x20001e80

080088a8 <stdio_exit_handler>:
 80088a8:	4a02      	ldr	r2, [pc, #8]	@ (80088b4 <stdio_exit_handler+0xc>)
 80088aa:	4903      	ldr	r1, [pc, #12]	@ (80088b8 <stdio_exit_handler+0x10>)
 80088ac:	4803      	ldr	r0, [pc, #12]	@ (80088bc <stdio_exit_handler+0x14>)
 80088ae:	f000 b869 	b.w	8008984 <_fwalk_sglue>
 80088b2:	bf00      	nop
 80088b4:	200000fc 	.word	0x200000fc
 80088b8:	080093f9 	.word	0x080093f9
 80088bc:	2000010c 	.word	0x2000010c

080088c0 <cleanup_stdio>:
 80088c0:	6841      	ldr	r1, [r0, #4]
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <cleanup_stdio+0x34>)
 80088c4:	4299      	cmp	r1, r3
 80088c6:	b510      	push	{r4, lr}
 80088c8:	4604      	mov	r4, r0
 80088ca:	d001      	beq.n	80088d0 <cleanup_stdio+0x10>
 80088cc:	f000 fd94 	bl	80093f8 <_fflush_r>
 80088d0:	68a1      	ldr	r1, [r4, #8]
 80088d2:	4b09      	ldr	r3, [pc, #36]	@ (80088f8 <cleanup_stdio+0x38>)
 80088d4:	4299      	cmp	r1, r3
 80088d6:	d002      	beq.n	80088de <cleanup_stdio+0x1e>
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 fd8d 	bl	80093f8 <_fflush_r>
 80088de:	68e1      	ldr	r1, [r4, #12]
 80088e0:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <cleanup_stdio+0x3c>)
 80088e2:	4299      	cmp	r1, r3
 80088e4:	d004      	beq.n	80088f0 <cleanup_stdio+0x30>
 80088e6:	4620      	mov	r0, r4
 80088e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ec:	f000 bd84 	b.w	80093f8 <_fflush_r>
 80088f0:	bd10      	pop	{r4, pc}
 80088f2:	bf00      	nop
 80088f4:	20001e80 	.word	0x20001e80
 80088f8:	20001ee8 	.word	0x20001ee8
 80088fc:	20001f50 	.word	0x20001f50

08008900 <global_stdio_init.part.0>:
 8008900:	b510      	push	{r4, lr}
 8008902:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <global_stdio_init.part.0+0x30>)
 8008904:	4c0b      	ldr	r4, [pc, #44]	@ (8008934 <global_stdio_init.part.0+0x34>)
 8008906:	4a0c      	ldr	r2, [pc, #48]	@ (8008938 <global_stdio_init.part.0+0x38>)
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	4620      	mov	r0, r4
 800890c:	2200      	movs	r2, #0
 800890e:	2104      	movs	r1, #4
 8008910:	f7ff ff94 	bl	800883c <std>
 8008914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008918:	2201      	movs	r2, #1
 800891a:	2109      	movs	r1, #9
 800891c:	f7ff ff8e 	bl	800883c <std>
 8008920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008924:	2202      	movs	r2, #2
 8008926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800892a:	2112      	movs	r1, #18
 800892c:	f7ff bf86 	b.w	800883c <std>
 8008930:	20001fb8 	.word	0x20001fb8
 8008934:	20001e80 	.word	0x20001e80
 8008938:	080088a9 	.word	0x080088a9

0800893c <__sfp_lock_acquire>:
 800893c:	4801      	ldr	r0, [pc, #4]	@ (8008944 <__sfp_lock_acquire+0x8>)
 800893e:	f000 b90e 	b.w	8008b5e <__retarget_lock_acquire_recursive>
 8008942:	bf00      	nop
 8008944:	20001fc1 	.word	0x20001fc1

08008948 <__sfp_lock_release>:
 8008948:	4801      	ldr	r0, [pc, #4]	@ (8008950 <__sfp_lock_release+0x8>)
 800894a:	f000 b909 	b.w	8008b60 <__retarget_lock_release_recursive>
 800894e:	bf00      	nop
 8008950:	20001fc1 	.word	0x20001fc1

08008954 <__sinit>:
 8008954:	b510      	push	{r4, lr}
 8008956:	4604      	mov	r4, r0
 8008958:	f7ff fff0 	bl	800893c <__sfp_lock_acquire>
 800895c:	6a23      	ldr	r3, [r4, #32]
 800895e:	b11b      	cbz	r3, 8008968 <__sinit+0x14>
 8008960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008964:	f7ff bff0 	b.w	8008948 <__sfp_lock_release>
 8008968:	4b04      	ldr	r3, [pc, #16]	@ (800897c <__sinit+0x28>)
 800896a:	6223      	str	r3, [r4, #32]
 800896c:	4b04      	ldr	r3, [pc, #16]	@ (8008980 <__sinit+0x2c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1f5      	bne.n	8008960 <__sinit+0xc>
 8008974:	f7ff ffc4 	bl	8008900 <global_stdio_init.part.0>
 8008978:	e7f2      	b.n	8008960 <__sinit+0xc>
 800897a:	bf00      	nop
 800897c:	080088c1 	.word	0x080088c1
 8008980:	20001fb8 	.word	0x20001fb8

08008984 <_fwalk_sglue>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	4607      	mov	r7, r0
 800898a:	4688      	mov	r8, r1
 800898c:	4614      	mov	r4, r2
 800898e:	2600      	movs	r6, #0
 8008990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008994:	f1b9 0901 	subs.w	r9, r9, #1
 8008998:	d505      	bpl.n	80089a6 <_fwalk_sglue+0x22>
 800899a:	6824      	ldr	r4, [r4, #0]
 800899c:	2c00      	cmp	r4, #0
 800899e:	d1f7      	bne.n	8008990 <_fwalk_sglue+0xc>
 80089a0:	4630      	mov	r0, r6
 80089a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a6:	89ab      	ldrh	r3, [r5, #12]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d907      	bls.n	80089bc <_fwalk_sglue+0x38>
 80089ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089b0:	3301      	adds	r3, #1
 80089b2:	d003      	beq.n	80089bc <_fwalk_sglue+0x38>
 80089b4:	4629      	mov	r1, r5
 80089b6:	4638      	mov	r0, r7
 80089b8:	47c0      	blx	r8
 80089ba:	4306      	orrs	r6, r0
 80089bc:	3568      	adds	r5, #104	@ 0x68
 80089be:	e7e9      	b.n	8008994 <_fwalk_sglue+0x10>

080089c0 <iprintf>:
 80089c0:	b40f      	push	{r0, r1, r2, r3}
 80089c2:	b507      	push	{r0, r1, r2, lr}
 80089c4:	4906      	ldr	r1, [pc, #24]	@ (80089e0 <iprintf+0x20>)
 80089c6:	ab04      	add	r3, sp, #16
 80089c8:	6808      	ldr	r0, [r1, #0]
 80089ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ce:	6881      	ldr	r1, [r0, #8]
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	f000 f9e9 	bl	8008da8 <_vfiprintf_r>
 80089d6:	b003      	add	sp, #12
 80089d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089dc:	b004      	add	sp, #16
 80089de:	4770      	bx	lr
 80089e0:	20000108 	.word	0x20000108

080089e4 <__sread>:
 80089e4:	b510      	push	{r4, lr}
 80089e6:	460c      	mov	r4, r1
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	f000 f868 	bl	8008ac0 <_read_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	bfab      	itete	ge
 80089f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089f6:	89a3      	ldrhlt	r3, [r4, #12]
 80089f8:	181b      	addge	r3, r3, r0
 80089fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80089fe:	bfac      	ite	ge
 8008a00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a02:	81a3      	strhlt	r3, [r4, #12]
 8008a04:	bd10      	pop	{r4, pc}

08008a06 <__swrite>:
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	05db      	lsls	r3, r3, #23
 8008a10:	4605      	mov	r5, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	4616      	mov	r6, r2
 8008a16:	d505      	bpl.n	8008a24 <__swrite+0x1e>
 8008a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f000 f83c 	bl	8008a9c <_lseek_r>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	4628      	mov	r0, r5
 8008a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3a:	f000 b853 	b.w	8008ae4 <_write_r>

08008a3e <__sseek>:
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	460c      	mov	r4, r1
 8008a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a46:	f000 f829 	bl	8008a9c <_lseek_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	bf15      	itete	ne
 8008a50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a5a:	81a3      	strheq	r3, [r4, #12]
 8008a5c:	bf18      	it	ne
 8008a5e:	81a3      	strhne	r3, [r4, #12]
 8008a60:	bd10      	pop	{r4, pc}

08008a62 <__sclose>:
 8008a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a66:	f000 b809 	b.w	8008a7c <_close_r>

08008a6a <memset>:
 8008a6a:	4402      	add	r2, r0
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d100      	bne.n	8008a74 <memset+0xa>
 8008a72:	4770      	bx	lr
 8008a74:	f803 1b01 	strb.w	r1, [r3], #1
 8008a78:	e7f9      	b.n	8008a6e <memset+0x4>
	...

08008a7c <_close_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d06      	ldr	r5, [pc, #24]	@ (8008a98 <_close_r+0x1c>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	f7f8 fab7 	bl	8000ffa <_close>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_close_r+0x1a>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_close_r+0x1a>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	20001fbc 	.word	0x20001fbc

08008a9c <_lseek_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	@ (8008abc <_lseek_r+0x20>)
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	602a      	str	r2, [r5, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f7f8 facc 	bl	8001048 <_lseek>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_lseek_r+0x1e>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_lseek_r+0x1e>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20001fbc 	.word	0x20001fbc

08008ac0 <_read_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d07      	ldr	r5, [pc, #28]	@ (8008ae0 <_read_r+0x20>)
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f7f8 fa76 	bl	8000fc0 <_read>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_read_r+0x1e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_read_r+0x1e>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20001fbc 	.word	0x20001fbc

08008ae4 <_write_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	@ (8008b04 <_write_r+0x20>)
 8008ae8:	4604      	mov	r4, r0
 8008aea:	4608      	mov	r0, r1
 8008aec:	4611      	mov	r1, r2
 8008aee:	2200      	movs	r2, #0
 8008af0:	602a      	str	r2, [r5, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f7f7 fd52 	bl	800059c <_write>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_write_r+0x1e>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_write_r+0x1e>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20001fbc 	.word	0x20001fbc

08008b08 <__errno>:
 8008b08:	4b01      	ldr	r3, [pc, #4]	@ (8008b10 <__errno+0x8>)
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20000108 	.word	0x20000108

08008b14 <__libc_init_array>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	4d0d      	ldr	r5, [pc, #52]	@ (8008b4c <__libc_init_array+0x38>)
 8008b18:	4c0d      	ldr	r4, [pc, #52]	@ (8008b50 <__libc_init_array+0x3c>)
 8008b1a:	1b64      	subs	r4, r4, r5
 8008b1c:	10a4      	asrs	r4, r4, #2
 8008b1e:	2600      	movs	r6, #0
 8008b20:	42a6      	cmp	r6, r4
 8008b22:	d109      	bne.n	8008b38 <__libc_init_array+0x24>
 8008b24:	4d0b      	ldr	r5, [pc, #44]	@ (8008b54 <__libc_init_array+0x40>)
 8008b26:	4c0c      	ldr	r4, [pc, #48]	@ (8008b58 <__libc_init_array+0x44>)
 8008b28:	f000 fdb6 	bl	8009698 <_init>
 8008b2c:	1b64      	subs	r4, r4, r5
 8008b2e:	10a4      	asrs	r4, r4, #2
 8008b30:	2600      	movs	r6, #0
 8008b32:	42a6      	cmp	r6, r4
 8008b34:	d105      	bne.n	8008b42 <__libc_init_array+0x2e>
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3c:	4798      	blx	r3
 8008b3e:	3601      	adds	r6, #1
 8008b40:	e7ee      	b.n	8008b20 <__libc_init_array+0xc>
 8008b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b46:	4798      	blx	r3
 8008b48:	3601      	adds	r6, #1
 8008b4a:	e7f2      	b.n	8008b32 <__libc_init_array+0x1e>
 8008b4c:	080097a4 	.word	0x080097a4
 8008b50:	080097a4 	.word	0x080097a4
 8008b54:	080097a4 	.word	0x080097a4
 8008b58:	080097a8 	.word	0x080097a8

08008b5c <__retarget_lock_init_recursive>:
 8008b5c:	4770      	bx	lr

08008b5e <__retarget_lock_acquire_recursive>:
 8008b5e:	4770      	bx	lr

08008b60 <__retarget_lock_release_recursive>:
 8008b60:	4770      	bx	lr
	...

08008b64 <_free_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4605      	mov	r5, r0
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	d041      	beq.n	8008bf0 <_free_r+0x8c>
 8008b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b70:	1f0c      	subs	r4, r1, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bfb8      	it	lt
 8008b76:	18e4      	addlt	r4, r4, r3
 8008b78:	f000 f8e0 	bl	8008d3c <__malloc_lock>
 8008b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf4 <_free_r+0x90>)
 8008b7e:	6813      	ldr	r3, [r2, #0]
 8008b80:	b933      	cbnz	r3, 8008b90 <_free_r+0x2c>
 8008b82:	6063      	str	r3, [r4, #4]
 8008b84:	6014      	str	r4, [r2, #0]
 8008b86:	4628      	mov	r0, r5
 8008b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b8c:	f000 b8dc 	b.w	8008d48 <__malloc_unlock>
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	d908      	bls.n	8008ba6 <_free_r+0x42>
 8008b94:	6820      	ldr	r0, [r4, #0]
 8008b96:	1821      	adds	r1, r4, r0
 8008b98:	428b      	cmp	r3, r1
 8008b9a:	bf01      	itttt	eq
 8008b9c:	6819      	ldreq	r1, [r3, #0]
 8008b9e:	685b      	ldreq	r3, [r3, #4]
 8008ba0:	1809      	addeq	r1, r1, r0
 8008ba2:	6021      	streq	r1, [r4, #0]
 8008ba4:	e7ed      	b.n	8008b82 <_free_r+0x1e>
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	b10b      	cbz	r3, 8008bb0 <_free_r+0x4c>
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	d9fa      	bls.n	8008ba6 <_free_r+0x42>
 8008bb0:	6811      	ldr	r1, [r2, #0]
 8008bb2:	1850      	adds	r0, r2, r1
 8008bb4:	42a0      	cmp	r0, r4
 8008bb6:	d10b      	bne.n	8008bd0 <_free_r+0x6c>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	4401      	add	r1, r0
 8008bbc:	1850      	adds	r0, r2, r1
 8008bbe:	4283      	cmp	r3, r0
 8008bc0:	6011      	str	r1, [r2, #0]
 8008bc2:	d1e0      	bne.n	8008b86 <_free_r+0x22>
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	6053      	str	r3, [r2, #4]
 8008bca:	4408      	add	r0, r1
 8008bcc:	6010      	str	r0, [r2, #0]
 8008bce:	e7da      	b.n	8008b86 <_free_r+0x22>
 8008bd0:	d902      	bls.n	8008bd8 <_free_r+0x74>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	e7d6      	b.n	8008b86 <_free_r+0x22>
 8008bd8:	6820      	ldr	r0, [r4, #0]
 8008bda:	1821      	adds	r1, r4, r0
 8008bdc:	428b      	cmp	r3, r1
 8008bde:	bf04      	itt	eq
 8008be0:	6819      	ldreq	r1, [r3, #0]
 8008be2:	685b      	ldreq	r3, [r3, #4]
 8008be4:	6063      	str	r3, [r4, #4]
 8008be6:	bf04      	itt	eq
 8008be8:	1809      	addeq	r1, r1, r0
 8008bea:	6021      	streq	r1, [r4, #0]
 8008bec:	6054      	str	r4, [r2, #4]
 8008bee:	e7ca      	b.n	8008b86 <_free_r+0x22>
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20001fc8 	.word	0x20001fc8

08008bf8 <sbrk_aligned>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8008c38 <sbrk_aligned+0x40>)
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	6831      	ldr	r1, [r6, #0]
 8008c00:	4605      	mov	r5, r0
 8008c02:	b911      	cbnz	r1, 8008c0a <sbrk_aligned+0x12>
 8008c04:	f000 fcb4 	bl	8009570 <_sbrk_r>
 8008c08:	6030      	str	r0, [r6, #0]
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f000 fcaf 	bl	8009570 <_sbrk_r>
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	d103      	bne.n	8008c1e <sbrk_aligned+0x26>
 8008c16:	f04f 34ff 	mov.w	r4, #4294967295
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
 8008c1e:	1cc4      	adds	r4, r0, #3
 8008c20:	f024 0403 	bic.w	r4, r4, #3
 8008c24:	42a0      	cmp	r0, r4
 8008c26:	d0f8      	beq.n	8008c1a <sbrk_aligned+0x22>
 8008c28:	1a21      	subs	r1, r4, r0
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 fca0 	bl	8009570 <_sbrk_r>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d1f2      	bne.n	8008c1a <sbrk_aligned+0x22>
 8008c34:	e7ef      	b.n	8008c16 <sbrk_aligned+0x1e>
 8008c36:	bf00      	nop
 8008c38:	20001fc4 	.word	0x20001fc4

08008c3c <_malloc_r>:
 8008c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c40:	1ccd      	adds	r5, r1, #3
 8008c42:	f025 0503 	bic.w	r5, r5, #3
 8008c46:	3508      	adds	r5, #8
 8008c48:	2d0c      	cmp	r5, #12
 8008c4a:	bf38      	it	cc
 8008c4c:	250c      	movcc	r5, #12
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	4606      	mov	r6, r0
 8008c52:	db01      	blt.n	8008c58 <_malloc_r+0x1c>
 8008c54:	42a9      	cmp	r1, r5
 8008c56:	d904      	bls.n	8008c62 <_malloc_r+0x26>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	6033      	str	r3, [r6, #0]
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d38 <_malloc_r+0xfc>
 8008c66:	f000 f869 	bl	8008d3c <__malloc_lock>
 8008c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c6e:	461c      	mov	r4, r3
 8008c70:	bb44      	cbnz	r4, 8008cc4 <_malloc_r+0x88>
 8008c72:	4629      	mov	r1, r5
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7ff ffbf 	bl	8008bf8 <sbrk_aligned>
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	d158      	bne.n	8008d32 <_malloc_r+0xf6>
 8008c80:	f8d8 4000 	ldr.w	r4, [r8]
 8008c84:	4627      	mov	r7, r4
 8008c86:	2f00      	cmp	r7, #0
 8008c88:	d143      	bne.n	8008d12 <_malloc_r+0xd6>
 8008c8a:	2c00      	cmp	r4, #0
 8008c8c:	d04b      	beq.n	8008d26 <_malloc_r+0xea>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	4639      	mov	r1, r7
 8008c92:	4630      	mov	r0, r6
 8008c94:	eb04 0903 	add.w	r9, r4, r3
 8008c98:	f000 fc6a 	bl	8009570 <_sbrk_r>
 8008c9c:	4581      	cmp	r9, r0
 8008c9e:	d142      	bne.n	8008d26 <_malloc_r+0xea>
 8008ca0:	6821      	ldr	r1, [r4, #0]
 8008ca2:	1a6d      	subs	r5, r5, r1
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff ffa6 	bl	8008bf8 <sbrk_aligned>
 8008cac:	3001      	adds	r0, #1
 8008cae:	d03a      	beq.n	8008d26 <_malloc_r+0xea>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	442b      	add	r3, r5
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	bb62      	cbnz	r2, 8008d18 <_malloc_r+0xdc>
 8008cbe:	f8c8 7000 	str.w	r7, [r8]
 8008cc2:	e00f      	b.n	8008ce4 <_malloc_r+0xa8>
 8008cc4:	6822      	ldr	r2, [r4, #0]
 8008cc6:	1b52      	subs	r2, r2, r5
 8008cc8:	d420      	bmi.n	8008d0c <_malloc_r+0xd0>
 8008cca:	2a0b      	cmp	r2, #11
 8008ccc:	d917      	bls.n	8008cfe <_malloc_r+0xc2>
 8008cce:	1961      	adds	r1, r4, r5
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	6025      	str	r5, [r4, #0]
 8008cd4:	bf18      	it	ne
 8008cd6:	6059      	strne	r1, [r3, #4]
 8008cd8:	6863      	ldr	r3, [r4, #4]
 8008cda:	bf08      	it	eq
 8008cdc:	f8c8 1000 	streq.w	r1, [r8]
 8008ce0:	5162      	str	r2, [r4, r5]
 8008ce2:	604b      	str	r3, [r1, #4]
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f000 f82f 	bl	8008d48 <__malloc_unlock>
 8008cea:	f104 000b 	add.w	r0, r4, #11
 8008cee:	1d23      	adds	r3, r4, #4
 8008cf0:	f020 0007 	bic.w	r0, r0, #7
 8008cf4:	1ac2      	subs	r2, r0, r3
 8008cf6:	bf1c      	itt	ne
 8008cf8:	1a1b      	subne	r3, r3, r0
 8008cfa:	50a3      	strne	r3, [r4, r2]
 8008cfc:	e7af      	b.n	8008c5e <_malloc_r+0x22>
 8008cfe:	6862      	ldr	r2, [r4, #4]
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	bf0c      	ite	eq
 8008d04:	f8c8 2000 	streq.w	r2, [r8]
 8008d08:	605a      	strne	r2, [r3, #4]
 8008d0a:	e7eb      	b.n	8008ce4 <_malloc_r+0xa8>
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	6864      	ldr	r4, [r4, #4]
 8008d10:	e7ae      	b.n	8008c70 <_malloc_r+0x34>
 8008d12:	463c      	mov	r4, r7
 8008d14:	687f      	ldr	r7, [r7, #4]
 8008d16:	e7b6      	b.n	8008c86 <_malloc_r+0x4a>
 8008d18:	461a      	mov	r2, r3
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	d1fb      	bne.n	8008d18 <_malloc_r+0xdc>
 8008d20:	2300      	movs	r3, #0
 8008d22:	6053      	str	r3, [r2, #4]
 8008d24:	e7de      	b.n	8008ce4 <_malloc_r+0xa8>
 8008d26:	230c      	movs	r3, #12
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 f80c 	bl	8008d48 <__malloc_unlock>
 8008d30:	e794      	b.n	8008c5c <_malloc_r+0x20>
 8008d32:	6005      	str	r5, [r0, #0]
 8008d34:	e7d6      	b.n	8008ce4 <_malloc_r+0xa8>
 8008d36:	bf00      	nop
 8008d38:	20001fc8 	.word	0x20001fc8

08008d3c <__malloc_lock>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	@ (8008d44 <__malloc_lock+0x8>)
 8008d3e:	f7ff bf0e 	b.w	8008b5e <__retarget_lock_acquire_recursive>
 8008d42:	bf00      	nop
 8008d44:	20001fc0 	.word	0x20001fc0

08008d48 <__malloc_unlock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	@ (8008d50 <__malloc_unlock+0x8>)
 8008d4a:	f7ff bf09 	b.w	8008b60 <__retarget_lock_release_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20001fc0 	.word	0x20001fc0

08008d54 <__sfputc_r>:
 8008d54:	6893      	ldr	r3, [r2, #8]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	b410      	push	{r4}
 8008d5c:	6093      	str	r3, [r2, #8]
 8008d5e:	da08      	bge.n	8008d72 <__sfputc_r+0x1e>
 8008d60:	6994      	ldr	r4, [r2, #24]
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	db01      	blt.n	8008d6a <__sfputc_r+0x16>
 8008d66:	290a      	cmp	r1, #10
 8008d68:	d103      	bne.n	8008d72 <__sfputc_r+0x1e>
 8008d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d6e:	f000 bb6b 	b.w	8009448 <__swbuf_r>
 8008d72:	6813      	ldr	r3, [r2, #0]
 8008d74:	1c58      	adds	r0, r3, #1
 8008d76:	6010      	str	r0, [r2, #0]
 8008d78:	7019      	strb	r1, [r3, #0]
 8008d7a:	4608      	mov	r0, r1
 8008d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <__sfputs_r>:
 8008d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	18d5      	adds	r5, r2, r3
 8008d8c:	42ac      	cmp	r4, r5
 8008d8e:	d101      	bne.n	8008d94 <__sfputs_r+0x12>
 8008d90:	2000      	movs	r0, #0
 8008d92:	e007      	b.n	8008da4 <__sfputs_r+0x22>
 8008d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d98:	463a      	mov	r2, r7
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7ff ffda 	bl	8008d54 <__sfputc_r>
 8008da0:	1c43      	adds	r3, r0, #1
 8008da2:	d1f3      	bne.n	8008d8c <__sfputs_r+0xa>
 8008da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008da8 <_vfiprintf_r>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	460d      	mov	r5, r1
 8008dae:	b09d      	sub	sp, #116	@ 0x74
 8008db0:	4614      	mov	r4, r2
 8008db2:	4698      	mov	r8, r3
 8008db4:	4606      	mov	r6, r0
 8008db6:	b118      	cbz	r0, 8008dc0 <_vfiprintf_r+0x18>
 8008db8:	6a03      	ldr	r3, [r0, #32]
 8008dba:	b90b      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x18>
 8008dbc:	f7ff fdca 	bl	8008954 <__sinit>
 8008dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dc2:	07d9      	lsls	r1, r3, #31
 8008dc4:	d405      	bmi.n	8008dd2 <_vfiprintf_r+0x2a>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	059a      	lsls	r2, r3, #22
 8008dca:	d402      	bmi.n	8008dd2 <_vfiprintf_r+0x2a>
 8008dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dce:	f7ff fec6 	bl	8008b5e <__retarget_lock_acquire_recursive>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	071b      	lsls	r3, r3, #28
 8008dd6:	d501      	bpl.n	8008ddc <_vfiprintf_r+0x34>
 8008dd8:	692b      	ldr	r3, [r5, #16]
 8008dda:	b99b      	cbnz	r3, 8008e04 <_vfiprintf_r+0x5c>
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4630      	mov	r0, r6
 8008de0:	f000 fb70 	bl	80094c4 <__swsetup_r>
 8008de4:	b170      	cbz	r0, 8008e04 <_vfiprintf_r+0x5c>
 8008de6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008de8:	07dc      	lsls	r4, r3, #31
 8008dea:	d504      	bpl.n	8008df6 <_vfiprintf_r+0x4e>
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	b01d      	add	sp, #116	@ 0x74
 8008df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	0598      	lsls	r0, r3, #22
 8008dfa:	d4f7      	bmi.n	8008dec <_vfiprintf_r+0x44>
 8008dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dfe:	f7ff feaf 	bl	8008b60 <__retarget_lock_release_recursive>
 8008e02:	e7f3      	b.n	8008dec <_vfiprintf_r+0x44>
 8008e04:	2300      	movs	r3, #0
 8008e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e12:	2330      	movs	r3, #48	@ 0x30
 8008e14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fc4 <_vfiprintf_r+0x21c>
 8008e18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e1c:	f04f 0901 	mov.w	r9, #1
 8008e20:	4623      	mov	r3, r4
 8008e22:	469a      	mov	sl, r3
 8008e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e28:	b10a      	cbz	r2, 8008e2e <_vfiprintf_r+0x86>
 8008e2a:	2a25      	cmp	r2, #37	@ 0x25
 8008e2c:	d1f9      	bne.n	8008e22 <_vfiprintf_r+0x7a>
 8008e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e32:	d00b      	beq.n	8008e4c <_vfiprintf_r+0xa4>
 8008e34:	465b      	mov	r3, fp
 8008e36:	4622      	mov	r2, r4
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7ff ffa1 	bl	8008d82 <__sfputs_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	f000 80a7 	beq.w	8008f94 <_vfiprintf_r+0x1ec>
 8008e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e48:	445a      	add	r2, fp
 8008e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 809f 	beq.w	8008f94 <_vfiprintf_r+0x1ec>
 8008e56:	2300      	movs	r3, #0
 8008e58:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e60:	f10a 0a01 	add.w	sl, sl, #1
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	9307      	str	r3, [sp, #28]
 8008e68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e6e:	4654      	mov	r4, sl
 8008e70:	2205      	movs	r2, #5
 8008e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e76:	4853      	ldr	r0, [pc, #332]	@ (8008fc4 <_vfiprintf_r+0x21c>)
 8008e78:	f7f7 f9aa 	bl	80001d0 <memchr>
 8008e7c:	9a04      	ldr	r2, [sp, #16]
 8008e7e:	b9d8      	cbnz	r0, 8008eb8 <_vfiprintf_r+0x110>
 8008e80:	06d1      	lsls	r1, r2, #27
 8008e82:	bf44      	itt	mi
 8008e84:	2320      	movmi	r3, #32
 8008e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e8a:	0713      	lsls	r3, r2, #28
 8008e8c:	bf44      	itt	mi
 8008e8e:	232b      	movmi	r3, #43	@ 0x2b
 8008e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e94:	f89a 3000 	ldrb.w	r3, [sl]
 8008e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e9a:	d015      	beq.n	8008ec8 <_vfiprintf_r+0x120>
 8008e9c:	9a07      	ldr	r2, [sp, #28]
 8008e9e:	4654      	mov	r4, sl
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	f04f 0c0a 	mov.w	ip, #10
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eac:	3b30      	subs	r3, #48	@ 0x30
 8008eae:	2b09      	cmp	r3, #9
 8008eb0:	d94b      	bls.n	8008f4a <_vfiprintf_r+0x1a2>
 8008eb2:	b1b0      	cbz	r0, 8008ee2 <_vfiprintf_r+0x13a>
 8008eb4:	9207      	str	r2, [sp, #28]
 8008eb6:	e014      	b.n	8008ee2 <_vfiprintf_r+0x13a>
 8008eb8:	eba0 0308 	sub.w	r3, r0, r8
 8008ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	46a2      	mov	sl, r4
 8008ec6:	e7d2      	b.n	8008e6e <_vfiprintf_r+0xc6>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	1d19      	adds	r1, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	9103      	str	r1, [sp, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfbb      	ittet	lt
 8008ed4:	425b      	neglt	r3, r3
 8008ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eda:	9307      	strge	r3, [sp, #28]
 8008edc:	9307      	strlt	r3, [sp, #28]
 8008ede:	bfb8      	it	lt
 8008ee0:	9204      	strlt	r2, [sp, #16]
 8008ee2:	7823      	ldrb	r3, [r4, #0]
 8008ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ee6:	d10a      	bne.n	8008efe <_vfiprintf_r+0x156>
 8008ee8:	7863      	ldrb	r3, [r4, #1]
 8008eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eec:	d132      	bne.n	8008f54 <_vfiprintf_r+0x1ac>
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	1d1a      	adds	r2, r3, #4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	9203      	str	r2, [sp, #12]
 8008ef6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008efa:	3402      	adds	r4, #2
 8008efc:	9305      	str	r3, [sp, #20]
 8008efe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fd4 <_vfiprintf_r+0x22c>
 8008f02:	7821      	ldrb	r1, [r4, #0]
 8008f04:	2203      	movs	r2, #3
 8008f06:	4650      	mov	r0, sl
 8008f08:	f7f7 f962 	bl	80001d0 <memchr>
 8008f0c:	b138      	cbz	r0, 8008f1e <_vfiprintf_r+0x176>
 8008f0e:	9b04      	ldr	r3, [sp, #16]
 8008f10:	eba0 000a 	sub.w	r0, r0, sl
 8008f14:	2240      	movs	r2, #64	@ 0x40
 8008f16:	4082      	lsls	r2, r0
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	3401      	adds	r4, #1
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	4829      	ldr	r0, [pc, #164]	@ (8008fc8 <_vfiprintf_r+0x220>)
 8008f24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f28:	2206      	movs	r2, #6
 8008f2a:	f7f7 f951 	bl	80001d0 <memchr>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d03f      	beq.n	8008fb2 <_vfiprintf_r+0x20a>
 8008f32:	4b26      	ldr	r3, [pc, #152]	@ (8008fcc <_vfiprintf_r+0x224>)
 8008f34:	bb1b      	cbnz	r3, 8008f7e <_vfiprintf_r+0x1d6>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	3307      	adds	r3, #7
 8008f3a:	f023 0307 	bic.w	r3, r3, #7
 8008f3e:	3308      	adds	r3, #8
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f44:	443b      	add	r3, r7
 8008f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f48:	e76a      	b.n	8008e20 <_vfiprintf_r+0x78>
 8008f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f4e:	460c      	mov	r4, r1
 8008f50:	2001      	movs	r0, #1
 8008f52:	e7a8      	b.n	8008ea6 <_vfiprintf_r+0xfe>
 8008f54:	2300      	movs	r3, #0
 8008f56:	3401      	adds	r4, #1
 8008f58:	9305      	str	r3, [sp, #20]
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	f04f 0c0a 	mov.w	ip, #10
 8008f60:	4620      	mov	r0, r4
 8008f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f66:	3a30      	subs	r2, #48	@ 0x30
 8008f68:	2a09      	cmp	r2, #9
 8008f6a:	d903      	bls.n	8008f74 <_vfiprintf_r+0x1cc>
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0c6      	beq.n	8008efe <_vfiprintf_r+0x156>
 8008f70:	9105      	str	r1, [sp, #20]
 8008f72:	e7c4      	b.n	8008efe <_vfiprintf_r+0x156>
 8008f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f78:	4604      	mov	r4, r0
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e7f0      	b.n	8008f60 <_vfiprintf_r+0x1b8>
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4b12      	ldr	r3, [pc, #72]	@ (8008fd0 <_vfiprintf_r+0x228>)
 8008f86:	a904      	add	r1, sp, #16
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f3af 8000 	nop.w
 8008f8e:	4607      	mov	r7, r0
 8008f90:	1c78      	adds	r0, r7, #1
 8008f92:	d1d6      	bne.n	8008f42 <_vfiprintf_r+0x19a>
 8008f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d405      	bmi.n	8008fa6 <_vfiprintf_r+0x1fe>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	059a      	lsls	r2, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_vfiprintf_r+0x1fe>
 8008fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fa2:	f7ff fddd 	bl	8008b60 <__retarget_lock_release_recursive>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	065b      	lsls	r3, r3, #25
 8008faa:	f53f af1f 	bmi.w	8008dec <_vfiprintf_r+0x44>
 8008fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fb0:	e71e      	b.n	8008df0 <_vfiprintf_r+0x48>
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <_vfiprintf_r+0x228>)
 8008fba:	a904      	add	r1, sp, #16
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f000 f879 	bl	80090b4 <_printf_i>
 8008fc2:	e7e4      	b.n	8008f8e <_vfiprintf_r+0x1e6>
 8008fc4:	08009768 	.word	0x08009768
 8008fc8:	08009772 	.word	0x08009772
 8008fcc:	00000000 	.word	0x00000000
 8008fd0:	08008d83 	.word	0x08008d83
 8008fd4:	0800976e 	.word	0x0800976e

08008fd8 <_printf_common>:
 8008fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	4616      	mov	r6, r2
 8008fde:	4698      	mov	r8, r3
 8008fe0:	688a      	ldr	r2, [r1, #8]
 8008fe2:	690b      	ldr	r3, [r1, #16]
 8008fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	bfb8      	it	lt
 8008fec:	4613      	movlt	r3, r2
 8008fee:	6033      	str	r3, [r6, #0]
 8008ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	b10a      	cbz	r2, 8008ffe <_printf_common+0x26>
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	6033      	str	r3, [r6, #0]
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	0699      	lsls	r1, r3, #26
 8009002:	bf42      	ittt	mi
 8009004:	6833      	ldrmi	r3, [r6, #0]
 8009006:	3302      	addmi	r3, #2
 8009008:	6033      	strmi	r3, [r6, #0]
 800900a:	6825      	ldr	r5, [r4, #0]
 800900c:	f015 0506 	ands.w	r5, r5, #6
 8009010:	d106      	bne.n	8009020 <_printf_common+0x48>
 8009012:	f104 0a19 	add.w	sl, r4, #25
 8009016:	68e3      	ldr	r3, [r4, #12]
 8009018:	6832      	ldr	r2, [r6, #0]
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	42ab      	cmp	r3, r5
 800901e:	dc26      	bgt.n	800906e <_printf_common+0x96>
 8009020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009024:	6822      	ldr	r2, [r4, #0]
 8009026:	3b00      	subs	r3, #0
 8009028:	bf18      	it	ne
 800902a:	2301      	movne	r3, #1
 800902c:	0692      	lsls	r2, r2, #26
 800902e:	d42b      	bmi.n	8009088 <_printf_common+0xb0>
 8009030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009034:	4641      	mov	r1, r8
 8009036:	4638      	mov	r0, r7
 8009038:	47c8      	blx	r9
 800903a:	3001      	adds	r0, #1
 800903c:	d01e      	beq.n	800907c <_printf_common+0xa4>
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	6922      	ldr	r2, [r4, #16]
 8009042:	f003 0306 	and.w	r3, r3, #6
 8009046:	2b04      	cmp	r3, #4
 8009048:	bf02      	ittt	eq
 800904a:	68e5      	ldreq	r5, [r4, #12]
 800904c:	6833      	ldreq	r3, [r6, #0]
 800904e:	1aed      	subeq	r5, r5, r3
 8009050:	68a3      	ldr	r3, [r4, #8]
 8009052:	bf0c      	ite	eq
 8009054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009058:	2500      	movne	r5, #0
 800905a:	4293      	cmp	r3, r2
 800905c:	bfc4      	itt	gt
 800905e:	1a9b      	subgt	r3, r3, r2
 8009060:	18ed      	addgt	r5, r5, r3
 8009062:	2600      	movs	r6, #0
 8009064:	341a      	adds	r4, #26
 8009066:	42b5      	cmp	r5, r6
 8009068:	d11a      	bne.n	80090a0 <_printf_common+0xc8>
 800906a:	2000      	movs	r0, #0
 800906c:	e008      	b.n	8009080 <_printf_common+0xa8>
 800906e:	2301      	movs	r3, #1
 8009070:	4652      	mov	r2, sl
 8009072:	4641      	mov	r1, r8
 8009074:	4638      	mov	r0, r7
 8009076:	47c8      	blx	r9
 8009078:	3001      	adds	r0, #1
 800907a:	d103      	bne.n	8009084 <_printf_common+0xac>
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009084:	3501      	adds	r5, #1
 8009086:	e7c6      	b.n	8009016 <_printf_common+0x3e>
 8009088:	18e1      	adds	r1, r4, r3
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	2030      	movs	r0, #48	@ 0x30
 800908e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009092:	4422      	add	r2, r4
 8009094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800909c:	3302      	adds	r3, #2
 800909e:	e7c7      	b.n	8009030 <_printf_common+0x58>
 80090a0:	2301      	movs	r3, #1
 80090a2:	4622      	mov	r2, r4
 80090a4:	4641      	mov	r1, r8
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c8      	blx	r9
 80090aa:	3001      	adds	r0, #1
 80090ac:	d0e6      	beq.n	800907c <_printf_common+0xa4>
 80090ae:	3601      	adds	r6, #1
 80090b0:	e7d9      	b.n	8009066 <_printf_common+0x8e>
	...

080090b4 <_printf_i>:
 80090b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090b8:	7e0f      	ldrb	r7, [r1, #24]
 80090ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090bc:	2f78      	cmp	r7, #120	@ 0x78
 80090be:	4691      	mov	r9, r2
 80090c0:	4680      	mov	r8, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	469a      	mov	sl, r3
 80090c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090ca:	d807      	bhi.n	80090dc <_printf_i+0x28>
 80090cc:	2f62      	cmp	r7, #98	@ 0x62
 80090ce:	d80a      	bhi.n	80090e6 <_printf_i+0x32>
 80090d0:	2f00      	cmp	r7, #0
 80090d2:	f000 80d1 	beq.w	8009278 <_printf_i+0x1c4>
 80090d6:	2f58      	cmp	r7, #88	@ 0x58
 80090d8:	f000 80b8 	beq.w	800924c <_printf_i+0x198>
 80090dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090e4:	e03a      	b.n	800915c <_printf_i+0xa8>
 80090e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090ea:	2b15      	cmp	r3, #21
 80090ec:	d8f6      	bhi.n	80090dc <_printf_i+0x28>
 80090ee:	a101      	add	r1, pc, #4	@ (adr r1, 80090f4 <_printf_i+0x40>)
 80090f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090f4:	0800914d 	.word	0x0800914d
 80090f8:	08009161 	.word	0x08009161
 80090fc:	080090dd 	.word	0x080090dd
 8009100:	080090dd 	.word	0x080090dd
 8009104:	080090dd 	.word	0x080090dd
 8009108:	080090dd 	.word	0x080090dd
 800910c:	08009161 	.word	0x08009161
 8009110:	080090dd 	.word	0x080090dd
 8009114:	080090dd 	.word	0x080090dd
 8009118:	080090dd 	.word	0x080090dd
 800911c:	080090dd 	.word	0x080090dd
 8009120:	0800925f 	.word	0x0800925f
 8009124:	0800918b 	.word	0x0800918b
 8009128:	08009219 	.word	0x08009219
 800912c:	080090dd 	.word	0x080090dd
 8009130:	080090dd 	.word	0x080090dd
 8009134:	08009281 	.word	0x08009281
 8009138:	080090dd 	.word	0x080090dd
 800913c:	0800918b 	.word	0x0800918b
 8009140:	080090dd 	.word	0x080090dd
 8009144:	080090dd 	.word	0x080090dd
 8009148:	08009221 	.word	0x08009221
 800914c:	6833      	ldr	r3, [r6, #0]
 800914e:	1d1a      	adds	r2, r3, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6032      	str	r2, [r6, #0]
 8009154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800915c:	2301      	movs	r3, #1
 800915e:	e09c      	b.n	800929a <_printf_i+0x1e6>
 8009160:	6833      	ldr	r3, [r6, #0]
 8009162:	6820      	ldr	r0, [r4, #0]
 8009164:	1d19      	adds	r1, r3, #4
 8009166:	6031      	str	r1, [r6, #0]
 8009168:	0606      	lsls	r6, r0, #24
 800916a:	d501      	bpl.n	8009170 <_printf_i+0xbc>
 800916c:	681d      	ldr	r5, [r3, #0]
 800916e:	e003      	b.n	8009178 <_printf_i+0xc4>
 8009170:	0645      	lsls	r5, r0, #25
 8009172:	d5fb      	bpl.n	800916c <_printf_i+0xb8>
 8009174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009178:	2d00      	cmp	r5, #0
 800917a:	da03      	bge.n	8009184 <_printf_i+0xd0>
 800917c:	232d      	movs	r3, #45	@ 0x2d
 800917e:	426d      	negs	r5, r5
 8009180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009184:	4858      	ldr	r0, [pc, #352]	@ (80092e8 <_printf_i+0x234>)
 8009186:	230a      	movs	r3, #10
 8009188:	e011      	b.n	80091ae <_printf_i+0xfa>
 800918a:	6821      	ldr	r1, [r4, #0]
 800918c:	6833      	ldr	r3, [r6, #0]
 800918e:	0608      	lsls	r0, r1, #24
 8009190:	f853 5b04 	ldr.w	r5, [r3], #4
 8009194:	d402      	bmi.n	800919c <_printf_i+0xe8>
 8009196:	0649      	lsls	r1, r1, #25
 8009198:	bf48      	it	mi
 800919a:	b2ad      	uxthmi	r5, r5
 800919c:	2f6f      	cmp	r7, #111	@ 0x6f
 800919e:	4852      	ldr	r0, [pc, #328]	@ (80092e8 <_printf_i+0x234>)
 80091a0:	6033      	str	r3, [r6, #0]
 80091a2:	bf14      	ite	ne
 80091a4:	230a      	movne	r3, #10
 80091a6:	2308      	moveq	r3, #8
 80091a8:	2100      	movs	r1, #0
 80091aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091ae:	6866      	ldr	r6, [r4, #4]
 80091b0:	60a6      	str	r6, [r4, #8]
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	db05      	blt.n	80091c2 <_printf_i+0x10e>
 80091b6:	6821      	ldr	r1, [r4, #0]
 80091b8:	432e      	orrs	r6, r5
 80091ba:	f021 0104 	bic.w	r1, r1, #4
 80091be:	6021      	str	r1, [r4, #0]
 80091c0:	d04b      	beq.n	800925a <_printf_i+0x1a6>
 80091c2:	4616      	mov	r6, r2
 80091c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80091c8:	fb03 5711 	mls	r7, r3, r1, r5
 80091cc:	5dc7      	ldrb	r7, [r0, r7]
 80091ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091d2:	462f      	mov	r7, r5
 80091d4:	42bb      	cmp	r3, r7
 80091d6:	460d      	mov	r5, r1
 80091d8:	d9f4      	bls.n	80091c4 <_printf_i+0x110>
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d10b      	bne.n	80091f6 <_printf_i+0x142>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	07df      	lsls	r7, r3, #31
 80091e2:	d508      	bpl.n	80091f6 <_printf_i+0x142>
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	6861      	ldr	r1, [r4, #4]
 80091e8:	4299      	cmp	r1, r3
 80091ea:	bfde      	ittt	le
 80091ec:	2330      	movle	r3, #48	@ 0x30
 80091ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091f6:	1b92      	subs	r2, r2, r6
 80091f8:	6122      	str	r2, [r4, #16]
 80091fa:	f8cd a000 	str.w	sl, [sp]
 80091fe:	464b      	mov	r3, r9
 8009200:	aa03      	add	r2, sp, #12
 8009202:	4621      	mov	r1, r4
 8009204:	4640      	mov	r0, r8
 8009206:	f7ff fee7 	bl	8008fd8 <_printf_common>
 800920a:	3001      	adds	r0, #1
 800920c:	d14a      	bne.n	80092a4 <_printf_i+0x1f0>
 800920e:	f04f 30ff 	mov.w	r0, #4294967295
 8009212:	b004      	add	sp, #16
 8009214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	f043 0320 	orr.w	r3, r3, #32
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	4832      	ldr	r0, [pc, #200]	@ (80092ec <_printf_i+0x238>)
 8009222:	2778      	movs	r7, #120	@ 0x78
 8009224:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	6831      	ldr	r1, [r6, #0]
 800922c:	061f      	lsls	r7, r3, #24
 800922e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009232:	d402      	bmi.n	800923a <_printf_i+0x186>
 8009234:	065f      	lsls	r7, r3, #25
 8009236:	bf48      	it	mi
 8009238:	b2ad      	uxthmi	r5, r5
 800923a:	6031      	str	r1, [r6, #0]
 800923c:	07d9      	lsls	r1, r3, #31
 800923e:	bf44      	itt	mi
 8009240:	f043 0320 	orrmi.w	r3, r3, #32
 8009244:	6023      	strmi	r3, [r4, #0]
 8009246:	b11d      	cbz	r5, 8009250 <_printf_i+0x19c>
 8009248:	2310      	movs	r3, #16
 800924a:	e7ad      	b.n	80091a8 <_printf_i+0xf4>
 800924c:	4826      	ldr	r0, [pc, #152]	@ (80092e8 <_printf_i+0x234>)
 800924e:	e7e9      	b.n	8009224 <_printf_i+0x170>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	f023 0320 	bic.w	r3, r3, #32
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	e7f6      	b.n	8009248 <_printf_i+0x194>
 800925a:	4616      	mov	r6, r2
 800925c:	e7bd      	b.n	80091da <_printf_i+0x126>
 800925e:	6833      	ldr	r3, [r6, #0]
 8009260:	6825      	ldr	r5, [r4, #0]
 8009262:	6961      	ldr	r1, [r4, #20]
 8009264:	1d18      	adds	r0, r3, #4
 8009266:	6030      	str	r0, [r6, #0]
 8009268:	062e      	lsls	r6, r5, #24
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	d501      	bpl.n	8009272 <_printf_i+0x1be>
 800926e:	6019      	str	r1, [r3, #0]
 8009270:	e002      	b.n	8009278 <_printf_i+0x1c4>
 8009272:	0668      	lsls	r0, r5, #25
 8009274:	d5fb      	bpl.n	800926e <_printf_i+0x1ba>
 8009276:	8019      	strh	r1, [r3, #0]
 8009278:	2300      	movs	r3, #0
 800927a:	6123      	str	r3, [r4, #16]
 800927c:	4616      	mov	r6, r2
 800927e:	e7bc      	b.n	80091fa <_printf_i+0x146>
 8009280:	6833      	ldr	r3, [r6, #0]
 8009282:	1d1a      	adds	r2, r3, #4
 8009284:	6032      	str	r2, [r6, #0]
 8009286:	681e      	ldr	r6, [r3, #0]
 8009288:	6862      	ldr	r2, [r4, #4]
 800928a:	2100      	movs	r1, #0
 800928c:	4630      	mov	r0, r6
 800928e:	f7f6 ff9f 	bl	80001d0 <memchr>
 8009292:	b108      	cbz	r0, 8009298 <_printf_i+0x1e4>
 8009294:	1b80      	subs	r0, r0, r6
 8009296:	6060      	str	r0, [r4, #4]
 8009298:	6863      	ldr	r3, [r4, #4]
 800929a:	6123      	str	r3, [r4, #16]
 800929c:	2300      	movs	r3, #0
 800929e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092a2:	e7aa      	b.n	80091fa <_printf_i+0x146>
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	4632      	mov	r2, r6
 80092a8:	4649      	mov	r1, r9
 80092aa:	4640      	mov	r0, r8
 80092ac:	47d0      	blx	sl
 80092ae:	3001      	adds	r0, #1
 80092b0:	d0ad      	beq.n	800920e <_printf_i+0x15a>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	079b      	lsls	r3, r3, #30
 80092b6:	d413      	bmi.n	80092e0 <_printf_i+0x22c>
 80092b8:	68e0      	ldr	r0, [r4, #12]
 80092ba:	9b03      	ldr	r3, [sp, #12]
 80092bc:	4298      	cmp	r0, r3
 80092be:	bfb8      	it	lt
 80092c0:	4618      	movlt	r0, r3
 80092c2:	e7a6      	b.n	8009212 <_printf_i+0x15e>
 80092c4:	2301      	movs	r3, #1
 80092c6:	4632      	mov	r2, r6
 80092c8:	4649      	mov	r1, r9
 80092ca:	4640      	mov	r0, r8
 80092cc:	47d0      	blx	sl
 80092ce:	3001      	adds	r0, #1
 80092d0:	d09d      	beq.n	800920e <_printf_i+0x15a>
 80092d2:	3501      	adds	r5, #1
 80092d4:	68e3      	ldr	r3, [r4, #12]
 80092d6:	9903      	ldr	r1, [sp, #12]
 80092d8:	1a5b      	subs	r3, r3, r1
 80092da:	42ab      	cmp	r3, r5
 80092dc:	dcf2      	bgt.n	80092c4 <_printf_i+0x210>
 80092de:	e7eb      	b.n	80092b8 <_printf_i+0x204>
 80092e0:	2500      	movs	r5, #0
 80092e2:	f104 0619 	add.w	r6, r4, #25
 80092e6:	e7f5      	b.n	80092d4 <_printf_i+0x220>
 80092e8:	08009779 	.word	0x08009779
 80092ec:	0800978a 	.word	0x0800978a

080092f0 <__sflush_r>:
 80092f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	0716      	lsls	r6, r2, #28
 80092fa:	4605      	mov	r5, r0
 80092fc:	460c      	mov	r4, r1
 80092fe:	d454      	bmi.n	80093aa <__sflush_r+0xba>
 8009300:	684b      	ldr	r3, [r1, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	dc02      	bgt.n	800930c <__sflush_r+0x1c>
 8009306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	dd48      	ble.n	800939e <__sflush_r+0xae>
 800930c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800930e:	2e00      	cmp	r6, #0
 8009310:	d045      	beq.n	800939e <__sflush_r+0xae>
 8009312:	2300      	movs	r3, #0
 8009314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009318:	682f      	ldr	r7, [r5, #0]
 800931a:	6a21      	ldr	r1, [r4, #32]
 800931c:	602b      	str	r3, [r5, #0]
 800931e:	d030      	beq.n	8009382 <__sflush_r+0x92>
 8009320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	0759      	lsls	r1, r3, #29
 8009326:	d505      	bpl.n	8009334 <__sflush_r+0x44>
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	1ad2      	subs	r2, r2, r3
 800932c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800932e:	b10b      	cbz	r3, 8009334 <__sflush_r+0x44>
 8009330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	2300      	movs	r3, #0
 8009336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009338:	6a21      	ldr	r1, [r4, #32]
 800933a:	4628      	mov	r0, r5
 800933c:	47b0      	blx	r6
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	d106      	bne.n	8009352 <__sflush_r+0x62>
 8009344:	6829      	ldr	r1, [r5, #0]
 8009346:	291d      	cmp	r1, #29
 8009348:	d82b      	bhi.n	80093a2 <__sflush_r+0xb2>
 800934a:	4a2a      	ldr	r2, [pc, #168]	@ (80093f4 <__sflush_r+0x104>)
 800934c:	40ca      	lsrs	r2, r1
 800934e:	07d6      	lsls	r6, r2, #31
 8009350:	d527      	bpl.n	80093a2 <__sflush_r+0xb2>
 8009352:	2200      	movs	r2, #0
 8009354:	6062      	str	r2, [r4, #4]
 8009356:	04d9      	lsls	r1, r3, #19
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	6022      	str	r2, [r4, #0]
 800935c:	d504      	bpl.n	8009368 <__sflush_r+0x78>
 800935e:	1c42      	adds	r2, r0, #1
 8009360:	d101      	bne.n	8009366 <__sflush_r+0x76>
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	b903      	cbnz	r3, 8009368 <__sflush_r+0x78>
 8009366:	6560      	str	r0, [r4, #84]	@ 0x54
 8009368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800936a:	602f      	str	r7, [r5, #0]
 800936c:	b1b9      	cbz	r1, 800939e <__sflush_r+0xae>
 800936e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009372:	4299      	cmp	r1, r3
 8009374:	d002      	beq.n	800937c <__sflush_r+0x8c>
 8009376:	4628      	mov	r0, r5
 8009378:	f7ff fbf4 	bl	8008b64 <_free_r>
 800937c:	2300      	movs	r3, #0
 800937e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009380:	e00d      	b.n	800939e <__sflush_r+0xae>
 8009382:	2301      	movs	r3, #1
 8009384:	4628      	mov	r0, r5
 8009386:	47b0      	blx	r6
 8009388:	4602      	mov	r2, r0
 800938a:	1c50      	adds	r0, r2, #1
 800938c:	d1c9      	bne.n	8009322 <__sflush_r+0x32>
 800938e:	682b      	ldr	r3, [r5, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0c6      	beq.n	8009322 <__sflush_r+0x32>
 8009394:	2b1d      	cmp	r3, #29
 8009396:	d001      	beq.n	800939c <__sflush_r+0xac>
 8009398:	2b16      	cmp	r3, #22
 800939a:	d11e      	bne.n	80093da <__sflush_r+0xea>
 800939c:	602f      	str	r7, [r5, #0]
 800939e:	2000      	movs	r0, #0
 80093a0:	e022      	b.n	80093e8 <__sflush_r+0xf8>
 80093a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093a6:	b21b      	sxth	r3, r3
 80093a8:	e01b      	b.n	80093e2 <__sflush_r+0xf2>
 80093aa:	690f      	ldr	r7, [r1, #16]
 80093ac:	2f00      	cmp	r7, #0
 80093ae:	d0f6      	beq.n	800939e <__sflush_r+0xae>
 80093b0:	0793      	lsls	r3, r2, #30
 80093b2:	680e      	ldr	r6, [r1, #0]
 80093b4:	bf08      	it	eq
 80093b6:	694b      	ldreq	r3, [r1, #20]
 80093b8:	600f      	str	r7, [r1, #0]
 80093ba:	bf18      	it	ne
 80093bc:	2300      	movne	r3, #0
 80093be:	eba6 0807 	sub.w	r8, r6, r7
 80093c2:	608b      	str	r3, [r1, #8]
 80093c4:	f1b8 0f00 	cmp.w	r8, #0
 80093c8:	dde9      	ble.n	800939e <__sflush_r+0xae>
 80093ca:	6a21      	ldr	r1, [r4, #32]
 80093cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093ce:	4643      	mov	r3, r8
 80093d0:	463a      	mov	r2, r7
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b0      	blx	r6
 80093d6:	2800      	cmp	r0, #0
 80093d8:	dc08      	bgt.n	80093ec <__sflush_r+0xfc>
 80093da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e2:	81a3      	strh	r3, [r4, #12]
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ec:	4407      	add	r7, r0
 80093ee:	eba8 0800 	sub.w	r8, r8, r0
 80093f2:	e7e7      	b.n	80093c4 <__sflush_r+0xd4>
 80093f4:	20400001 	.word	0x20400001

080093f8 <_fflush_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	690b      	ldr	r3, [r1, #16]
 80093fc:	4605      	mov	r5, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	b913      	cbnz	r3, 8009408 <_fflush_r+0x10>
 8009402:	2500      	movs	r5, #0
 8009404:	4628      	mov	r0, r5
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	b118      	cbz	r0, 8009412 <_fflush_r+0x1a>
 800940a:	6a03      	ldr	r3, [r0, #32]
 800940c:	b90b      	cbnz	r3, 8009412 <_fflush_r+0x1a>
 800940e:	f7ff faa1 	bl	8008954 <__sinit>
 8009412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0f3      	beq.n	8009402 <_fflush_r+0xa>
 800941a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800941c:	07d0      	lsls	r0, r2, #31
 800941e:	d404      	bmi.n	800942a <_fflush_r+0x32>
 8009420:	0599      	lsls	r1, r3, #22
 8009422:	d402      	bmi.n	800942a <_fflush_r+0x32>
 8009424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009426:	f7ff fb9a 	bl	8008b5e <__retarget_lock_acquire_recursive>
 800942a:	4628      	mov	r0, r5
 800942c:	4621      	mov	r1, r4
 800942e:	f7ff ff5f 	bl	80092f0 <__sflush_r>
 8009432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009434:	07da      	lsls	r2, r3, #31
 8009436:	4605      	mov	r5, r0
 8009438:	d4e4      	bmi.n	8009404 <_fflush_r+0xc>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	059b      	lsls	r3, r3, #22
 800943e:	d4e1      	bmi.n	8009404 <_fflush_r+0xc>
 8009440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009442:	f7ff fb8d 	bl	8008b60 <__retarget_lock_release_recursive>
 8009446:	e7dd      	b.n	8009404 <_fflush_r+0xc>

08009448 <__swbuf_r>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	460e      	mov	r6, r1
 800944c:	4614      	mov	r4, r2
 800944e:	4605      	mov	r5, r0
 8009450:	b118      	cbz	r0, 800945a <__swbuf_r+0x12>
 8009452:	6a03      	ldr	r3, [r0, #32]
 8009454:	b90b      	cbnz	r3, 800945a <__swbuf_r+0x12>
 8009456:	f7ff fa7d 	bl	8008954 <__sinit>
 800945a:	69a3      	ldr	r3, [r4, #24]
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	071a      	lsls	r2, r3, #28
 8009462:	d501      	bpl.n	8009468 <__swbuf_r+0x20>
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	b943      	cbnz	r3, 800947a <__swbuf_r+0x32>
 8009468:	4621      	mov	r1, r4
 800946a:	4628      	mov	r0, r5
 800946c:	f000 f82a 	bl	80094c4 <__swsetup_r>
 8009470:	b118      	cbz	r0, 800947a <__swbuf_r+0x32>
 8009472:	f04f 37ff 	mov.w	r7, #4294967295
 8009476:	4638      	mov	r0, r7
 8009478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	6922      	ldr	r2, [r4, #16]
 800947e:	1a98      	subs	r0, r3, r2
 8009480:	6963      	ldr	r3, [r4, #20]
 8009482:	b2f6      	uxtb	r6, r6
 8009484:	4283      	cmp	r3, r0
 8009486:	4637      	mov	r7, r6
 8009488:	dc05      	bgt.n	8009496 <__swbuf_r+0x4e>
 800948a:	4621      	mov	r1, r4
 800948c:	4628      	mov	r0, r5
 800948e:	f7ff ffb3 	bl	80093f8 <_fflush_r>
 8009492:	2800      	cmp	r0, #0
 8009494:	d1ed      	bne.n	8009472 <__swbuf_r+0x2a>
 8009496:	68a3      	ldr	r3, [r4, #8]
 8009498:	3b01      	subs	r3, #1
 800949a:	60a3      	str	r3, [r4, #8]
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	1c5a      	adds	r2, r3, #1
 80094a0:	6022      	str	r2, [r4, #0]
 80094a2:	701e      	strb	r6, [r3, #0]
 80094a4:	6962      	ldr	r2, [r4, #20]
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d004      	beq.n	80094b6 <__swbuf_r+0x6e>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	07db      	lsls	r3, r3, #31
 80094b0:	d5e1      	bpl.n	8009476 <__swbuf_r+0x2e>
 80094b2:	2e0a      	cmp	r6, #10
 80094b4:	d1df      	bne.n	8009476 <__swbuf_r+0x2e>
 80094b6:	4621      	mov	r1, r4
 80094b8:	4628      	mov	r0, r5
 80094ba:	f7ff ff9d 	bl	80093f8 <_fflush_r>
 80094be:	2800      	cmp	r0, #0
 80094c0:	d0d9      	beq.n	8009476 <__swbuf_r+0x2e>
 80094c2:	e7d6      	b.n	8009472 <__swbuf_r+0x2a>

080094c4 <__swsetup_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4b29      	ldr	r3, [pc, #164]	@ (800956c <__swsetup_r+0xa8>)
 80094c8:	4605      	mov	r5, r0
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	460c      	mov	r4, r1
 80094ce:	b118      	cbz	r0, 80094d8 <__swsetup_r+0x14>
 80094d0:	6a03      	ldr	r3, [r0, #32]
 80094d2:	b90b      	cbnz	r3, 80094d8 <__swsetup_r+0x14>
 80094d4:	f7ff fa3e 	bl	8008954 <__sinit>
 80094d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094dc:	0719      	lsls	r1, r3, #28
 80094de:	d422      	bmi.n	8009526 <__swsetup_r+0x62>
 80094e0:	06da      	lsls	r2, r3, #27
 80094e2:	d407      	bmi.n	80094f4 <__swsetup_r+0x30>
 80094e4:	2209      	movs	r2, #9
 80094e6:	602a      	str	r2, [r5, #0]
 80094e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	f04f 30ff 	mov.w	r0, #4294967295
 80094f2:	e033      	b.n	800955c <__swsetup_r+0x98>
 80094f4:	0758      	lsls	r0, r3, #29
 80094f6:	d512      	bpl.n	800951e <__swsetup_r+0x5a>
 80094f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094fa:	b141      	cbz	r1, 800950e <__swsetup_r+0x4a>
 80094fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009500:	4299      	cmp	r1, r3
 8009502:	d002      	beq.n	800950a <__swsetup_r+0x46>
 8009504:	4628      	mov	r0, r5
 8009506:	f7ff fb2d 	bl	8008b64 <_free_r>
 800950a:	2300      	movs	r3, #0
 800950c:	6363      	str	r3, [r4, #52]	@ 0x34
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	2300      	movs	r3, #0
 8009518:	6063      	str	r3, [r4, #4]
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	f043 0308 	orr.w	r3, r3, #8
 8009524:	81a3      	strh	r3, [r4, #12]
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	b94b      	cbnz	r3, 800953e <__swsetup_r+0x7a>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009534:	d003      	beq.n	800953e <__swsetup_r+0x7a>
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f000 f84f 	bl	80095dc <__smakebuf_r>
 800953e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009542:	f013 0201 	ands.w	r2, r3, #1
 8009546:	d00a      	beq.n	800955e <__swsetup_r+0x9a>
 8009548:	2200      	movs	r2, #0
 800954a:	60a2      	str	r2, [r4, #8]
 800954c:	6962      	ldr	r2, [r4, #20]
 800954e:	4252      	negs	r2, r2
 8009550:	61a2      	str	r2, [r4, #24]
 8009552:	6922      	ldr	r2, [r4, #16]
 8009554:	b942      	cbnz	r2, 8009568 <__swsetup_r+0xa4>
 8009556:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800955a:	d1c5      	bne.n	80094e8 <__swsetup_r+0x24>
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	0799      	lsls	r1, r3, #30
 8009560:	bf58      	it	pl
 8009562:	6962      	ldrpl	r2, [r4, #20]
 8009564:	60a2      	str	r2, [r4, #8]
 8009566:	e7f4      	b.n	8009552 <__swsetup_r+0x8e>
 8009568:	2000      	movs	r0, #0
 800956a:	e7f7      	b.n	800955c <__swsetup_r+0x98>
 800956c:	20000108 	.word	0x20000108

08009570 <_sbrk_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d06      	ldr	r5, [pc, #24]	@ (800958c <_sbrk_r+0x1c>)
 8009574:	2300      	movs	r3, #0
 8009576:	4604      	mov	r4, r0
 8009578:	4608      	mov	r0, r1
 800957a:	602b      	str	r3, [r5, #0]
 800957c:	f7f7 fd72 	bl	8001064 <_sbrk>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_sbrk_r+0x1a>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_sbrk_r+0x1a>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	20001fbc 	.word	0x20001fbc

08009590 <__swhatbuf_r>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	460c      	mov	r4, r1
 8009594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009598:	2900      	cmp	r1, #0
 800959a:	b096      	sub	sp, #88	@ 0x58
 800959c:	4615      	mov	r5, r2
 800959e:	461e      	mov	r6, r3
 80095a0:	da0d      	bge.n	80095be <__swhatbuf_r+0x2e>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095a8:	f04f 0100 	mov.w	r1, #0
 80095ac:	bf14      	ite	ne
 80095ae:	2340      	movne	r3, #64	@ 0x40
 80095b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095b4:	2000      	movs	r0, #0
 80095b6:	6031      	str	r1, [r6, #0]
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	b016      	add	sp, #88	@ 0x58
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
 80095be:	466a      	mov	r2, sp
 80095c0:	f000 f848 	bl	8009654 <_fstat_r>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	dbec      	blt.n	80095a2 <__swhatbuf_r+0x12>
 80095c8:	9901      	ldr	r1, [sp, #4]
 80095ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095d2:	4259      	negs	r1, r3
 80095d4:	4159      	adcs	r1, r3
 80095d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095da:	e7eb      	b.n	80095b4 <__swhatbuf_r+0x24>

080095dc <__smakebuf_r>:
 80095dc:	898b      	ldrh	r3, [r1, #12]
 80095de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095e0:	079d      	lsls	r5, r3, #30
 80095e2:	4606      	mov	r6, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	d507      	bpl.n	80095f8 <__smakebuf_r+0x1c>
 80095e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	2301      	movs	r3, #1
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	b003      	add	sp, #12
 80095f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f8:	ab01      	add	r3, sp, #4
 80095fa:	466a      	mov	r2, sp
 80095fc:	f7ff ffc8 	bl	8009590 <__swhatbuf_r>
 8009600:	9f00      	ldr	r7, [sp, #0]
 8009602:	4605      	mov	r5, r0
 8009604:	4639      	mov	r1, r7
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff fb18 	bl	8008c3c <_malloc_r>
 800960c:	b948      	cbnz	r0, 8009622 <__smakebuf_r+0x46>
 800960e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009612:	059a      	lsls	r2, r3, #22
 8009614:	d4ee      	bmi.n	80095f4 <__smakebuf_r+0x18>
 8009616:	f023 0303 	bic.w	r3, r3, #3
 800961a:	f043 0302 	orr.w	r3, r3, #2
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	e7e2      	b.n	80095e8 <__smakebuf_r+0xc>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	6020      	str	r0, [r4, #0]
 8009626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	9b01      	ldr	r3, [sp, #4]
 800962e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009632:	b15b      	cbz	r3, 800964c <__smakebuf_r+0x70>
 8009634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009638:	4630      	mov	r0, r6
 800963a:	f000 f81d 	bl	8009678 <_isatty_r>
 800963e:	b128      	cbz	r0, 800964c <__smakebuf_r+0x70>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	431d      	orrs	r5, r3
 8009650:	81a5      	strh	r5, [r4, #12]
 8009652:	e7cf      	b.n	80095f4 <__smakebuf_r+0x18>

08009654 <_fstat_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	@ (8009674 <_fstat_r+0x20>)
 8009658:	2300      	movs	r3, #0
 800965a:	4604      	mov	r4, r0
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	f7f7 fcd6 	bl	8001012 <_fstat>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d102      	bne.n	8009670 <_fstat_r+0x1c>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	b103      	cbz	r3, 8009670 <_fstat_r+0x1c>
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	20001fbc 	.word	0x20001fbc

08009678 <_isatty_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d06      	ldr	r5, [pc, #24]	@ (8009694 <_isatty_r+0x1c>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	f7f7 fcd5 	bl	8001032 <_isatty>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_isatty_r+0x1a>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_isatty_r+0x1a>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20001fbc 	.word	0x20001fbc

08009698 <_init>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	bf00      	nop
 800969c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969e:	bc08      	pop	{r3}
 80096a0:	469e      	mov	lr, r3
 80096a2:	4770      	bx	lr

080096a4 <_fini>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr
