
F4Disc-01a-ObjecCounting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e24  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008fac  08008fac  00009fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800901c  0800901c  0000b15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800901c  0800901c  0000a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009024  08009024  0000b15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009024  08009024  0000a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009028  08009028  0000a028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800902c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b15c  2**0
                  CONTENTS
 10 .bss          00001e74  2000015c  2000015c  0000b15c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fd0  20001fd0  0000b15c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b09  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b1  00000000  00000000  0001fc95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00023648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e20  00000000  00000000  000248e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025123  00000000  00000000  00025700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019743  00000000  00000000  0004a823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc62b  00000000  00000000  00063f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130591  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052f4  00000000  00000000  001305d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  001358c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f94 	.word	0x08008f94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000160 	.word	0x20000160
 80001c4:	08008f94 	.word	0x08008f94

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_write>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	b29b      	uxth	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	68b8      	ldr	r0, [r7, #8]
 8000508:	f007 fc2e 	bl	8007d68 <CDC_Transmit_FS>
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	HAL_Init();
 800051c:	f000 fd2e 	bl	8000f7c <HAL_Init>
	SystemClock_Config();
 8000520:	f000 f8a8 	bl	8000674 <SystemClock_Config>

	MX_GPIO_Init();
 8000524:	f000 f9a4 	bl	8000870 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000528:	f000 f90e 	bl	8000748 <MX_I2C1_Init>
	MX_I2S3_Init();
 800052c:	f000 f93a 	bl	80007a4 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000530:	f000 f968 	bl	8000804 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000534:	f007 fb5a 	bl	8007bec <MX_USB_DEVICE_Init>

	/* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 8000538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800053c:	f000 fd90 	bl	8001060 <HAL_Delay>
	printf("Start program\r\n");
 8000540:	4845      	ldr	r0, [pc, #276]	@ (8000658 <main+0x140>)
 8000542:	f008 f993 	bl	800886c <puts>

	/* Infinite loop */
	while (1)
	{
		// tampilkan counter di BAR
		HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 8000546:	4b45      	ldr	r3, [pc, #276]	@ (800065c <main+0x144>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	b2db      	uxtb	r3, r3
 8000552:	461a      	mov	r2, r3
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	4842      	ldr	r0, [pc, #264]	@ (8000660 <main+0x148>)
 8000558:	f001 f86c 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAR1_GPIO_Port,BAR1_Pin,count & (1<<1));
 800055c:	4b3f      	ldr	r3, [pc, #252]	@ (800065c <main+0x144>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800056e:	483d      	ldr	r0, [pc, #244]	@ (8000664 <main+0x14c>)
 8000570:	f001 f860 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAR2_GPIO_Port,BAR2_Pin,count & (1<<2));
 8000574:	4b39      	ldr	r3, [pc, #228]	@ (800065c <main+0x144>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	2110      	movs	r1, #16
 8000584:	4836      	ldr	r0, [pc, #216]	@ (8000660 <main+0x148>)
 8000586:	f001 f855 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAR3_GPIO_Port,BAR3_Pin,count & (1<<3));
 800058a:	4b34      	ldr	r3, [pc, #208]	@ (800065c <main+0x144>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	b2db      	uxtb	r3, r3
 8000596:	461a      	mov	r2, r3
 8000598:	2120      	movs	r1, #32
 800059a:	4831      	ldr	r0, [pc, #196]	@ (8000660 <main+0x148>)
 800059c:	f001 f84a 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAR4_GPIO_Port,BAR4_Pin,count & (1<<4));
 80005a0:	4b2e      	ldr	r3, [pc, #184]	@ (800065c <main+0x144>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	2104      	movs	r1, #4
 80005b0:	482b      	ldr	r0, [pc, #172]	@ (8000660 <main+0x148>)
 80005b2:	f001 f83f 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
 80005b6:	4b29      	ldr	r3, [pc, #164]	@ (800065c <main+0x144>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	2110      	movs	r1, #16
 80005c6:	4828      	ldr	r0, [pc, #160]	@ (8000668 <main+0x150>)
 80005c8:	f001 f834 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <main+0x144>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	2120      	movs	r1, #32
 80005dc:	4822      	ldr	r0, [pc, #136]	@ (8000668 <main+0x150>)
 80005de:	f001 f829 	bl	8001634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
 80005e2:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <main+0x144>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	481e      	ldr	r0, [pc, #120]	@ (800066c <main+0x154>)
 80005f4:	f001 f81e 	bl	8001634 <HAL_GPIO_WritePin>

		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 80005f8:	2102      	movs	r1, #2
 80005fa:	481b      	ldr	r0, [pc, #108]	@ (8000668 <main+0x150>)
 80005fc:	f001 f802 	bl	8001604 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d19f      	bne.n	8000546 <main+0x2e>
			HAL_Delay(db_ms);
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <main+0x158>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd28 	bl	8001060 <HAL_Delay>
			if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 8000610:	2102      	movs	r1, #2
 8000612:	4815      	ldr	r0, [pc, #84]	@ (8000668 <main+0x150>)
 8000614:	f000 fff6 	bl	8001604 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d193      	bne.n	8000546 <main+0x2e>
				while(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET);
 800061e:	bf00      	nop
 8000620:	2102      	movs	r1, #2
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <main+0x150>)
 8000624:	f000 ffee 	bl	8001604 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f8      	beq.n	8000620 <main+0x108>
				 // tunggu release stabil
				HAL_Delay(db_ms);
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <main+0x158>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fd14 	bl	8001060 <HAL_Delay>
				if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_SET) {
 8000638:	2102      	movs	r1, #2
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <main+0x150>)
 800063c:	f000 ffe2 	bl	8001604 <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	f47f af7f 	bne.w	8000546 <main+0x2e>
					count++; // valid press
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <main+0x144>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b02      	ldr	r3, [pc, #8]	@ (800065c <main+0x144>)
 8000652:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 8000654:	e777      	b.n	8000546 <main+0x2e>
 8000656:	bf00      	nop
 8000658:	08008fac 	.word	0x08008fac
 800065c:	2000026c 	.word	0x2000026c
 8000660:	40021000 	.word	0x40021000
 8000664:	40020800 	.word	0x40020800
 8000668:	40020400 	.word	0x40020400
 800066c:	40020c00 	.word	0x40020c00
 8000670:	20000000 	.word	0x20000000

08000674 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	@ 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f008 f9d2 	bl	8008a2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f2:	2307      	movs	r3, #7
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 f816 	bl	800372c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000706:	f000 f9fd 	bl	8000b04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000716:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800071a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000720:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2105      	movs	r1, #5
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fa77 	bl	8003c1c <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000734:	f000 f9e6 	bl	8000b04 <Error_Handler>
	}
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	@ 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f000 ff6f 	bl	8001668 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000790:	f000 f9b8 	bl	8000b04 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000178 	.word	0x20000178
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007aa:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <MX_I2S3_Init+0x58>)
 80007ac:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b4:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c8:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000800 <MX_I2S3_Init+0x5c>)
 80007ce:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_I2S3_Init+0x54>)
 80007e4:	f001 f884 	bl	80018f0 <HAL_I2S_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 80007ee:	f000 f989 	bl	8000b04 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200001cc 	.word	0x200001cc
 80007fc:	40003c00 	.word	0x40003c00
 8000800:	00017700 	.word	0x00017700

08000804 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f003 fd2d 	bl	80042b4 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000860:	f000 f950 	bl	8000b04 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000214 	.word	0x20000214
 800086c:	40013000 	.word	0x40013000

08000870 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b98      	ldr	r3, [pc, #608]	@ (8000aec <MX_GPIO_Init+0x27c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a97      	ldr	r2, [pc, #604]	@ (8000aec <MX_GPIO_Init+0x27c>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b95      	ldr	r3, [pc, #596]	@ (8000aec <MX_GPIO_Init+0x27c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b91      	ldr	r3, [pc, #580]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a90      	ldr	r2, [pc, #576]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b8e      	ldr	r3, [pc, #568]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b8a      	ldr	r3, [pc, #552]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a89      	ldr	r2, [pc, #548]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b87      	ldr	r3, [pc, #540]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b83      	ldr	r3, [pc, #524]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a82      	ldr	r2, [pc, #520]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b80      	ldr	r3, [pc, #512]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b7c      	ldr	r3, [pc, #496]	@ (8000aec <MX_GPIO_Init+0x27c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a7b      	ldr	r2, [pc, #492]	@ (8000aec <MX_GPIO_Init+0x27c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b79      	ldr	r3, [pc, #484]	@ (8000aec <MX_GPIO_Init+0x27c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b75      	ldr	r3, [pc, #468]	@ (8000aec <MX_GPIO_Init+0x27c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a74      	ldr	r2, [pc, #464]	@ (8000aec <MX_GPIO_Init+0x27c>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b72      	ldr	r3, [pc, #456]	@ (8000aec <MX_GPIO_Init+0x27c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 800092e:	2200      	movs	r2, #0
 8000930:	217c      	movs	r1, #124	@ 0x7c
 8000932:	486f      	ldr	r0, [pc, #444]	@ (8000af0 <MX_GPIO_Init+0x280>)
 8000934:	f000 fe7e 	bl	8001634 <HAL_GPIO_WritePin>
			|BAR0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 800093e:	486d      	ldr	r0, [pc, #436]	@ (8000af4 <MX_GPIO_Init+0x284>)
 8000940:	f000 fe78 	bl	8001634 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	486a      	ldr	r0, [pc, #424]	@ (8000af4 <MX_GPIO_Init+0x284>)
 800094a:	f000 fe73 	bl	8001634 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	2200      	movs	r2, #0
 8000950:	f24f 0190 	movw	r1, #61584	@ 0xf090
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <MX_GPIO_Init+0x288>)
 8000956:	f000 fe6d 	bl	8001634 <HAL_GPIO_WritePin>
			|Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2130      	movs	r1, #48	@ 0x30
 800095e:	4867      	ldr	r0, [pc, #412]	@ (8000afc <MX_GPIO_Init+0x28c>)
 8000960:	f000 fe68 	bl	8001634 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
	GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 8000964:	237c      	movs	r3, #124	@ 0x7c
 8000966:	61fb      	str	r3, [r7, #28]
			|BAR0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	485d      	ldr	r0, [pc, #372]	@ (8000af0 <MX_GPIO_Init+0x280>)
 800097c:	f000 fca6 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 8000980:	f642 0301 	movw	r3, #10241	@ 0x2801
 8000984:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4856      	ldr	r0, [pc, #344]	@ (8000af4 <MX_GPIO_Init+0x284>)
 800099a:	f000 fc97 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	484e      	ldr	r0, [pc, #312]	@ (8000af4 <MX_GPIO_Init+0x284>)
 80009ba:	f000 fc87 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	484b      	ldr	r0, [pc, #300]	@ (8000b00 <MX_GPIO_Init+0x290>)
 80009d4:	f000 fc7a 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 80009d8:	2330      	movs	r3, #48	@ 0x30
 80009da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4842      	ldr	r0, [pc, #264]	@ (8000af4 <MX_GPIO_Init+0x284>)
 80009ec:	f000 fc6e 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
	GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 80009f0:	f641 0303 	movw	r3, #6147	@ 0x1803
 80009f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	483d      	ldr	r0, [pc, #244]	@ (8000afc <MX_GPIO_Init+0x28c>)
 8000a06:	f000 fc61 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4837      	ldr	r0, [pc, #220]	@ (8000afc <MX_GPIO_Init+0x28c>)
 8000a1e:	f000 fc55 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000a22:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000a26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	482e      	ldr	r0, [pc, #184]	@ (8000af0 <MX_GPIO_Init+0x280>)
 8000a38:	f000 fc48 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4828      	ldr	r0, [pc, #160]	@ (8000afc <MX_GPIO_Init+0x28c>)
 8000a5a:	f000 fc37 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pins : SW2_Pin SW1_Pin */
	GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000a5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4821      	ldr	r0, [pc, #132]	@ (8000af8 <MX_GPIO_Init+0x288>)
 8000a74:	f000 fc2a 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a78:	f24f 0390 	movw	r3, #61584	@ 0xf090
 8000a7c:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin|BAR7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4819      	ldr	r0, [pc, #100]	@ (8000af8 <MX_GPIO_Init+0x288>)
 8000a92:	f000 fc1b 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a96:	2320      	movs	r3, #32
 8000a98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <MX_GPIO_Init+0x288>)
 8000aaa:	f000 fc0f 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR5_Pin BAR6_Pin */
	GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000aae:	2330      	movs	r3, #48	@ 0x30
 8000ab0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_GPIO_Init+0x28c>)
 8000ac6:	f000 fc01 	bl	80012cc <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ace:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ad2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_GPIO_Init+0x280>)
 8000ae0:	f000 fbf4 	bl	80012cc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3730      	adds	r7, #48	@ 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020000 	.word	0x40020000

08000b04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b0d      	ldr	r3, [pc, #52]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b4e:	2007      	movs	r0, #7
 8000b50:	f000 fb7a 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_I2C_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12c      	bne.n	8000bdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b9e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	@ (8000bec <HAL_I2C_MspInit+0x8c>)
 8000bbc:	f000 fb86 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_I2C_MspInit+0x88>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400

08000bf0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	@ 0x38
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a31      	ldr	r2, [pc, #196]	@ (8000ce0 <HAL_I2S_MspInit+0xf0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d15a      	bne.n	8000cd6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c20:	2301      	movs	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c24:	23c0      	movs	r3, #192	@ 0xc0
 8000c26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 f9ff 	bl	8004034 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c3c:	f7ff ff62 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	4a26      	ldr	r2, [pc, #152]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <HAL_I2S_MspInit+0xf4>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c94:	2310      	movs	r3, #16
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca4:	2306      	movs	r3, #6
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <HAL_I2S_MspInit+0xf8>)
 8000cb0:	f000 fb0c 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cb4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <HAL_I2S_MspInit+0xfc>)
 8000cd2:	f000 fafb 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	@ 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40003c00 	.word	0x40003c00
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020800 	.word	0x40020800

08000cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	@ (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12b      	bne.n	8000d6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d4a:	23e0      	movs	r3, #224	@ 0xe0
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_SPI_MspInit+0x8c>)
 8000d66:	f000 fab1 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	@ 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd6:	f000 f923 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <OTG_FS_IRQHandler+0x10>)
 8000de6:	f001 fb73 	bl	80024d0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20001758 	.word	0x20001758

08000df4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	e00a      	b.n	8000e1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e06:	f3af 8000 	nop.w
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	b2ca      	uxtb	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dbf0      	blt.n	8000e06 <_read+0x12>
  }

  return len;
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e56:	605a      	str	r2, [r3, #4]
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_isatty>:

int _isatty(int file)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f007 fdfe 	bl	8008ac8 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20020000 	.word	0x20020000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	20000270 	.word	0x20000270
 8000f00:	20001fd0 	.word	0x20001fd0

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2e:	490e      	ldr	r1, [pc, #56]	@ (8000f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f30:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f44:	4c0b      	ldr	r4, [pc, #44]	@ (8000f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f52:	f7ff ffd7 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f007 fdbd 	bl	8008ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fadd 	bl	8000518 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000f6c:	0800902c 	.word	0x0800902c
  ldr r2, =_sbss
 8000f70:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000f74:	20001fd0 	.word	0x20001fd0

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94f 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fdae 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f967 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f92f 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	@ (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000004 	.word	0x20000004
 8001018:	2000000c 	.word	0x2000000c
 800101c:	20000008 	.word	0x20000008

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000000c 	.word	0x2000000c
 8001044:	20000274 	.word	0x20000274

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000274 	.word	0x20000274

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	@ (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	@ (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e16b      	b.n	80015c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 815a 	bne.w	80015ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b4 	beq.w	80015ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a5f      	ldr	r2, [pc, #380]	@ (80015d8 <HAL_GPIO_Init+0x30c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b5d      	ldr	r3, [pc, #372]	@ (80015d8 <HAL_GPIO_Init+0x30c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a5b      	ldr	r2, [pc, #364]	@ (80015dc <HAL_GPIO_Init+0x310>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	@ (80015e0 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	@ (80015e4 <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	@ (80015e8 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	@ (80015ec <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4e      	ldr	r2, [pc, #312]	@ (80015f0 <HAL_GPIO_Init+0x324>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4d      	ldr	r2, [pc, #308]	@ (80015f4 <HAL_GPIO_Init+0x328>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	@ (80015f8 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4b      	ldr	r2, [pc, #300]	@ (80015fc <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	@ (80015dc <HAL_GPIO_Init+0x310>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b30      	ldr	r3, [pc, #192]	@ (8001600 <HAL_GPIO_Init+0x334>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_GPIO_Init+0x334>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae90 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	@ 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e12b      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fa66 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	@ 0x24
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016cc:	f002 fc9e 	bl	800400c <HAL_RCC_GetPCLK1Freq>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a81      	ldr	r2, [pc, #516]	@ (80018dc <HAL_I2C_Init+0x274>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d807      	bhi.n	80016ec <HAL_I2C_Init+0x84>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4a80      	ldr	r2, [pc, #512]	@ (80018e0 <HAL_I2C_Init+0x278>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	bf94      	ite	ls
 80016e4:	2301      	movls	r3, #1
 80016e6:	2300      	movhi	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e006      	b.n	80016fa <HAL_I2C_Init+0x92>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a7d      	ldr	r2, [pc, #500]	@ (80018e4 <HAL_I2C_Init+0x27c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0e7      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a78      	ldr	r2, [pc, #480]	@ (80018e8 <HAL_I2C_Init+0x280>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_I2C_Init+0x274>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d802      	bhi.n	800173c <HAL_I2C_Init+0xd4>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3301      	adds	r3, #1
 800173a:	e009      	b.n	8001750 <HAL_I2C_Init+0xe8>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	4a69      	ldr	r2, [pc, #420]	@ (80018ec <HAL_I2C_Init+0x284>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	3301      	adds	r3, #1
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001762:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	495c      	ldr	r1, [pc, #368]	@ (80018dc <HAL_I2C_Init+0x274>)
 800176c:	428b      	cmp	r3, r1
 800176e:	d819      	bhi.n	80017a4 <HAL_I2C_Init+0x13c>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e59      	subs	r1, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fbb1 f3f3 	udiv	r3, r1, r3
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001784:	400b      	ands	r3, r1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00a      	beq.n	80017a0 <HAL_I2C_Init+0x138>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e59      	subs	r1, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	3301      	adds	r3, #1
 800179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179e:	e051      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e04f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_I2C_Init+0x168>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e012      	b.n	80017f6 <HAL_I2C_Init+0x18e>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	0099      	lsls	r1, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x196>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e022      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10e      	bne.n	8001824 <HAL_I2C_Init+0x1bc>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e58      	subs	r0, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	440b      	add	r3, r1
 8001814:	fbb0 f3f3 	udiv	r3, r0, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001822:	e00f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	0099      	lsls	r1, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	6809      	ldr	r1, [r1, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001872:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6911      	ldr	r1, [r2, #16]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68d2      	ldr	r2, [r2, #12]
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	000186a0 	.word	0x000186a0
 80018e0:	001e847f 	.word	0x001e847f
 80018e4:	003d08ff 	.word	0x003d08ff
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e128      	b.n	8001b54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a90      	ldr	r2, [pc, #576]	@ (8001b5c <HAL_I2S_Init+0x26c>)
 800191a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff f967 	bl	8000bf0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001938:	f023 030f 	bic.w	r3, r3, #15
 800193c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2202      	movs	r2, #2
 8001944:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d060      	beq.n	8001a10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001956:	2310      	movs	r3, #16
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e001      	b.n	8001960 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b20      	cmp	r3, #32
 8001966:	d802      	bhi.n	800196e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800196e:	2001      	movs	r0, #1
 8001970:	f002 fc42 	bl	80041f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001974:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800197e:	d125      	bne.n	80019cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d010      	beq.n	80019aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	3305      	adds	r3, #5
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e01f      	b.n	80019ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	461a      	mov	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	3305      	adds	r3, #5
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e00e      	b.n	80019ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	3305      	adds	r3, #5
 80019e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001b60 <HAL_I2S_Init+0x270>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	e003      	b.n	8001a18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d902      	bls.n	8001a24 <HAL_I2S_Init+0x134>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	2bff      	cmp	r3, #255	@ 0xff
 8001a22:	d907      	bls.n	8001a34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e08f      	b.n	8001b54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	ea42 0103 	orr.w	r1, r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001a52:	f023 030f 	bic.w	r3, r3, #15
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6851      	ldr	r1, [r2, #4]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6892      	ldr	r2, [r2, #8]
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68d2      	ldr	r2, [r2, #12]
 8001a64:	4311      	orrs	r1, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6992      	ldr	r2, [r2, #24]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d161      	bne.n	8001b44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a38      	ldr	r2, [pc, #224]	@ (8001b64 <HAL_I2S_Init+0x274>)
 8001a84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a37      	ldr	r2, [pc, #220]	@ (8001b68 <HAL_I2S_Init+0x278>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2S_Init+0x1a4>
 8001a90:	4b36      	ldr	r3, [pc, #216]	@ (8001b6c <HAL_I2S_Init+0x27c>)
 8001a92:	e001      	b.n	8001a98 <HAL_I2S_Init+0x1a8>
 8001a94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4932      	ldr	r1, [pc, #200]	@ (8001b68 <HAL_I2S_Init+0x278>)
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_I2S_Init+0x1b8>
 8001aa4:	4a31      	ldr	r2, [pc, #196]	@ (8001b6c <HAL_I2S_Init+0x27c>)
 8001aa6:	e001      	b.n	8001aac <HAL_I2S_Init+0x1bc>
 8001aa8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001aac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001ab0:	f023 030f 	bic.w	r3, r3, #15
 8001ab4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2b      	ldr	r2, [pc, #172]	@ (8001b68 <HAL_I2S_Init+0x278>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2S_Init+0x1d4>
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <HAL_I2S_Init+0x27c>)
 8001ac2:	e001      	b.n	8001ac8 <HAL_I2S_Init+0x1d8>
 8001ac4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ac8:	2202      	movs	r2, #2
 8001aca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <HAL_I2S_Init+0x278>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_I2S_Init+0x1ea>
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <HAL_I2S_Init+0x27c>)
 8001ad8:	e001      	b.n	8001ade <HAL_I2S_Init+0x1ee>
 8001ada:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aea:	d003      	beq.n	8001af4 <HAL_I2S_Init+0x204>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d103      	bne.n	8001afc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001af4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e001      	b.n	8001b00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <HAL_I2S_Init+0x278>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_I2S_Init+0x24c>
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_I2S_Init+0x27c>)
 8001b3a:	e001      	b.n	8001b40 <HAL_I2S_Init+0x250>
 8001b3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b40:	897a      	ldrh	r2, [r7, #10]
 8001b42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08001c67 	.word	0x08001c67
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	08001d7d 	.word	0x08001d7d
 8001b68:	40003800 	.word	0x40003800
 8001b6c:	40003400 	.word	0x40003400

08001b70 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	1c9a      	adds	r2, r3, #2
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10e      	bne.n	8001c00 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001bf0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb8 	bl	8001b70 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	1c9a      	adds	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10e      	bne.n	8001c5e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c4e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff93 	bl	8001b84 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d13a      	bne.n	8001cf8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d109      	bne.n	8001ca0 <I2S_IRQHandler+0x3a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c96:	2b40      	cmp	r3, #64	@ 0x40
 8001c98:	d102      	bne.n	8001ca0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffb4 	bl	8001c08 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca6:	2b40      	cmp	r3, #64	@ 0x40
 8001ca8:	d126      	bne.n	8001cf8 <I2S_IRQHandler+0x92>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d11f      	bne.n	8001cf8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001cc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f043 0202 	orr.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff50 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d136      	bne.n	8001d72 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d109      	bne.n	8001d22 <I2S_IRQHandler+0xbc>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d18:	2b80      	cmp	r3, #128	@ 0x80
 8001d1a:	d102      	bne.n	8001d22 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff45 	bl	8001bac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d122      	bne.n	8001d72 <I2S_IRQHandler+0x10c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d11b      	bne.n	8001d72 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d48:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	f043 0204 	orr.w	r2, r3, #4
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff13 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a92      	ldr	r2, [pc, #584]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d96:	4b92      	ldr	r3, [pc, #584]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d98:	e001      	b.n	8001d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a8b      	ldr	r2, [pc, #556]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001db4:	4b8a      	ldr	r3, [pc, #552]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001db6:	e001      	b.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001db8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dc8:	d004      	beq.n	8001dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8099 	bne.w	8001f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d107      	bne.n	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f925 	bl	8002038 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f9c8 	bl	8002198 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0e:	2b40      	cmp	r3, #64	@ 0x40
 8001e10:	d13a      	bne.n	8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d035      	beq.n	8001e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6e      	ldr	r2, [pc, #440]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e26:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e28:	e001      	b.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4969      	ldr	r1, [pc, #420]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e36:	428b      	cmp	r3, r1
 8001e38:	d101      	bne.n	8001e3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e3a:	4b69      	ldr	r3, [pc, #420]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e3c:	e001      	b.n	8001e42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f043 0202 	orr.w	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fe88 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	f040 80c3 	bne.w	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80bd 	beq.w	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001eae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a49      	ldr	r2, [pc, #292]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001eba:	4b49      	ldr	r3, [pc, #292]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ebc:	e001      	b.n	8001ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4944      	ldr	r1, [pc, #272]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eca:	428b      	cmp	r3, r1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ece:	4b44      	ldr	r3, [pc, #272]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ed0:	e001      	b.n	8001ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ed2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ed6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001eda:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe4a 	bl	8001b98 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f04:	e089      	b.n	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d107      	bne.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8be 	bl	800209c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8fd 	bl	8002134 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f40:	2b40      	cmp	r3, #64	@ 0x40
 8001f42:	d12f      	bne.n	8001fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02a      	beq.n	8001fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f6a:	e001      	b.n	8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4919      	ldr	r1, [pc, #100]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f78:	428b      	cmp	r3, r1
 8001f7a:	d101      	bne.n	8001f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f7c:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f7e:	e001      	b.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fdfa 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d136      	bne.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d031      	beq.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc4:	e001      	b.n	8001fca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4902      	ldr	r1, [pc, #8]	@ (8001fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	d106      	bne.n	8001fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001fd6:	4b02      	ldr	r3, [pc, #8]	@ (8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fd8:	e006      	b.n	8001fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001fda:	bf00      	nop
 8001fdc:	40003800 	.word	0x40003800
 8001fe0:	40003400 	.word	0x40003400
 8001fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fe8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001fec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ffc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f043 0204 	orr.w	r2, r3, #4
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fdc0 	bl	8001b98 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002018:	e000      	b.n	800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800201a:	bf00      	nop
}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	1c99      	adds	r1, r3, #2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6251      	str	r1, [r2, #36]	@ 0x24
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d113      	bne.n	8002092 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002078:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ffc9 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	1c99      	adds	r1, r3, #2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80020ae:	8819      	ldrh	r1, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <I2SEx_TxISR_I2SExt+0x90>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <I2SEx_TxISR_I2SExt+0x22>
 80020ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <I2SEx_TxISR_I2SExt+0x94>)
 80020bc:	e001      	b.n	80020c2 <I2SEx_TxISR_I2SExt+0x26>
 80020be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020c2:	460a      	mov	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d121      	bne.n	8002122 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <I2SEx_TxISR_I2SExt+0x90>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d101      	bne.n	80020ec <I2SEx_TxISR_I2SExt+0x50>
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <I2SEx_TxISR_I2SExt+0x94>)
 80020ea:	e001      	b.n	80020f0 <I2SEx_TxISR_I2SExt+0x54>
 80020ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	490d      	ldr	r1, [pc, #52]	@ (800212c <I2SEx_TxISR_I2SExt+0x90>)
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d101      	bne.n	8002100 <I2SEx_TxISR_I2SExt+0x64>
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <I2SEx_TxISR_I2SExt+0x94>)
 80020fe:	e001      	b.n	8002104 <I2SEx_TxISR_I2SExt+0x68>
 8002100:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002104:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff81 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40003800 	.word	0x40003800
 8002130:	40003400 	.word	0x40003400

08002134 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68d8      	ldr	r0, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	1c99      	adds	r1, r3, #2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800214c:	b282      	uxth	r2, r0
 800214e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002176:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ff4a 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a20      	ldr	r2, [pc, #128]	@ (8002228 <I2SEx_RxISR_I2SExt+0x90>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d101      	bne.n	80021ae <I2SEx_RxISR_I2SExt+0x16>
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <I2SEx_RxISR_I2SExt+0x94>)
 80021ac:	e001      	b.n	80021b2 <I2SEx_RxISR_I2SExt+0x1a>
 80021ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021b2:	68d8      	ldr	r0, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	1c99      	adds	r1, r3, #2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80021be:	b282      	uxth	r2, r0
 80021c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <I2SEx_RxISR_I2SExt+0x90>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <I2SEx_RxISR_I2SExt+0x50>
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <I2SEx_RxISR_I2SExt+0x94>)
 80021e6:	e001      	b.n	80021ec <I2SEx_RxISR_I2SExt+0x54>
 80021e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	490d      	ldr	r1, [pc, #52]	@ (8002228 <I2SEx_RxISR_I2SExt+0x90>)
 80021f4:	428b      	cmp	r3, r1
 80021f6:	d101      	bne.n	80021fc <I2SEx_RxISR_I2SExt+0x64>
 80021f8:	4b0c      	ldr	r3, [pc, #48]	@ (800222c <I2SEx_RxISR_I2SExt+0x94>)
 80021fa:	e001      	b.n	8002200 <I2SEx_RxISR_I2SExt+0x68>
 80021fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002200:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002204:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff03 	bl	8002024 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40003800 	.word	0x40003800
 800222c:	40003400 	.word	0x40003400

08002230 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	b08f      	sub	sp, #60	@ 0x3c
 8002234:	af0a      	add	r7, sp, #40	@ 0x28
 8002236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e10f      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f005 fecb 	bl	8007ff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 f9b4 	bl	80045ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	687e      	ldr	r6, [r7, #4]
 800228e:	466d      	mov	r5, sp
 8002290:	f106 0410 	add.w	r4, r6, #16
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a4:	1d33      	adds	r3, r6, #4
 80022a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f002 f88c 	bl	80043c6 <USB_CoreInit>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d0      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 f9a2 	bl	8004610 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e04a      	b.n	8002368 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	333d      	adds	r3, #61	@ 0x3d
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	333c      	adds	r3, #60	@ 0x3c
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b298      	uxth	r0, r3
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3344      	adds	r3, #68	@ 0x44
 800230e:	4602      	mov	r2, r0
 8002310:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3340      	adds	r3, #64	@ 0x40
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3348      	adds	r3, #72	@ 0x48
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	334c      	adds	r3, #76	@ 0x4c
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3354      	adds	r3, #84	@ 0x54
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3301      	adds	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	429a      	cmp	r2, r3
 8002370:	d3af      	bcc.n	80022d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e044      	b.n	8002402 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	3301      	adds	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d3b5      	bcc.n	8002378 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	687e      	ldr	r6, [r7, #4]
 8002414:	466d      	mov	r5, sp
 8002416:	f106 0410 	add.w	r4, r6, #16
 800241a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002426:	e885 0003 	stmia.w	r5, {r0, r1}
 800242a:	1d33      	adds	r3, r6, #4
 800242c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f002 f93a 	bl	80046a8 <USB_DevInit>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00d      	b.n	8002462 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fa89 	bl	8005972 <USB_DevDisconnect>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_PCD_Start+0x1c>
 8002482:	2302      	movs	r3, #2
 8002484:	e020      	b.n	80024c8 <HAL_PCD_Start+0x5e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	2b01      	cmp	r3, #1
 8002494:	d109      	bne.n	80024aa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 f88c 	bl	80045cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fa39 	bl	8005930 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b08d      	sub	sp, #52	@ 0x34
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 faf7 	bl	8005ada <USB_GetMode>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 848a 	bne.w	8002e08 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fa5b 	bl	80059b4 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8480 	beq.w	8002e06 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fa48 	bl	80059b4 <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f002 0202 	and.w	r2, r2, #2
 800253c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f003 fa36 	bl	80059b4 <USB_ReadInterrupts>
 8002548:	4603      	mov	r3, r0
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d161      	bne.n	8002616 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0210 	bic.w	r2, r2, #16
 8002560:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 020f 	and.w	r2, r3, #15
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	3304      	adds	r3, #4
 8002580:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800258c:	d124      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d035      	beq.n	8002606 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	6a38      	ldr	r0, [r7, #32]
 80025ae:	f003 f86d 	bl	800568c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025be:	441a      	add	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d0:	441a      	add	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	621a      	str	r2, [r3, #32]
 80025d6:	e016      	b.n	8002606 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80025de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80025e2:	d110      	bne.n	8002606 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80025ea:	2208      	movs	r2, #8
 80025ec:	4619      	mov	r1, r3
 80025ee:	6a38      	ldr	r0, [r7, #32]
 80025f0:	f003 f84c 	bl	800568c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	6a1a      	ldr	r2, [r3, #32]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002600:	441a      	add	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0210 	orr.w	r2, r2, #16
 8002614:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f9ca 	bl	80059b4 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002626:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800262a:	f040 80a7 	bne.w	800277c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 f9cf 	bl	80059da <USB_ReadDevAllOutEpInterrupt>
 800263c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800263e:	e099      	b.n	8002774 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 808e 	beq.w	8002768 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f9f3 	bl	8005a42 <USB_ReadDevOutEPInterrupt>
 800265c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00c      	beq.n	8002682 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002674:	461a      	mov	r2, r3
 8002676:	2301      	movs	r3, #1
 8002678:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800267a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fec3 	bl	8003408 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002698:	461a      	mov	r2, r3
 800269a:	2308      	movs	r3, #8
 800269c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800269e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 ff99 	bl	80035d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026bc:	461a      	mov	r2, r3
 80026be:	2310      	movs	r3, #16
 80026c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d030      	beq.n	800272e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d4:	2b80      	cmp	r3, #128	@ 0x80
 80026d6:	d109      	bne.n	80026ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	78db      	ldrb	r3, [r3, #3]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	b2db      	uxtb	r3, r3
 8002714:	4619      	mov	r1, r3
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f005 fd82 	bl	8008220 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002728:	461a      	mov	r2, r3
 800272a:	2302      	movs	r3, #2
 800272c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002744:	461a      	mov	r2, r3
 8002746:	2320      	movs	r3, #32
 8002748:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002760:	461a      	mov	r2, r3
 8002762:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002766:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	3301      	adds	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f af62 	bne.w	8002640 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 f917 	bl	80059b4 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800278c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002790:	f040 80db 	bne.w	800294a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f003 f938 	bl	8005a0e <USB_ReadDevAllInEpInterrupt>
 800279e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80027a4:	e0cd      	b.n	8002942 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80c2 	beq.w	8002936 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f003 f95e 	bl	8005a7e <USB_ReadDevInEPInterrupt>
 80027c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d057      	beq.n	800287e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	2201      	movs	r2, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027ee:	4013      	ands	r3, r2
 80027f0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027fe:	461a      	mov	r2, r3
 8002800:	2301      	movs	r3, #1
 8002802:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d132      	bne.n	8002872 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334c      	adds	r3, #76	@ 0x4c
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4403      	add	r3, r0
 800282c:	3348      	adds	r3, #72	@ 0x48
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4419      	add	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4403      	add	r3, r0
 8002840:	334c      	adds	r3, #76	@ 0x4c
 8002842:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d113      	bne.n	8002872 <HAL_PCD_IRQHandler+0x3a2>
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3354      	adds	r3, #84	@ 0x54
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d108      	bne.n	8002872 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800286a:	461a      	mov	r2, r3
 800286c:	2101      	movs	r1, #1
 800286e:	f003 f965 	bl	8005b3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	b2db      	uxtb	r3, r3
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f005 fc4c 	bl	8008116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002894:	461a      	mov	r2, r3
 8002896:	2308      	movs	r3, #8
 8002898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	2310      	movs	r3, #16
 80028b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028cc:	461a      	mov	r2, r3
 80028ce:	2340      	movs	r3, #64	@ 0x40
 80028d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d023      	beq.n	8002924 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028de:	6a38      	ldr	r0, [r7, #32]
 80028e0:	f002 f846 	bl	8004970 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	3338      	adds	r3, #56	@ 0x38
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	78db      	ldrb	r3, [r3, #3]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f005 fc99 	bl	8008244 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800291e:	461a      	mov	r2, r3
 8002920:	2302      	movs	r3, #2
 8002922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800292e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fcdb 	bl	80032ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	3301      	adds	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	f47f af2e 	bne.w	80027a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f830 	bl	80059b4 <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800295a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800295e:	d122      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002986:	2100      	movs	r1, #0
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fec3 	bl	8003714 <HAL_PCDEx_LPM_Callback>
 800298e:	e002      	b.n	8002996 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f005 fc37 	bl	8008204 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80029a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 f802 	bl	80059b4 <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ba:	d112      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f005 fbf3 	bl	80081b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80029e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 ffe4 	bl	80059b4 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	f040 80b7 	bne.w	8002b68 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2110      	movs	r1, #16
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 ffab 	bl	8004970 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a1e:	e046      	b.n	8002aae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a32:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a44:	0151      	lsls	r1, r2, #5
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	440a      	add	r2, r1
 8002a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002a4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a60:	461a      	mov	r2, r3
 8002a62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a66:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002aa2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002aa6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aaa:	3301      	adds	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d3b3      	bcc.n	8002a20 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ac6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002aca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d016      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae4:	f043 030b 	orr.w	r3, r3, #11
 8002ae8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002afa:	f043 030b 	orr.w	r3, r3, #11
 8002afe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b00:	e015      	b.n	8002b2e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b14:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b28:	f043 030b 	orr.w	r3, r3, #11
 8002b2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b3c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002b40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b52:	461a      	mov	r2, r3
 8002b54:	f002 fff2 	bl	8005b3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 ff21 	bl	80059b4 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b7c:	d124      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 ffb7 	bl	8005af6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 ff6c 	bl	8004a6a <USB_GetDevSpeed>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681c      	ldr	r4, [r3, #0]
 8002b9e:	f001 fa29 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8002ba2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	4620      	mov	r0, r4
 8002bae:	f001 fc6b 	bl	8004488 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 fad7 	bl	8008166 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fef1 	bl	80059b4 <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d10a      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f005 fab4 	bl	800814a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 0208 	and.w	r2, r2, #8
 8002bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fedc 	bl	80059b4 <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c02:	2b80      	cmp	r3, #128	@ 0x80
 8002c04:	d122      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c12:	2301      	movs	r3, #1
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	e014      	b.n	8002c42 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fb27 	bl	800328a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d3e5      	bcc.n	8002c18 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 feaf 	bl	80059b4 <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c60:	d13b      	bne.n	8002cda <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c62:	2301      	movs	r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c66:	e02b      	b.n	8002cc0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3340      	adds	r3, #64	@ 0x40
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d115      	bne.n	8002cba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da12      	bge.n	8002cba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	333f      	adds	r3, #63	@ 0x3f
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fae8 	bl	800328a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d3ce      	bcc.n	8002c68 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fe68 	bl	80059b4 <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cee:	d155      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	e045      	b.n	8002d82 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d12e      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da2b      	bge.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002d30:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d121      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d78:	6053      	str	r3, [r2, #4]
            break;
 8002d7a:	e007      	b.n	8002d8c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7e:	3301      	adds	r3, #1
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3b4      	bcc.n	8002cf6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fe07 	bl	80059b4 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db0:	d10a      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f005 fa58 	bl	8008268 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f002 fdf1 	bl	80059b4 <USB_ReadInterrupts>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d115      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 fa48 	bl	8008284 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	e000      	b.n	8002e08 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e06:	bf00      	nop
    }
  }
}
 8002e08:	3734      	adds	r7, #52	@ 0x34
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}

08002e0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_PCD_SetAddress+0x1a>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e013      	b.n	8002e50 <HAL_PCD_SetAddress+0x42>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 fd4f 	bl	80058e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	70fb      	strb	r3, [r7, #3]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	803b      	strh	r3, [r7, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da0f      	bge.n	8002e9e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3338      	adds	r3, #56	@ 0x38
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	705a      	strb	r2, [r3, #1]
 8002e9c:	e00f      	b.n	8002ebe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eca:	883a      	ldrh	r2, [r7, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	78ba      	ldrb	r2, [r7, #2]
 8002ed4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ee8:	78bb      	ldrb	r3, [r7, #2]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d102      	bne.n	8002ef4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_PCD_EP_Open+0xaa>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e00e      	b.n	8002f20 <HAL_PCD_EP_Open+0xc8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 fdcf 	bl	8004ab4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da0f      	bge.n	8002f5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	3338      	adds	r3, #56	@ 0x38
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	705a      	strb	r2, [r3, #1]
 8002f5a:	e00f      	b.n	8002f7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	3304      	adds	r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_PCD_EP_Close+0x6e>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e00e      	b.n	8002fb4 <HAL_PCD_EP_Close+0x8c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fe0d 	bl	8004bc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	7afb      	ldrb	r3, [r7, #11]
 8002fce:	f003 020f 	and.w	r2, r3, #15
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	b2da      	uxtb	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	f002 f8ec 	bl	800520c <USB_EP0StartXfer>
 8003034:	e008      	b.n	8003048 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	6979      	ldr	r1, [r7, #20]
 8003044:	f001 fe9a 	bl	8004d7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 020f 	and.w	r2, r3, #15
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8003074:	681b      	ldr	r3, [r3, #0]
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	460b      	mov	r3, r1
 8003090:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3338      	adds	r3, #56	@ 0x38
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2201      	movs	r2, #1
 80030c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c2:	7afb      	ldrb	r3, [r7, #11]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d102      	bne.n	80030dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6979      	ldr	r1, [r7, #20]
 80030f4:	f002 f88a 	bl	800520c <USB_EP0StartXfer>
 80030f8:	e008      	b.n	800310c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	6979      	ldr	r1, [r7, #20]
 8003108:	f001 fe38 	bl	8004d7c <USB_EPStartXfer>
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	d901      	bls.n	8003134 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e050      	b.n	80031d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da0f      	bge.n	800315c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3338      	adds	r3, #56	@ 0x38
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	3304      	adds	r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	705a      	strb	r2, [r3, #1]
 800315a:	e00d      	b.n	8003178 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_PCD_EP_SetStall+0x82>
 8003194:	2302      	movs	r3, #2
 8003196:	e01e      	b.n	80031d6 <HAL_PCD_EP_SetStall+0xc0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68f9      	ldr	r1, [r7, #12]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fac8 	bl	800573c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	b2d9      	uxtb	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80031c6:	461a      	mov	r2, r3
 80031c8:	f002 fcb8 	bl	8005b3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d901      	bls.n	80031fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e042      	b.n	8003282 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003200:	2b00      	cmp	r3, #0
 8003202:	da0f      	bge.n	8003224 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3338      	adds	r3, #56	@ 0x38
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
 8003222:	e00f      	b.n	8003244 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_PCD_EP_ClrStall+0x86>
 8003260:	2302      	movs	r3, #2
 8003262:	e00e      	b.n	8003282 <HAL_PCD_EP_ClrStall+0xa4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68f9      	ldr	r1, [r7, #12]
 8003272:	4618      	mov	r0, r3
 8003274:	f002 fad0 	bl	8005818 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329a:	2b00      	cmp	r3, #0
 800329c:	da0c      	bge.n	80032b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	3338      	adds	r3, #56	@ 0x38
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e00c      	b.n	80032d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 f8ef 	bl	80054bc <USB_EPStopXfer>
 80032de:	4603      	mov	r3, r0
 80032e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	@ 0x28
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	3338      	adds	r3, #56	@ 0x38
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	3304      	adds	r3, #4
 8003312:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	429a      	cmp	r2, r3
 800331e:	d901      	bls.n	8003324 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e06c      	b.n	80033fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3303      	adds	r3, #3
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003348:	e02b      	b.n	80033a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	d902      	bls.n	8003366 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3303      	adds	r3, #3
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800337e:	b2db      	uxtb	r3, r3
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4603      	mov	r3, r0
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f002 f943 	bl	8005610 <USB_WritePacket>

    ep->xfer_buff  += len;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	441a      	add	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d809      	bhi.n	80033cc <PCD_WriteEmptyTxFifo+0xe0>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d203      	bcs.n	80033cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1be      	bne.n	800334a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d811      	bhi.n	80033fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	2201      	movs	r2, #1
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	6939      	ldr	r1, [r7, #16]
 80033f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033f8:	4013      	ands	r3, r2
 80033fa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	333c      	adds	r3, #60	@ 0x3c
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d17b      	bne.n	8003536 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	4a61      	ldr	r2, [pc, #388]	@ (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	f240 80b9 	bls.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80b3 	beq.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003470:	6093      	str	r3, [r2, #8]
 8003472:	e0a7      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2320      	movs	r3, #32
 800348e:	6093      	str	r3, [r2, #8]
 8003490:	e098      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8093 	bne.w	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	@ (80035d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d90f      	bls.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034c2:	6093      	str	r3, [r2, #8]
 80034c4:	e07e      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d114      	bne.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003510:	461a      	mov	r2, r3
 8003512:	2101      	movs	r1, #1
 8003514:	f002 fb12 	bl	8005b3c <USB_EP0_OutStart>
 8003518:	e006      	b.n	8003528 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f004 fdd6 	bl	80080e0 <HAL_PCD_DataOutStageCallback>
 8003534:	e046      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d124      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	e032      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	2320      	movs	r3, #32
 8003578:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	4619      	mov	r1, r3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f004 fdad 	bl	80080e0 <HAL_PCD_DataOutStageCallback>
 8003586:	e01d      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d114      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80035b0:	461a      	mov	r2, r3
 80035b2:	2100      	movs	r1, #0
 80035b4:	f002 fac2 	bl	8005b3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f004 fd8e 	bl	80080e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	4f54300a 	.word	0x4f54300a
 80035d4:	4f54310a 	.word	0x4f54310a

080035d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	333c      	adds	r3, #60	@ 0x3c
 80035f0:	3304      	adds	r3, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a15      	ldr	r2, [pc, #84]	@ (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d90e      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	461a      	mov	r2, r3
 8003626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800362a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f004 fd45 	bl	80080bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <PCD_EP_OutSetupPacket_int+0x88>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d90c      	bls.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800364c:	461a      	mov	r2, r3
 800364e:	2101      	movs	r1, #1
 8003650:	f002 fa74 	bl	8005b3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	4f54300a 	.word	0x4f54300a

08003664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
 8003670:	4613      	mov	r3, r2
 8003672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003682:	883b      	ldrh	r3, [r7, #0]
 8003684:	0419      	lsls	r1, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	430a      	orrs	r2, r1
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003690:	e028      	b.n	80036e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	0c1b      	lsrs	r3, r3, #16
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e00d      	b.n	80036c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	3340      	adds	r3, #64	@ 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	3301      	adds	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3ec      	bcc.n	80036a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036cc:	883b      	ldrh	r3, [r7, #0]
 80036ce:	0418      	lsls	r0, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4302      	orrs	r2, r0
 80036dc:	3340      	adds	r3, #64	@ 0x40
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e267      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b85      	ldr	r3, [pc, #532]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b82      	ldr	r3, [pc, #520]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b7e      	ldr	r3, [pc, #504]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e242      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b76      	ldr	r3, [pc, #472]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a75      	ldr	r2, [pc, #468]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b70      	ldr	r3, [pc, #448]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6f      	ldr	r2, [pc, #444]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6d      	ldr	r3, [pc, #436]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6c      	ldr	r2, [pc, #432]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b69      	ldr	r3, [pc, #420]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a68      	ldr	r2, [pc, #416]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b66      	ldr	r3, [pc, #408]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fc30 	bl	8001048 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fc2c 	bl	8001048 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e207      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5b      	ldr	r3, [pc, #364]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fc1c 	bl	8001048 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fc18 	bl	8001048 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	@ 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f3      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b51      	ldr	r3, [pc, #324]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b44      	ldr	r3, [pc, #272]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c7      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3b      	ldr	r3, [pc, #236]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4937      	ldr	r1, [pc, #220]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b34      	ldr	r3, [pc, #208]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fbd1 	bl	8001048 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fd fbcd 	bl	8001048 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a8      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4925      	ldr	r1, [pc, #148]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <HAL_RCC_OscConfig+0x244>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fbb0 	bl	8001048 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd fbac 	bl	8001048 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e187      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d036      	beq.n	8003984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b15      	ldr	r3, [pc, #84]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fb90 	bl	8001048 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fd fb8c 	bl	8001048 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e167      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_RCC_OscConfig+0x240>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e01b      	b.n	8003984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_OscConfig+0x248>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fd fb79 	bl	8001048 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e00e      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fd fb75 	bl	8001048 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d907      	bls.n	8003978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e150      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 800396c:	40023800 	.word	0x40023800
 8003970:	42470000 	.word	0x42470000
 8003974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b88      	ldr	r3, [pc, #544]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ea      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8097 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b81      	ldr	r3, [pc, #516]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	4b7d      	ldr	r3, [pc, #500]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a7c      	ldr	r2, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b7a      	ldr	r3, [pc, #488]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b77      	ldr	r3, [pc, #476]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b74      	ldr	r3, [pc, #464]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fd fb35 	bl	8001048 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd fb31 	bl	8001048 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e10c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba0 <HAL_RCC_OscConfig+0x474>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x2ea>
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0c:	4a63      	ldr	r2, [pc, #396]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a14:	e01c      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x30c>
 8003a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a5e      	ldr	r2, [pc, #376]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0x324>
 8003a38:	4b58      	ldr	r3, [pc, #352]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a44:	4b55      	ldr	r3, [pc, #340]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a48:	4a54      	ldr	r2, [pc, #336]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0304 	bic.w	r3, r3, #4
 8003a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7fd faf6 	bl	8001048 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd faf2 	bl	8001048 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0cb      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a76:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ee      	beq.n	8003a60 <HAL_RCC_OscConfig+0x334>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fd fae0 	bl	8001048 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fadc 	bl	8001048 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0b5      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1ee      	bne.n	8003a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	4a38      	ldr	r2, [pc, #224]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a1 	beq.w	8003c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aca:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d05c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d141      	bne.n	8003b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ade:	4b31      	ldr	r3, [pc, #196]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fab0 	bl	8001048 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aec:	f7fd faac 	bl	8001048 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e087      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afe:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	3b01      	subs	r3, #1
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	491b      	ldr	r1, [pc, #108]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fd fa85 	bl	8001048 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b42:	f7fd fa81 	bl	8001048 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e05c      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x416>
 8003b60:	e054      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd fa6e 	bl	8001048 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd fa6a 	bl	8001048 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e045      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x444>
 8003b8e:	e03d      	b.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e038      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d121      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d11a      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bd8:	4013      	ands	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd f99c 	bl	8001048 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd f998 	bl	8001048 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	@ (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd f8fc 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08009004 	.word	0x08009004
 8003de0:	20000004 	.word	0x20000004
 8003de4:	20000008 	.word	0x20000008

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b094      	sub	sp, #80	@ 0x50
 8003dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df4:	2300      	movs	r3, #0
 8003df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df8:	2300      	movs	r3, #0
 8003dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e00:	4b79      	ldr	r3, [pc, #484]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	f200 80e1 	bhi.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x34>
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1a:	e0db      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b73      	ldr	r3, [pc, #460]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x204>)
 8003e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003e20:	e0db      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e22:	4b73      	ldr	r3, [pc, #460]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e26:	e0d8      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e28:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e32:	4b6d      	ldr	r3, [pc, #436]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d063      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e52:	2300      	movs	r3, #0
 8003e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	f04f 0000 	mov.w	r0, #0
 8003e62:	f04f 0100 	mov.w	r1, #0
 8003e66:	0159      	lsls	r1, r3, #5
 8003e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6c:	0150      	lsls	r0, r2, #5
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4621      	mov	r1, r4
 8003e74:	1a51      	subs	r1, r2, r1
 8003e76:	6139      	str	r1, [r7, #16]
 8003e78:	4629      	mov	r1, r5
 8003e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	018b      	lsls	r3, r1, #6
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e96:	4651      	mov	r1, sl
 8003e98:	018a      	lsls	r2, r1, #6
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eba:	4690      	mov	r8, r2
 8003ebc:	4699      	mov	r9, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	eb18 0303 	adds.w	r3, r8, r3
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	eb49 0303 	adc.w	r3, r9, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eda:	4629      	mov	r1, r5
 8003edc:	024b      	lsls	r3, r1, #9
 8003ede:	4621      	mov	r1, r4
 8003ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	024a      	lsls	r2, r1, #9
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eee:	2200      	movs	r2, #0
 8003ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ef8:	f7fc f966 	bl	80001c8 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f04:	e058      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f06:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	4611      	mov	r1, r2
 8003f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	f04f 0000 	mov.w	r0, #0
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	0159      	lsls	r1, r3, #5
 8003f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f32:	0150      	lsls	r0, r2, #5
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4641      	mov	r1, r8
 8003f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f3e:	4649      	mov	r1, r9
 8003f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f58:	ebb2 040a 	subs.w	r4, r2, sl
 8003f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	00eb      	lsls	r3, r5, #3
 8003f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f6e:	00e2      	lsls	r2, r4, #3
 8003f70:	4614      	mov	r4, r2
 8003f72:	461d      	mov	r5, r3
 8003f74:	4643      	mov	r3, r8
 8003f76:	18e3      	adds	r3, r4, r3
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	eb45 0303 	adc.w	r3, r5, r3
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f8e:	4629      	mov	r1, r5
 8003f90:	028b      	lsls	r3, r1, #10
 8003f92:	4621      	mov	r1, r4
 8003f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f98:	4621      	mov	r1, r4
 8003f9a:	028a      	lsls	r2, r1, #10
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	61fa      	str	r2, [r7, #28]
 8003fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fac:	f7fc f90c 	bl	80001c8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x204>)
 8003fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3750      	adds	r7, #80	@ 0x50
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	00f42400 	.word	0x00f42400
 8003ff0:	007a1200 	.word	0x007a1200

08003ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000004 	.word	0x20000004

0800400c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004010:	f7ff fff0 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004014:	4602      	mov	r2, r0
 8004016:	4b05      	ldr	r3, [pc, #20]	@ (800402c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0a9b      	lsrs	r3, r3, #10
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4903      	ldr	r1, [pc, #12]	@ (8004030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	08009014 	.word	0x08009014

08004034 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004058:	2b00      	cmp	r3, #0
 800405a:	d035      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800405c:	4b62      	ldr	r3, [pc, #392]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004062:	f7fc fff1 	bl	8001048 <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004068:	e008      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800406a:	f7fc ffed 	bl	8001048 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0b0      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800407c:	4b5b      	ldr	r3, [pc, #364]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	019a      	lsls	r2, r3, #6
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	071b      	lsls	r3, r3, #28
 8004094:	4955      	ldr	r1, [pc, #340]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800409c:	4b52      	ldr	r3, [pc, #328]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040a2:	f7fc ffd1 	bl	8001048 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040aa:	f7fc ffcd 	bl	8001048 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e090      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040bc:	4b4b      	ldr	r3, [pc, #300]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8083 	beq.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	4b44      	ldr	r3, [pc, #272]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	4a43      	ldr	r2, [pc, #268]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040f2:	4b3f      	ldr	r3, [pc, #252]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3e      	ldr	r2, [pc, #248]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040fe:	f7fc ffa3 	bl	8001048 <HAL_GetTick>
 8004102:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004104:	e008      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fc ff9f 	bl	8001048 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e062      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004118:	4b35      	ldr	r3, [pc, #212]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004124:	4b31      	ldr	r3, [pc, #196]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02f      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	429a      	cmp	r2, r3
 8004140:	d028      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004142:	4b2a      	ldr	r3, [pc, #168]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800414c:	4b29      	ldr	r3, [pc, #164]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004152:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004158:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800415e:	4b23      	ldr	r3, [pc, #140]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d114      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800416a:	f7fc ff6d 	bl	8001048 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fc ff69 	bl	8001048 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e02a      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	4b18      	ldr	r3, [pc, #96]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ee      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a0:	d10d      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041a2:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80041b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b6:	490d      	ldr	r1, [pc, #52]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]
 80041bc:	e005      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041be:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4a0a      	ldr	r2, [pc, #40]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80041c8:	6093      	str	r3, [r2, #8]
 80041ca:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d6:	4905      	ldr	r1, [pc, #20]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	42470068 	.word	0x42470068
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
 80041f4:	42470e40 	.word	0x42470e40

080041f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d13e      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800421e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d12f      	bne.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800422c:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800422e:	617b      	str	r3, [r7, #20]
          break;
 8004230:	e02f      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004232:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800423e:	d108      	bne.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004240:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004248:	4a18      	ldr	r2, [pc, #96]	@ (80042ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e007      	b.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004252:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800425a:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004262:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004276:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427c:	0f1b      	lsrs	r3, r3, #28
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
          break;
 800428a:	e002      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
          break;
 8004290:	bf00      	nop
        }
      }
      break;
 8004292:	bf00      	nop
    }
  }
  return frequency;
 8004294:	697b      	ldr	r3, [r7, #20]
}
 8004296:	4618      	mov	r0, r3
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00bb8000 	.word	0x00bb8000
 80042ac:	007a1200 	.word	0x007a1200
 80042b0:	00f42400 	.word	0x00f42400

080042b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07b      	b.n	80043be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d108      	bne.n	80042e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042d6:	d009      	beq.n	80042ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	61da      	str	r2, [r3, #28]
 80042de:	e005      	b.n	80042ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fcf2 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004322:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004370:	ea42 0103 	orr.w	r1, r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0104 	and.w	r1, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	f003 0210 	and.w	r2, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c6:	b084      	sub	sp, #16
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	f107 001c 	add.w	r0, r7, #28
 80043d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d122      	bne.n	8004424 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80043f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 fbed 	bl	8005bf8 <USB_CoreReset>
 800441e:	4603      	mov	r3, r0
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	e01a      	b.n	800445a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f001 fbe1 	bl	8005bf8 <USB_CoreReset>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800443a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	639a      	str	r2, [r3, #56]	@ 0x38
 800444c:	e005      	b.n	800445a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004452:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	2b01      	cmp	r3, #1
 800445e:	d10b      	bne.n	8004478 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f043 0206 	orr.w	r2, r3, #6
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004484:	b004      	add	sp, #16
 8004486:	4770      	bx	lr

08004488 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d165      	bne.n	8004568 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a41      	ldr	r2, [pc, #260]	@ (80045a4 <USB_SetTurnaroundTime+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d906      	bls.n	80044b2 <USB_SetTurnaroundTime+0x2a>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a40      	ldr	r2, [pc, #256]	@ (80045a8 <USB_SetTurnaroundTime+0x120>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d202      	bcs.n	80044b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044ac:	230f      	movs	r3, #15
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e062      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a3c      	ldr	r2, [pc, #240]	@ (80045a8 <USB_SetTurnaroundTime+0x120>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d306      	bcc.n	80044c8 <USB_SetTurnaroundTime+0x40>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a3b      	ldr	r2, [pc, #236]	@ (80045ac <USB_SetTurnaroundTime+0x124>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d202      	bcs.n	80044c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044c2:	230e      	movs	r3, #14
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e057      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a38      	ldr	r2, [pc, #224]	@ (80045ac <USB_SetTurnaroundTime+0x124>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d306      	bcc.n	80044de <USB_SetTurnaroundTime+0x56>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a37      	ldr	r2, [pc, #220]	@ (80045b0 <USB_SetTurnaroundTime+0x128>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d202      	bcs.n	80044de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044d8:	230d      	movs	r3, #13
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e04c      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a33      	ldr	r2, [pc, #204]	@ (80045b0 <USB_SetTurnaroundTime+0x128>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d306      	bcc.n	80044f4 <USB_SetTurnaroundTime+0x6c>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a32      	ldr	r2, [pc, #200]	@ (80045b4 <USB_SetTurnaroundTime+0x12c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d802      	bhi.n	80044f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044ee:	230c      	movs	r3, #12
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e041      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a2f      	ldr	r2, [pc, #188]	@ (80045b4 <USB_SetTurnaroundTime+0x12c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d906      	bls.n	800450a <USB_SetTurnaroundTime+0x82>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a2e      	ldr	r2, [pc, #184]	@ (80045b8 <USB_SetTurnaroundTime+0x130>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d802      	bhi.n	800450a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004504:	230b      	movs	r3, #11
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e036      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a2a      	ldr	r2, [pc, #168]	@ (80045b8 <USB_SetTurnaroundTime+0x130>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d906      	bls.n	8004520 <USB_SetTurnaroundTime+0x98>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4a29      	ldr	r2, [pc, #164]	@ (80045bc <USB_SetTurnaroundTime+0x134>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d802      	bhi.n	8004520 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800451a:	230a      	movs	r3, #10
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e02b      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a26      	ldr	r2, [pc, #152]	@ (80045bc <USB_SetTurnaroundTime+0x134>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d906      	bls.n	8004536 <USB_SetTurnaroundTime+0xae>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a25      	ldr	r2, [pc, #148]	@ (80045c0 <USB_SetTurnaroundTime+0x138>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d202      	bcs.n	8004536 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004530:	2309      	movs	r3, #9
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e020      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4a21      	ldr	r2, [pc, #132]	@ (80045c0 <USB_SetTurnaroundTime+0x138>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d306      	bcc.n	800454c <USB_SetTurnaroundTime+0xc4>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a20      	ldr	r2, [pc, #128]	@ (80045c4 <USB_SetTurnaroundTime+0x13c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d802      	bhi.n	800454c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004546:	2308      	movs	r3, #8
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e015      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4a1d      	ldr	r2, [pc, #116]	@ (80045c4 <USB_SetTurnaroundTime+0x13c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d906      	bls.n	8004562 <USB_SetTurnaroundTime+0xda>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a1c      	ldr	r2, [pc, #112]	@ (80045c8 <USB_SetTurnaroundTime+0x140>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d202      	bcs.n	8004562 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800455c:	2307      	movs	r3, #7
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e00a      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004562:	2306      	movs	r3, #6
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e007      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800456e:	2309      	movs	r3, #9
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	e001      	b.n	8004578 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004574:	2309      	movs	r3, #9
 8004576:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	029b      	lsls	r3, r3, #10
 800458c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	00d8acbf 	.word	0x00d8acbf
 80045a8:	00e4e1c0 	.word	0x00e4e1c0
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	01067380 	.word	0x01067380
 80045b4:	011a499f 	.word	0x011a499f
 80045b8:	01312cff 	.word	0x01312cff
 80045bc:	014ca43f 	.word	0x014ca43f
 80045c0:	016e3600 	.word	0x016e3600
 80045c4:	01a6ab1f 	.word	0x01a6ab1f
 80045c8:	01e84800 	.word	0x01e84800

080045cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d115      	bne.n	800465e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800463e:	2001      	movs	r0, #1
 8004640:	f7fc fd0e 	bl	8001060 <HAL_Delay>
      ms++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 fa45 	bl	8005ada <USB_GetMode>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d01e      	beq.n	8004694 <USB_SetCurrentMode+0x84>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b31      	cmp	r3, #49	@ 0x31
 800465a:	d9f0      	bls.n	800463e <USB_SetCurrentMode+0x2e>
 800465c:	e01a      	b.n	8004694 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d115      	bne.n	8004690 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004670:	2001      	movs	r0, #1
 8004672:	f7fc fcf5 	bl	8001060 <HAL_Delay>
      ms++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3301      	adds	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 fa2c 	bl	8005ada <USB_GetMode>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <USB_SetCurrentMode+0x84>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b31      	cmp	r3, #49	@ 0x31
 800468c:	d9f0      	bls.n	8004670 <USB_SetCurrentMode+0x60>
 800468e:	e001      	b.n	8004694 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e005      	b.n	80046a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b32      	cmp	r3, #50	@ 0x32
 8004698:	d101      	bne.n	800469e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046a8:	b084      	sub	sp, #16
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80046b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e009      	b.n	80046dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3340      	adds	r3, #64	@ 0x40
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	2200      	movs	r2, #0
 80046d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	3301      	adds	r3, #1
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b0e      	cmp	r3, #14
 80046e0:	d9f2      	bls.n	80046c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11c      	bne.n	8004722 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004720:	e00b      	b.n	800473a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004726:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800474c:	4619      	mov	r1, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004754:	461a      	mov	r2, r3
 8004756:	680b      	ldr	r3, [r1, #0]
 8004758:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10c      	bne.n	800477a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004766:	2100      	movs	r1, #0
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f965 	bl	8004a38 <USB_SetDevSpeed>
 800476e:	e008      	b.n	8004782 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004770:	2101      	movs	r1, #1
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f960 	bl	8004a38 <USB_SetDevSpeed>
 8004778:	e003      	b.n	8004782 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800477a:	2103      	movs	r1, #3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f95b 	bl	8004a38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004782:	2110      	movs	r1, #16
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8f3 	bl	8004970 <USB_FlushTxFifo>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f91f 	bl	80049d8 <USB_FlushRxFifo>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e043      	b.n	8004856 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047e4:	d118      	bne.n	8004818 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f8:	461a      	mov	r2, r3
 80047fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	e013      	b.n	800482a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e008      	b.n	800482a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004824:	461a      	mov	r2, r3
 8004826:	2300      	movs	r3, #0
 8004828:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800484e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	3301      	adds	r3, #1
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d3b7      	bcc.n	80047ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e043      	b.n	80048ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800487a:	d118      	bne.n	80048ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488e:	461a      	mov	r2, r3
 8004890:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e013      	b.n	80048c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e008      	b.n	80048c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048cc:	461a      	mov	r2, r3
 80048ce:	2300      	movs	r3, #0
 80048d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3301      	adds	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d3b7      	bcc.n	8004864 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004906:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004914:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f043 0210 	orr.w	r2, r3, #16
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	4b0f      	ldr	r3, [pc, #60]	@ (800496c <USB_DevInit+0x2c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004968:	b004      	add	sp, #16
 800496a:	4770      	bx	lr
 800496c:	803c3800 	.word	0x803c3800

08004970 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3301      	adds	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a13      	ldr	r2, [pc, #76]	@ (80049d4 <USB_FlushTxFifo+0x64>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e01b      	b.n	80049c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	daf2      	bge.n	800497e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	019b      	lsls	r3, r3, #6
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a08      	ldr	r2, [pc, #32]	@ (80049d4 <USB_FlushTxFifo+0x64>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e006      	b.n	80049c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d0f0      	beq.n	80049a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00030d40 	.word	0x00030d40

080049d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a11      	ldr	r2, [pc, #68]	@ (8004a34 <USB_FlushRxFifo+0x5c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e018      	b.n	8004a28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	daf2      	bge.n	80049e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2210      	movs	r2, #16
 8004a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a08      	ldr	r2, [pc, #32]	@ (8004a34 <USB_FlushRxFifo+0x5c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e006      	b.n	8004a28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b10      	cmp	r3, #16
 8004a24:	d0f0      	beq.n	8004a08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	00030d40 	.word	0x00030d40

08004a38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b087      	sub	sp, #28
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0306 	and.w	r3, r3, #6
 8004a82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d102      	bne.n	8004a90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]
 8004a8e:	e00a      	b.n	8004aa6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d002      	beq.n	8004a9c <USB_GetDevSpeed+0x32>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d102      	bne.n	8004aa2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	75fb      	strb	r3, [r7, #23]
 8004aa0:	e001      	b.n	8004aa6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004aa2:	230f      	movs	r3, #15
 8004aa4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d13a      	bne.n	8004b46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aee:	4313      	orrs	r3, r2
 8004af0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d155      	bne.n	8004bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	791b      	ldrb	r3, [r3, #4]
 8004b22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	059b      	lsls	r3, r3, #22
 8004b2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e036      	b.n	8004bb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	2101      	movs	r1, #1
 8004b58:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11a      	bne.n	8004bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d161      	bne.n	8004ca4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bf6:	d11f      	bne.n	8004c38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	2101      	movs	r1, #1
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c58:	4013      	ands	r3, r2
 8004c5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0159      	lsls	r1, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	440b      	add	r3, r1
 8004c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4b35      	ldr	r3, [pc, #212]	@ (8004d74 <USB_DeactivateEndpoint+0x1b0>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]
 8004ca2:	e060      	b.n	8004d66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cba:	d11f      	bne.n	8004cfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0151      	lsls	r1, r2, #5
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	43db      	mvns	r3, r3
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d40:	4013      	ands	r3, r2
 8004d42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	0159      	lsls	r1, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	440b      	add	r3, r1
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <USB_DeactivateEndpoint+0x1b4>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	ec337800 	.word	0xec337800
 8004d78:	eff37800 	.word	0xeff37800

08004d7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 815c 	bne.w	8005056 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d132      	bne.n	8004e0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004dc4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004de4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	0151      	lsls	r1, r2, #5
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	440a      	add	r2, r1
 8004e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e04:	0cdb      	lsrs	r3, r3, #19
 8004e06:	04db      	lsls	r3, r3, #19
 8004e08:	6113      	str	r3, [r2, #16]
 8004e0a:	e074      	b.n	8004ef6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e26:	0cdb      	lsrs	r3, r3, #19
 8004e28:	04db      	lsls	r3, r3, #19
 8004e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e5c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	440b      	add	r3, r1
 8004e68:	1e59      	subs	r1, r3, #1
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e72:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e74:	4b9d      	ldr	r3, [pc, #628]	@ (80050ec <USB_EPStartXfer+0x370>)
 8004e76:	400b      	ands	r3, r1
 8004e78:	69b9      	ldr	r1, [r7, #24]
 8004e7a:	0148      	lsls	r0, r1, #5
 8004e7c:	69f9      	ldr	r1, [r7, #28]
 8004e7e:	4401      	add	r1, r0
 8004e80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004e84:	4313      	orrs	r3, r2
 8004e86:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9e:	69b9      	ldr	r1, [r7, #24]
 8004ea0:	0148      	lsls	r0, r1, #5
 8004ea2:	69f9      	ldr	r1, [r7, #28]
 8004ea4:	4401      	add	r1, r0
 8004ea6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d11f      	bne.n	8004ef6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004ed4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ef4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d14b      	bne.n	8004f94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	791b      	ldrb	r3, [r3, #4]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d128      	bne.n	8004f72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d110      	bne.n	8004f52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f4a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	e00f      	b.n	8004f72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f8c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e133      	b.n	80051fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	0151      	lsls	r1, r2, #5
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004fb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	791b      	ldrb	r3, [r3, #4]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d015      	beq.n	8004fe8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 811b 	beq.w	80051fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	69f9      	ldr	r1, [r7, #28]
 8004fde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	634b      	str	r3, [r1, #52]	@ 0x34
 8004fe6:	e109      	b.n	80051fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	440a      	add	r2, r1
 800500e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005012:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e00f      	b.n	800503a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005038:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6919      	ldr	r1, [r3, #16]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	b298      	uxth	r0, r3
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	4603      	mov	r3, r0
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fade 	bl	8005610 <USB_WritePacket>
 8005054:	e0d2      	b.n	80051fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005070:	0cdb      	lsrs	r3, r3, #19
 8005072:	04db      	lsls	r3, r3, #19
 8005074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005090:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005094:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005098:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d126      	bne.n	80050f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b8:	69b9      	ldr	r1, [r7, #24]
 80050ba:	0148      	lsls	r0, r1, #5
 80050bc:	69f9      	ldr	r1, [r7, #28]
 80050be:	4401      	add	r1, r0
 80050c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050c4:	4313      	orrs	r3, r2
 80050c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050e6:	6113      	str	r3, [r2, #16]
 80050e8:	e03a      	b.n	8005160 <USB_EPStartXfer+0x3e4>
 80050ea:	bf00      	nop
 80050ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	699a      	ldr	r2, [r3, #24]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	1e5a      	subs	r2, r3, #1
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	8afa      	ldrh	r2, [r7, #22]
 800510c:	fb03 f202 	mul.w	r2, r3, r2
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	8afb      	ldrh	r3, [r7, #22]
 8005124:	04d9      	lsls	r1, r3, #19
 8005126:	4b38      	ldr	r3, [pc, #224]	@ (8005208 <USB_EPStartXfer+0x48c>)
 8005128:	400b      	ands	r3, r1
 800512a:	69b9      	ldr	r1, [r7, #24]
 800512c:	0148      	lsls	r0, r1, #5
 800512e:	69f9      	ldr	r1, [r7, #28]
 8005130:	4401      	add	r1, r0
 8005132:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005136:	4313      	orrs	r3, r2
 8005138:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	0148      	lsls	r0, r1, #5
 8005154:	69f9      	ldr	r1, [r7, #28]
 8005156:	4401      	add	r1, r0
 8005158:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10d      	bne.n	8005182 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6919      	ldr	r1, [r3, #16]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517e:	460a      	mov	r2, r1
 8005180:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	791b      	ldrb	r3, [r3, #4]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d128      	bne.n	80051dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d110      	bne.n	80051bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	e00f      	b.n	80051dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80051fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	1ff80000 	.word	0x1ff80000

0800520c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	4613      	mov	r3, r2
 8005218:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	f040 80ce 	bne.w	80053ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d132      	bne.n	800529c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	0151      	lsls	r1, r2, #5
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	440a      	add	r2, r1
 800524c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005250:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005254:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005258:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005274:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005294:	0cdb      	lsrs	r3, r3, #19
 8005296:	04db      	lsls	r3, r3, #19
 8005298:	6113      	str	r3, [r2, #16]
 800529a:	e04e      	b.n	800533a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b6:	0cdb      	lsrs	r3, r3, #19
 80052b8:	04db      	lsls	r3, r3, #19
 80052ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80052da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80052de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d903      	bls.n	80052f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800530e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532a:	6939      	ldr	r1, [r7, #16]
 800532c:	0148      	lsls	r0, r1, #5
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	4401      	add	r1, r0
 8005332:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005336:	4313      	orrs	r3, r2
 8005338:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d11e      	bne.n	800537e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d009      	beq.n	800535c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005354:	461a      	mov	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005376:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e097      	b.n	80054ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005398:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800539c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8083 	beq.w	80054ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	2101      	movs	r1, #1
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053c4:	4313      	orrs	r3, r2
 80053c6:	634b      	str	r3, [r1, #52]	@ 0x34
 80053c8:	e071      	b.n	80054ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053e4:	0cdb      	lsrs	r3, r3, #19
 80053e6:	04db      	lsls	r3, r3, #19
 80053e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005404:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005408:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800540c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005440:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545c:	6939      	ldr	r1, [r7, #16]
 800545e:	0148      	lsls	r0, r1, #5
 8005460:	6979      	ldr	r1, [r7, #20]
 8005462:	4401      	add	r1, r0
 8005464:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10d      	bne.n	800548e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6919      	ldr	r1, [r3, #16]
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548a:	460a      	mov	r2, r1
 800548c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d14a      	bne.n	8005570 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f2:	f040 8086 	bne.w	8005602 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005514:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005518:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800553c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f242 7210 	movw	r2, #10000	@ 0x2710
 800554a:	4293      	cmp	r3, r2
 800554c:	d902      	bls.n	8005554 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
          break;
 8005552:	e056      	b.n	8005602 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800556c:	d0e7      	beq.n	800553e <USB_EPStopXfer+0x82>
 800556e:	e048      	b.n	8005602 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005584:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005588:	d13b      	bne.n	8005602 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80055de:	4293      	cmp	r3, r2
 80055e0:	d902      	bls.n	80055e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
          break;
 80055e6:	e00c      	b.n	8005602 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005600:	d0e7      	beq.n	80055d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005602:	7dfb      	ldrb	r3, [r7, #23]
}
 8005604:	4618      	mov	r0, r3
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	@ 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4611      	mov	r1, r2
 800561c:	461a      	mov	r2, r3
 800561e:	460b      	mov	r3, r1
 8005620:	71fb      	strb	r3, [r7, #7]
 8005622:	4613      	mov	r3, r2
 8005624:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800562e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d123      	bne.n	800567e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005636:	88bb      	ldrh	r3, [r7, #4]
 8005638:	3303      	adds	r3, #3
 800563a:	089b      	lsrs	r3, r3, #2
 800563c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800563e:	2300      	movs	r3, #0
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	e018      	b.n	8005676 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	031a      	lsls	r2, r3, #12
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	4413      	add	r3, r2
 800564c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005650:	461a      	mov	r2, r3
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	3301      	adds	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3301      	adds	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	3301      	adds	r3, #1
 8005668:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3301      	adds	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	3301      	adds	r3, #1
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	d3e2      	bcc.n	8005644 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3724      	adds	r7, #36	@ 0x24
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800568c:	b480      	push	{r7}
 800568e:	b08b      	sub	sp, #44	@ 0x2c
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	e014      	b.n	80056e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	3301      	adds	r3, #1
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	3301      	adds	r3, #1
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	3301      	adds	r3, #1
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	3301      	adds	r3, #1
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	3301      	adds	r3, #1
 80056e0:	623b      	str	r3, [r7, #32]
 80056e2:	6a3a      	ldr	r2, [r7, #32]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d3e6      	bcc.n	80056b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056ea:	8bfb      	ldrh	r3, [r7, #30]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01e      	beq.n	800572e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056fa:	461a      	mov	r2, r3
 80056fc:	f107 0310 	add.w	r3, r7, #16
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
 8005710:	b2da      	uxtb	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	701a      	strb	r2, [r3, #0]
      i++;
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	3301      	adds	r3, #1
 800571a:	623b      	str	r3, [r7, #32]
      pDest++;
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	3301      	adds	r3, #1
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005722:	8bfb      	ldrh	r3, [r7, #30]
 8005724:	3b01      	subs	r3, #1
 8005726:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005728:	8bfb      	ldrh	r3, [r7, #30]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ea      	bne.n	8005704 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005730:	4618      	mov	r0, r3
 8005732:	372c      	adds	r7, #44	@ 0x2c
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d12c      	bne.n	80057b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	db12      	blt.n	8005790 <USB_EPSetStall+0x54>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00f      	beq.n	8005790 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800578e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	e02b      	b.n	800580a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	db12      	blt.n	80057ea <USB_EPSetStall+0xae>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00f      	beq.n	80057ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005808:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d128      	bne.n	8005886 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800584e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005852:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	791b      	ldrb	r3, [r3, #4]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d003      	beq.n	8005864 <USB_EPClearStall+0x4c>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	791b      	ldrb	r3, [r3, #4]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d138      	bne.n	80058d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800587e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e027      	b.n	80058d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	791b      	ldrb	r3, [r3, #4]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d003      	beq.n	80058b6 <USB_EPClearStall+0x9e>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	791b      	ldrb	r3, [r3, #4]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d10f      	bne.n	80058d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005902:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005906:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800595e:	f023 0302 	bic.w	r3, r3, #2
 8005962:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800598c:	f023 0303 	bic.w	r3, r3, #3
 8005990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4013      	ands	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059cc:	68fb      	ldr	r3, [r7, #12]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	0c1b      	lsrs	r3, r3, #16
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	b29b      	uxth	r3, r3
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a70:	68bb      	ldr	r3, [r7, #8]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b087      	sub	sp, #28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	01db      	lsls	r3, r3, #7
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005acc:	68bb      	ldr	r3, [r7, #8]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b14:	f023 0307 	bic.w	r3, r3, #7
 8005b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	460b      	mov	r3, r1
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	333c      	adds	r3, #60	@ 0x3c
 8005b52:	3304      	adds	r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4a26      	ldr	r2, [pc, #152]	@ (8005bf4 <USB_EP0_OutStart+0xb8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d90a      	bls.n	8005b76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b70:	d101      	bne.n	8005b76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e037      	b.n	8005be6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba4:	f043 0318 	orr.w	r3, r3, #24
 8005ba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bb8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005bbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10f      	bne.n	8005be4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bde:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005be2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	4f54300a 	.word	0x4f54300a

08005bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a13      	ldr	r2, [pc, #76]	@ (8005c5c <USB_CoreReset+0x64>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e01b      	b.n	8005c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	daf2      	bge.n	8005c04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4a09      	ldr	r2, [pc, #36]	@ (8005c5c <USB_CoreReset+0x64>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d901      	bls.n	8005c40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e006      	b.n	8005c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d0f0      	beq.n	8005c2e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	00030d40 	.word	0x00030d40

08005c60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c6c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005c70:	f002 fca0 	bl	80085b4 <USBD_static_malloc>
 8005c74:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	32b0      	adds	r2, #176	@ 0xb0
 8005c86:	2100      	movs	r1, #0
 8005c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e0d4      	b.n	8005e3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005c90:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005c94:	2100      	movs	r1, #0
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f002 fec8 	bl	8008a2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	32b0      	adds	r2, #176	@ 0xb0
 8005ca6:	68f9      	ldr	r1, [r7, #12]
 8005ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	32b0      	adds	r2, #176	@ 0xb0
 8005cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	7c1b      	ldrb	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d138      	bne.n	8005d3a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8005e44 <USBD_CDC_Init+0x1e4>)
 8005cca:	7819      	ldrb	r1, [r3, #0]
 8005ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f002 fb4b 	bl	800836e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e44 <USBD_CDC_Init+0x1e4>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f003 020f 	and.w	r2, r3, #15
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	3324      	adds	r3, #36	@ 0x24
 8005cee:	2201      	movs	r2, #1
 8005cf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005cf2:	4b55      	ldr	r3, [pc, #340]	@ (8005e48 <USBD_CDC_Init+0x1e8>)
 8005cf4:	7819      	ldrb	r1, [r3, #0]
 8005cf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f002 fb36 	bl	800836e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d02:	4b51      	ldr	r3, [pc, #324]	@ (8005e48 <USBD_CDC_Init+0x1e8>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f003 020f 	and.w	r2, r3, #15
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e4c <USBD_CDC_Init+0x1ec>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f003 020f 	and.w	r2, r3, #15
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	3326      	adds	r3, #38	@ 0x26
 8005d34:	2210      	movs	r2, #16
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	e035      	b.n	8005da6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d3a:	4b42      	ldr	r3, [pc, #264]	@ (8005e44 <USBD_CDC_Init+0x1e4>)
 8005d3c:	7819      	ldrb	r1, [r3, #0]
 8005d3e:	2340      	movs	r3, #64	@ 0x40
 8005d40:	2202      	movs	r2, #2
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f002 fb13 	bl	800836e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d48:	4b3e      	ldr	r3, [pc, #248]	@ (8005e44 <USBD_CDC_Init+0x1e4>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f003 020f 	and.w	r2, r3, #15
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3324      	adds	r3, #36	@ 0x24
 8005d5e:	2201      	movs	r2, #1
 8005d60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d62:	4b39      	ldr	r3, [pc, #228]	@ (8005e48 <USBD_CDC_Init+0x1e8>)
 8005d64:	7819      	ldrb	r1, [r3, #0]
 8005d66:	2340      	movs	r3, #64	@ 0x40
 8005d68:	2202      	movs	r2, #2
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f002 faff 	bl	800836e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d70:	4b35      	ldr	r3, [pc, #212]	@ (8005e48 <USBD_CDC_Init+0x1e8>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005d88:	2201      	movs	r2, #1
 8005d8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e4c <USBD_CDC_Init+0x1ec>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f003 020f 	and.w	r2, r3, #15
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	3326      	adds	r3, #38	@ 0x26
 8005da2:	2210      	movs	r2, #16
 8005da4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005da6:	4b29      	ldr	r3, [pc, #164]	@ (8005e4c <USBD_CDC_Init+0x1ec>)
 8005da8:	7819      	ldrb	r1, [r3, #0]
 8005daa:	2308      	movs	r3, #8
 8005dac:	2203      	movs	r2, #3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f002 fadd 	bl	800836e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005db4:	4b25      	ldr	r3, [pc, #148]	@ (8005e4c <USBD_CDC_Init+0x1ec>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3324      	adds	r3, #36	@ 0x24
 8005dca:	2201      	movs	r2, #1
 8005dcc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	33b0      	adds	r3, #176	@ 0xb0
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e04:	2302      	movs	r3, #2
 8005e06:	e018      	b.n	8005e3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7c1b      	ldrb	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e10:	4b0d      	ldr	r3, [pc, #52]	@ (8005e48 <USBD_CDC_Init+0x1e8>)
 8005e12:	7819      	ldrb	r1, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 fb94 	bl	800854c <USBD_LL_PrepareReceive>
 8005e24:	e008      	b.n	8005e38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e26:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <USBD_CDC_Init+0x1e8>)
 8005e28:	7819      	ldrb	r1, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005e30:	2340      	movs	r3, #64	@ 0x40
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f002 fb8a 	bl	800854c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000097 	.word	0x20000097
 8005e48:	20000098 	.word	0x20000098
 8005e4c:	20000099 	.word	0x20000099

08005e50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f48 <USBD_CDC_DeInit+0xf8>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f002 faa9 	bl	80083ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e68:	4b37      	ldr	r3, [pc, #220]	@ (8005f48 <USBD_CDC_DeInit+0xf8>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	3324      	adds	r3, #36	@ 0x24
 8005e7e:	2200      	movs	r2, #0
 8005e80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e82:	4b32      	ldr	r3, [pc, #200]	@ (8005f4c <USBD_CDC_DeInit+0xfc>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f002 fa96 	bl	80083ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f4c <USBD_CDC_DeInit+0xfc>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005eaa:	4b29      	ldr	r3, [pc, #164]	@ (8005f50 <USBD_CDC_DeInit+0x100>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f002 fa82 	bl	80083ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005eb6:	4b26      	ldr	r3, [pc, #152]	@ (8005f50 <USBD_CDC_DeInit+0x100>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3324      	adds	r3, #36	@ 0x24
 8005ecc:	2200      	movs	r2, #0
 8005ece:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f50 <USBD_CDC_DeInit+0x100>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 020f 	and.w	r2, r3, #15
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3326      	adds	r3, #38	@ 0x26
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	32b0      	adds	r2, #176	@ 0xb0
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01f      	beq.n	8005f3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	33b0      	adds	r3, #176	@ 0xb0
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32b0      	adds	r2, #176	@ 0xb0
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f002 fb56 	bl	80085d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	32b0      	adds	r2, #176	@ 0xb0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000097 	.word	0x20000097
 8005f4c:	20000098 	.word	0x20000098
 8005f50:	20000099 	.word	0x20000099

08005f54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	32b0      	adds	r2, #176	@ 0xb0
 8005f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e0bf      	b.n	8006104 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d050      	beq.n	8006032 <USBD_CDC_Setup+0xde>
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	f040 80af 	bne.w	80060f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	88db      	ldrh	r3, [r3, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d03a      	beq.n	8006014 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	b25b      	sxtb	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	da1b      	bge.n	8005fe0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	33b0      	adds	r3, #176	@ 0xb0
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	88d2      	ldrh	r2, [r2, #6]
 8005fc4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	88db      	ldrh	r3, [r3, #6]
 8005fca:	2b07      	cmp	r3, #7
 8005fcc:	bf28      	it	cs
 8005fce:	2307      	movcs	r3, #7
 8005fd0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	89fa      	ldrh	r2, [r7, #14]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fd87 	bl	8007aec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005fde:	e090      	b.n	8006102 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	785a      	ldrb	r2, [r3, #1]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	88db      	ldrh	r3, [r3, #6]
 8005fee:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ff0:	d803      	bhi.n	8005ffa <USBD_CDC_Setup+0xa6>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	88db      	ldrh	r3, [r3, #6]
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	e000      	b.n	8005ffc <USBD_CDC_Setup+0xa8>
 8005ffa:	2240      	movs	r2, #64	@ 0x40
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006002:	6939      	ldr	r1, [r7, #16]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800600a:	461a      	mov	r2, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 fd99 	bl	8007b44 <USBD_CtlPrepareRx>
      break;
 8006012:	e076      	b.n	8006102 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	33b0      	adds	r3, #176	@ 0xb0
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	7850      	ldrb	r0, [r2, #1]
 800602a:	2200      	movs	r2, #0
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	4798      	blx	r3
      break;
 8006030:	e067      	b.n	8006102 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b0b      	cmp	r3, #11
 8006038:	d851      	bhi.n	80060de <USBD_CDC_Setup+0x18a>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <USBD_CDC_Setup+0xec>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006071 	.word	0x08006071
 8006044:	080060ed 	.word	0x080060ed
 8006048:	080060df 	.word	0x080060df
 800604c:	080060df 	.word	0x080060df
 8006050:	080060df 	.word	0x080060df
 8006054:	080060df 	.word	0x080060df
 8006058:	080060df 	.word	0x080060df
 800605c:	080060df 	.word	0x080060df
 8006060:	080060df 	.word	0x080060df
 8006064:	080060df 	.word	0x080060df
 8006068:	0800609b 	.word	0x0800609b
 800606c:	080060c5 	.word	0x080060c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b03      	cmp	r3, #3
 800607a:	d107      	bne.n	800608c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800607c:	f107 030a 	add.w	r3, r7, #10
 8006080:	2202      	movs	r2, #2
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fd31 	bl	8007aec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800608a:	e032      	b.n	80060f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fcbb 	bl	8007a0a <USBD_CtlError>
            ret = USBD_FAIL;
 8006094:	2303      	movs	r3, #3
 8006096:	75fb      	strb	r3, [r7, #23]
          break;
 8006098:	e02b      	b.n	80060f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d107      	bne.n	80060b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060a6:	f107 030d 	add.w	r3, r7, #13
 80060aa:	2201      	movs	r2, #1
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 fd1c 	bl	8007aec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b4:	e01d      	b.n	80060f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 fca6 	bl	8007a0a <USBD_CtlError>
            ret = USBD_FAIL;
 80060be:	2303      	movs	r3, #3
 80060c0:	75fb      	strb	r3, [r7, #23]
          break;
 80060c2:	e016      	b.n	80060f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d00f      	beq.n	80060f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fc99 	bl	8007a0a <USBD_CtlError>
            ret = USBD_FAIL;
 80060d8:	2303      	movs	r3, #3
 80060da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060dc:	e008      	b.n	80060f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fc92 	bl	8007a0a <USBD_CtlError>
          ret = USBD_FAIL;
 80060e6:	2303      	movs	r3, #3
 80060e8:	75fb      	strb	r3, [r7, #23]
          break;
 80060ea:	e002      	b.n	80060f2 <USBD_CDC_Setup+0x19e>
          break;
 80060ec:	bf00      	nop
 80060ee:	e008      	b.n	8006102 <USBD_CDC_Setup+0x1ae>
          break;
 80060f0:	bf00      	nop
      }
      break;
 80060f2:	e006      	b.n	8006102 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 fc87 	bl	8007a0a <USBD_CtlError>
      ret = USBD_FAIL;
 80060fc:	2303      	movs	r3, #3
 80060fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006100:	bf00      	nop
  }

  return (uint8_t)ret;
 8006102:	7dfb      	ldrb	r3, [r7, #23]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800611e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	32b0      	adds	r2, #176	@ 0xb0
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006132:	2303      	movs	r3, #3
 8006134:	e065      	b.n	8006202 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	32b0      	adds	r2, #176	@ 0xb0
 8006140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006144:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006146:	78fb      	ldrb	r3, [r7, #3]
 8006148:	f003 020f 	and.w	r2, r3, #15
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	3318      	adds	r3, #24
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02f      	beq.n	80061c0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	f003 020f 	and.w	r2, r3, #15
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	3318      	adds	r3, #24
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	f003 010f 	and.w	r1, r3, #15
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	460b      	mov	r3, r1
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	440b      	add	r3, r1
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4403      	add	r3, r0
 8006188:	3348      	adds	r3, #72	@ 0x48
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006196:	2b00      	cmp	r3, #0
 8006198:	d112      	bne.n	80061c0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	f003 020f 	and.w	r2, r3, #15
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	3318      	adds	r3, #24
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061b2:	78f9      	ldrb	r1, [r7, #3]
 80061b4:	2300      	movs	r3, #0
 80061b6:	2200      	movs	r2, #0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f002 f9a6 	bl	800850a <USBD_LL_Transmit>
 80061be:	e01f      	b.n	8006200 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	33b0      	adds	r3, #176	@ 0xb0
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d010      	beq.n	8006200 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	33b0      	adds	r3, #176	@ 0xb0
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	32b0      	adds	r2, #176	@ 0xb0
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	32b0      	adds	r2, #176	@ 0xb0
 8006230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	e01a      	b.n	8006272 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f002 f9a4 	bl	800858e <USBD_LL_GetRxDataSize>
 8006246:	4602      	mov	r2, r0
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	33b0      	adds	r3, #176	@ 0xb0
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800626c:	4611      	mov	r1, r2
 800626e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	32b0      	adds	r2, #176	@ 0xb0
 800628c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006290:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006298:	2303      	movs	r3, #3
 800629a:	e024      	b.n	80062e6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	33b0      	adds	r3, #176	@ 0xb0
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d019      	beq.n	80062e4 <USBD_CDC_EP0_RxReady+0x6a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80062b6:	2bff      	cmp	r3, #255	@ 0xff
 80062b8:	d014      	beq.n	80062e4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	33b0      	adds	r3, #176	@ 0xb0
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80062d2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	22ff      	movs	r2, #255	@ 0xff
 80062e0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062f8:	2182      	movs	r1, #130	@ 0x82
 80062fa:	4818      	ldr	r0, [pc, #96]	@ (800635c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062fc:	f000 fd4f 	bl	8006d9e <USBD_GetEpDesc>
 8006300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006302:	2101      	movs	r1, #1
 8006304:	4815      	ldr	r0, [pc, #84]	@ (800635c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006306:	f000 fd4a 	bl	8006d9e <USBD_GetEpDesc>
 800630a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800630c:	2181      	movs	r1, #129	@ 0x81
 800630e:	4813      	ldr	r0, [pc, #76]	@ (800635c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006310:	f000 fd45 	bl	8006d9e <USBD_GetEpDesc>
 8006314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2210      	movs	r2, #16
 8006320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d006      	beq.n	8006336 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2200      	movs	r2, #0
 800632c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006330:	711a      	strb	r2, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006344:	711a      	strb	r2, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2243      	movs	r2, #67	@ 0x43
 800634e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006350:	4b02      	ldr	r3, [pc, #8]	@ (800635c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000054 	.word	0x20000054

08006360 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006368:	2182      	movs	r1, #130	@ 0x82
 800636a:	4818      	ldr	r0, [pc, #96]	@ (80063cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800636c:	f000 fd17 	bl	8006d9e <USBD_GetEpDesc>
 8006370:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006372:	2101      	movs	r1, #1
 8006374:	4815      	ldr	r0, [pc, #84]	@ (80063cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006376:	f000 fd12 	bl	8006d9e <USBD_GetEpDesc>
 800637a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800637c:	2181      	movs	r1, #129	@ 0x81
 800637e:	4813      	ldr	r0, [pc, #76]	@ (80063cc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006380:	f000 fd0d 	bl	8006d9e <USBD_GetEpDesc>
 8006384:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2210      	movs	r2, #16
 8006390:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d006      	beq.n	80063a6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2200      	movs	r2, #0
 800639c:	711a      	strb	r2, [r3, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f042 0202 	orr.w	r2, r2, #2
 80063a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	711a      	strb	r2, [r3, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f042 0202 	orr.w	r2, r2, #2
 80063b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2243      	movs	r2, #67	@ 0x43
 80063be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063c0:	4b02      	ldr	r3, [pc, #8]	@ (80063cc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000054 	.word	0x20000054

080063d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063d8:	2182      	movs	r1, #130	@ 0x82
 80063da:	4818      	ldr	r0, [pc, #96]	@ (800643c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063dc:	f000 fcdf 	bl	8006d9e <USBD_GetEpDesc>
 80063e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063e2:	2101      	movs	r1, #1
 80063e4:	4815      	ldr	r0, [pc, #84]	@ (800643c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063e6:	f000 fcda 	bl	8006d9e <USBD_GetEpDesc>
 80063ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063ec:	2181      	movs	r1, #129	@ 0x81
 80063ee:	4813      	ldr	r0, [pc, #76]	@ (800643c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063f0:	f000 fcd5 	bl	8006d9e <USBD_GetEpDesc>
 80063f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2210      	movs	r2, #16
 8006400:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d006      	beq.n	8006416 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	2200      	movs	r2, #0
 800640c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006410:	711a      	strb	r2, [r3, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006424:	711a      	strb	r2, [r3, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2243      	movs	r2, #67	@ 0x43
 800642e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006430:	4b02      	ldr	r3, [pc, #8]	@ (800643c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000054 	.word	0x20000054

08006440 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	220a      	movs	r2, #10
 800644c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800644e:	4b03      	ldr	r3, [pc, #12]	@ (800645c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000010 	.word	0x20000010

08006460 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006470:	2303      	movs	r3, #3
 8006472:	e009      	b.n	8006488 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	33b0      	adds	r3, #176	@ 0xb0
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	32b0      	adds	r2, #176	@ 0xb0
 80064aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e008      	b.n	80064cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	32b0      	adds	r2, #176	@ 0xb0
 80064ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e004      	b.n	8006506 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	32b0      	adds	r2, #176	@ 0xb0
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32b0      	adds	r2, #176	@ 0xb0
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006542:	2303      	movs	r3, #3
 8006544:	e025      	b.n	8006592 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800654c:	2b00      	cmp	r3, #0
 800654e:	d11f      	bne.n	8006590 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2201      	movs	r2, #1
 8006554:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006558:	4b10      	ldr	r3, [pc, #64]	@ (800659c <USBD_CDC_TransmitPacket+0x88>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4403      	add	r3, r0
 8006572:	3318      	adds	r3, #24
 8006574:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006576:	4b09      	ldr	r3, [pc, #36]	@ (800659c <USBD_CDC_TransmitPacket+0x88>)
 8006578:	7819      	ldrb	r1, [r3, #0]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f001 ffbf 	bl	800850a <USBD_LL_Transmit>

    ret = USBD_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000097 	.word	0x20000097

080065a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	32b0      	adds	r2, #176	@ 0xb0
 80065b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32b0      	adds	r2, #176	@ 0xb0
 80065c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e018      	b.n	8006600 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	7c1b      	ldrb	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006608 <USBD_CDC_ReceivePacket+0x68>)
 80065d8:	7819      	ldrb	r1, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80065e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 ffb1 	bl	800854c <USBD_LL_PrepareReceive>
 80065ea:	e008      	b.n	80065fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065ec:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <USBD_CDC_ReceivePacket+0x68>)
 80065ee:	7819      	ldrb	r1, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80065f6:	2340      	movs	r3, #64	@ 0x40
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 ffa7 	bl	800854c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000098 	.word	0x20000098

0800660c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006620:	2303      	movs	r3, #3
 8006622:	e01f      	b.n	8006664 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	79fa      	ldrb	r2, [r7, #7]
 8006656:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f001 fe21 	bl	80082a0 <USBD_LL_Init>
 800665e:	4603      	mov	r3, r0
 8006660:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006662:	7dfb      	ldrb	r3, [r7, #23]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	e025      	b.n	80066d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	32ae      	adds	r2, #174	@ 0xae
 8006696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00f      	beq.n	80066c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	32ae      	adds	r2, #174	@ 0xae
 80066aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	f107 020e 	add.w	r2, r7, #14
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	4602      	mov	r2, r0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fe29 	bl	8008338 <USBD_LL_Start>
 80066e6:	4603      	mov	r3, r0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d009      	beq.n	8006734 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	4611      	mov	r1, r2
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
 8006730:	4603      	mov	r3, r0
 8006732:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	4611      	mov	r1, r2
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f001 f906 	bl	8007996 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d01a      	beq.n	80067e4 <USBD_LL_SetupStage+0x72>
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d822      	bhi.n	80067f8 <USBD_LL_SetupStage+0x86>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <USBD_LL_SetupStage+0x4a>
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d00a      	beq.n	80067d0 <USBD_LL_SetupStage+0x5e>
 80067ba:	e01d      	b.n	80067f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fb5d 	bl	8006e84 <USBD_StdDevReq>
 80067ca:	4603      	mov	r3, r0
 80067cc:	73fb      	strb	r3, [r7, #15]
      break;
 80067ce:	e020      	b.n	8006812 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fbc5 	bl	8006f68 <USBD_StdItfReq>
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
      break;
 80067e2:	e016      	b.n	8006812 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fc27 	bl	8007040 <USBD_StdEPReq>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
      break;
 80067f6:	e00c      	b.n	8006812 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80067fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006802:	b2db      	uxtb	r3, r3
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fdf6 	bl	80083f8 <USBD_LL_StallEP>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
      break;
 8006810:	bf00      	nop
  }

  return ret;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	460b      	mov	r3, r1
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d16e      	bne.n	8006912 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800683a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006842:	2b03      	cmp	r3, #3
 8006844:	f040 8098 	bne.w	8006978 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	429a      	cmp	r2, r3
 8006852:	d913      	bls.n	800687c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	4293      	cmp	r3, r2
 800686c:	bf28      	it	cs
 800686e:	4613      	movcs	r3, r2
 8006870:	461a      	mov	r2, r3
 8006872:	6879      	ldr	r1, [r7, #4]
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f001 f982 	bl	8007b7e <USBD_CtlContinueRx>
 800687a:	e07d      	b.n	8006978 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2b02      	cmp	r3, #2
 8006888:	d014      	beq.n	80068b4 <USBD_LL_DataOutStage+0x98>
 800688a:	2b02      	cmp	r3, #2
 800688c:	d81d      	bhi.n	80068ca <USBD_LL_DataOutStage+0xae>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <USBD_LL_DataOutStage+0x7c>
 8006892:	2b01      	cmp	r3, #1
 8006894:	d003      	beq.n	800689e <USBD_LL_DataOutStage+0x82>
 8006896:	e018      	b.n	80068ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	75bb      	strb	r3, [r7, #22]
            break;
 800689c:	e018      	b.n	80068d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	4619      	mov	r1, r3
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 fa5e 	bl	8006d6a <USBD_CoreFindIF>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75bb      	strb	r3, [r7, #22]
            break;
 80068b2:	e00d      	b.n	80068d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fa60 	bl	8006d84 <USBD_CoreFindEP>
 80068c4:	4603      	mov	r3, r0
 80068c6:	75bb      	strb	r3, [r7, #22]
            break;
 80068c8:	e002      	b.n	80068d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75bb      	strb	r3, [r7, #22]
            break;
 80068ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80068d0:	7dbb      	ldrb	r3, [r7, #22]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d119      	bne.n	800690a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d113      	bne.n	800690a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80068e2:	7dba      	ldrb	r2, [r7, #22]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	32ae      	adds	r2, #174	@ 0xae
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80068f2:	7dba      	ldrb	r2, [r7, #22]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80068fa:	7dba      	ldrb	r2, [r7, #22]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	32ae      	adds	r2, #174	@ 0xae
 8006900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f001 f948 	bl	8007ba0 <USBD_CtlSendStatus>
 8006910:	e032      	b.n	8006978 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fa31 	bl	8006d84 <USBD_CoreFindEP>
 8006922:	4603      	mov	r3, r0
 8006924:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006926:	7dbb      	ldrb	r3, [r7, #22]
 8006928:	2bff      	cmp	r3, #255	@ 0xff
 800692a:	d025      	beq.n	8006978 <USBD_LL_DataOutStage+0x15c>
 800692c:	7dbb      	ldrb	r3, [r7, #22]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d122      	bne.n	8006978 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b03      	cmp	r3, #3
 800693c:	d117      	bne.n	800696e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800693e:	7dba      	ldrb	r2, [r7, #22]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	32ae      	adds	r2, #174	@ 0xae
 8006944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00f      	beq.n	800696e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800694e:	7dba      	ldrb	r2, [r7, #22]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006956:	7dba      	ldrb	r2, [r7, #22]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	32ae      	adds	r2, #174	@ 0xae
 800695c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	7afa      	ldrb	r2, [r7, #11]
 8006964:	4611      	mov	r1, r2
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	4798      	blx	r3
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800696e:	7dfb      	ldrb	r3, [r7, #23]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	e000      	b.n	800697a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	460b      	mov	r3, r1
 800698c:	607a      	str	r2, [r7, #4]
 800698e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d16f      	bne.n	8006a76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3314      	adds	r3, #20
 800699a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d15a      	bne.n	8006a5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d914      	bls.n	80069dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 f8aa 	bl	8007b22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 fdb9 	bl	800854c <USBD_LL_PrepareReceive>
 80069da:	e03f      	b.n	8006a5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d11c      	bne.n	8006a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d316      	bcc.n	8006a22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d20f      	bcs.n	8006a22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f001 f88b 	bl	8007b22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a14:	2300      	movs	r3, #0
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f001 fd96 	bl	800854c <USBD_LL_PrepareReceive>
 8006a20:	e01c      	b.n	8006a5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d10f      	bne.n	8006a4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a4e:	2180      	movs	r1, #128	@ 0x80
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f001 fcd1 	bl	80083f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 f8b5 	bl	8007bc6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d03a      	beq.n	8006adc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff fe42 	bl	80066f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006a74:	e032      	b.n	8006adc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f97f 	bl	8006d84 <USBD_CoreFindEP>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	2bff      	cmp	r3, #255	@ 0xff
 8006a8e:	d025      	beq.n	8006adc <USBD_LL_DataInStage+0x15a>
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d122      	bne.n	8006adc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d11c      	bne.n	8006adc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006aa2:	7dfa      	ldrb	r2, [r7, #23]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	32ae      	adds	r2, #174	@ 0xae
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d014      	beq.n	8006adc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006ab2:	7dfa      	ldrb	r2, [r7, #23]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006aba:	7dfa      	ldrb	r2, [r7, #23]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	32ae      	adds	r2, #174	@ 0xae
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	7afa      	ldrb	r2, [r7, #11]
 8006ac8:	4611      	mov	r1, r2
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	4798      	blx	r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006ad2:	7dbb      	ldrb	r3, [r7, #22]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ad8:	7dbb      	ldrb	r3, [r7, #22]
 8006ada:	e000      	b.n	8006ade <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d014      	beq.n	8006b4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6852      	ldr	r2, [r2, #4]
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b4c:	2340      	movs	r3, #64	@ 0x40
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 fc0b 	bl	800836e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2240      	movs	r2, #64	@ 0x40
 8006b64:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b68:	2340      	movs	r3, #64	@ 0x40
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2180      	movs	r1, #128	@ 0x80
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 fbfd 	bl	800836e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2240      	movs	r2, #64	@ 0x40
 8006b7e:	621a      	str	r2, [r3, #32]

  return ret;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2204      	movs	r2, #4
 8006bc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d106      	bne.n	8006bf8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b082      	sub	sp, #8
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d110      	bne.n	8006c3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	32ae      	adds	r2, #174	@ 0xae
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e01c      	b.n	8006ca2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d115      	bne.n	8006ca0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	32ae      	adds	r2, #174	@ 0xae
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	32ae      	adds	r2, #174	@ 0xae
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	32ae      	adds	r2, #174	@ 0xae
 8006cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e01c      	b.n	8006d06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d115      	bne.n	8006d04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	32ae      	adds	r2, #174	@ 0xae
 8006ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	32ae      	adds	r2, #174	@ 0xae
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6852      	ldr	r2, [r2, #4]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	4611      	mov	r1, r2
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	885b      	ldrh	r3, [r3, #2]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	7812      	ldrb	r2, [r2, #0]
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d91f      	bls.n	8006e04 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006dca:	e013      	b.n	8006df4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006dcc:	f107 030a 	add.w	r3, r7, #10
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6978      	ldr	r0, [r7, #20]
 8006dd4:	f000 f81b 	bl	8006e0e <USBD_GetNextDesc>
 8006dd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	d108      	bne.n	8006df4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	789b      	ldrb	r3, [r3, #2]
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d008      	beq.n	8006e02 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	885b      	ldrh	r3, [r3, #2]
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	897b      	ldrh	r3, [r7, #10]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d8e5      	bhi.n	8006dcc <USBD_GetEpDesc+0x2e>
 8006e00:	e000      	b.n	8006e04 <USBD_GetEpDesc+0x66>
          break;
 8006e02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e04:	693b      	ldr	r3, [r7, #16]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	7812      	ldrb	r2, [r2, #0]
 8006e24:	4413      	add	r3, r2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4413      	add	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006e38:	68fb      	ldr	r3, [r7, #12]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e64:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e68:	021b      	lsls	r3, r3, #8
 8006e6a:	b21a      	sxth	r2, r3
 8006e6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b21b      	sxth	r3, r3
 8006e74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e76:	89fb      	ldrh	r3, [r7, #14]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e9a:	2b40      	cmp	r3, #64	@ 0x40
 8006e9c:	d005      	beq.n	8006eaa <USBD_StdDevReq+0x26>
 8006e9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ea0:	d857      	bhi.n	8006f52 <USBD_StdDevReq+0xce>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00f      	beq.n	8006ec6 <USBD_StdDevReq+0x42>
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	d153      	bne.n	8006f52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	32ae      	adds	r2, #174	@ 0xae
 8006eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec4:	e04a      	b.n	8006f5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b09      	cmp	r3, #9
 8006ecc:	d83b      	bhi.n	8006f46 <USBD_StdDevReq+0xc2>
 8006ece:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <USBD_StdDevReq+0x50>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	08006f3d 	.word	0x08006f3d
 8006edc:	08006f47 	.word	0x08006f47
 8006ee0:	08006f33 	.word	0x08006f33
 8006ee4:	08006f47 	.word	0x08006f47
 8006ee8:	08006f07 	.word	0x08006f07
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006f47 	.word	0x08006f47
 8006ef4:	08006f1f 	.word	0x08006f1f
 8006ef8:	08006f11 	.word	0x08006f11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa3c 	bl	800737c <USBD_GetDescriptor>
          break;
 8006f04:	e024      	b.n	8006f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fba1 	bl	8007650 <USBD_SetAddress>
          break;
 8006f0e:	e01f      	b.n	8006f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fbe0 	bl	80076d8 <USBD_SetConfig>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8006f1c:	e018      	b.n	8006f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fc83 	bl	800782c <USBD_GetConfig>
          break;
 8006f26:	e013      	b.n	8006f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fcb4 	bl	8007898 <USBD_GetStatus>
          break;
 8006f30:	e00e      	b.n	8006f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fce3 	bl	8007900 <USBD_SetFeature>
          break;
 8006f3a:	e009      	b.n	8006f50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fd07 	bl	8007952 <USBD_ClrFeature>
          break;
 8006f44:	e004      	b.n	8006f50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fd5e 	bl	8007a0a <USBD_CtlError>
          break;
 8006f4e:	bf00      	nop
      }
      break;
 8006f50:	e004      	b.n	8006f5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fd58 	bl	8007a0a <USBD_CtlError>
      break;
 8006f5a:	bf00      	nop
  }

  return ret;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop

08006f68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	d005      	beq.n	8006f8e <USBD_StdItfReq+0x26>
 8006f82:	2b40      	cmp	r3, #64	@ 0x40
 8006f84:	d852      	bhi.n	800702c <USBD_StdItfReq+0xc4>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <USBD_StdItfReq+0x26>
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d14e      	bne.n	800702c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d840      	bhi.n	800701e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	889b      	ldrh	r3, [r3, #4]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d836      	bhi.n	8007014 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	889b      	ldrh	r3, [r3, #4]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff fedb 	bl	8006d6a <USBD_CoreFindIF>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2bff      	cmp	r3, #255	@ 0xff
 8006fbc:	d01d      	beq.n	8006ffa <USBD_StdItfReq+0x92>
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11a      	bne.n	8006ffa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006fc4:	7bba      	ldrb	r2, [r7, #14]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	32ae      	adds	r2, #174	@ 0xae
 8006fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00f      	beq.n	8006ff4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006fd4:	7bba      	ldrb	r2, [r7, #14]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006fdc:	7bba      	ldrb	r2, [r7, #14]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	32ae      	adds	r2, #174	@ 0xae
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	4798      	blx	r3
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006ff2:	e004      	b.n	8006ffe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006ff8:	e001      	b.n	8006ffe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	88db      	ldrh	r3, [r3, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d110      	bne.n	8007028 <USBD_StdItfReq+0xc0>
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fdc7 	bl	8007ba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007012:	e009      	b.n	8007028 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fcf7 	bl	8007a0a <USBD_CtlError>
          break;
 800701c:	e004      	b.n	8007028 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fcf2 	bl	8007a0a <USBD_CtlError>
          break;
 8007026:	e000      	b.n	800702a <USBD_StdItfReq+0xc2>
          break;
 8007028:	bf00      	nop
      }
      break;
 800702a:	e004      	b.n	8007036 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fceb 	bl	8007a0a <USBD_CtlError>
      break;
 8007034:	bf00      	nop
  }

  return ret;
 8007036:	7bfb      	ldrb	r3, [r7, #15]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	889b      	ldrh	r3, [r3, #4]
 8007052:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800705c:	2b40      	cmp	r3, #64	@ 0x40
 800705e:	d007      	beq.n	8007070 <USBD_StdEPReq+0x30>
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	f200 817f 	bhi.w	8007364 <USBD_StdEPReq+0x324>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d02a      	beq.n	80070c0 <USBD_StdEPReq+0x80>
 800706a:	2b20      	cmp	r3, #32
 800706c:	f040 817a 	bne.w	8007364 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff fe85 	bl	8006d84 <USBD_CoreFindEP>
 800707a:	4603      	mov	r3, r0
 800707c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800707e:	7b7b      	ldrb	r3, [r7, #13]
 8007080:	2bff      	cmp	r3, #255	@ 0xff
 8007082:	f000 8174 	beq.w	800736e <USBD_StdEPReq+0x32e>
 8007086:	7b7b      	ldrb	r3, [r7, #13]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f040 8170 	bne.w	800736e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800708e:	7b7a      	ldrb	r2, [r7, #13]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007096:	7b7a      	ldrb	r2, [r7, #13]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	32ae      	adds	r2, #174	@ 0xae
 800709c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8163 	beq.w	800736e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80070a8:	7b7a      	ldrb	r2, [r7, #13]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32ae      	adds	r2, #174	@ 0xae
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070be:	e156      	b.n	800736e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d008      	beq.n	80070da <USBD_StdEPReq+0x9a>
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	f300 8145 	bgt.w	8007358 <USBD_StdEPReq+0x318>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 809b 	beq.w	800720a <USBD_StdEPReq+0x1ca>
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d03c      	beq.n	8007152 <USBD_StdEPReq+0x112>
 80070d8:	e13e      	b.n	8007358 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d002      	beq.n	80070ec <USBD_StdEPReq+0xac>
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d016      	beq.n	8007118 <USBD_StdEPReq+0xd8>
 80070ea:	e02c      	b.n	8007146 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <USBD_StdEPReq+0xce>
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b80      	cmp	r3, #128	@ 0x80
 80070f6:	d00a      	beq.n	800710e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f97b 	bl	80083f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007102:	2180      	movs	r1, #128	@ 0x80
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f977 	bl	80083f8 <USBD_LL_StallEP>
 800710a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800710c:	e020      	b.n	8007150 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc7a 	bl	8007a0a <USBD_CtlError>
              break;
 8007116:	e01b      	b.n	8007150 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	885b      	ldrh	r3, [r3, #2]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10e      	bne.n	800713e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <USBD_StdEPReq+0xfe>
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b80      	cmp	r3, #128	@ 0x80
 800712a:	d008      	beq.n	800713e <USBD_StdEPReq+0xfe>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	88db      	ldrh	r3, [r3, #6]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d104      	bne.n	800713e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 f95d 	bl	80083f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fd2e 	bl	8007ba0 <USBD_CtlSendStatus>

              break;
 8007144:	e004      	b.n	8007150 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fc5e 	bl	8007a0a <USBD_CtlError>
              break;
 800714e:	bf00      	nop
          }
          break;
 8007150:	e107      	b.n	8007362 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USBD_StdEPReq+0x124>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d016      	beq.n	8007190 <USBD_StdEPReq+0x150>
 8007162:	e04b      	b.n	80071fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00d      	beq.n	8007186 <USBD_StdEPReq+0x146>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b80      	cmp	r3, #128	@ 0x80
 800716e:	d00a      	beq.n	8007186 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f001 f93f 	bl	80083f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800717a:	2180      	movs	r1, #128	@ 0x80
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 f93b 	bl	80083f8 <USBD_LL_StallEP>
 8007182:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007184:	e040      	b.n	8007208 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fc3e 	bl	8007a0a <USBD_CtlError>
              break;
 800718e:	e03b      	b.n	8007208 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	885b      	ldrh	r3, [r3, #2]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d136      	bne.n	8007206 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 f945 	bl	8008436 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fcf7 	bl	8007ba0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fde4 	bl	8006d84 <USBD_CoreFindEP>
 80071bc:	4603      	mov	r3, r0
 80071be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c0:	7b7b      	ldrb	r3, [r7, #13]
 80071c2:	2bff      	cmp	r3, #255	@ 0xff
 80071c4:	d01f      	beq.n	8007206 <USBD_StdEPReq+0x1c6>
 80071c6:	7b7b      	ldrb	r3, [r7, #13]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11c      	bne.n	8007206 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80071cc:	7b7a      	ldrb	r2, [r7, #13]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80071d4:	7b7a      	ldrb	r2, [r7, #13]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32ae      	adds	r2, #174	@ 0xae
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d010      	beq.n	8007206 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071e4:	7b7a      	ldrb	r2, [r7, #13]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32ae      	adds	r2, #174	@ 0xae
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80071fa:	e004      	b.n	8007206 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fc03 	bl	8007a0a <USBD_CtlError>
              break;
 8007204:	e000      	b.n	8007208 <USBD_StdEPReq+0x1c8>
              break;
 8007206:	bf00      	nop
          }
          break;
 8007208:	e0ab      	b.n	8007362 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d002      	beq.n	800721c <USBD_StdEPReq+0x1dc>
 8007216:	2b03      	cmp	r3, #3
 8007218:	d032      	beq.n	8007280 <USBD_StdEPReq+0x240>
 800721a:	e097      	b.n	800734c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <USBD_StdEPReq+0x1f2>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b80      	cmp	r3, #128	@ 0x80
 8007226:	d004      	beq.n	8007232 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fbed 	bl	8007a0a <USBD_CtlError>
                break;
 8007230:	e091      	b.n	8007356 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	da0b      	bge.n	8007252 <USBD_StdEPReq+0x212>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	3310      	adds	r3, #16
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	3304      	adds	r3, #4
 8007250:	e00b      	b.n	800726a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	3304      	adds	r3, #4
 800726a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2202      	movs	r2, #2
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc37 	bl	8007aec <USBD_CtlSendData>
              break;
 800727e:	e06a      	b.n	8007356 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007284:	2b00      	cmp	r3, #0
 8007286:	da11      	bge.n	80072ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	3324      	adds	r3, #36	@ 0x24
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d117      	bne.n	80072d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fbb0 	bl	8007a0a <USBD_CtlError>
                  break;
 80072aa:	e054      	b.n	8007356 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	f003 020f 	and.w	r2, r3, #15
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fb9d 	bl	8007a0a <USBD_CtlError>
                  break;
 80072d0:	e041      	b.n	8007356 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da0b      	bge.n	80072f2 <USBD_StdEPReq+0x2b2>
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	3310      	adds	r3, #16
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	3304      	adds	r3, #4
 80072f0:	e00b      	b.n	800730a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4413      	add	r3, r2
 8007308:	3304      	adds	r3, #4
 800730a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <USBD_StdEPReq+0x2d8>
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b80      	cmp	r3, #128	@ 0x80
 8007316:	d103      	bne.n	8007320 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e00e      	b.n	800733e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 f8a5 	bl	8008474 <USBD_LL_IsStallEP>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2201      	movs	r2, #1
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e002      	b.n	800733e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2202      	movs	r2, #2
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fbd1 	bl	8007aec <USBD_CtlSendData>
              break;
 800734a:	e004      	b.n	8007356 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fb5b 	bl	8007a0a <USBD_CtlError>
              break;
 8007354:	bf00      	nop
          }
          break;
 8007356:	e004      	b.n	8007362 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fb55 	bl	8007a0a <USBD_CtlError>
          break;
 8007360:	bf00      	nop
      }
      break;
 8007362:	e005      	b.n	8007370 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fb4f 	bl	8007a0a <USBD_CtlError>
      break;
 800736c:	e000      	b.n	8007370 <USBD_StdEPReq+0x330>
      break;
 800736e:	bf00      	nop
  }

  return ret;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	0a1b      	lsrs	r3, r3, #8
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	2b06      	cmp	r3, #6
 800739e:	f200 8128 	bhi.w	80075f2 <USBD_GetDescriptor+0x276>
 80073a2:	a201      	add	r2, pc, #4	@ (adr r2, 80073a8 <USBD_GetDescriptor+0x2c>)
 80073a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	080073dd 	.word	0x080073dd
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	080075f3 	.word	0x080075f3
 80073b8:	080075f3 	.word	0x080075f3
 80073bc:	08007593 	.word	0x08007593
 80073c0:	080075bf 	.word	0x080075bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	7c12      	ldrb	r2, [r2, #16]
 80073d0:	f107 0108 	add.w	r1, r7, #8
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	60f8      	str	r0, [r7, #12]
      break;
 80073da:	e112      	b.n	8007602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7c1b      	ldrb	r3, [r3, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10d      	bne.n	8007400 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	f107 0208 	add.w	r2, r7, #8
 80073f0:	4610      	mov	r0, r2
 80073f2:	4798      	blx	r3
 80073f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	2202      	movs	r2, #2
 80073fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073fe:	e100      	b.n	8007602 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	f107 0208 	add.w	r2, r7, #8
 800740c:	4610      	mov	r0, r2
 800740e:	4798      	blx	r3
 8007410:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	2202      	movs	r2, #2
 8007418:	701a      	strb	r2, [r3, #0]
      break;
 800741a:	e0f2      	b.n	8007602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	885b      	ldrh	r3, [r3, #2]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b05      	cmp	r3, #5
 8007424:	f200 80ac 	bhi.w	8007580 <USBD_GetDescriptor+0x204>
 8007428:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <USBD_GetDescriptor+0xb4>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007449 	.word	0x08007449
 8007434:	0800747d 	.word	0x0800747d
 8007438:	080074b1 	.word	0x080074b1
 800743c:	080074e5 	.word	0x080074e5
 8007440:	08007519 	.word	0x08007519
 8007444:	0800754d 	.word	0x0800754d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	7c12      	ldrb	r2, [r2, #16]
 8007460:	f107 0108 	add.w	r1, r7, #8
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
 8007468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800746a:	e091      	b.n	8007590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 facb 	bl	8007a0a <USBD_CtlError>
            err++;
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	3301      	adds	r3, #1
 8007478:	72fb      	strb	r3, [r7, #11]
          break;
 800747a:	e089      	b.n	8007590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7c12      	ldrb	r2, [r2, #16]
 8007494:	f107 0108 	add.w	r1, r7, #8
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
 800749c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800749e:	e077      	b.n	8007590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fab1 	bl	8007a0a <USBD_CtlError>
            err++;
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	3301      	adds	r3, #1
 80074ac:	72fb      	strb	r3, [r7, #11]
          break;
 80074ae:	e06f      	b.n	8007590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	7c12      	ldrb	r2, [r2, #16]
 80074c8:	f107 0108 	add.w	r1, r7, #8
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074d2:	e05d      	b.n	8007590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa97 	bl	8007a0a <USBD_CtlError>
            err++;
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	3301      	adds	r3, #1
 80074e0:	72fb      	strb	r3, [r7, #11]
          break;
 80074e2:	e055      	b.n	8007590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7c12      	ldrb	r2, [r2, #16]
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
 8007504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007506:	e043      	b.n	8007590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa7d 	bl	8007a0a <USBD_CtlError>
            err++;
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	3301      	adds	r3, #1
 8007514:	72fb      	strb	r3, [r7, #11]
          break;
 8007516:	e03b      	b.n	8007590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	7c12      	ldrb	r2, [r2, #16]
 8007530:	f107 0108 	add.w	r1, r7, #8
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
 8007538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753a:	e029      	b.n	8007590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa63 	bl	8007a0a <USBD_CtlError>
            err++;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	3301      	adds	r3, #1
 8007548:	72fb      	strb	r3, [r7, #11]
          break;
 800754a:	e021      	b.n	8007590 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 0108 	add.w	r1, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756e:	e00f      	b.n	8007590 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa49 	bl	8007a0a <USBD_CtlError>
            err++;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	3301      	adds	r3, #1
 800757c:	72fb      	strb	r3, [r7, #11]
          break;
 800757e:	e007      	b.n	8007590 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa41 	bl	8007a0a <USBD_CtlError>
          err++;
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	3301      	adds	r3, #1
 800758c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800758e:	bf00      	nop
      }
      break;
 8007590:	e037      	b.n	8007602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7c1b      	ldrb	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a2:	f107 0208 	add.w	r2, r7, #8
 80075a6:	4610      	mov	r0, r2
 80075a8:	4798      	blx	r3
 80075aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075ac:	e029      	b.n	8007602 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fa2a 	bl	8007a0a <USBD_CtlError>
        err++;
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	3301      	adds	r3, #1
 80075ba:	72fb      	strb	r3, [r7, #11]
      break;
 80075bc:	e021      	b.n	8007602 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7c1b      	ldrb	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10d      	bne.n	80075e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	f107 0208 	add.w	r2, r7, #8
 80075d2:	4610      	mov	r0, r2
 80075d4:	4798      	blx	r3
 80075d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	2207      	movs	r2, #7
 80075de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075e0:	e00f      	b.n	8007602 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fa10 	bl	8007a0a <USBD_CtlError>
        err++;
 80075ea:	7afb      	ldrb	r3, [r7, #11]
 80075ec:	3301      	adds	r3, #1
 80075ee:	72fb      	strb	r3, [r7, #11]
      break;
 80075f0:	e007      	b.n	8007602 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa08 	bl	8007a0a <USBD_CtlError>
      err++;
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	3301      	adds	r3, #1
 80075fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007600:	bf00      	nop
  }

  if (err != 0U)
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11e      	bne.n	8007646 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	88db      	ldrh	r3, [r3, #6]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d016      	beq.n	800763e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007610:	893b      	ldrh	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00e      	beq.n	8007634 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	88da      	ldrh	r2, [r3, #6]
 800761a:	893b      	ldrh	r3, [r7, #8]
 800761c:	4293      	cmp	r3, r2
 800761e:	bf28      	it	cs
 8007620:	4613      	movcs	r3, r2
 8007622:	b29b      	uxth	r3, r3
 8007624:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007626:	893b      	ldrh	r3, [r7, #8]
 8007628:	461a      	mov	r2, r3
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fa5d 	bl	8007aec <USBD_CtlSendData>
 8007632:	e009      	b.n	8007648 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f9e7 	bl	8007a0a <USBD_CtlError>
 800763c:	e004      	b.n	8007648 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 faae 	bl	8007ba0 <USBD_CtlSendStatus>
 8007644:	e000      	b.n	8007648 <USBD_GetDescriptor+0x2cc>
    return;
 8007646:	bf00      	nop
  }
}
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop

08007650 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	889b      	ldrh	r3, [r3, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d131      	bne.n	80076c6 <USBD_SetAddress+0x76>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	88db      	ldrh	r3, [r3, #6]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d12d      	bne.n	80076c6 <USBD_SetAddress+0x76>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	885b      	ldrh	r3, [r3, #2]
 800766e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007670:	d829      	bhi.n	80076c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800767c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b03      	cmp	r3, #3
 8007688:	d104      	bne.n	8007694 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9bc 	bl	8007a0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007692:	e01d      	b.n	80076d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7bfa      	ldrb	r2, [r7, #15]
 8007698:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 ff13 	bl	80084cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa7a 	bl	8007ba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ba:	e009      	b.n	80076d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c4:	e004      	b.n	80076d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f99e 	bl	8007a0a <USBD_CtlError>
  }
}
 80076ce:	bf00      	nop
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007828 <USBD_SetConfig+0x150>)
 80076ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007828 <USBD_SetConfig+0x150>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d905      	bls.n	8007704 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f985 	bl	8007a0a <USBD_CtlError>
    return USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	e08c      	b.n	800781e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d002      	beq.n	8007716 <USBD_SetConfig+0x3e>
 8007710:	2b03      	cmp	r3, #3
 8007712:	d029      	beq.n	8007768 <USBD_SetConfig+0x90>
 8007714:	e075      	b.n	8007802 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007716:	4b44      	ldr	r3, [pc, #272]	@ (8007828 <USBD_SetConfig+0x150>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d020      	beq.n	8007760 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800771e:	4b42      	ldr	r3, [pc, #264]	@ (8007828 <USBD_SetConfig+0x150>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007728:	4b3f      	ldr	r3, [pc, #252]	@ (8007828 <USBD_SetConfig+0x150>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fe ffe9 	bl	8006706 <USBD_SetClassConfig>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d008      	beq.n	8007750 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f962 	bl	8007a0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800774e:	e065      	b.n	800781c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa25 	bl	8007ba0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2203      	movs	r2, #3
 800775a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800775e:	e05d      	b.n	800781c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa1d 	bl	8007ba0 <USBD_CtlSendStatus>
      break;
 8007766:	e059      	b.n	800781c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007768:	4b2f      	ldr	r3, [pc, #188]	@ (8007828 <USBD_SetConfig+0x150>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d112      	bne.n	8007796 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007778:	4b2b      	ldr	r3, [pc, #172]	@ (8007828 <USBD_SetConfig+0x150>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007782:	4b29      	ldr	r3, [pc, #164]	@ (8007828 <USBD_SetConfig+0x150>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7fe ffd8 	bl	800673e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa06 	bl	8007ba0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007794:	e042      	b.n	800781c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007796:	4b24      	ldr	r3, [pc, #144]	@ (8007828 <USBD_SetConfig+0x150>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d02a      	beq.n	80077fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7fe ffc6 	bl	800673e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007828 <USBD_SetConfig+0x150>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <USBD_SetConfig+0x150>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7fe ff9f 	bl	8006706 <USBD_SetClassConfig>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00f      	beq.n	80077f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f918 	bl	8007a0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fe ffab 	bl	800673e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80077f0:	e014      	b.n	800781c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9d4 	bl	8007ba0 <USBD_CtlSendStatus>
      break;
 80077f8:	e010      	b.n	800781c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f9d0 	bl	8007ba0 <USBD_CtlSendStatus>
      break;
 8007800:	e00c      	b.n	800781c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f900 	bl	8007a0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800780a:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <USBD_SetConfig+0x150>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fe ff94 	bl	800673e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007816:	2303      	movs	r3, #3
 8007818:	73fb      	strb	r3, [r7, #15]
      break;
 800781a:	bf00      	nop
  }

  return ret;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000278 	.word	0x20000278

0800782c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	88db      	ldrh	r3, [r3, #6]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d004      	beq.n	8007848 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f8e2 	bl	8007a0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007846:	e023      	b.n	8007890 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	dc02      	bgt.n	800785a <USBD_GetConfig+0x2e>
 8007854:	2b00      	cmp	r3, #0
 8007856:	dc03      	bgt.n	8007860 <USBD_GetConfig+0x34>
 8007858:	e015      	b.n	8007886 <USBD_GetConfig+0x5a>
 800785a:	2b03      	cmp	r3, #3
 800785c:	d00b      	beq.n	8007876 <USBD_GetConfig+0x4a>
 800785e:	e012      	b.n	8007886 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3308      	adds	r3, #8
 800786a:	2201      	movs	r2, #1
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f93c 	bl	8007aec <USBD_CtlSendData>
        break;
 8007874:	e00c      	b.n	8007890 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3304      	adds	r3, #4
 800787a:	2201      	movs	r2, #1
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f934 	bl	8007aec <USBD_CtlSendData>
        break;
 8007884:	e004      	b.n	8007890 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8be 	bl	8007a0a <USBD_CtlError>
        break;
 800788e:	bf00      	nop
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d81e      	bhi.n	80078ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	88db      	ldrh	r3, [r3, #6]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d004      	beq.n	80078c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8a5 	bl	8007a0a <USBD_CtlError>
        break;
 80078c0:	e01a      	b.n	80078f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f043 0202 	orr.w	r2, r3, #2
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	330c      	adds	r3, #12
 80078e2:	2202      	movs	r2, #2
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f900 	bl	8007aec <USBD_CtlSendData>
      break;
 80078ec:	e004      	b.n	80078f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f88a 	bl	8007a0a <USBD_CtlError>
      break;
 80078f6:	bf00      	nop
  }
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d107      	bne.n	8007922 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f940 	bl	8007ba0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007920:	e013      	b.n	800794a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d10b      	bne.n	8007942 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	889b      	ldrh	r3, [r3, #4]
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	b29b      	uxth	r3, r3
 8007932:	b2da      	uxtb	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f930 	bl	8007ba0 <USBD_CtlSendStatus>
}
 8007940:	e003      	b.n	800794a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f860 	bl	8007a0a <USBD_CtlError>
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	2b02      	cmp	r3, #2
 8007968:	d80b      	bhi.n	8007982 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10c      	bne.n	800798c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f910 	bl	8007ba0 <USBD_CtlSendStatus>
      }
      break;
 8007980:	e004      	b.n	800798c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f840 	bl	8007a0a <USBD_CtlError>
      break;
 800798a:	e000      	b.n	800798e <USBD_ClrFeature+0x3c>
      break;
 800798c:	bf00      	nop
  }
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	781a      	ldrb	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3301      	adds	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff fa40 	bl	8006e46 <SWAPBYTE>
 80079c6:	4603      	mov	r3, r0
 80079c8:	461a      	mov	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3301      	adds	r3, #1
 80079d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff fa33 	bl	8006e46 <SWAPBYTE>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3301      	adds	r3, #1
 80079ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3301      	adds	r3, #1
 80079f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff fa26 	bl	8006e46 <SWAPBYTE>
 80079fa:	4603      	mov	r3, r0
 80079fc:	461a      	mov	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	80da      	strh	r2, [r3, #6]
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a14:	2180      	movs	r1, #128	@ 0x80
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fcee 	bl	80083f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fcea 	bl	80083f8 <USBD_LL_StallEP>
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d036      	beq.n	8007ab0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a46:	6938      	ldr	r0, [r7, #16]
 8007a48:	f000 f836 	bl	8007ab8 <USBD_GetLen>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	3301      	adds	r3, #1
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	4413      	add	r3, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	7812      	ldrb	r2, [r2, #0]
 8007a64:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	4413      	add	r3, r2
 8007a72:	2203      	movs	r2, #3
 8007a74:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a7c:	e013      	b.n	8007aa6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	4413      	add	r3, r2
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	7812      	ldrb	r2, [r2, #0]
 8007a88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	613b      	str	r3, [r7, #16]
    idx++;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	3301      	adds	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e7      	bne.n	8007a7e <USBD_GetString+0x52>
 8007aae:	e000      	b.n	8007ab2 <USBD_GetString+0x86>
    return;
 8007ab0:	bf00      	nop
  }
}
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ac8:	e005      	b.n	8007ad6 <USBD_GetLen+0x1e>
  {
    len++;
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	3301      	adds	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f5      	bne.n	8007aca <USBD_GetLen+0x12>
  }

  return len;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	2100      	movs	r1, #0
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fcf9 	bl	800850a <USBD_LL_Transmit>

  return USBD_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	2100      	movs	r1, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fce8 	bl	800850a <USBD_LL_Transmit>

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2203      	movs	r2, #3
 8007b54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 fcec 	bl	800854c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fcdb 	bl	800854c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2204      	movs	r2, #4
 8007bac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fca7 	bl	800850a <USBD_LL_Transmit>

  return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2100      	movs	r1, #0
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fcb5 	bl	800854c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4912      	ldr	r1, [pc, #72]	@ (8007c3c <MX_USB_DEVICE_Init+0x50>)
 8007bf4:	4812      	ldr	r0, [pc, #72]	@ (8007c40 <MX_USB_DEVICE_Init+0x54>)
 8007bf6:	f7fe fd09 	bl	800660c <USBD_Init>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c00:	f7f8 ff80 	bl	8000b04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c04:	490f      	ldr	r1, [pc, #60]	@ (8007c44 <MX_USB_DEVICE_Init+0x58>)
 8007c06:	480e      	ldr	r0, [pc, #56]	@ (8007c40 <MX_USB_DEVICE_Init+0x54>)
 8007c08:	f7fe fd30 	bl	800666c <USBD_RegisterClass>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c12:	f7f8 ff77 	bl	8000b04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c16:	490c      	ldr	r1, [pc, #48]	@ (8007c48 <MX_USB_DEVICE_Init+0x5c>)
 8007c18:	4809      	ldr	r0, [pc, #36]	@ (8007c40 <MX_USB_DEVICE_Init+0x54>)
 8007c1a:	f7fe fc21 	bl	8006460 <USBD_CDC_RegisterInterface>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c24:	f7f8 ff6e 	bl	8000b04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c28:	4805      	ldr	r0, [pc, #20]	@ (8007c40 <MX_USB_DEVICE_Init+0x54>)
 8007c2a:	f7fe fd55 	bl	80066d8 <USBD_Start>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007c34:	f7f8 ff66 	bl	8000b04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c38:	bf00      	nop
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200000b0 	.word	0x200000b0
 8007c40:	2000027c 	.word	0x2000027c
 8007c44:	2000001c 	.word	0x2000001c
 8007c48:	2000009c 	.word	0x2000009c

08007c4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c50:	2200      	movs	r2, #0
 8007c52:	4905      	ldr	r1, [pc, #20]	@ (8007c68 <CDC_Init_FS+0x1c>)
 8007c54:	4805      	ldr	r0, [pc, #20]	@ (8007c6c <CDC_Init_FS+0x20>)
 8007c56:	f7fe fc1d 	bl	8006494 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c5a:	4905      	ldr	r1, [pc, #20]	@ (8007c70 <CDC_Init_FS+0x24>)
 8007c5c:	4803      	ldr	r0, [pc, #12]	@ (8007c6c <CDC_Init_FS+0x20>)
 8007c5e:	f7fe fc3b 	bl	80064d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000d58 	.word	0x20000d58
 8007c6c:	2000027c 	.word	0x2000027c
 8007c70:	20000558 	.word	0x20000558

08007c74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	71fb      	strb	r3, [r7, #7]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c94:	79fb      	ldrb	r3, [r7, #7]
 8007c96:	2b23      	cmp	r3, #35	@ 0x23
 8007c98:	d84a      	bhi.n	8007d30 <CDC_Control_FS+0xac>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <CDC_Control_FS+0x1c>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007d31 	.word	0x08007d31
 8007ca4:	08007d31 	.word	0x08007d31
 8007ca8:	08007d31 	.word	0x08007d31
 8007cac:	08007d31 	.word	0x08007d31
 8007cb0:	08007d31 	.word	0x08007d31
 8007cb4:	08007d31 	.word	0x08007d31
 8007cb8:	08007d31 	.word	0x08007d31
 8007cbc:	08007d31 	.word	0x08007d31
 8007cc0:	08007d31 	.word	0x08007d31
 8007cc4:	08007d31 	.word	0x08007d31
 8007cc8:	08007d31 	.word	0x08007d31
 8007ccc:	08007d31 	.word	0x08007d31
 8007cd0:	08007d31 	.word	0x08007d31
 8007cd4:	08007d31 	.word	0x08007d31
 8007cd8:	08007d31 	.word	0x08007d31
 8007cdc:	08007d31 	.word	0x08007d31
 8007ce0:	08007d31 	.word	0x08007d31
 8007ce4:	08007d31 	.word	0x08007d31
 8007ce8:	08007d31 	.word	0x08007d31
 8007cec:	08007d31 	.word	0x08007d31
 8007cf0:	08007d31 	.word	0x08007d31
 8007cf4:	08007d31 	.word	0x08007d31
 8007cf8:	08007d31 	.word	0x08007d31
 8007cfc:	08007d31 	.word	0x08007d31
 8007d00:	08007d31 	.word	0x08007d31
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	08007d31 	.word	0x08007d31
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007d31 	.word	0x08007d31
 8007d18:	08007d31 	.word	0x08007d31
 8007d1c:	08007d31 	.word	0x08007d31
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d31 	.word	0x08007d31
 8007d28:	08007d31 	.word	0x08007d31
 8007d2c:	08007d31 	.word	0x08007d31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d30:	bf00      	nop
  }

  return (USBD_OK);
 8007d32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d4a:	6879      	ldr	r1, [r7, #4]
 8007d4c:	4805      	ldr	r0, [pc, #20]	@ (8007d64 <CDC_Receive_FS+0x24>)
 8007d4e:	f7fe fbc3 	bl	80064d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d52:	4804      	ldr	r0, [pc, #16]	@ (8007d64 <CDC_Receive_FS+0x24>)
 8007d54:	f7fe fc24 	bl	80065a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	2000027c 	.word	0x2000027c

08007d68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d78:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <CDC_Transmit_FS+0x48>)
 8007d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e00b      	b.n	8007da6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d8e:	887b      	ldrh	r3, [r7, #2]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	4806      	ldr	r0, [pc, #24]	@ (8007db0 <CDC_Transmit_FS+0x48>)
 8007d96:	f7fe fb7d 	bl	8006494 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d9a:	4805      	ldr	r0, [pc, #20]	@ (8007db0 <CDC_Transmit_FS+0x48>)
 8007d9c:	f7fe fbba 	bl	8006514 <USBD_CDC_TransmitPacket>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	2000027c 	.word	0x2000027c

08007db4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	371c      	adds	r7, #28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2212      	movs	r2, #18
 8007de8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007dea:	4b03      	ldr	r3, [pc, #12]	@ (8007df8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	200000cc 	.word	0x200000cc

08007dfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e0e:	4b03      	ldr	r3, [pc, #12]	@ (8007e1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	200000e0 	.word	0x200000e0

08007e20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	6039      	str	r1, [r7, #0]
 8007e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4907      	ldr	r1, [pc, #28]	@ (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e36:	4808      	ldr	r0, [pc, #32]	@ (8007e58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e38:	f7ff fdf8 	bl	8007a2c <USBD_GetString>
 8007e3c:	e004      	b.n	8007e48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4904      	ldr	r1, [pc, #16]	@ (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e42:	4805      	ldr	r0, [pc, #20]	@ (8007e58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e44:	f7ff fdf2 	bl	8007a2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e48:	4b02      	ldr	r3, [pc, #8]	@ (8007e54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20001558 	.word	0x20001558
 8007e58:	08008fbc 	.word	0x08008fbc

08007e5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	4904      	ldr	r1, [pc, #16]	@ (8007e7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e6c:	4804      	ldr	r0, [pc, #16]	@ (8007e80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e6e:	f7ff fddd 	bl	8007a2c <USBD_GetString>
  return USBD_StrDesc;
 8007e72:	4b02      	ldr	r3, [pc, #8]	@ (8007e7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20001558 	.word	0x20001558
 8007e80:	08008fd4 	.word	0x08008fd4

08007e84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	221a      	movs	r2, #26
 8007e94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e96:	f000 f843 	bl	8007f20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e9a:	4b02      	ldr	r3, [pc, #8]	@ (8007ea4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	200000e4 	.word	0x200000e4

08007ea8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	4907      	ldr	r1, [pc, #28]	@ (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ebe:	4808      	ldr	r0, [pc, #32]	@ (8007ee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ec0:	f7ff fdb4 	bl	8007a2c <USBD_GetString>
 8007ec4:	e004      	b.n	8007ed0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	4904      	ldr	r1, [pc, #16]	@ (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eca:	4805      	ldr	r0, [pc, #20]	@ (8007ee0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ecc:	f7ff fdae 	bl	8007a2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ed0:	4b02      	ldr	r3, [pc, #8]	@ (8007edc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20001558 	.word	0x20001558
 8007ee0:	08008fe8 	.word	0x08008fe8

08007ee4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	4907      	ldr	r1, [pc, #28]	@ (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007efa:	4808      	ldr	r0, [pc, #32]	@ (8007f1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007efc:	f7ff fd96 	bl	8007a2c <USBD_GetString>
 8007f00:	e004      	b.n	8007f0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4904      	ldr	r1, [pc, #16]	@ (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f06:	4805      	ldr	r0, [pc, #20]	@ (8007f1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f08:	f7ff fd90 	bl	8007a2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f0c:	4b02      	ldr	r3, [pc, #8]	@ (8007f18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20001558 	.word	0x20001558
 8007f1c:	08008ff4 	.word	0x08008ff4

08007f20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f26:	4b0f      	ldr	r3, [pc, #60]	@ (8007f64 <Get_SerialNum+0x44>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f68 <Get_SerialNum+0x48>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f32:	4b0e      	ldr	r3, [pc, #56]	@ (8007f6c <Get_SerialNum+0x4c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f46:	2208      	movs	r2, #8
 8007f48:	4909      	ldr	r1, [pc, #36]	@ (8007f70 <Get_SerialNum+0x50>)
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f814 	bl	8007f78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f50:	2204      	movs	r2, #4
 8007f52:	4908      	ldr	r1, [pc, #32]	@ (8007f74 <Get_SerialNum+0x54>)
 8007f54:	68b8      	ldr	r0, [r7, #8]
 8007f56:	f000 f80f 	bl	8007f78 <IntToUnicode>
  }
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	1fff7a10 	.word	0x1fff7a10
 8007f68:	1fff7a14 	.word	0x1fff7a14
 8007f6c:	1fff7a18 	.word	0x1fff7a18
 8007f70:	200000e6 	.word	0x200000e6
 8007f74:	200000f6 	.word	0x200000f6

08007f78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75fb      	strb	r3, [r7, #23]
 8007f8e:	e027      	b.n	8007fe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0f1b      	lsrs	r3, r3, #28
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d80b      	bhi.n	8007fb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	0f1b      	lsrs	r3, r3, #28
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3230      	adds	r2, #48	@ 0x30
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	e00a      	b.n	8007fc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	0f1b      	lsrs	r3, r3, #28
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3237      	adds	r2, #55	@ 0x37
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
 8007fe0:	7dfa      	ldrb	r2, [r7, #23]
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d3d3      	bcc.n	8007f90 <IntToUnicode+0x18>
  }
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
	...

08007ff8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	@ 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008018:	d147      	bne.n	80080aa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	4b25      	ldr	r3, [pc, #148]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008022:	4a24      	ldr	r2, [pc, #144]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	6313      	str	r3, [r2, #48]	@ 0x30
 800802a:	4b22      	ldr	r3, [pc, #136]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800803a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800803c:	2300      	movs	r3, #0
 800803e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008044:	f107 0314 	add.w	r3, r7, #20
 8008048:	4619      	mov	r1, r3
 800804a:	481b      	ldr	r0, [pc, #108]	@ (80080b8 <HAL_PCD_MspInit+0xc0>)
 800804c:	f7f9 f93e 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008050:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008056:	2302      	movs	r3, #2
 8008058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800805e:	2300      	movs	r3, #0
 8008060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008062:	230a      	movs	r3, #10
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008066:	f107 0314 	add.w	r3, r7, #20
 800806a:	4619      	mov	r1, r3
 800806c:	4812      	ldr	r0, [pc, #72]	@ (80080b8 <HAL_PCD_MspInit+0xc0>)
 800806e:	f7f9 f92d 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008072:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008076:	4a0f      	ldr	r2, [pc, #60]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800807c:	6353      	str	r3, [r2, #52]	@ 0x34
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008086:	4a0b      	ldr	r2, [pc, #44]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800808c:	6453      	str	r3, [r2, #68]	@ 0x44
 800808e:	4b09      	ldr	r3, [pc, #36]	@ (80080b4 <HAL_PCD_MspInit+0xbc>)
 8008090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800809a:	2200      	movs	r2, #0
 800809c:	2100      	movs	r1, #0
 800809e:	2043      	movs	r0, #67	@ 0x43
 80080a0:	f7f9 f8dd 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080a4:	2043      	movs	r0, #67	@ 0x43
 80080a6:	f7f9 f8f6 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080aa:	bf00      	nop
 80080ac:	3728      	adds	r7, #40	@ 0x28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40023800 	.word	0x40023800
 80080b8:	40020000 	.word	0x40020000

080080bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fe fb4d 	bl	8006772 <USBD_LL_SetupStage>
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	00db      	lsls	r3, r3, #3
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	4619      	mov	r1, r3
 800810a:	f7fe fb87 	bl	800681c <USBD_LL_DataOutStage>
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	334c      	adds	r3, #76	@ 0x4c
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	4619      	mov	r1, r3
 800813e:	f7fe fc20 	bl	8006982 <USBD_LL_DataInStage>
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fd54 	bl	8006c06 <USBD_LL_SOF>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800816e:	2301      	movs	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
 800817e:	e008      	b.n	8008192 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d102      	bne.n	800818e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	e001      	b.n	8008192 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800818e:	f7f8 fcb9 	bl	8000b04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008198:	7bfa      	ldrb	r2, [r7, #15]
 800819a:	4611      	mov	r1, r2
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fcf4 	bl	8006b8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe fc9c 	bl	8006ae6 <USBD_LL_Reset>
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fcef 	bl	8006baa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081de:	f043 0301 	orr.w	r3, r3, #1
 80081e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081ec:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <HAL_PCD_SuspendCallback+0x48>)
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	4a03      	ldr	r2, [pc, #12]	@ (8008200 <HAL_PCD_SuspendCallback+0x48>)
 80081f2:	f043 0306 	orr.w	r3, r3, #6
 80081f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081f8:	bf00      	nop
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	e000ed00 	.word	0xe000ed00

08008204 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fcdf 	bl	8006bd6 <USBD_LL_Resume>
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fd37 	bl	8006caa <USBD_LL_IsoOUTIncomplete>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fcf3 	bl	8006c46 <USBD_LL_IsoINIncomplete>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fd49 	bl	8006d0e <USBD_LL_DevConnected>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fd46 	bl	8006d24 <USBD_LL_DevDisconnected>
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d13c      	bne.n	800832a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80082b0:	4a20      	ldr	r2, [pc, #128]	@ (8008334 <USBD_LL_Init+0x94>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a1e      	ldr	r2, [pc, #120]	@ (8008334 <USBD_LL_Init+0x94>)
 80082bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80082c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008334 <USBD_LL_Init+0x94>)
 80082c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80082c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008334 <USBD_LL_Init+0x94>)
 80082ca:	2204      	movs	r2, #4
 80082cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082ce:	4b19      	ldr	r3, [pc, #100]	@ (8008334 <USBD_LL_Init+0x94>)
 80082d0:	2202      	movs	r2, #2
 80082d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082d4:	4b17      	ldr	r3, [pc, #92]	@ (8008334 <USBD_LL_Init+0x94>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082da:	4b16      	ldr	r3, [pc, #88]	@ (8008334 <USBD_LL_Init+0x94>)
 80082dc:	2202      	movs	r2, #2
 80082de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082e0:	4b14      	ldr	r3, [pc, #80]	@ (8008334 <USBD_LL_Init+0x94>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082e6:	4b13      	ldr	r3, [pc, #76]	@ (8008334 <USBD_LL_Init+0x94>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082ec:	4b11      	ldr	r3, [pc, #68]	@ (8008334 <USBD_LL_Init+0x94>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80082f2:	4b10      	ldr	r3, [pc, #64]	@ (8008334 <USBD_LL_Init+0x94>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <USBD_LL_Init+0x94>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082fe:	480d      	ldr	r0, [pc, #52]	@ (8008334 <USBD_LL_Init+0x94>)
 8008300:	f7f9 ff96 	bl	8002230 <HAL_PCD_Init>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800830a:	f7f8 fbfb 	bl	8000b04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800830e:	2180      	movs	r1, #128	@ 0x80
 8008310:	4808      	ldr	r0, [pc, #32]	@ (8008334 <USBD_LL_Init+0x94>)
 8008312:	f7fb f9ee 	bl	80036f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008316:	2240      	movs	r2, #64	@ 0x40
 8008318:	2100      	movs	r1, #0
 800831a:	4806      	ldr	r0, [pc, #24]	@ (8008334 <USBD_LL_Init+0x94>)
 800831c:	f7fb f9a2 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008320:	2280      	movs	r2, #128	@ 0x80
 8008322:	2101      	movs	r1, #1
 8008324:	4803      	ldr	r0, [pc, #12]	@ (8008334 <USBD_LL_Init+0x94>)
 8008326:	f7fb f99d 	bl	8003664 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20001758 	.word	0x20001758

08008338 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800834e:	4618      	mov	r0, r3
 8008350:	f7fa f88b 	bl	800246a <HAL_PCD_Start>
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 f942 	bl	80085e4 <USBD_Get_USB_Status>
 8008360:	4603      	mov	r3, r0
 8008362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008364:	7bbb      	ldrb	r3, [r7, #14]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	4608      	mov	r0, r1
 8008378:	4611      	mov	r1, r2
 800837a:	461a      	mov	r2, r3
 800837c:	4603      	mov	r3, r0
 800837e:	70fb      	strb	r3, [r7, #3]
 8008380:	460b      	mov	r3, r1
 8008382:	70bb      	strb	r3, [r7, #2]
 8008384:	4613      	mov	r3, r2
 8008386:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008396:	78bb      	ldrb	r3, [r7, #2]
 8008398:	883a      	ldrh	r2, [r7, #0]
 800839a:	78f9      	ldrb	r1, [r7, #3]
 800839c:	f7fa fd5c 	bl	8002e58 <HAL_PCD_EP_Open>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f91c 	bl	80085e4 <USBD_Get_USB_Status>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083d4:	78fa      	ldrb	r2, [r7, #3]
 80083d6:	4611      	mov	r1, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fa fda5 	bl	8002f28 <HAL_PCD_EP_Close>
 80083de:	4603      	mov	r3, r0
 80083e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 f8fd 	bl	80085e4 <USBD_Get_USB_Status>
 80083ea:	4603      	mov	r3, r0
 80083ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008412:	78fa      	ldrb	r2, [r7, #3]
 8008414:	4611      	mov	r1, r2
 8008416:	4618      	mov	r0, r3
 8008418:	f7fa fe7d 	bl	8003116 <HAL_PCD_EP_SetStall>
 800841c:	4603      	mov	r3, r0
 800841e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 f8de 	bl	80085e4 <USBD_Get_USB_Status>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800842c:	7bbb      	ldrb	r3, [r7, #14]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008450:	78fa      	ldrb	r2, [r7, #3]
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f7fa fec2 	bl	80031de <HAL_PCD_EP_ClrStall>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	4618      	mov	r0, r3
 8008462:	f000 f8bf 	bl	80085e4 <USBD_Get_USB_Status>
 8008466:	4603      	mov	r3, r0
 8008468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800846a:	7bbb      	ldrb	r3, [r7, #14]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008486:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800848c:	2b00      	cmp	r3, #0
 800848e:	da0b      	bge.n	80084a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008496:	68f9      	ldr	r1, [r7, #12]
 8008498:	4613      	mov	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	333e      	adds	r3, #62	@ 0x3e
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	e00b      	b.n	80084c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	4613      	mov	r3, r2
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	440b      	add	r3, r1
 80084ba:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80084be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fa fc8f 	bl	8002e0e <HAL_PCD_SetAddress>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f874 	bl	80085e4 <USBD_Get_USB_Status>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008500:	7bbb      	ldrb	r3, [r7, #14]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
 8008516:	460b      	mov	r3, r1
 8008518:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008528:	7af9      	ldrb	r1, [r7, #11]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	f7fa fda8 	bl	8003082 <HAL_PCD_EP_Transmit>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f853 	bl	80085e4 <USBD_Get_USB_Status>
 800853e:	4603      	mov	r3, r0
 8008540:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008542:	7dbb      	ldrb	r3, [r7, #22]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	607a      	str	r2, [r7, #4]
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	460b      	mov	r3, r1
 800855a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800856a:	7af9      	ldrb	r1, [r7, #11]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	f7fa fd24 	bl	8002fbc <HAL_PCD_EP_Receive>
 8008574:	4603      	mov	r3, r0
 8008576:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f832 	bl	80085e4 <USBD_Get_USB_Status>
 8008580:	4603      	mov	r3, r0
 8008582:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008584:	7dbb      	ldrb	r3, [r7, #22]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085a0:	78fa      	ldrb	r2, [r7, #3]
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fa fd54 	bl	8003052 <HAL_PCD_EP_GetRxCount>
 80085aa:	4603      	mov	r3, r0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085bc:	4b03      	ldr	r3, [pc, #12]	@ (80085cc <USBD_static_malloc+0x18>)
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20001c64 	.word	0x20001c64

080085d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d817      	bhi.n	8008628 <USBD_Get_USB_Status+0x44>
 80085f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <USBD_Get_USB_Status+0x1c>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	08008611 	.word	0x08008611
 8008604:	08008617 	.word	0x08008617
 8008608:	0800861d 	.word	0x0800861d
 800860c:	08008623 	.word	0x08008623
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
    break;
 8008614:	e00b      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008616:	2303      	movs	r3, #3
 8008618:	73fb      	strb	r3, [r7, #15]
    break;
 800861a:	e008      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800861c:	2301      	movs	r3, #1
 800861e:	73fb      	strb	r3, [r7, #15]
    break;
 8008620:	e005      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008622:	2303      	movs	r3, #3
 8008624:	73fb      	strb	r3, [r7, #15]
    break;
 8008626:	e002      	b.n	800862e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008628:	2303      	movs	r3, #3
 800862a:	73fb      	strb	r3, [r7, #15]
    break;
 800862c:	bf00      	nop
  }
  return usb_status;
 800862e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <std>:
 800863c:	2300      	movs	r3, #0
 800863e:	b510      	push	{r4, lr}
 8008640:	4604      	mov	r4, r0
 8008642:	e9c0 3300 	strd	r3, r3, [r0]
 8008646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800864a:	6083      	str	r3, [r0, #8]
 800864c:	8181      	strh	r1, [r0, #12]
 800864e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008650:	81c2      	strh	r2, [r0, #14]
 8008652:	6183      	str	r3, [r0, #24]
 8008654:	4619      	mov	r1, r3
 8008656:	2208      	movs	r2, #8
 8008658:	305c      	adds	r0, #92	@ 0x5c
 800865a:	f000 f9e7 	bl	8008a2c <memset>
 800865e:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <std+0x58>)
 8008660:	6263      	str	r3, [r4, #36]	@ 0x24
 8008662:	4b0d      	ldr	r3, [pc, #52]	@ (8008698 <std+0x5c>)
 8008664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008666:	4b0d      	ldr	r3, [pc, #52]	@ (800869c <std+0x60>)
 8008668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800866a:	4b0d      	ldr	r3, [pc, #52]	@ (80086a0 <std+0x64>)
 800866c:	6323      	str	r3, [r4, #48]	@ 0x30
 800866e:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <std+0x68>)
 8008670:	6224      	str	r4, [r4, #32]
 8008672:	429c      	cmp	r4, r3
 8008674:	d006      	beq.n	8008684 <std+0x48>
 8008676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800867a:	4294      	cmp	r4, r2
 800867c:	d002      	beq.n	8008684 <std+0x48>
 800867e:	33d0      	adds	r3, #208	@ 0xd0
 8008680:	429c      	cmp	r4, r3
 8008682:	d105      	bne.n	8008690 <std+0x54>
 8008684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868c:	f000 ba46 	b.w	8008b1c <__retarget_lock_init_recursive>
 8008690:	bd10      	pop	{r4, pc}
 8008692:	bf00      	nop
 8008694:	0800887d 	.word	0x0800887d
 8008698:	0800889f 	.word	0x0800889f
 800869c:	080088d7 	.word	0x080088d7
 80086a0:	080088fb 	.word	0x080088fb
 80086a4:	20001e84 	.word	0x20001e84

080086a8 <stdio_exit_handler>:
 80086a8:	4a02      	ldr	r2, [pc, #8]	@ (80086b4 <stdio_exit_handler+0xc>)
 80086aa:	4903      	ldr	r1, [pc, #12]	@ (80086b8 <stdio_exit_handler+0x10>)
 80086ac:	4803      	ldr	r0, [pc, #12]	@ (80086bc <stdio_exit_handler+0x14>)
 80086ae:	f000 b869 	b.w	8008784 <_fwalk_sglue>
 80086b2:	bf00      	nop
 80086b4:	20000100 	.word	0x20000100
 80086b8:	08008e1d 	.word	0x08008e1d
 80086bc:	20000110 	.word	0x20000110

080086c0 <cleanup_stdio>:
 80086c0:	6841      	ldr	r1, [r0, #4]
 80086c2:	4b0c      	ldr	r3, [pc, #48]	@ (80086f4 <cleanup_stdio+0x34>)
 80086c4:	4299      	cmp	r1, r3
 80086c6:	b510      	push	{r4, lr}
 80086c8:	4604      	mov	r4, r0
 80086ca:	d001      	beq.n	80086d0 <cleanup_stdio+0x10>
 80086cc:	f000 fba6 	bl	8008e1c <_fflush_r>
 80086d0:	68a1      	ldr	r1, [r4, #8]
 80086d2:	4b09      	ldr	r3, [pc, #36]	@ (80086f8 <cleanup_stdio+0x38>)
 80086d4:	4299      	cmp	r1, r3
 80086d6:	d002      	beq.n	80086de <cleanup_stdio+0x1e>
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fb9f 	bl	8008e1c <_fflush_r>
 80086de:	68e1      	ldr	r1, [r4, #12]
 80086e0:	4b06      	ldr	r3, [pc, #24]	@ (80086fc <cleanup_stdio+0x3c>)
 80086e2:	4299      	cmp	r1, r3
 80086e4:	d004      	beq.n	80086f0 <cleanup_stdio+0x30>
 80086e6:	4620      	mov	r0, r4
 80086e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ec:	f000 bb96 	b.w	8008e1c <_fflush_r>
 80086f0:	bd10      	pop	{r4, pc}
 80086f2:	bf00      	nop
 80086f4:	20001e84 	.word	0x20001e84
 80086f8:	20001eec 	.word	0x20001eec
 80086fc:	20001f54 	.word	0x20001f54

08008700 <global_stdio_init.part.0>:
 8008700:	b510      	push	{r4, lr}
 8008702:	4b0b      	ldr	r3, [pc, #44]	@ (8008730 <global_stdio_init.part.0+0x30>)
 8008704:	4c0b      	ldr	r4, [pc, #44]	@ (8008734 <global_stdio_init.part.0+0x34>)
 8008706:	4a0c      	ldr	r2, [pc, #48]	@ (8008738 <global_stdio_init.part.0+0x38>)
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	4620      	mov	r0, r4
 800870c:	2200      	movs	r2, #0
 800870e:	2104      	movs	r1, #4
 8008710:	f7ff ff94 	bl	800863c <std>
 8008714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008718:	2201      	movs	r2, #1
 800871a:	2109      	movs	r1, #9
 800871c:	f7ff ff8e 	bl	800863c <std>
 8008720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008724:	2202      	movs	r2, #2
 8008726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800872a:	2112      	movs	r1, #18
 800872c:	f7ff bf86 	b.w	800863c <std>
 8008730:	20001fbc 	.word	0x20001fbc
 8008734:	20001e84 	.word	0x20001e84
 8008738:	080086a9 	.word	0x080086a9

0800873c <__sfp_lock_acquire>:
 800873c:	4801      	ldr	r0, [pc, #4]	@ (8008744 <__sfp_lock_acquire+0x8>)
 800873e:	f000 b9ee 	b.w	8008b1e <__retarget_lock_acquire_recursive>
 8008742:	bf00      	nop
 8008744:	20001fc5 	.word	0x20001fc5

08008748 <__sfp_lock_release>:
 8008748:	4801      	ldr	r0, [pc, #4]	@ (8008750 <__sfp_lock_release+0x8>)
 800874a:	f000 b9e9 	b.w	8008b20 <__retarget_lock_release_recursive>
 800874e:	bf00      	nop
 8008750:	20001fc5 	.word	0x20001fc5

08008754 <__sinit>:
 8008754:	b510      	push	{r4, lr}
 8008756:	4604      	mov	r4, r0
 8008758:	f7ff fff0 	bl	800873c <__sfp_lock_acquire>
 800875c:	6a23      	ldr	r3, [r4, #32]
 800875e:	b11b      	cbz	r3, 8008768 <__sinit+0x14>
 8008760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008764:	f7ff bff0 	b.w	8008748 <__sfp_lock_release>
 8008768:	4b04      	ldr	r3, [pc, #16]	@ (800877c <__sinit+0x28>)
 800876a:	6223      	str	r3, [r4, #32]
 800876c:	4b04      	ldr	r3, [pc, #16]	@ (8008780 <__sinit+0x2c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1f5      	bne.n	8008760 <__sinit+0xc>
 8008774:	f7ff ffc4 	bl	8008700 <global_stdio_init.part.0>
 8008778:	e7f2      	b.n	8008760 <__sinit+0xc>
 800877a:	bf00      	nop
 800877c:	080086c1 	.word	0x080086c1
 8008780:	20001fbc 	.word	0x20001fbc

08008784 <_fwalk_sglue>:
 8008784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008788:	4607      	mov	r7, r0
 800878a:	4688      	mov	r8, r1
 800878c:	4614      	mov	r4, r2
 800878e:	2600      	movs	r6, #0
 8008790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008794:	f1b9 0901 	subs.w	r9, r9, #1
 8008798:	d505      	bpl.n	80087a6 <_fwalk_sglue+0x22>
 800879a:	6824      	ldr	r4, [r4, #0]
 800879c:	2c00      	cmp	r4, #0
 800879e:	d1f7      	bne.n	8008790 <_fwalk_sglue+0xc>
 80087a0:	4630      	mov	r0, r6
 80087a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d907      	bls.n	80087bc <_fwalk_sglue+0x38>
 80087ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087b0:	3301      	adds	r3, #1
 80087b2:	d003      	beq.n	80087bc <_fwalk_sglue+0x38>
 80087b4:	4629      	mov	r1, r5
 80087b6:	4638      	mov	r0, r7
 80087b8:	47c0      	blx	r8
 80087ba:	4306      	orrs	r6, r0
 80087bc:	3568      	adds	r5, #104	@ 0x68
 80087be:	e7e9      	b.n	8008794 <_fwalk_sglue+0x10>

080087c0 <_puts_r>:
 80087c0:	6a03      	ldr	r3, [r0, #32]
 80087c2:	b570      	push	{r4, r5, r6, lr}
 80087c4:	6884      	ldr	r4, [r0, #8]
 80087c6:	4605      	mov	r5, r0
 80087c8:	460e      	mov	r6, r1
 80087ca:	b90b      	cbnz	r3, 80087d0 <_puts_r+0x10>
 80087cc:	f7ff ffc2 	bl	8008754 <__sinit>
 80087d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087d2:	07db      	lsls	r3, r3, #31
 80087d4:	d405      	bmi.n	80087e2 <_puts_r+0x22>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	0598      	lsls	r0, r3, #22
 80087da:	d402      	bmi.n	80087e2 <_puts_r+0x22>
 80087dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087de:	f000 f99e 	bl	8008b1e <__retarget_lock_acquire_recursive>
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	0719      	lsls	r1, r3, #28
 80087e6:	d502      	bpl.n	80087ee <_puts_r+0x2e>
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d135      	bne.n	800885a <_puts_r+0x9a>
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 f8c5 	bl	8008980 <__swsetup_r>
 80087f6:	b380      	cbz	r0, 800885a <_puts_r+0x9a>
 80087f8:	f04f 35ff 	mov.w	r5, #4294967295
 80087fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087fe:	07da      	lsls	r2, r3, #31
 8008800:	d405      	bmi.n	800880e <_puts_r+0x4e>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	059b      	lsls	r3, r3, #22
 8008806:	d402      	bmi.n	800880e <_puts_r+0x4e>
 8008808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800880a:	f000 f989 	bl	8008b20 <__retarget_lock_release_recursive>
 800880e:	4628      	mov	r0, r5
 8008810:	bd70      	pop	{r4, r5, r6, pc}
 8008812:	2b00      	cmp	r3, #0
 8008814:	da04      	bge.n	8008820 <_puts_r+0x60>
 8008816:	69a2      	ldr	r2, [r4, #24]
 8008818:	429a      	cmp	r2, r3
 800881a:	dc17      	bgt.n	800884c <_puts_r+0x8c>
 800881c:	290a      	cmp	r1, #10
 800881e:	d015      	beq.n	800884c <_puts_r+0x8c>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	7019      	strb	r1, [r3, #0]
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800882e:	3b01      	subs	r3, #1
 8008830:	60a3      	str	r3, [r4, #8]
 8008832:	2900      	cmp	r1, #0
 8008834:	d1ed      	bne.n	8008812 <_puts_r+0x52>
 8008836:	2b00      	cmp	r3, #0
 8008838:	da11      	bge.n	800885e <_puts_r+0x9e>
 800883a:	4622      	mov	r2, r4
 800883c:	210a      	movs	r1, #10
 800883e:	4628      	mov	r0, r5
 8008840:	f000 f85f 	bl	8008902 <__swbuf_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d0d7      	beq.n	80087f8 <_puts_r+0x38>
 8008848:	250a      	movs	r5, #10
 800884a:	e7d7      	b.n	80087fc <_puts_r+0x3c>
 800884c:	4622      	mov	r2, r4
 800884e:	4628      	mov	r0, r5
 8008850:	f000 f857 	bl	8008902 <__swbuf_r>
 8008854:	3001      	adds	r0, #1
 8008856:	d1e7      	bne.n	8008828 <_puts_r+0x68>
 8008858:	e7ce      	b.n	80087f8 <_puts_r+0x38>
 800885a:	3e01      	subs	r6, #1
 800885c:	e7e4      	b.n	8008828 <_puts_r+0x68>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	6022      	str	r2, [r4, #0]
 8008864:	220a      	movs	r2, #10
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e7ee      	b.n	8008848 <_puts_r+0x88>
	...

0800886c <puts>:
 800886c:	4b02      	ldr	r3, [pc, #8]	@ (8008878 <puts+0xc>)
 800886e:	4601      	mov	r1, r0
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	f7ff bfa5 	b.w	80087c0 <_puts_r>
 8008876:	bf00      	nop
 8008878:	2000010c 	.word	0x2000010c

0800887c <__sread>:
 800887c:	b510      	push	{r4, lr}
 800887e:	460c      	mov	r4, r1
 8008880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008884:	f000 f8fc 	bl	8008a80 <_read_r>
 8008888:	2800      	cmp	r0, #0
 800888a:	bfab      	itete	ge
 800888c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800888e:	89a3      	ldrhlt	r3, [r4, #12]
 8008890:	181b      	addge	r3, r3, r0
 8008892:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008896:	bfac      	ite	ge
 8008898:	6563      	strge	r3, [r4, #84]	@ 0x54
 800889a:	81a3      	strhlt	r3, [r4, #12]
 800889c:	bd10      	pop	{r4, pc}

0800889e <__swrite>:
 800889e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a2:	461f      	mov	r7, r3
 80088a4:	898b      	ldrh	r3, [r1, #12]
 80088a6:	05db      	lsls	r3, r3, #23
 80088a8:	4605      	mov	r5, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	4616      	mov	r6, r2
 80088ae:	d505      	bpl.n	80088bc <__swrite+0x1e>
 80088b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b4:	2302      	movs	r3, #2
 80088b6:	2200      	movs	r2, #0
 80088b8:	f000 f8d0 	bl	8008a5c <_lseek_r>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	4632      	mov	r2, r6
 80088ca:	463b      	mov	r3, r7
 80088cc:	4628      	mov	r0, r5
 80088ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d2:	f000 b8e7 	b.w	8008aa4 <_write_r>

080088d6 <__sseek>:
 80088d6:	b510      	push	{r4, lr}
 80088d8:	460c      	mov	r4, r1
 80088da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088de:	f000 f8bd 	bl	8008a5c <_lseek_r>
 80088e2:	1c43      	adds	r3, r0, #1
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	bf15      	itete	ne
 80088e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088f2:	81a3      	strheq	r3, [r4, #12]
 80088f4:	bf18      	it	ne
 80088f6:	81a3      	strhne	r3, [r4, #12]
 80088f8:	bd10      	pop	{r4, pc}

080088fa <__sclose>:
 80088fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fe:	f000 b89d 	b.w	8008a3c <_close_r>

08008902 <__swbuf_r>:
 8008902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008904:	460e      	mov	r6, r1
 8008906:	4614      	mov	r4, r2
 8008908:	4605      	mov	r5, r0
 800890a:	b118      	cbz	r0, 8008914 <__swbuf_r+0x12>
 800890c:	6a03      	ldr	r3, [r0, #32]
 800890e:	b90b      	cbnz	r3, 8008914 <__swbuf_r+0x12>
 8008910:	f7ff ff20 	bl	8008754 <__sinit>
 8008914:	69a3      	ldr	r3, [r4, #24]
 8008916:	60a3      	str	r3, [r4, #8]
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	071a      	lsls	r2, r3, #28
 800891c:	d501      	bpl.n	8008922 <__swbuf_r+0x20>
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	b943      	cbnz	r3, 8008934 <__swbuf_r+0x32>
 8008922:	4621      	mov	r1, r4
 8008924:	4628      	mov	r0, r5
 8008926:	f000 f82b 	bl	8008980 <__swsetup_r>
 800892a:	b118      	cbz	r0, 8008934 <__swbuf_r+0x32>
 800892c:	f04f 37ff 	mov.w	r7, #4294967295
 8008930:	4638      	mov	r0, r7
 8008932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	6922      	ldr	r2, [r4, #16]
 8008938:	1a98      	subs	r0, r3, r2
 800893a:	6963      	ldr	r3, [r4, #20]
 800893c:	b2f6      	uxtb	r6, r6
 800893e:	4283      	cmp	r3, r0
 8008940:	4637      	mov	r7, r6
 8008942:	dc05      	bgt.n	8008950 <__swbuf_r+0x4e>
 8008944:	4621      	mov	r1, r4
 8008946:	4628      	mov	r0, r5
 8008948:	f000 fa68 	bl	8008e1c <_fflush_r>
 800894c:	2800      	cmp	r0, #0
 800894e:	d1ed      	bne.n	800892c <__swbuf_r+0x2a>
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	3b01      	subs	r3, #1
 8008954:	60a3      	str	r3, [r4, #8]
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	6022      	str	r2, [r4, #0]
 800895c:	701e      	strb	r6, [r3, #0]
 800895e:	6962      	ldr	r2, [r4, #20]
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	429a      	cmp	r2, r3
 8008964:	d004      	beq.n	8008970 <__swbuf_r+0x6e>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	07db      	lsls	r3, r3, #31
 800896a:	d5e1      	bpl.n	8008930 <__swbuf_r+0x2e>
 800896c:	2e0a      	cmp	r6, #10
 800896e:	d1df      	bne.n	8008930 <__swbuf_r+0x2e>
 8008970:	4621      	mov	r1, r4
 8008972:	4628      	mov	r0, r5
 8008974:	f000 fa52 	bl	8008e1c <_fflush_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	d0d9      	beq.n	8008930 <__swbuf_r+0x2e>
 800897c:	e7d6      	b.n	800892c <__swbuf_r+0x2a>
	...

08008980 <__swsetup_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4b29      	ldr	r3, [pc, #164]	@ (8008a28 <__swsetup_r+0xa8>)
 8008984:	4605      	mov	r5, r0
 8008986:	6818      	ldr	r0, [r3, #0]
 8008988:	460c      	mov	r4, r1
 800898a:	b118      	cbz	r0, 8008994 <__swsetup_r+0x14>
 800898c:	6a03      	ldr	r3, [r0, #32]
 800898e:	b90b      	cbnz	r3, 8008994 <__swsetup_r+0x14>
 8008990:	f7ff fee0 	bl	8008754 <__sinit>
 8008994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008998:	0719      	lsls	r1, r3, #28
 800899a:	d422      	bmi.n	80089e2 <__swsetup_r+0x62>
 800899c:	06da      	lsls	r2, r3, #27
 800899e:	d407      	bmi.n	80089b0 <__swsetup_r+0x30>
 80089a0:	2209      	movs	r2, #9
 80089a2:	602a      	str	r2, [r5, #0]
 80089a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
 80089ae:	e033      	b.n	8008a18 <__swsetup_r+0x98>
 80089b0:	0758      	lsls	r0, r3, #29
 80089b2:	d512      	bpl.n	80089da <__swsetup_r+0x5a>
 80089b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089b6:	b141      	cbz	r1, 80089ca <__swsetup_r+0x4a>
 80089b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089bc:	4299      	cmp	r1, r3
 80089be:	d002      	beq.n	80089c6 <__swsetup_r+0x46>
 80089c0:	4628      	mov	r0, r5
 80089c2:	f000 f8af 	bl	8008b24 <_free_r>
 80089c6:	2300      	movs	r3, #0
 80089c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	2300      	movs	r3, #0
 80089d4:	6063      	str	r3, [r4, #4]
 80089d6:	6923      	ldr	r3, [r4, #16]
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f043 0308 	orr.w	r3, r3, #8
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	b94b      	cbnz	r3, 80089fa <__swsetup_r+0x7a>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089f0:	d003      	beq.n	80089fa <__swsetup_r+0x7a>
 80089f2:	4621      	mov	r1, r4
 80089f4:	4628      	mov	r0, r5
 80089f6:	f000 fa5f 	bl	8008eb8 <__smakebuf_r>
 80089fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fe:	f013 0201 	ands.w	r2, r3, #1
 8008a02:	d00a      	beq.n	8008a1a <__swsetup_r+0x9a>
 8008a04:	2200      	movs	r2, #0
 8008a06:	60a2      	str	r2, [r4, #8]
 8008a08:	6962      	ldr	r2, [r4, #20]
 8008a0a:	4252      	negs	r2, r2
 8008a0c:	61a2      	str	r2, [r4, #24]
 8008a0e:	6922      	ldr	r2, [r4, #16]
 8008a10:	b942      	cbnz	r2, 8008a24 <__swsetup_r+0xa4>
 8008a12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a16:	d1c5      	bne.n	80089a4 <__swsetup_r+0x24>
 8008a18:	bd38      	pop	{r3, r4, r5, pc}
 8008a1a:	0799      	lsls	r1, r3, #30
 8008a1c:	bf58      	it	pl
 8008a1e:	6962      	ldrpl	r2, [r4, #20]
 8008a20:	60a2      	str	r2, [r4, #8]
 8008a22:	e7f4      	b.n	8008a0e <__swsetup_r+0x8e>
 8008a24:	2000      	movs	r0, #0
 8008a26:	e7f7      	b.n	8008a18 <__swsetup_r+0x98>
 8008a28:	2000010c 	.word	0x2000010c

08008a2c <memset>:
 8008a2c:	4402      	add	r2, r0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d100      	bne.n	8008a36 <memset+0xa>
 8008a34:	4770      	bx	lr
 8008a36:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3a:	e7f9      	b.n	8008a30 <memset+0x4>

08008a3c <_close_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d06      	ldr	r5, [pc, #24]	@ (8008a58 <_close_r+0x1c>)
 8008a40:	2300      	movs	r3, #0
 8008a42:	4604      	mov	r4, r0
 8008a44:	4608      	mov	r0, r1
 8008a46:	602b      	str	r3, [r5, #0]
 8008a48:	f7f8 f9f1 	bl	8000e2e <_close>
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d102      	bne.n	8008a56 <_close_r+0x1a>
 8008a50:	682b      	ldr	r3, [r5, #0]
 8008a52:	b103      	cbz	r3, 8008a56 <_close_r+0x1a>
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	bd38      	pop	{r3, r4, r5, pc}
 8008a58:	20001fc0 	.word	0x20001fc0

08008a5c <_lseek_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d07      	ldr	r5, [pc, #28]	@ (8008a7c <_lseek_r+0x20>)
 8008a60:	4604      	mov	r4, r0
 8008a62:	4608      	mov	r0, r1
 8008a64:	4611      	mov	r1, r2
 8008a66:	2200      	movs	r2, #0
 8008a68:	602a      	str	r2, [r5, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f7f8 fa06 	bl	8000e7c <_lseek>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d102      	bne.n	8008a7a <_lseek_r+0x1e>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	b103      	cbz	r3, 8008a7a <_lseek_r+0x1e>
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	20001fc0 	.word	0x20001fc0

08008a80 <_read_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	@ (8008aa0 <_read_r+0x20>)
 8008a84:	4604      	mov	r4, r0
 8008a86:	4608      	mov	r0, r1
 8008a88:	4611      	mov	r1, r2
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	602a      	str	r2, [r5, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f7f8 f9b0 	bl	8000df4 <_read>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_read_r+0x1e>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_read_r+0x1e>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	20001fc0 	.word	0x20001fc0

08008aa4 <_write_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d07      	ldr	r5, [pc, #28]	@ (8008ac4 <_write_r+0x20>)
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	4608      	mov	r0, r1
 8008aac:	4611      	mov	r1, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	602a      	str	r2, [r5, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f7f7 fd1e 	bl	80004f4 <_write>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d102      	bne.n	8008ac2 <_write_r+0x1e>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	b103      	cbz	r3, 8008ac2 <_write_r+0x1e>
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	bd38      	pop	{r3, r4, r5, pc}
 8008ac4:	20001fc0 	.word	0x20001fc0

08008ac8 <__errno>:
 8008ac8:	4b01      	ldr	r3, [pc, #4]	@ (8008ad0 <__errno+0x8>)
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	2000010c 	.word	0x2000010c

08008ad4 <__libc_init_array>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8008b0c <__libc_init_array+0x38>)
 8008ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8008b10 <__libc_init_array+0x3c>)
 8008ada:	1b64      	subs	r4, r4, r5
 8008adc:	10a4      	asrs	r4, r4, #2
 8008ade:	2600      	movs	r6, #0
 8008ae0:	42a6      	cmp	r6, r4
 8008ae2:	d109      	bne.n	8008af8 <__libc_init_array+0x24>
 8008ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8008b14 <__libc_init_array+0x40>)
 8008ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8008b18 <__libc_init_array+0x44>)
 8008ae8:	f000 fa54 	bl	8008f94 <_init>
 8008aec:	1b64      	subs	r4, r4, r5
 8008aee:	10a4      	asrs	r4, r4, #2
 8008af0:	2600      	movs	r6, #0
 8008af2:	42a6      	cmp	r6, r4
 8008af4:	d105      	bne.n	8008b02 <__libc_init_array+0x2e>
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afc:	4798      	blx	r3
 8008afe:	3601      	adds	r6, #1
 8008b00:	e7ee      	b.n	8008ae0 <__libc_init_array+0xc>
 8008b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b06:	4798      	blx	r3
 8008b08:	3601      	adds	r6, #1
 8008b0a:	e7f2      	b.n	8008af2 <__libc_init_array+0x1e>
 8008b0c:	08009024 	.word	0x08009024
 8008b10:	08009024 	.word	0x08009024
 8008b14:	08009024 	.word	0x08009024
 8008b18:	08009028 	.word	0x08009028

08008b1c <__retarget_lock_init_recursive>:
 8008b1c:	4770      	bx	lr

08008b1e <__retarget_lock_acquire_recursive>:
 8008b1e:	4770      	bx	lr

08008b20 <__retarget_lock_release_recursive>:
 8008b20:	4770      	bx	lr
	...

08008b24 <_free_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4605      	mov	r5, r0
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	d041      	beq.n	8008bb0 <_free_r+0x8c>
 8008b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b30:	1f0c      	subs	r4, r1, #4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfb8      	it	lt
 8008b36:	18e4      	addlt	r4, r4, r3
 8008b38:	f000 f8e0 	bl	8008cfc <__malloc_lock>
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bb4 <_free_r+0x90>)
 8008b3e:	6813      	ldr	r3, [r2, #0]
 8008b40:	b933      	cbnz	r3, 8008b50 <_free_r+0x2c>
 8008b42:	6063      	str	r3, [r4, #4]
 8008b44:	6014      	str	r4, [r2, #0]
 8008b46:	4628      	mov	r0, r5
 8008b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b4c:	f000 b8dc 	b.w	8008d08 <__malloc_unlock>
 8008b50:	42a3      	cmp	r3, r4
 8008b52:	d908      	bls.n	8008b66 <_free_r+0x42>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	1821      	adds	r1, r4, r0
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	bf01      	itttt	eq
 8008b5c:	6819      	ldreq	r1, [r3, #0]
 8008b5e:	685b      	ldreq	r3, [r3, #4]
 8008b60:	1809      	addeq	r1, r1, r0
 8008b62:	6021      	streq	r1, [r4, #0]
 8008b64:	e7ed      	b.n	8008b42 <_free_r+0x1e>
 8008b66:	461a      	mov	r2, r3
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	b10b      	cbz	r3, 8008b70 <_free_r+0x4c>
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	d9fa      	bls.n	8008b66 <_free_r+0x42>
 8008b70:	6811      	ldr	r1, [r2, #0]
 8008b72:	1850      	adds	r0, r2, r1
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d10b      	bne.n	8008b90 <_free_r+0x6c>
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	4401      	add	r1, r0
 8008b7c:	1850      	adds	r0, r2, r1
 8008b7e:	4283      	cmp	r3, r0
 8008b80:	6011      	str	r1, [r2, #0]
 8008b82:	d1e0      	bne.n	8008b46 <_free_r+0x22>
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	6053      	str	r3, [r2, #4]
 8008b8a:	4408      	add	r0, r1
 8008b8c:	6010      	str	r0, [r2, #0]
 8008b8e:	e7da      	b.n	8008b46 <_free_r+0x22>
 8008b90:	d902      	bls.n	8008b98 <_free_r+0x74>
 8008b92:	230c      	movs	r3, #12
 8008b94:	602b      	str	r3, [r5, #0]
 8008b96:	e7d6      	b.n	8008b46 <_free_r+0x22>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf04      	itt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	6063      	str	r3, [r4, #4]
 8008ba6:	bf04      	itt	eq
 8008ba8:	1809      	addeq	r1, r1, r0
 8008baa:	6021      	streq	r1, [r4, #0]
 8008bac:	6054      	str	r4, [r2, #4]
 8008bae:	e7ca      	b.n	8008b46 <_free_r+0x22>
 8008bb0:	bd38      	pop	{r3, r4, r5, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20001fcc 	.word	0x20001fcc

08008bb8 <sbrk_aligned>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	4e0f      	ldr	r6, [pc, #60]	@ (8008bf8 <sbrk_aligned+0x40>)
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	6831      	ldr	r1, [r6, #0]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	b911      	cbnz	r1, 8008bca <sbrk_aligned+0x12>
 8008bc4:	f000 f9d6 	bl	8008f74 <_sbrk_r>
 8008bc8:	6030      	str	r0, [r6, #0]
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f000 f9d1 	bl	8008f74 <_sbrk_r>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d103      	bne.n	8008bde <sbrk_aligned+0x26>
 8008bd6:	f04f 34ff 	mov.w	r4, #4294967295
 8008bda:	4620      	mov	r0, r4
 8008bdc:	bd70      	pop	{r4, r5, r6, pc}
 8008bde:	1cc4      	adds	r4, r0, #3
 8008be0:	f024 0403 	bic.w	r4, r4, #3
 8008be4:	42a0      	cmp	r0, r4
 8008be6:	d0f8      	beq.n	8008bda <sbrk_aligned+0x22>
 8008be8:	1a21      	subs	r1, r4, r0
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 f9c2 	bl	8008f74 <_sbrk_r>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d1f2      	bne.n	8008bda <sbrk_aligned+0x22>
 8008bf4:	e7ef      	b.n	8008bd6 <sbrk_aligned+0x1e>
 8008bf6:	bf00      	nop
 8008bf8:	20001fc8 	.word	0x20001fc8

08008bfc <_malloc_r>:
 8008bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c00:	1ccd      	adds	r5, r1, #3
 8008c02:	f025 0503 	bic.w	r5, r5, #3
 8008c06:	3508      	adds	r5, #8
 8008c08:	2d0c      	cmp	r5, #12
 8008c0a:	bf38      	it	cc
 8008c0c:	250c      	movcc	r5, #12
 8008c0e:	2d00      	cmp	r5, #0
 8008c10:	4606      	mov	r6, r0
 8008c12:	db01      	blt.n	8008c18 <_malloc_r+0x1c>
 8008c14:	42a9      	cmp	r1, r5
 8008c16:	d904      	bls.n	8008c22 <_malloc_r+0x26>
 8008c18:	230c      	movs	r3, #12
 8008c1a:	6033      	str	r3, [r6, #0]
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cf8 <_malloc_r+0xfc>
 8008c26:	f000 f869 	bl	8008cfc <__malloc_lock>
 8008c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2e:	461c      	mov	r4, r3
 8008c30:	bb44      	cbnz	r4, 8008c84 <_malloc_r+0x88>
 8008c32:	4629      	mov	r1, r5
 8008c34:	4630      	mov	r0, r6
 8008c36:	f7ff ffbf 	bl	8008bb8 <sbrk_aligned>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	d158      	bne.n	8008cf2 <_malloc_r+0xf6>
 8008c40:	f8d8 4000 	ldr.w	r4, [r8]
 8008c44:	4627      	mov	r7, r4
 8008c46:	2f00      	cmp	r7, #0
 8008c48:	d143      	bne.n	8008cd2 <_malloc_r+0xd6>
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	d04b      	beq.n	8008ce6 <_malloc_r+0xea>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	4639      	mov	r1, r7
 8008c52:	4630      	mov	r0, r6
 8008c54:	eb04 0903 	add.w	r9, r4, r3
 8008c58:	f000 f98c 	bl	8008f74 <_sbrk_r>
 8008c5c:	4581      	cmp	r9, r0
 8008c5e:	d142      	bne.n	8008ce6 <_malloc_r+0xea>
 8008c60:	6821      	ldr	r1, [r4, #0]
 8008c62:	1a6d      	subs	r5, r5, r1
 8008c64:	4629      	mov	r1, r5
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7ff ffa6 	bl	8008bb8 <sbrk_aligned>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d03a      	beq.n	8008ce6 <_malloc_r+0xea>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	442b      	add	r3, r5
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	f8d8 3000 	ldr.w	r3, [r8]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	bb62      	cbnz	r2, 8008cd8 <_malloc_r+0xdc>
 8008c7e:	f8c8 7000 	str.w	r7, [r8]
 8008c82:	e00f      	b.n	8008ca4 <_malloc_r+0xa8>
 8008c84:	6822      	ldr	r2, [r4, #0]
 8008c86:	1b52      	subs	r2, r2, r5
 8008c88:	d420      	bmi.n	8008ccc <_malloc_r+0xd0>
 8008c8a:	2a0b      	cmp	r2, #11
 8008c8c:	d917      	bls.n	8008cbe <_malloc_r+0xc2>
 8008c8e:	1961      	adds	r1, r4, r5
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	6025      	str	r5, [r4, #0]
 8008c94:	bf18      	it	ne
 8008c96:	6059      	strne	r1, [r3, #4]
 8008c98:	6863      	ldr	r3, [r4, #4]
 8008c9a:	bf08      	it	eq
 8008c9c:	f8c8 1000 	streq.w	r1, [r8]
 8008ca0:	5162      	str	r2, [r4, r5]
 8008ca2:	604b      	str	r3, [r1, #4]
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f000 f82f 	bl	8008d08 <__malloc_unlock>
 8008caa:	f104 000b 	add.w	r0, r4, #11
 8008cae:	1d23      	adds	r3, r4, #4
 8008cb0:	f020 0007 	bic.w	r0, r0, #7
 8008cb4:	1ac2      	subs	r2, r0, r3
 8008cb6:	bf1c      	itt	ne
 8008cb8:	1a1b      	subne	r3, r3, r0
 8008cba:	50a3      	strne	r3, [r4, r2]
 8008cbc:	e7af      	b.n	8008c1e <_malloc_r+0x22>
 8008cbe:	6862      	ldr	r2, [r4, #4]
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	bf0c      	ite	eq
 8008cc4:	f8c8 2000 	streq.w	r2, [r8]
 8008cc8:	605a      	strne	r2, [r3, #4]
 8008cca:	e7eb      	b.n	8008ca4 <_malloc_r+0xa8>
 8008ccc:	4623      	mov	r3, r4
 8008cce:	6864      	ldr	r4, [r4, #4]
 8008cd0:	e7ae      	b.n	8008c30 <_malloc_r+0x34>
 8008cd2:	463c      	mov	r4, r7
 8008cd4:	687f      	ldr	r7, [r7, #4]
 8008cd6:	e7b6      	b.n	8008c46 <_malloc_r+0x4a>
 8008cd8:	461a      	mov	r2, r3
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	d1fb      	bne.n	8008cd8 <_malloc_r+0xdc>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	6053      	str	r3, [r2, #4]
 8008ce4:	e7de      	b.n	8008ca4 <_malloc_r+0xa8>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	6033      	str	r3, [r6, #0]
 8008cea:	4630      	mov	r0, r6
 8008cec:	f000 f80c 	bl	8008d08 <__malloc_unlock>
 8008cf0:	e794      	b.n	8008c1c <_malloc_r+0x20>
 8008cf2:	6005      	str	r5, [r0, #0]
 8008cf4:	e7d6      	b.n	8008ca4 <_malloc_r+0xa8>
 8008cf6:	bf00      	nop
 8008cf8:	20001fcc 	.word	0x20001fcc

08008cfc <__malloc_lock>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	@ (8008d04 <__malloc_lock+0x8>)
 8008cfe:	f7ff bf0e 	b.w	8008b1e <__retarget_lock_acquire_recursive>
 8008d02:	bf00      	nop
 8008d04:	20001fc4 	.word	0x20001fc4

08008d08 <__malloc_unlock>:
 8008d08:	4801      	ldr	r0, [pc, #4]	@ (8008d10 <__malloc_unlock+0x8>)
 8008d0a:	f7ff bf09 	b.w	8008b20 <__retarget_lock_release_recursive>
 8008d0e:	bf00      	nop
 8008d10:	20001fc4 	.word	0x20001fc4

08008d14 <__sflush_r>:
 8008d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1c:	0716      	lsls	r6, r2, #28
 8008d1e:	4605      	mov	r5, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	d454      	bmi.n	8008dce <__sflush_r+0xba>
 8008d24:	684b      	ldr	r3, [r1, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dc02      	bgt.n	8008d30 <__sflush_r+0x1c>
 8008d2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dd48      	ble.n	8008dc2 <__sflush_r+0xae>
 8008d30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	d045      	beq.n	8008dc2 <__sflush_r+0xae>
 8008d36:	2300      	movs	r3, #0
 8008d38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d3c:	682f      	ldr	r7, [r5, #0]
 8008d3e:	6a21      	ldr	r1, [r4, #32]
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	d030      	beq.n	8008da6 <__sflush_r+0x92>
 8008d44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	0759      	lsls	r1, r3, #29
 8008d4a:	d505      	bpl.n	8008d58 <__sflush_r+0x44>
 8008d4c:	6863      	ldr	r3, [r4, #4]
 8008d4e:	1ad2      	subs	r2, r2, r3
 8008d50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d52:	b10b      	cbz	r3, 8008d58 <__sflush_r+0x44>
 8008d54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d56:	1ad2      	subs	r2, r2, r3
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d5c:	6a21      	ldr	r1, [r4, #32]
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b0      	blx	r6
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	d106      	bne.n	8008d76 <__sflush_r+0x62>
 8008d68:	6829      	ldr	r1, [r5, #0]
 8008d6a:	291d      	cmp	r1, #29
 8008d6c:	d82b      	bhi.n	8008dc6 <__sflush_r+0xb2>
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e18 <__sflush_r+0x104>)
 8008d70:	40ca      	lsrs	r2, r1
 8008d72:	07d6      	lsls	r6, r2, #31
 8008d74:	d527      	bpl.n	8008dc6 <__sflush_r+0xb2>
 8008d76:	2200      	movs	r2, #0
 8008d78:	6062      	str	r2, [r4, #4]
 8008d7a:	04d9      	lsls	r1, r3, #19
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	d504      	bpl.n	8008d8c <__sflush_r+0x78>
 8008d82:	1c42      	adds	r2, r0, #1
 8008d84:	d101      	bne.n	8008d8a <__sflush_r+0x76>
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	b903      	cbnz	r3, 8008d8c <__sflush_r+0x78>
 8008d8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d8e:	602f      	str	r7, [r5, #0]
 8008d90:	b1b9      	cbz	r1, 8008dc2 <__sflush_r+0xae>
 8008d92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d96:	4299      	cmp	r1, r3
 8008d98:	d002      	beq.n	8008da0 <__sflush_r+0x8c>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f7ff fec2 	bl	8008b24 <_free_r>
 8008da0:	2300      	movs	r3, #0
 8008da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008da4:	e00d      	b.n	8008dc2 <__sflush_r+0xae>
 8008da6:	2301      	movs	r3, #1
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b0      	blx	r6
 8008dac:	4602      	mov	r2, r0
 8008dae:	1c50      	adds	r0, r2, #1
 8008db0:	d1c9      	bne.n	8008d46 <__sflush_r+0x32>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0c6      	beq.n	8008d46 <__sflush_r+0x32>
 8008db8:	2b1d      	cmp	r3, #29
 8008dba:	d001      	beq.n	8008dc0 <__sflush_r+0xac>
 8008dbc:	2b16      	cmp	r3, #22
 8008dbe:	d11e      	bne.n	8008dfe <__sflush_r+0xea>
 8008dc0:	602f      	str	r7, [r5, #0]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e022      	b.n	8008e0c <__sflush_r+0xf8>
 8008dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dca:	b21b      	sxth	r3, r3
 8008dcc:	e01b      	b.n	8008e06 <__sflush_r+0xf2>
 8008dce:	690f      	ldr	r7, [r1, #16]
 8008dd0:	2f00      	cmp	r7, #0
 8008dd2:	d0f6      	beq.n	8008dc2 <__sflush_r+0xae>
 8008dd4:	0793      	lsls	r3, r2, #30
 8008dd6:	680e      	ldr	r6, [r1, #0]
 8008dd8:	bf08      	it	eq
 8008dda:	694b      	ldreq	r3, [r1, #20]
 8008ddc:	600f      	str	r7, [r1, #0]
 8008dde:	bf18      	it	ne
 8008de0:	2300      	movne	r3, #0
 8008de2:	eba6 0807 	sub.w	r8, r6, r7
 8008de6:	608b      	str	r3, [r1, #8]
 8008de8:	f1b8 0f00 	cmp.w	r8, #0
 8008dec:	dde9      	ble.n	8008dc2 <__sflush_r+0xae>
 8008dee:	6a21      	ldr	r1, [r4, #32]
 8008df0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008df2:	4643      	mov	r3, r8
 8008df4:	463a      	mov	r2, r7
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b0      	blx	r6
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	dc08      	bgt.n	8008e10 <__sflush_r+0xfc>
 8008dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e10:	4407      	add	r7, r0
 8008e12:	eba8 0800 	sub.w	r8, r8, r0
 8008e16:	e7e7      	b.n	8008de8 <__sflush_r+0xd4>
 8008e18:	20400001 	.word	0x20400001

08008e1c <_fflush_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	690b      	ldr	r3, [r1, #16]
 8008e20:	4605      	mov	r5, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	b913      	cbnz	r3, 8008e2c <_fflush_r+0x10>
 8008e26:	2500      	movs	r5, #0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	b118      	cbz	r0, 8008e36 <_fflush_r+0x1a>
 8008e2e:	6a03      	ldr	r3, [r0, #32]
 8008e30:	b90b      	cbnz	r3, 8008e36 <_fflush_r+0x1a>
 8008e32:	f7ff fc8f 	bl	8008754 <__sinit>
 8008e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0f3      	beq.n	8008e26 <_fflush_r+0xa>
 8008e3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e40:	07d0      	lsls	r0, r2, #31
 8008e42:	d404      	bmi.n	8008e4e <_fflush_r+0x32>
 8008e44:	0599      	lsls	r1, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_fflush_r+0x32>
 8008e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e4a:	f7ff fe68 	bl	8008b1e <__retarget_lock_acquire_recursive>
 8008e4e:	4628      	mov	r0, r5
 8008e50:	4621      	mov	r1, r4
 8008e52:	f7ff ff5f 	bl	8008d14 <__sflush_r>
 8008e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e58:	07da      	lsls	r2, r3, #31
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	d4e4      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	059b      	lsls	r3, r3, #22
 8008e62:	d4e1      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e66:	f7ff fe5b 	bl	8008b20 <__retarget_lock_release_recursive>
 8008e6a:	e7dd      	b.n	8008e28 <_fflush_r+0xc>

08008e6c <__swhatbuf_r>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	460c      	mov	r4, r1
 8008e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e74:	2900      	cmp	r1, #0
 8008e76:	b096      	sub	sp, #88	@ 0x58
 8008e78:	4615      	mov	r5, r2
 8008e7a:	461e      	mov	r6, r3
 8008e7c:	da0d      	bge.n	8008e9a <__swhatbuf_r+0x2e>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e84:	f04f 0100 	mov.w	r1, #0
 8008e88:	bf14      	ite	ne
 8008e8a:	2340      	movne	r3, #64	@ 0x40
 8008e8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e90:	2000      	movs	r0, #0
 8008e92:	6031      	str	r1, [r6, #0]
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	b016      	add	sp, #88	@ 0x58
 8008e98:	bd70      	pop	{r4, r5, r6, pc}
 8008e9a:	466a      	mov	r2, sp
 8008e9c:	f000 f848 	bl	8008f30 <_fstat_r>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	dbec      	blt.n	8008e7e <__swhatbuf_r+0x12>
 8008ea4:	9901      	ldr	r1, [sp, #4]
 8008ea6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008eaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008eae:	4259      	negs	r1, r3
 8008eb0:	4159      	adcs	r1, r3
 8008eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008eb6:	e7eb      	b.n	8008e90 <__swhatbuf_r+0x24>

08008eb8 <__smakebuf_r>:
 8008eb8:	898b      	ldrh	r3, [r1, #12]
 8008eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ebc:	079d      	lsls	r5, r3, #30
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	d507      	bpl.n	8008ed4 <__smakebuf_r+0x1c>
 8008ec4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	2301      	movs	r3, #1
 8008ece:	6163      	str	r3, [r4, #20]
 8008ed0:	b003      	add	sp, #12
 8008ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed4:	ab01      	add	r3, sp, #4
 8008ed6:	466a      	mov	r2, sp
 8008ed8:	f7ff ffc8 	bl	8008e6c <__swhatbuf_r>
 8008edc:	9f00      	ldr	r7, [sp, #0]
 8008ede:	4605      	mov	r5, r0
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7ff fe8a 	bl	8008bfc <_malloc_r>
 8008ee8:	b948      	cbnz	r0, 8008efe <__smakebuf_r+0x46>
 8008eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eee:	059a      	lsls	r2, r3, #22
 8008ef0:	d4ee      	bmi.n	8008ed0 <__smakebuf_r+0x18>
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	f043 0302 	orr.w	r3, r3, #2
 8008efa:	81a3      	strh	r3, [r4, #12]
 8008efc:	e7e2      	b.n	8008ec4 <__smakebuf_r+0xc>
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	6020      	str	r0, [r4, #0]
 8008f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f06:	81a3      	strh	r3, [r4, #12]
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f0e:	b15b      	cbz	r3, 8008f28 <__smakebuf_r+0x70>
 8008f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f14:	4630      	mov	r0, r6
 8008f16:	f000 f81d 	bl	8008f54 <_isatty_r>
 8008f1a:	b128      	cbz	r0, 8008f28 <__smakebuf_r+0x70>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f023 0303 	bic.w	r3, r3, #3
 8008f22:	f043 0301 	orr.w	r3, r3, #1
 8008f26:	81a3      	strh	r3, [r4, #12]
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	431d      	orrs	r5, r3
 8008f2c:	81a5      	strh	r5, [r4, #12]
 8008f2e:	e7cf      	b.n	8008ed0 <__smakebuf_r+0x18>

08008f30 <_fstat_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	@ (8008f50 <_fstat_r+0x20>)
 8008f34:	2300      	movs	r3, #0
 8008f36:	4604      	mov	r4, r0
 8008f38:	4608      	mov	r0, r1
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	f7f7 ff82 	bl	8000e46 <_fstat>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	d102      	bne.n	8008f4c <_fstat_r+0x1c>
 8008f46:	682b      	ldr	r3, [r5, #0]
 8008f48:	b103      	cbz	r3, 8008f4c <_fstat_r+0x1c>
 8008f4a:	6023      	str	r3, [r4, #0]
 8008f4c:	bd38      	pop	{r3, r4, r5, pc}
 8008f4e:	bf00      	nop
 8008f50:	20001fc0 	.word	0x20001fc0

08008f54 <_isatty_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d06      	ldr	r5, [pc, #24]	@ (8008f70 <_isatty_r+0x1c>)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	602b      	str	r3, [r5, #0]
 8008f60:	f7f7 ff81 	bl	8000e66 <_isatty>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d102      	bne.n	8008f6e <_isatty_r+0x1a>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	b103      	cbz	r3, 8008f6e <_isatty_r+0x1a>
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	20001fc0 	.word	0x20001fc0

08008f74 <_sbrk_r>:
 8008f74:	b538      	push	{r3, r4, r5, lr}
 8008f76:	4d06      	ldr	r5, [pc, #24]	@ (8008f90 <_sbrk_r+0x1c>)
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	602b      	str	r3, [r5, #0]
 8008f80:	f7f7 ff8a 	bl	8000e98 <_sbrk>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_sbrk_r+0x1a>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_sbrk_r+0x1a>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	20001fc0 	.word	0x20001fc0

08008f94 <_init>:
 8008f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f96:	bf00      	nop
 8008f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9a:	bc08      	pop	{r3}
 8008f9c:	469e      	mov	lr, r3
 8008f9e:	4770      	bx	lr

08008fa0 <_fini>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr
