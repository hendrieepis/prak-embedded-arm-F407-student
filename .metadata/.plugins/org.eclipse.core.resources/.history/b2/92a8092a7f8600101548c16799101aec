
F4Disc-03a-TimeOutUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000945c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080095ec  080095ec  0000a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  0000b158  2**0
                  CONTENTS
  4 .ARM          00000008  080096e0  080096e0  0000a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e8  080096e8  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e8  080096e8  0000a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ec  080096ec  0000a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080096f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b158  2**0
                  CONTENTS
 10 .bss          00001e4c  20000158  20000158  0000b158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fa4  20001fa4  0000b158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001593e  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e0b  00000000  00000000  00020ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  000248d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  00025c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026028  00000000  00000000  00026acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c20e  00000000  00000000  0004caf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cce64  00000000  00000000  00068d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135b67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005614  00000000  00000000  00135bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095d4 	.word	0x080095d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	080095d4 	.word	0x080095d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <counterShow>:
#include <stdio.h>
#include "counter.h"

uint16_t count=0;

uint16_t counterShow(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 80005a0:	4b2e      	ldr	r3, [pc, #184]	@ (800065c <counterShow+0xc0>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	2140      	movs	r1, #64	@ 0x40
 80005b0:	482b      	ldr	r0, [pc, #172]	@ (8000660 <counterShow+0xc4>)
 80005b2:	f001 f9c1 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR1_GPIO_Port,BAR1_Pin,count & (1<<1));
 80005b6:	4b29      	ldr	r3, [pc, #164]	@ (800065c <counterShow+0xc0>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	4826      	ldr	r0, [pc, #152]	@ (8000664 <counterShow+0xc8>)
 80005ca:	f001 f9b5 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR2_GPIO_Port,BAR2_Pin,count & (1<<2));
 80005ce:	4b23      	ldr	r3, [pc, #140]	@ (800065c <counterShow+0xc0>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	2110      	movs	r1, #16
 80005de:	4820      	ldr	r0, [pc, #128]	@ (8000660 <counterShow+0xc4>)
 80005e0:	f001 f9aa 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR3_GPIO_Port,BAR3_Pin,count & (1<<3));
 80005e4:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <counterShow+0xc0>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	2120      	movs	r1, #32
 80005f4:	481a      	ldr	r0, [pc, #104]	@ (8000660 <counterShow+0xc4>)
 80005f6:	f001 f99f 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR4_GPIO_Port,BAR4_Pin,count & (1<<4));
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <counterShow+0xc0>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	2104      	movs	r1, #4
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <counterShow+0xc4>)
 800060c:	f001 f994 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <counterShow+0xc0>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0320 	and.w	r3, r3, #32
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	2110      	movs	r1, #16
 8000620:	4811      	ldr	r0, [pc, #68]	@ (8000668 <counterShow+0xcc>)
 8000622:	f001 f989 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <counterShow+0xc0>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	2120      	movs	r1, #32
 8000636:	480c      	ldr	r0, [pc, #48]	@ (8000668 <counterShow+0xcc>)
 8000638:	f001 f97e 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <counterShow+0xc0>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	4807      	ldr	r0, [pc, #28]	@ (800066c <counterShow+0xd0>)
 800064e:	f001 f973 	bl	8001938 <HAL_GPIO_WritePin>
	return count;
 8000652:	4b02      	ldr	r3, [pc, #8]	@ (800065c <counterShow+0xc0>)
 8000654:	881b      	ldrh	r3, [r3, #0]
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000174 	.word	0x20000174
 8000660:	40021000 	.word	0x40021000
 8000664:	40020800 	.word	0x40020800
 8000668:	40020400 	.word	0x40020400
 800066c:	40020c00 	.word	0x40020c00

08000670 <counterUpdate>:

void counterUpdate(void){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	++count;
 8000674:	4b05      	ldr	r3, [pc, #20]	@ (800068c <counterUpdate+0x1c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <counterUpdate+0x1c>)
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000174 	.word	0x20000174

08000690 <counterZero>:

void counterZero(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	count=0;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <counterZero+0x14>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000174 	.word	0x20000174

080006a8 <_write>:
I2C_HandleTypeDef hi2c1;
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	68b8      	ldr	r0, [r7, #8]
 80006bc:	f007 fbf2 	bl	8007ea4 <CDC_Transmit_FS>
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <usb_is_configured>:

extern USBD_HandleTypeDef hUsbDeviceFS;  // deklarasi handle dari usb_device.c
uint8_t usb_is_configured(void){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	return (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED);
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <usb_is_configured+0x20>)
 80006d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b03      	cmp	r3, #3
 80006da:	bf0c      	ite	eq
 80006dc:	2301      	moveq	r3, #1
 80006de:	2300      	movne	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	20000278 	.word	0x20000278

080006f0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	@ 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 f951 	bl	80089a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	@ (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	@ 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f003 f948 	bl	8003a0c <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000782:	f000 f9fd 	bl	8000b80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000796:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2105      	movs	r1, #5
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fba9 	bl	8003efc <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80007b0:	f000 f9e6 	bl	8000b80 <Error_Handler>
	}
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	@ 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <MX_I2C1_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_I2C1_Init+0x58>)
 80007d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_I2C1_Init+0x50>)
 8000802:	f001 f8cd 	bl	80019a0 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800080c:	f000 f9b8 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000178 	.word	0x20000178
 8000818:	40005400 	.word	0x40005400
 800081c:	000186a0 	.word	0x000186a0

08000820 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2S3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000826:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <MX_I2S3_Init+0x58>)
 8000828:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2S3_Init+0x54>)
 800082c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000830:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_I2S3_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000844:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000848:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <MX_I2S3_Init+0x5c>)
 800084a:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_I2S3_Init+0x54>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000860:	f001 f9e2 	bl	8001c28 <HAL_I2S_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 800086a:	f000 f989 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001cc 	.word	0x200001cc
 8000878:	40003c00 	.word	0x40003c00
 800087c:	00017700 	.word	0x00017700

08000880 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_SPI1_Init+0x64>)
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_SPI1_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008d2:	f003 fe61 	bl	8004598 <HAL_SPI_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80008dc:	f000 f950 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000214 	.word	0x20000214
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	4b98      	ldr	r3, [pc, #608]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a97      	ldr	r2, [pc, #604]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b95      	ldr	r3, [pc, #596]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	4b91      	ldr	r3, [pc, #580]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a90      	ldr	r2, [pc, #576]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b8e      	ldr	r3, [pc, #568]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b8a      	ldr	r3, [pc, #552]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a89      	ldr	r2, [pc, #548]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b87      	ldr	r3, [pc, #540]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b83      	ldr	r3, [pc, #524]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a82      	ldr	r2, [pc, #520]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b80      	ldr	r3, [pc, #512]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b7c      	ldr	r3, [pc, #496]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a7b      	ldr	r2, [pc, #492]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b79      	ldr	r3, [pc, #484]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b75      	ldr	r3, [pc, #468]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a74      	ldr	r2, [pc, #464]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b72      	ldr	r3, [pc, #456]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 80009aa:	2200      	movs	r2, #0
 80009ac:	217c      	movs	r1, #124	@ 0x7c
 80009ae:	486f      	ldr	r0, [pc, #444]	@ (8000b6c <MX_GPIO_Init+0x280>)
 80009b0:	f000 ffc2 	bl	8001938 <HAL_GPIO_WritePin>
			|BAR0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80009ba:	486d      	ldr	r0, [pc, #436]	@ (8000b70 <MX_GPIO_Init+0x284>)
 80009bc:	f000 ffbc 	bl	8001938 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	486a      	ldr	r0, [pc, #424]	@ (8000b70 <MX_GPIO_Init+0x284>)
 80009c6:	f000 ffb7 	bl	8001938 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ca:	2200      	movs	r2, #0
 80009cc:	f24f 0190 	movw	r1, #61584	@ 0xf090
 80009d0:	4868      	ldr	r0, [pc, #416]	@ (8000b74 <MX_GPIO_Init+0x288>)
 80009d2:	f000 ffb1 	bl	8001938 <HAL_GPIO_WritePin>
			|Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2130      	movs	r1, #48	@ 0x30
 80009da:	4867      	ldr	r0, [pc, #412]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 80009dc:	f000 ffac 	bl	8001938 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
	GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 80009e0:	237c      	movs	r3, #124	@ 0x7c
 80009e2:	61fb      	str	r3, [r7, #28]
			|BAR0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	485d      	ldr	r0, [pc, #372]	@ (8000b6c <MX_GPIO_Init+0x280>)
 80009f8:	f000 fdea 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 80009fc:	f642 0301 	movw	r3, #10241	@ 0x2801
 8000a00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4856      	ldr	r0, [pc, #344]	@ (8000b70 <MX_GPIO_Init+0x284>)
 8000a16:	f000 fddb 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	484e      	ldr	r0, [pc, #312]	@ (8000b70 <MX_GPIO_Init+0x284>)
 8000a36:	f000 fdcb 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	484b      	ldr	r0, [pc, #300]	@ (8000b7c <MX_GPIO_Init+0x290>)
 8000a50:	f000 fdbe 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000a54:	2330      	movs	r3, #48	@ 0x30
 8000a56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4842      	ldr	r0, [pc, #264]	@ (8000b70 <MX_GPIO_Init+0x284>)
 8000a68:	f000 fdb2 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
	GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000a6c:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000a70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	483d      	ldr	r0, [pc, #244]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000a82:	f000 fda5 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a86:	2304      	movs	r3, #4
 8000a88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4837      	ldr	r0, [pc, #220]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000a9a:	f000 fd99 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000a9e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000aa2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <MX_GPIO_Init+0x280>)
 8000ab4:	f000 fd8c 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000abc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aca:	2305      	movs	r3, #5
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4828      	ldr	r0, [pc, #160]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000ad6:	f000 fd7b 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW2_Pin SW1_Pin */
	GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000ada:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ade:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4821      	ldr	r0, [pc, #132]	@ (8000b74 <MX_GPIO_Init+0x288>)
 8000af0:	f000 fd6e 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000af4:	f24f 0390 	movw	r3, #61584	@ 0xf090
 8000af8:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin|BAR7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4819      	ldr	r0, [pc, #100]	@ (8000b74 <MX_GPIO_Init+0x288>)
 8000b0e:	f000 fd5f 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b12:	2320      	movs	r3, #32
 8000b14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <MX_GPIO_Init+0x288>)
 8000b26:	f000 fd53 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR5_Pin BAR6_Pin */
	GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000b2a:	2330      	movs	r3, #48	@ 0x30
 8000b2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000b42:	f000 fd45 	bl	80015d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b4a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b4e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_GPIO_Init+0x280>)
 8000b5c:	f000 fd38 	bl	80015d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	@ 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020000 	.word	0x40020000

08000b80 <Error_Handler>:

void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <main>:
#include "sensor.h"
#include "utility.h"


int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	HAL_Init();
 8000b92:	f000 fb75 	bl	8001280 <HAL_Init>
	SystemClock_Config();
 8000b96:	f7ff fdab 	bl	80006f0 <SystemClock_Config>
	MX_GPIO_Init();
 8000b9a:	f7ff fea7 	bl	80008ec <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b9e:	f7ff fe11 	bl	80007c4 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000ba2:	f7ff fe3d 	bl	8000820 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000ba6:	f7ff fe6b 	bl	8000880 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000baa:	f007 f8bd 	bl	8007d28 <MX_USB_DEVICE_Init>
	uint32_t t0 = HAL_GetTick();
 8000bae:	f000 fbcd 	bl	800134c <HAL_GetTick>
 8000bb2:	6078      	str	r0, [r7, #4]
	while (!usb_is_configured() && (HAL_GetTick() - t0) < 2000) {
 8000bb4:	e002      	b.n	8000bbc <main+0x30>
		HAL_Delay(10);
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f000 fbd4 	bl	8001364 <HAL_Delay>
	while (!usb_is_configured() && (HAL_GetTick() - t0) < 2000) {
 8000bbc:	f7ff fd86 	bl	80006cc <usb_is_configured>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d107      	bne.n	8000bd6 <main+0x4a>
 8000bc6:	f000 fbc1 	bl	800134c <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000bd4:	d3ef      	bcc.n	8000bb6 <main+0x2a>
	}
	HAL_Delay(700); //fix auto connect serial app
 8000bd6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000bda:	f000 fbc3 	bl	8001364 <HAL_Delay>
	checkBoard();
 8000bde:	f000 fabf 	bl	8001160 <checkBoard>

	while (1)
	{

		if(sensorDetectedTimeout()){
 8000be2:	f000 f81d 	bl	8000c20 <sensorDetectedTimeout>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d008      	beq.n	8000bfe <main+0x72>
			counterUpdate();
 8000bec:	f7ff fd40 	bl	8000670 <counterUpdate>
			printf("nilai counter: %d \n\r",counterShow());
 8000bf0:	f7ff fcd4 	bl	800059c <counterShow>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <main+0x90>)
 8000bfa:	f007 fe7f 	bl	80088fc <iprintf>
		}

		if(resetDetected()){
 8000bfe:	f000 f86f 	bl	8000ce0 <resetDetected>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0ec      	beq.n	8000be2 <main+0x56>
			counterZero();
 8000c08:	f7ff fd42 	bl	8000690 <counterZero>
			printf("nilai counter: %d \n\r",counterShow());
 8000c0c:	f7ff fcc6 	bl	800059c <counterShow>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4619      	mov	r1, r3
 8000c14:	4801      	ldr	r0, [pc, #4]	@ (8000c1c <main+0x90>)
 8000c16:	f007 fe71 	bl	80088fc <iprintf>
		if(sensorDetectedTimeout()){
 8000c1a:	e7e2      	b.n	8000be2 <main+0x56>
 8000c1c:	080095ec 	.word	0x080095ec

08000c20 <sensorDetectedTimeout>:
		}
	}
	return FlagDetect;
}

uint8_t sensorDetectedTimeout(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
	uint32_t db_ms=20;
 8000c26:	2314      	movs	r3, #20
 8000c28:	607b      	str	r3, [r7, #4]
	uint32_t  Timeout_loop=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
	uint32_t  Timeout_value=0x7FFFFF;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	@ (8000cd0 <sensorDetectedTimeout+0xb0>)
 8000c30:	603b      	str	r3, [r7, #0]
	uint8_t FlagDetect=0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	72fb      	strb	r3, [r7, #11]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 8000c36:	2102      	movs	r1, #2
 8000c38:	4826      	ldr	r0, [pc, #152]	@ (8000cd4 <sensorDetectedTimeout+0xb4>)
 8000c3a:	f000 fe65 	bl	8001908 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <sensorDetectedTimeout+0xa4>
		HAL_Delay(db_ms);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 fb8d 	bl	8001364 <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	4821      	ldr	r0, [pc, #132]	@ (8000cd4 <sensorDetectedTimeout+0xb4>)
 8000c4e:	f000 fe5b 	bl	8001908 <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d135      	bne.n	8000cc4 <sensorDetectedTimeout+0xa4>
			while((!HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin))&& (Timeout_loop++<=Timeout_value));
 8000c58:	bf00      	nop
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	481d      	ldr	r0, [pc, #116]	@ (8000cd4 <sensorDetectedTimeout+0xb4>)
 8000c5e:	f000 fe53 	bl	8001908 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d105      	bne.n	8000c74 <sensorDetectedTimeout+0x54>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60fa      	str	r2, [r7, #12]
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d2f2      	bcs.n	8000c5a <sensorDetectedTimeout+0x3a>
			if (Timeout_loop>=Timeout_value)
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d317      	bcc.n	8000cac <sensorDetectedTimeout+0x8c>
			{
				HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c82:	4815      	ldr	r0, [pc, #84]	@ (8000cd8 <sensorDetectedTimeout+0xb8>)
 8000c84:	f000 fe58 	bl	8001938 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000c88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8c:	f000 fb6a 	bl	8001364 <HAL_Delay>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c96:	4810      	ldr	r0, [pc, #64]	@ (8000cd8 <sensorDetectedTimeout+0xb8>)
 8000c98:	f000 fe4e 	bl	8001938 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000c9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca0:	f000 fb60 	bl	8001364 <HAL_Delay>
				printf("Err:001-btn error \n\r");
 8000ca4:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <sensorDetectedTimeout+0xbc>)
 8000ca6:	f007 fe29 	bl	80088fc <iprintf>
 8000caa:	e00b      	b.n	8000cc4 <sensorDetectedTimeout+0xa4>
			} else
			{
				// tunggu release stabil
				HAL_Delay(db_ms);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 fb59 	bl	8001364 <HAL_Delay>
				if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_SET) {
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4807      	ldr	r0, [pc, #28]	@ (8000cd4 <sensorDetectedTimeout+0xb4>)
 8000cb6:	f000 fe27 	bl	8001908 <HAL_GPIO_ReadPin>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <sensorDetectedTimeout+0xa4>
					FlagDetect=1; // valid press
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	72fb      	strb	r3, [r7, #11]
				}
			}
		}
	}
	return FlagDetect;
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	007fffff 	.word	0x007fffff
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	08009604 	.word	0x08009604

08000ce0 <resetDetected>:


uint8_t resetDetected(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint32_t db_ms=20;
 8000ce6:	2314      	movs	r3, #20
 8000ce8:	603b      	str	r3, [r7, #0]
	uint8_t FlagDetect=0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000cee:	2120      	movs	r1, #32
 8000cf0:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <resetDetected+0x64>)
 8000cf2:	f000 fe09 	bl	8001908 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d11d      	bne.n	8000d38 <resetDetected+0x58>
		HAL_Delay(db_ms);
 8000cfc:	6838      	ldr	r0, [r7, #0]
 8000cfe:	f000 fb31 	bl	8001364 <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000d02:	2120      	movs	r1, #32
 8000d04:	480f      	ldr	r0, [pc, #60]	@ (8000d44 <resetDetected+0x64>)
 8000d06:	f000 fdff 	bl	8001908 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d113      	bne.n	8000d38 <resetDetected+0x58>
			while(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET);
 8000d10:	bf00      	nop
 8000d12:	2120      	movs	r1, #32
 8000d14:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <resetDetected+0x64>)
 8000d16:	f000 fdf7 	bl	8001908 <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f8      	beq.n	8000d12 <resetDetected+0x32>
			// tunggu release stabil
			HAL_Delay(db_ms);
 8000d20:	6838      	ldr	r0, [r7, #0]
 8000d22:	f000 fb1f 	bl	8001364 <HAL_Delay>
			if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_SET) {
 8000d26:	2120      	movs	r1, #32
 8000d28:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <resetDetected+0x64>)
 8000d2a:	f000 fded 	bl	8001908 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <resetDetected+0x58>
				FlagDetect=1; // valid press
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return FlagDetect;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40020800 	.word	0x40020800

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f000 fbe0 	bl	800154c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <HAL_I2C_MspInit+0x84>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12c      	bne.n	8000e14 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a17      	ldr	r2, [pc, #92]	@ (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dd6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <HAL_I2C_MspInit+0x8c>)
 8000df4:	f000 fbec 	bl	80015d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_I2C_MspInit+0x88>)
 8000e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_I2C_MspInit+0x88>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	@ 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400

08000e28 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08e      	sub	sp, #56	@ 0x38
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a31      	ldr	r2, [pc, #196]	@ (8000f18 <HAL_I2S_MspInit+0xf0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d15a      	bne.n	8000f0e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e5c:	23c0      	movs	r3, #192	@ 0xc0
 8000e5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fa53 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e74:	f7ff fe84 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000edc:	2306      	movs	r3, #6
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <HAL_I2S_MspInit+0xf8>)
 8000ee8:	f000 fb72 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eec:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000efe:	2306      	movs	r3, #6
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <HAL_I2S_MspInit+0xfc>)
 8000f0a:	f000 fb61 	bl	80015d0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f0e:	bf00      	nop
 8000f10:	3738      	adds	r7, #56	@ 0x38
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40003c00 	.word	0x40003c00
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020800 	.word	0x40020800

08000f28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	@ (8000fac <HAL_SPI_MspInit+0x84>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12b      	bne.n	8000fa2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f82:	23e0      	movs	r3, #224	@ 0xe0
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f92:	2305      	movs	r3, #5
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <HAL_SPI_MspInit+0x8c>)
 8000f9e:	f000 fb17 	bl	80015d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f989 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <OTG_FS_IRQHandler+0x10>)
 800101e:	f001 fbe7 	bl	80027f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20001754 	.word	0x20001754

0800102c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e00a      	b.n	8001054 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800103e:	f3af 8000 	nop.w
 8001042:	4601      	mov	r1, r0
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	b2ca      	uxtb	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf0      	blt.n	800103e <_read+0x12>
  }

  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108e:	605a      	str	r2, [r3, #4]
  return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f007 fca0 	bl	8008a44 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20020000 	.word	0x20020000
 8001130:	00000400 	.word	0x00000400
 8001134:	2000026c 	.word	0x2000026c
 8001138:	20001fa8 	.word	0x20001fa8

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <checkBoard>:
 *  Created on: Aug 31, 2025
 *      Author: hendri
 */

#include "utility.h"
void checkBoard(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	printf("Cek BarLED, buzzer, USER LED \n\r");
 8001166:	482b      	ldr	r0, [pc, #172]	@ (8001214 <checkBoard+0xb4>)
 8001168:	f007 fbc8 	bl	80088fc <iprintf>
	HAL_Delay(300);
 800116c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001170:	f000 f8f8 	bl	8001364 <HAL_Delay>
	for (uint8_t cnt=0;cnt<8;cnt++){
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	e044      	b.n	8001204 <checkBoard+0xa4>

		HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 800117a:	2140      	movs	r1, #64	@ 0x40
 800117c:	4826      	ldr	r0, [pc, #152]	@ (8001218 <checkBoard+0xb8>)
 800117e:	f000 fbf4 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 8001182:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001186:	4825      	ldr	r0, [pc, #148]	@ (800121c <checkBoard+0xbc>)
 8001188:	f000 fbef 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 800118c:	2110      	movs	r1, #16
 800118e:	4822      	ldr	r0, [pc, #136]	@ (8001218 <checkBoard+0xb8>)
 8001190:	f000 fbeb 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 8001194:	2120      	movs	r1, #32
 8001196:	4820      	ldr	r0, [pc, #128]	@ (8001218 <checkBoard+0xb8>)
 8001198:	f000 fbe7 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 800119c:	2104      	movs	r1, #4
 800119e:	481e      	ldr	r0, [pc, #120]	@ (8001218 <checkBoard+0xb8>)
 80011a0:	f000 fbe3 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 80011a4:	2110      	movs	r1, #16
 80011a6:	481e      	ldr	r0, [pc, #120]	@ (8001220 <checkBoard+0xc0>)
 80011a8:	f000 fbdf 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 80011ac:	2120      	movs	r1, #32
 80011ae:	481c      	ldr	r0, [pc, #112]	@ (8001220 <checkBoard+0xc0>)
 80011b0:	f000 fbdb 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 80011b4:	2180      	movs	r1, #128	@ 0x80
 80011b6:	481b      	ldr	r0, [pc, #108]	@ (8001224 <checkBoard+0xc4>)
 80011b8:	f000 fbd7 	bl	800196a <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80011bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c0:	4816      	ldr	r0, [pc, #88]	@ (800121c <checkBoard+0xbc>)
 80011c2:	f000 fbd2 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80011c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ca:	4816      	ldr	r0, [pc, #88]	@ (8001224 <checkBoard+0xc4>)
 80011cc:	f000 fbcd 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80011d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <checkBoard+0xc4>)
 80011d6:	f000 fbc8 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80011da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011de:	4811      	ldr	r0, [pc, #68]	@ (8001224 <checkBoard+0xc4>)
 80011e0:	f000 fbc3 	bl	800196a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80011e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011e8:	480e      	ldr	r0, [pc, #56]	@ (8001224 <checkBoard+0xc4>)
 80011ea:	f000 fbbe 	bl	800196a <HAL_GPIO_TogglePin>
		printf("count: %d \n\r",cnt);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4619      	mov	r1, r3
 80011f2:	480d      	ldr	r0, [pc, #52]	@ (8001228 <checkBoard+0xc8>)
 80011f4:	f007 fb82 	bl	80088fc <iprintf>
		HAL_Delay(100);
 80011f8:	2064      	movs	r0, #100	@ 0x64
 80011fa:	f000 f8b3 	bl	8001364 <HAL_Delay>
	for (uint8_t cnt=0;cnt<8;cnt++){
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	3301      	adds	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b07      	cmp	r3, #7
 8001208:	d9b7      	bls.n	800117a <checkBoard+0x1a>
	}

}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800961c 	.word	0x0800961c
 8001218:	40021000 	.word	0x40021000
 800121c:	40020800 	.word	0x40020800
 8001220:	40020400 	.word	0x40020400
 8001224:	40020c00 	.word	0x40020c00
 8001228:	0800963c 	.word	0x0800963c

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001230:	480d      	ldr	r0, [pc, #52]	@ (8001268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001232:	490e      	ldr	r1, [pc, #56]	@ (800126c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001234:	4a0e      	ldr	r2, [pc, #56]	@ (8001270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	@ (8001274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001248:	4c0b      	ldr	r4, [pc, #44]	@ (8001278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001256:	f7ff ff71 	bl	800113c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f007 fbf9 	bl	8008a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fc95 	bl	8000b8c <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001270:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 8001274:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001278:	20001fa4 	.word	0x20001fa4

0800127c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <HAL_Init+0x40>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <HAL_Init+0x40>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	@ (80012c0 <HAL_Init+0x40>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f94f 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fd48 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f967 	bl	80015b6 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 f92f 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008
 8001348:	20000270 	.word	0x20000270

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000270 	.word	0x20000270

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_Delay+0x44>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	@ (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	@ (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff29 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff3e 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff8e 	bl	80014a0 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff31 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffa2 	bl	8001508 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	@ 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e16b      	b.n	80018c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	429a      	cmp	r2, r3
 8001606:	f040 815a 	bne.w	80018be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d005      	beq.n	8001622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161e:	2b02      	cmp	r3, #2
 8001620:	d130      	bne.n	8001684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 0201 	and.w	r2, r3, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b03      	cmp	r3, #3
 800168e:	d017      	beq.n	80016c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d123      	bne.n	8001714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	08da      	lsrs	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3208      	adds	r2, #8
 800170e:	69b9      	ldr	r1, [r7, #24]
 8001710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80b4 	beq.w	80018be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b60      	ldr	r3, [pc, #384]	@ (80018dc <HAL_GPIO_Init+0x30c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	4a5f      	ldr	r2, [pc, #380]	@ (80018dc <HAL_GPIO_Init+0x30c>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001764:	6453      	str	r3, [r2, #68]	@ 0x44
 8001766:	4b5d      	ldr	r3, [pc, #372]	@ (80018dc <HAL_GPIO_Init+0x30c>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001772:	4a5b      	ldr	r2, [pc, #364]	@ (80018e0 <HAL_GPIO_Init+0x310>)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a52      	ldr	r2, [pc, #328]	@ (80018e4 <HAL_GPIO_Init+0x314>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02b      	beq.n	80017f6 <HAL_GPIO_Init+0x226>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a51      	ldr	r2, [pc, #324]	@ (80018e8 <HAL_GPIO_Init+0x318>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x222>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a50      	ldr	r2, [pc, #320]	@ (80018ec <HAL_GPIO_Init+0x31c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x21e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	@ (80018f0 <HAL_GPIO_Init+0x320>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x21a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	@ (80018f4 <HAL_GPIO_Init+0x324>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x216>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4d      	ldr	r2, [pc, #308]	@ (80018f8 <HAL_GPIO_Init+0x328>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x212>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	@ (80018fc <HAL_GPIO_Init+0x32c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x20e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001900 <HAL_GPIO_Init+0x330>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x20a>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00e      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017da:	2308      	movs	r3, #8
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x228>
 80017f6:	2300      	movs	r3, #0
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001808:	4935      	ldr	r1, [pc, #212]	@ (80018e0 <HAL_GPIO_Init+0x310>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_GPIO_Init+0x334>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183a:	4a32      	ldr	r2, [pc, #200]	@ (8001904 <HAL_GPIO_Init+0x334>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001840:	4b30      	ldr	r3, [pc, #192]	@ (8001904 <HAL_GPIO_Init+0x334>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001864:	4a27      	ldr	r2, [pc, #156]	@ (8001904 <HAL_GPIO_Init+0x334>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800186a:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <HAL_GPIO_Init+0x334>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188e:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <HAL_GPIO_Init+0x334>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_GPIO_Init+0x334>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b8:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <HAL_GPIO_Init+0x334>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3301      	adds	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	f67f ae90 	bls.w	80015ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3724      	adds	r7, #36	@ 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40021400 	.word	0x40021400
 80018fc:	40021800 	.word	0x40021800
 8001900:	40021c00 	.word	0x40021c00
 8001904:	40013c00 	.word	0x40013c00

08001908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e001      	b.n	800192a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	041a      	lsls	r2, r3, #16
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43d9      	mvns	r1, r3
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	400b      	ands	r3, r1
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e12b      	b.n	8001c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff f9e6 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	@ 0x24
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a04:	f002 fc72 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 8001a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4a81      	ldr	r2, [pc, #516]	@ (8001c14 <HAL_I2C_Init+0x274>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d807      	bhi.n	8001a24 <HAL_I2C_Init+0x84>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4a80      	ldr	r2, [pc, #512]	@ (8001c18 <HAL_I2C_Init+0x278>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	bf94      	ite	ls
 8001a1c:	2301      	movls	r3, #1
 8001a1e:	2300      	movhi	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e006      	b.n	8001a32 <HAL_I2C_Init+0x92>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4a7d      	ldr	r2, [pc, #500]	@ (8001c1c <HAL_I2C_Init+0x27c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bf94      	ite	ls
 8001a2c:	2301      	movls	r3, #1
 8001a2e:	2300      	movhi	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0e7      	b.n	8001c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4a78      	ldr	r2, [pc, #480]	@ (8001c20 <HAL_I2C_Init+0x280>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0c9b      	lsrs	r3, r3, #18
 8001a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a6a      	ldr	r2, [pc, #424]	@ (8001c14 <HAL_I2C_Init+0x274>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d802      	bhi.n	8001a74 <HAL_I2C_Init+0xd4>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3301      	adds	r3, #1
 8001a72:	e009      	b.n	8001a88 <HAL_I2C_Init+0xe8>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	4a69      	ldr	r2, [pc, #420]	@ (8001c24 <HAL_I2C_Init+0x284>)
 8001a80:	fba2 2303 	umull	r2, r3, r2, r3
 8001a84:	099b      	lsrs	r3, r3, #6
 8001a86:	3301      	adds	r3, #1
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	495c      	ldr	r1, [pc, #368]	@ (8001c14 <HAL_I2C_Init+0x274>)
 8001aa4:	428b      	cmp	r3, r1
 8001aa6:	d819      	bhi.n	8001adc <HAL_I2C_Init+0x13c>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e59      	subs	r1, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab6:	1c59      	adds	r1, r3, #1
 8001ab8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001abc:	400b      	ands	r3, r1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00a      	beq.n	8001ad8 <HAL_I2C_Init+0x138>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1e59      	subs	r1, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad6:	e051      	b.n	8001b7c <HAL_I2C_Init+0x1dc>
 8001ad8:	2304      	movs	r3, #4
 8001ada:	e04f      	b.n	8001b7c <HAL_I2C_Init+0x1dc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d111      	bne.n	8001b08 <HAL_I2C_Init+0x168>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e58      	subs	r0, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	440b      	add	r3, r1
 8001af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e012      	b.n	8001b2e <HAL_I2C_Init+0x18e>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1e58      	subs	r0, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	0099      	lsls	r1, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf0c      	ite	eq
 8001b28:	2301      	moveq	r3, #1
 8001b2a:	2300      	movne	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Init+0x196>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e022      	b.n	8001b7c <HAL_I2C_Init+0x1dc>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10e      	bne.n	8001b5c <HAL_I2C_Init+0x1bc>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e58      	subs	r0, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6859      	ldr	r1, [r3, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	440b      	add	r3, r1
 8001b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b5a:	e00f      	b.n	8001b7c <HAL_I2C_Init+0x1dc>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	1e58      	subs	r0, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	0099      	lsls	r1, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	6809      	ldr	r1, [r1, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001baa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6911      	ldr	r1, [r2, #16]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68d2      	ldr	r2, [r2, #12]
 8001bb6:	4311      	orrs	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	000186a0 	.word	0x000186a0
 8001c18:	001e847f 	.word	0x001e847f
 8001c1c:	003d08ff 	.word	0x003d08ff
 8001c20:	431bde83 	.word	0x431bde83
 8001c24:	10624dd3 	.word	0x10624dd3

08001c28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e128      	b.n	8001e8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a90      	ldr	r2, [pc, #576]	@ (8001e94 <HAL_I2S_Init+0x26c>)
 8001c52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff f8e7 	bl	8000e28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c70:	f023 030f 	bic.w	r3, r3, #15
 8001c74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d060      	beq.n	8001d48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d102      	bne.n	8001c94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c8e:	2310      	movs	r3, #16
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e001      	b.n	8001c98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c94:	2320      	movs	r3, #32
 8001c96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d802      	bhi.n	8001ca6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f002 fc16 	bl	80044d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cb6:	d125      	bne.n	8001d04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	3305      	adds	r3, #5
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e01f      	b.n	8001d22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	3305      	adds	r3, #5
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e00e      	b.n	8001d22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	3305      	adds	r3, #5
 8001d20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4a5c      	ldr	r2, [pc, #368]	@ (8001e98 <HAL_I2S_Init+0x270>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	085b      	lsrs	r3, r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	e003      	b.n	8001d50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d902      	bls.n	8001d5c <HAL_I2S_Init+0x134>
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2bff      	cmp	r3, #255	@ 0xff
 8001d5a:	d907      	bls.n	8001d6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	f043 0210 	orr.w	r2, r3, #16
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e08f      	b.n	8001e8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	ea42 0103 	orr.w	r1, r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d8a:	f023 030f 	bic.w	r3, r3, #15
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6851      	ldr	r1, [r2, #4]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6892      	ldr	r2, [r2, #8]
 8001d96:	4311      	orrs	r1, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68d2      	ldr	r2, [r2, #12]
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6992      	ldr	r2, [r2, #24]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d161      	bne.n	8001e7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a38      	ldr	r2, [pc, #224]	@ (8001e9c <HAL_I2S_Init+0x274>)
 8001dbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a37      	ldr	r2, [pc, #220]	@ (8001ea0 <HAL_I2S_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2S_Init+0x1a4>
 8001dc8:	4b36      	ldr	r3, [pc, #216]	@ (8001ea4 <HAL_I2S_Init+0x27c>)
 8001dca:	e001      	b.n	8001dd0 <HAL_I2S_Init+0x1a8>
 8001dcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	4932      	ldr	r1, [pc, #200]	@ (8001ea0 <HAL_I2S_Init+0x278>)
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2S_Init+0x1b8>
 8001ddc:	4a31      	ldr	r2, [pc, #196]	@ (8001ea4 <HAL_I2S_Init+0x27c>)
 8001dde:	e001      	b.n	8001de4 <HAL_I2S_Init+0x1bc>
 8001de0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001de4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001de8:	f023 030f 	bic.w	r3, r3, #15
 8001dec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea0 <HAL_I2S_Init+0x278>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_I2S_Init+0x1d4>
 8001df8:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea4 <HAL_I2S_Init+0x27c>)
 8001dfa:	e001      	b.n	8001e00 <HAL_I2S_Init+0x1d8>
 8001dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e00:	2202      	movs	r2, #2
 8001e02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a25      	ldr	r2, [pc, #148]	@ (8001ea0 <HAL_I2S_Init+0x278>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2S_Init+0x1ea>
 8001e0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <HAL_I2S_Init+0x27c>)
 8001e10:	e001      	b.n	8001e16 <HAL_I2S_Init+0x1ee>
 8001e12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e22:	d003      	beq.n	8001e2c <HAL_I2S_Init+0x204>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	e001      	b.n	8001e38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e42:	4313      	orrs	r3, r2
 8001e44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	897b      	ldrh	r3, [r7, #10]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <HAL_I2S_Init+0x278>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_I2S_Init+0x24c>
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_I2S_Init+0x27c>)
 8001e72:	e001      	b.n	8001e78 <HAL_I2S_Init+0x250>
 8001e74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e78:	897a      	ldrh	r2, [r7, #10]
 8001e7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	08001f9f 	.word	0x08001f9f
 8001e98:	cccccccd 	.word	0xcccccccd
 8001e9c:	080020b5 	.word	0x080020b5
 8001ea0:	40003800 	.word	0x40003800
 8001ea4:	40003400 	.word	0x40003400

08001ea8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	1c9a      	adds	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffb8 	bl	8001ea8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	b292      	uxth	r2, r2
 8001f54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	1c9a      	adds	r2, r3, #2
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10e      	bne.n	8001f96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff93 	bl	8001ebc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d13a      	bne.n	8002030 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d109      	bne.n	8001fd8 <I2S_IRQHandler+0x3a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fce:	2b40      	cmp	r3, #64	@ 0x40
 8001fd0:	d102      	bne.n	8001fd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffb4 	bl	8001f40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fde:	2b40      	cmp	r3, #64	@ 0x40
 8001fe0:	d126      	bne.n	8002030 <I2S_IRQHandler+0x92>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d11f      	bne.n	8002030 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ffe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f043 0202 	orr.w	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff50 	bl	8001ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d136      	bne.n	80020aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d109      	bne.n	800205a <I2S_IRQHandler+0xbc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002050:	2b80      	cmp	r3, #128	@ 0x80
 8002052:	d102      	bne.n	800205a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff45 	bl	8001ee4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b08      	cmp	r3, #8
 8002062:	d122      	bne.n	80020aa <I2S_IRQHandler+0x10c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b20      	cmp	r3, #32
 8002070:	d11b      	bne.n	80020aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002080:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff13 	bl	8001ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a92      	ldr	r2, [pc, #584]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80020ce:	4b92      	ldr	r3, [pc, #584]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020d0:	e001      	b.n	80020d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80020d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a8b      	ldr	r2, [pc, #556]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80020ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020ee:	e001      	b.n	80020f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80020f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002100:	d004      	beq.n	800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 8099 	bne.w	800223e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b02      	cmp	r3, #2
 8002114:	d107      	bne.n	8002126 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f925 	bl	8002370 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f9c8 	bl	80024d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002146:	2b40      	cmp	r3, #64	@ 0x40
 8002148:	d13a      	bne.n	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d035      	beq.n	80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800215e:	4b6e      	ldr	r3, [pc, #440]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002160:	e001      	b.n	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002162:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4969      	ldr	r1, [pc, #420]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800216e:	428b      	cmp	r3, r1
 8002170:	d101      	bne.n	8002176 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002172:	4b69      	ldr	r3, [pc, #420]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002174:	e001      	b.n	800217a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002176:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800217a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800217e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800218e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe88 	bl	8001ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	f040 80c3 	bne.w	8002352 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80bd 	beq.w	8002352 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a49      	ldr	r2, [pc, #292]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80021f2:	4b49      	ldr	r3, [pc, #292]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021f4:	e001      	b.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80021f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4944      	ldr	r1, [pc, #272]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002202:	428b      	cmp	r3, r1
 8002204:	d101      	bne.n	800220a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002208:	e001      	b.n	800220e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800220a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800220e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002212:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fe4a 	bl	8001ed0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800223c:	e089      	b.n	8002352 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d107      	bne.n	8002258 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8be 	bl	80023d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f8fd 	bl	800246c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002278:	2b40      	cmp	r3, #64	@ 0x40
 800227a:	d12f      	bne.n	80022dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d02a      	beq.n	80022dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002294:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d101      	bne.n	80022a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80022a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022a2:	e001      	b.n	80022a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80022a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4919      	ldr	r1, [pc, #100]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80022b4:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022b6:	e001      	b.n	80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80022b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fdfa 	bl	8001ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d136      	bne.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022fc:	e001      	b.n	8002302 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80022fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4902      	ldr	r1, [pc, #8]	@ (8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800230a:	428b      	cmp	r3, r1
 800230c:	d106      	bne.n	800231c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800230e:	4b02      	ldr	r3, [pc, #8]	@ (8002318 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002310:	e006      	b.n	8002320 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002312:	bf00      	nop
 8002314:	40003800 	.word	0x40003800
 8002318:	40003400 	.word	0x40003400
 800231c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002320:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002324:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002334:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fdc0 	bl	8001ed0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002350:	e000      	b.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002352:	bf00      	nop
}
 8002354:	bf00      	nop
 8002356:	3720      	adds	r7, #32
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	1c99      	adds	r1, r3, #2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6251      	str	r1, [r2, #36]	@ 0x24
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d113      	bne.n	80023ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80023b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ffc9 	bl	800235c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	1c99      	adds	r1, r3, #2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80023e6:	8819      	ldrh	r1, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002464 <I2SEx_TxISR_I2SExt+0x90>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <I2SEx_TxISR_I2SExt+0x22>
 80023f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <I2SEx_TxISR_I2SExt+0x94>)
 80023f4:	e001      	b.n	80023fa <I2SEx_TxISR_I2SExt+0x26>
 80023f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023fa:	460a      	mov	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d121      	bne.n	800245a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <I2SEx_TxISR_I2SExt+0x90>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <I2SEx_TxISR_I2SExt+0x50>
 8002420:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <I2SEx_TxISR_I2SExt+0x94>)
 8002422:	e001      	b.n	8002428 <I2SEx_TxISR_I2SExt+0x54>
 8002424:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	490d      	ldr	r1, [pc, #52]	@ (8002464 <I2SEx_TxISR_I2SExt+0x90>)
 8002430:	428b      	cmp	r3, r1
 8002432:	d101      	bne.n	8002438 <I2SEx_TxISR_I2SExt+0x64>
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <I2SEx_TxISR_I2SExt+0x94>)
 8002436:	e001      	b.n	800243c <I2SEx_TxISR_I2SExt+0x68>
 8002438:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800243c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002440:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff81 	bl	800235c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40003800 	.word	0x40003800
 8002468:	40003400 	.word	0x40003400

0800246c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68d8      	ldr	r0, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	1c99      	adds	r1, r3, #2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002484:	b282      	uxth	r2, r0
 8002486:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d113      	bne.n	80024c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff4a 	bl	800235c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a20      	ldr	r2, [pc, #128]	@ (8002560 <I2SEx_RxISR_I2SExt+0x90>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <I2SEx_RxISR_I2SExt+0x16>
 80024e2:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <I2SEx_RxISR_I2SExt+0x94>)
 80024e4:	e001      	b.n	80024ea <I2SEx_RxISR_I2SExt+0x1a>
 80024e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024ea:	68d8      	ldr	r0, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	1c99      	adds	r1, r3, #2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80024f6:	b282      	uxth	r2, r0
 80024f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d121      	bne.n	8002556 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <I2SEx_RxISR_I2SExt+0x90>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <I2SEx_RxISR_I2SExt+0x50>
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <I2SEx_RxISR_I2SExt+0x94>)
 800251e:	e001      	b.n	8002524 <I2SEx_RxISR_I2SExt+0x54>
 8002520:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	490d      	ldr	r1, [pc, #52]	@ (8002560 <I2SEx_RxISR_I2SExt+0x90>)
 800252c:	428b      	cmp	r3, r1
 800252e:	d101      	bne.n	8002534 <I2SEx_RxISR_I2SExt+0x64>
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <I2SEx_RxISR_I2SExt+0x94>)
 8002532:	e001      	b.n	8002538 <I2SEx_RxISR_I2SExt+0x68>
 8002534:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002538:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800253c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff03 	bl	800235c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40003800 	.word	0x40003800
 8002564:	40003400 	.word	0x40003400

08002568 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af02      	add	r7, sp, #8
 800256e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e101      	b.n	800277e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d106      	bne.n	800259a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f005 fdcd 	bl	8008134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a8:	d102      	bne.n	80025b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 f990 	bl	80048da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7c1a      	ldrb	r2, [r3, #16]
 80025c2:	f88d 2000 	strb.w	r2, [sp]
 80025c6:	3304      	adds	r3, #4
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	f002 f86e 	bl	80046aa <USB_CoreInit>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0ce      	b.n	800277e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 f988 	bl	80048fc <USB_SetCurrentMode>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0bf      	b.n	800277e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
 8002602:	e04a      	b.n	800269a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3315      	adds	r3, #21
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3314      	adds	r3, #20
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	b298      	uxth	r0, r3
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	332e      	adds	r3, #46	@ 0x2e
 8002640:	4602      	mov	r2, r0
 8002642:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	3318      	adds	r3, #24
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	331c      	adds	r3, #28
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3320      	adds	r3, #32
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3324      	adds	r3, #36	@ 0x24
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3301      	adds	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	791b      	ldrb	r3, [r3, #4]
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3af      	bcc.n	8002604 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e044      	b.n	8002734 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	3301      	adds	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	791b      	ldrb	r3, [r3, #4]
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	429a      	cmp	r2, r3
 800273c:	d3b5      	bcc.n	80026aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7c1a      	ldrb	r2, [r3, #16]
 8002746:	f88d 2000 	strb.w	r2, [sp]
 800274a:	3304      	adds	r3, #4
 800274c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274e:	f002 f921 	bl	8004994 <USB_DevInit>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e00c      	b.n	800277e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 f96b 	bl	8005a52 <USB_DevDisconnect>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_PCD_Start+0x1c>
 800279e:	2302      	movs	r3, #2
 80027a0:	e022      	b.n	80027e8 <HAL_PCD_Start+0x62>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d105      	bne.n	80027ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 f872 	bl	80048b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 f919 	bl	8005a10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b08d      	sub	sp, #52	@ 0x34
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f003 f9d7 	bl	8005bba <USB_GetMode>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 848c 	bne.w	800312c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f003 f93b 	bl	8005a94 <USB_ReadInterrupts>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8482 	beq.w	800312a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f003 f928 	bl	8005a94 <USB_ReadInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d107      	bne.n	800285e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f002 0202 	and.w	r2, r2, #2
 800285c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f003 f916 	bl	8005a94 <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b10      	cmp	r3, #16
 8002870:	d161      	bne.n	8002936 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0210 	bic.w	r2, r2, #16
 8002880:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 020f 	and.w	r2, r3, #15
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	3304      	adds	r3, #4
 80028a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028ac:	d124      	bne.n	80028f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d035      	beq.n	8002926 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	6a38      	ldr	r0, [r7, #32]
 80028ce:	f002 ff4d 	bl	800576c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028de:	441a      	add	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f0:	441a      	add	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	615a      	str	r2, [r3, #20]
 80028f6:	e016      	b.n	8002926 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002902:	d110      	bne.n	8002926 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800290a:	2208      	movs	r2, #8
 800290c:	4619      	mov	r1, r3
 800290e:	6a38      	ldr	r0, [r7, #32]
 8002910:	f002 ff2c 	bl	800576c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002920:	441a      	add	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0210 	orr.w	r2, r2, #16
 8002934:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 f8aa 	bl	8005a94 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002946:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800294a:	f040 80a7 	bne.w	8002a9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 f8af 	bl	8005aba <USB_ReadDevAllOutEpInterrupt>
 800295c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800295e:	e099      	b.n	8002a94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 808e 	beq.w	8002a88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f003 f8d3 	bl	8005b22 <USB_ReadDevOutEPInterrupt>
 800297c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	2301      	movs	r3, #1
 8002998:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800299a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fea3 	bl	80036e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b8:	461a      	mov	r2, r3
 80029ba:	2308      	movs	r3, #8
 80029bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 ff79 	bl	80038b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	2310      	movs	r3, #16
 80029e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d030      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f4:	2b80      	cmp	r3, #128	@ 0x80
 80029f6:	d109      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	78db      	ldrb	r3, [r3, #3]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d108      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f005 fc90 	bl	800835c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a64:	461a      	mov	r2, r3
 8002a66:	2320      	movs	r3, #32
 8002a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a80:	461a      	mov	r2, r3
 8002a82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f47f af62 	bne.w	8002960 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 fff7 	bl	8005a94 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ab0:	f040 80db 	bne.w	8002c6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 f818 	bl	8005aee <USB_ReadDevAllInEpInterrupt>
 8002abe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ac4:	e0cd      	b.n	8002c62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80c2 	beq.w	8002c56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 f83e 	bl	8005b5e <USB_ReadDevInEPInterrupt>
 8002ae2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d057      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	2201      	movs	r2, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69f9      	ldr	r1, [r7, #28]
 8002b0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b0e:	4013      	ands	r3, r2
 8002b10:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2301      	movs	r3, #1
 8002b22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	799b      	ldrb	r3, [r3, #6]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d132      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3320      	adds	r3, #32
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4403      	add	r3, r0
 8002b4c:	331c      	adds	r3, #28
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4419      	add	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4403      	add	r3, r0
 8002b60:	3320      	adds	r3, #32
 8002b62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d113      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x3a2>
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3324      	adds	r3, #36	@ 0x24
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d108      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	f003 f845 	bl	8005c1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f005 fb5a 	bl	8008252 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bec:	461a      	mov	r2, r3
 8002bee:	2340      	movs	r3, #64	@ 0x40
 8002bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d023      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bfe:	6a38      	ldr	r0, [r7, #32]
 8002c00:	f002 f82c 	bl	8004c5c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	3310      	adds	r3, #16
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	3304      	adds	r3, #4
 8002c16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	78db      	ldrb	r3, [r3, #3]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d108      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f005 fba7 	bl	8008380 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2302      	movs	r3, #2
 8002c42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fcbd 	bl	80035d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f af2e 	bne.w	8002ac6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 ff10 	bl	8005a94 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c7e:	d122      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fea3 	bl	80039f4 <HAL_PCDEx_LPM_Callback>
 8002cae:	e002      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f005 fb45 	bl	8008340 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fee2 	bl	8005a94 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cda:	d112      	bne.n	8002d02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f005 fb01 	bl	80082f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d00:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f002 fec4 	bl	8005a94 <USB_ReadInterrupts>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d16:	f040 80b7 	bne.w	8002e88 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2110      	movs	r1, #16
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 ff91 	bl	8004c5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d3e:	e046      	b.n	8002dce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d64:	0151      	lsls	r1, r2, #5
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	440a      	add	r2, r1
 8002d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d98:	0151      	lsls	r1, r2, #5
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	440a      	add	r2, r1
 8002d9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002da2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002da6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002db8:	0151      	lsls	r1, r2, #5
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	440a      	add	r2, r1
 8002dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002dc6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dca:	3301      	adds	r3, #1
 8002dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	791b      	ldrb	r3, [r3, #4]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d3b2      	bcc.n	8002d40 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002dec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7bdb      	ldrb	r3, [r3, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e06:	f043 030b 	orr.w	r3, r3, #11
 8002e0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e1c:	f043 030b 	orr.w	r3, r3, #11
 8002e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e22:	e015      	b.n	8002e50 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e36:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e4a:	f043 030b 	orr.w	r3, r3, #11
 8002e4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e72:	461a      	mov	r2, r3
 8002e74:	f002 fed2 	bl	8005c1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 fe01 	bl	8005a94 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e9c:	d123      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f002 fe97 	bl	8005bd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 ff4e 	bl	8004d4e <USB_GetDevSpeed>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681c      	ldr	r4, [r3, #0]
 8002ebe:	f001 fa09 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 8002ec2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f001 fc52 	bl	8004774 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f005 f9e6 	bl	80082a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 fdd2 	bl	8005a94 <USB_ReadInterrupts>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d10a      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f005 f9c3 	bl	8008286 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f002 0208 	and.w	r2, r2, #8
 8002f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fdbd 	bl	8005a94 <USB_ReadInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f20:	2b80      	cmp	r3, #128	@ 0x80
 8002f22:	d123      	bne.n	8002f6c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f30:	2301      	movs	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f34:	e014      	b.n	8002f60 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fb0a 	bl	800356e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	791b      	ldrb	r3, [r3, #4]
 8002f64:	461a      	mov	r2, r3
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d3e4      	bcc.n	8002f36 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f002 fd8f 	bl	8005a94 <USB_ReadInterrupts>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f80:	d13c      	bne.n	8002ffc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f82:	2301      	movs	r3, #1
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f86:	e02b      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d115      	bne.n	8002fda <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da12      	bge.n	8002fda <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3317      	adds	r3, #23
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 faca 	bl	800356e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	3301      	adds	r3, #1
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	791b      	ldrb	r3, [r3, #4]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d3cd      	bcc.n	8002f88 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002ffa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f002 fd47 	bl	8005a94 <USB_ReadInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800300c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003010:	d156      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003012:	2301      	movs	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
 8003016:	e045      	b.n	80030a4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d12e      	bne.n	800309e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003040:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003042:	2b00      	cmp	r3, #0
 8003044:	da2b      	bge.n	800309e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	0c1a      	lsrs	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003050:	4053      	eors	r3, r2
 8003052:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003056:	2b00      	cmp	r3, #0
 8003058:	d121      	bne.n	800309e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800309a:	6053      	str	r3, [r2, #4]
            break;
 800309c:	e008      	b.n	80030b0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	3301      	adds	r3, #1
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d3b3      	bcc.n	8003018 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 fce5 	bl	8005a94 <USB_ReadInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d4:	d10a      	bne.n	80030ec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f005 f964 	bl	80083a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 fccf 	bl	8005a94 <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d115      	bne.n	800312c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f005 f954 	bl	80083c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	e000      	b.n	800312c <HAL_PCD_IRQHandler+0x93c>
      return;
 800312a:	bf00      	nop
    }
  }
}
 800312c:	3734      	adds	r7, #52	@ 0x34
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}

08003132 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_PCD_SetAddress+0x1a>
 8003148:	2302      	movs	r3, #2
 800314a:	e012      	b.n	8003172 <HAL_PCD_SetAddress+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f002 fc2e 	bl	80059c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	461a      	mov	r2, r3
 8003188:	4603      	mov	r3, r0
 800318a:	70fb      	strb	r3, [r7, #3]
 800318c:	460b      	mov	r3, r1
 800318e:	803b      	strh	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800319c:	2b00      	cmp	r3, #0
 800319e:	da0f      	bge.n	80031c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	3310      	adds	r3, #16
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	705a      	strb	r2, [r3, #1]
 80031be:	e00f      	b.n	80031e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	f003 020f 	and.w	r2, r3, #15
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	3304      	adds	r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031ec:	883b      	ldrh	r3, [r7, #0]
 80031ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	78ba      	ldrb	r2, [r7, #2]
 80031fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800320e:	78bb      	ldrb	r3, [r7, #2]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d102      	bne.n	800321a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_PCD_EP_Open+0xae>
 8003224:	2302      	movs	r3, #2
 8003226:	e00e      	b.n	8003246 <HAL_PCD_EP_Open+0xcc>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68f9      	ldr	r1, [r7, #12]
 8003236:	4618      	mov	r0, r3
 8003238:	f001 fdae 	bl	8004d98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003244:	7afb      	ldrb	r3, [r7, #11]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800325a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325e:	2b00      	cmp	r3, #0
 8003260:	da0f      	bge.n	8003282 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	3310      	adds	r3, #16
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	3304      	adds	r3, #4
 8003278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	705a      	strb	r2, [r3, #1]
 8003280:	e00f      	b.n	80032a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 020f 	and.w	r2, r3, #15
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	3304      	adds	r3, #4
 800329a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_PCD_EP_Close+0x6e>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e00e      	b.n	80032da <HAL_PCD_EP_Close+0x8c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68f9      	ldr	r1, [r7, #12]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 fdec 	bl	8004ea8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	460b      	mov	r3, r1
 80032f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	f003 020f 	and.w	r2, r3, #15
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	3304      	adds	r3, #4
 800330a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003324:	7afb      	ldrb	r3, [r7, #11]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	b2da      	uxtb	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	799b      	ldrb	r3, [r3, #6]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	799b      	ldrb	r3, [r3, #6]
 8003346:	461a      	mov	r2, r3
 8003348:	6979      	ldr	r1, [r7, #20]
 800334a:	f001 fe89 	bl	8005060 <USB_EPStartXfer>

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 020f 	and.w	r2, r3, #15
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	460b      	mov	r3, r1
 8003396:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003398:	7afb      	ldrb	r3, [r7, #11]
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	3310      	adds	r3, #16
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	3304      	adds	r3, #4
 80033ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2201      	movs	r2, #1
 80033c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	799b      	ldrb	r3, [r3, #6]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d102      	bne.n	80033e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	799b      	ldrb	r3, [r3, #6]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6979      	ldr	r1, [r7, #20]
 80033ee:	f001 fe37 	bl	8005060 <USB_EPStartXfer>

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	7912      	ldrb	r2, [r2, #4]
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e04f      	b.n	80034ba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800341a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800341e:	2b00      	cmp	r3, #0
 8003420:	da0f      	bge.n	8003442 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	f003 020f 	and.w	r2, r3, #15
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	3310      	adds	r3, #16
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	705a      	strb	r2, [r3, #1]
 8003440:	e00d      	b.n	800345e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_PCD_EP_SetStall+0x82>
 800347a:	2302      	movs	r3, #2
 800347c:	e01d      	b.n	80034ba <HAL_PCD_EP_SetStall+0xbe>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	4618      	mov	r0, r3
 800348e:	f002 f9c5 	bl	800581c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7999      	ldrb	r1, [r3, #6]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034aa:	461a      	mov	r2, r3
 80034ac:	f002 fbb6 	bl	8005c1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	7912      	ldrb	r2, [r2, #4]
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e042      	b.n	8003566 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da0f      	bge.n	8003508 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	f003 020f 	and.w	r2, r3, #15
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	3310      	adds	r3, #16
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	3304      	adds	r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	705a      	strb	r2, [r3, #1]
 8003506:	e00f      	b.n	8003528 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 020f 	and.w	r2, r3, #15
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	3304      	adds	r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	b2da      	uxtb	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_PCD_EP_ClrStall+0x86>
 8003544:	2302      	movs	r3, #2
 8003546:	e00e      	b.n	8003566 <HAL_PCD_EP_ClrStall+0xa4>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68f9      	ldr	r1, [r7, #12]
 8003556:	4618      	mov	r0, r3
 8003558:	f002 f9ce 	bl	80058f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800357a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800357e:	2b00      	cmp	r3, #0
 8003580:	da0c      	bge.n	800359c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	3310      	adds	r3, #16
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	3304      	adds	r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e00c      	b.n	80035b6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 020f 	and.w	r2, r3, #15
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	3304      	adds	r3, #4
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 ffed 	bl	800559c <USB_EPStopXfer>
 80035c2:	4603      	mov	r3, r0
 80035c4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	@ 0x28
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	3310      	adds	r3, #16
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	4413      	add	r3, r2
 80035f4:	3304      	adds	r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	429a      	cmp	r2, r3
 8003602:	d901      	bls.n	8003608 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e06b      	b.n	80036e0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	429a      	cmp	r2, r3
 800361c:	d902      	bls.n	8003624 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	3303      	adds	r3, #3
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800362c:	e02a      	b.n	8003684 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3303      	adds	r3, #3
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68d9      	ldr	r1, [r3, #12]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4603      	mov	r3, r0
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f002 f842 	bl	80056f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	441a      	add	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	441a      	add	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	429a      	cmp	r2, r3
 8003698:	d809      	bhi.n	80036ae <PCD_WriteEmptyTxFifo+0xde>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d203      	bcs.n	80036ae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1bf      	bne.n	800362e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d811      	bhi.n	80036de <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	2201      	movs	r2, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	6939      	ldr	r1, [r7, #16]
 80036d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036da:	4013      	ands	r3, r2
 80036dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	333c      	adds	r3, #60	@ 0x3c
 8003700:	3304      	adds	r3, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	799b      	ldrb	r3, [r3, #6]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d17b      	bne.n	8003816 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d015      	beq.n	8003754 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	4a61      	ldr	r2, [pc, #388]	@ (80038b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	f240 80b9 	bls.w	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80b3 	beq.w	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	e0a7      	b.n	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376a:	461a      	mov	r2, r3
 800376c:	2320      	movs	r3, #32
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	e098      	b.n	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 8093 	bne.w	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d90f      	bls.n	80037a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a2:	6093      	str	r3, [r2, #8]
 80037a4:	e07e      	b.n	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	0159      	lsls	r1, r3, #5
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	440b      	add	r3, r1
 80037c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	1ad2      	subs	r2, r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d114      	bne.n	8003808 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037f0:	461a      	mov	r2, r3
 80037f2:	2101      	movs	r1, #1
 80037f4:	f002 fa12 	bl	8005c1c <USB_EP0_OutStart>
 80037f8:	e006      	b.n	8003808 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	441a      	add	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f004 fd04 	bl	800821c <HAL_PCD_DataOutStageCallback>
 8003814:	e046      	b.n	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4a26      	ldr	r2, [pc, #152]	@ (80038b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d124      	bne.n	8003868 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003834:	461a      	mov	r2, r3
 8003836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383a:	6093      	str	r3, [r2, #8]
 800383c:	e032      	b.n	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003854:	461a      	mov	r2, r3
 8003856:	2320      	movs	r3, #32
 8003858:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f004 fcdb 	bl	800821c <HAL_PCD_DataOutStageCallback>
 8003866:	e01d      	b.n	80038a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d114      	bne.n	8003898 <PCD_EP_OutXfrComplete_int+0x1b0>
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d108      	bne.n	8003898 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003890:	461a      	mov	r2, r3
 8003892:	2100      	movs	r1, #0
 8003894:	f002 f9c2 	bl	8005c1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f004 fcbc 	bl	800821c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	4f54300a 	.word	0x4f54300a
 80038b4:	4f54310a 	.word	0x4f54310a

080038b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	333c      	adds	r3, #60	@ 0x3c
 80038d0:	3304      	adds	r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d90e      	bls.n	800390c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800390a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f004 fc73 	bl	80081f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a0a      	ldr	r2, [pc, #40]	@ (8003940 <PCD_EP_OutSetupPacket_int+0x88>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d90c      	bls.n	8003934 <PCD_EP_OutSetupPacket_int+0x7c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	799b      	ldrb	r3, [r3, #6]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d108      	bne.n	8003934 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800392c:	461a      	mov	r2, r3
 800392e:	2101      	movs	r1, #1
 8003930:	f002 f974 	bl	8005c1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	4f54300a 	.word	0x4f54300a

08003944 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	70fb      	strb	r3, [r7, #3]
 8003950:	4613      	mov	r3, r2
 8003952:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003962:	883b      	ldrh	r3, [r7, #0]
 8003964:	0419      	lsls	r1, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	430a      	orrs	r2, r1
 800396e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003970:	e028      	b.n	80039c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e00d      	b.n	80039a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	3340      	adds	r3, #64	@ 0x40
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4413      	add	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	3301      	adds	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3ec      	bcc.n	8003986 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039ac:	883b      	ldrh	r3, [r7, #0]
 80039ae:	0418      	lsls	r0, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	4302      	orrs	r2, r0
 80039bc:	3340      	adds	r3, #64	@ 0x40
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e267      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d075      	beq.n	8003b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a2a:	4b88      	ldr	r3, [pc, #544]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d00c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a36:	4b85      	ldr	r3, [pc, #532]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d112      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4b82      	ldr	r3, [pc, #520]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	4b7e      	ldr	r3, [pc, #504]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d05b      	beq.n	8003b14 <HAL_RCC_OscConfig+0x108>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d157      	bne.n	8003b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e242      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x74>
 8003a72:	4b76      	ldr	r3, [pc, #472]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a75      	ldr	r2, [pc, #468]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e01d      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x98>
 8003a8a:	4b70      	ldr	r3, [pc, #448]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b6d      	ldr	r3, [pc, #436]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xb0>
 8003aa4:	4b69      	ldr	r3, [pc, #420]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a68      	ldr	r2, [pc, #416]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b66      	ldr	r3, [pc, #408]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a65      	ldr	r2, [pc, #404]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fc42 	bl	800134c <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fd fc3e 	bl	800134c <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	@ 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e207      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b5b      	ldr	r3, [pc, #364]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xc0>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fc2e 	bl	800134c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fd fc2a 	bl	800134c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1f3      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0xe8>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b22:	4b4a      	ldr	r3, [pc, #296]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b47      	ldr	r3, [pc, #284]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b44      	ldr	r3, [pc, #272]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	4b41      	ldr	r3, [pc, #260]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e1c7      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4937      	ldr	r1, [pc, #220]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	e03a      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b34      	ldr	r3, [pc, #208]	@ (8003c50 <HAL_RCC_OscConfig+0x244>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd fbe3 	bl	800134c <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fd fbdf 	bl	800134c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e1a8      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b28      	ldr	r3, [pc, #160]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4925      	ldr	r1, [pc, #148]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]
 8003bbc:	e015      	b.n	8003bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bbe:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_RCC_OscConfig+0x244>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fbc2 	bl	800134c <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fbbe 	bl	800134c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e187      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	4b1b      	ldr	r3, [pc, #108]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d036      	beq.n	8003c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfe:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <HAL_RCC_OscConfig+0x248>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd fba2 	bl	800134c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fd fb9e 	bl	800134c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e167      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_RCC_OscConfig+0x240>)
 8003c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x200>
 8003c2a:	e01b      	b.n	8003c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2c:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <HAL_RCC_OscConfig+0x248>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fd fb8b 	bl	800134c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	e00e      	b.n	8003c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3a:	f7fd fb87 	bl	800134c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d907      	bls.n	8003c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e150      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	42470000 	.word	0x42470000
 8003c54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ea      	bne.n	8003c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8097 	beq.w	8003da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c76:	4b81      	ldr	r3, [pc, #516]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b7d      	ldr	r3, [pc, #500]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c92:	4b7a      	ldr	r3, [pc, #488]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	4b77      	ldr	r3, [pc, #476]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d118      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cae:	4b74      	ldr	r3, [pc, #464]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a73      	ldr	r2, [pc, #460]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cba:	f7fd fb47 	bl	800134c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc2:	f7fd fb43 	bl	800134c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e10c      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e80 <HAL_RCC_OscConfig+0x474>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2ea>
 8003ce8:	4b64      	ldr	r3, [pc, #400]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cec:	4a63      	ldr	r2, [pc, #396]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf4:	e01c      	b.n	8003d30 <HAL_RCC_OscConfig+0x324>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b05      	cmp	r3, #5
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x30c>
 8003cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	4a5e      	ldr	r2, [pc, #376]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d16:	e00b      	b.n	8003d30 <HAL_RCC_OscConfig+0x324>
 8003d18:	4b58      	ldr	r3, [pc, #352]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	4a57      	ldr	r2, [pc, #348]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d24:	4b55      	ldr	r3, [pc, #340]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d28:	4a54      	ldr	r2, [pc, #336]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f023 0304 	bic.w	r3, r3, #4
 8003d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d38:	f7fd fb08 	bl	800134c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f7fd fb04 	bl	800134c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0cb      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	4b49      	ldr	r3, [pc, #292]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ee      	beq.n	8003d40 <HAL_RCC_OscConfig+0x334>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d64:	f7fd faf2 	bl	800134c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fd faee 	bl	800134c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0b5      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d82:	4b3e      	ldr	r3, [pc, #248]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ee      	bne.n	8003d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d94:	4b39      	ldr	r3, [pc, #228]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	4a38      	ldr	r2, [pc, #224]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80a1 	beq.w	8003eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003daa:	4b34      	ldr	r3, [pc, #208]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d05c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d141      	bne.n	8003e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <HAL_RCC_OscConfig+0x478>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fac2 	bl	800134c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd fabe 	bl	800134c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e087      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b27      	ldr	r3, [pc, #156]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	491b      	ldr	r1, [pc, #108]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <HAL_RCC_OscConfig+0x478>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fa97 	bl	800134c <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e22:	f7fd fa93 	bl	800134c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e05c      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x416>
 8003e40:	e054      	b.n	8003eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <HAL_RCC_OscConfig+0x478>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd fa80 	bl	800134c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd fa7c 	bl	800134c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e045      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_RCC_OscConfig+0x470>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x444>
 8003e6e:	e03d      	b.n	8003eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e038      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40007000 	.word	0x40007000
 8003e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e88:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef8 <HAL_RCC_OscConfig+0x4ec>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d028      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d121      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d11a      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d111      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800

08003efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0cc      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b68      	ldr	r3, [pc, #416]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d90c      	bls.n	8003f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b65      	ldr	r3, [pc, #404]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f26:	4b63      	ldr	r3, [pc, #396]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d001      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0b8      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d020      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f50:	4b59      	ldr	r3, [pc, #356]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4a58      	ldr	r2, [pc, #352]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f68:	4b53      	ldr	r3, [pc, #332]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4a52      	ldr	r2, [pc, #328]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f74:	4b50      	ldr	r3, [pc, #320]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	494d      	ldr	r1, [pc, #308]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d044      	beq.n	800401c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d119      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e07f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b3f      	ldr	r3, [pc, #252]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e06f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e067      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b37      	ldr	r3, [pc, #220]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4934      	ldr	r1, [pc, #208]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fec:	f7fd f9ae 	bl	800134c <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fd f9aa 	bl	800134c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e04f      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b2b      	ldr	r3, [pc, #172]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b25      	ldr	r3, [pc, #148]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d20c      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b20      	ldr	r3, [pc, #128]	@ (80040b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e032      	b.n	80040aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4916      	ldr	r1, [pc, #88]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	490e      	ldr	r1, [pc, #56]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004082:	f000 f821 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004086:	4602      	mov	r2, r0
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	490a      	ldr	r1, [pc, #40]	@ (80040bc <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	5ccb      	ldrb	r3, [r1, r3]
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800409e:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd f90e 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023c00 	.word	0x40023c00
 80040b8:	40023800 	.word	0x40023800
 80040bc:	08009694 	.word	0x08009694
 80040c0:	20000000 	.word	0x20000000
 80040c4:	20000004 	.word	0x20000004

080040c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040cc:	b094      	sub	sp, #80	@ 0x50
 80040ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e0:	4b79      	ldr	r3, [pc, #484]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030c 	and.w	r3, r3, #12
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d00d      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x40>
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	f200 80e1 	bhi.w	80042b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x34>
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d003      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fa:	e0db      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040fc:	4b73      	ldr	r3, [pc, #460]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x204>)
 80040fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004100:	e0db      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004102:	4b73      	ldr	r3, [pc, #460]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004104:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004106:	e0d8      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004108:	4b6f      	ldr	r3, [pc, #444]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004110:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004112:	4b6d      	ldr	r3, [pc, #436]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d063      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411e:	4b6a      	ldr	r3, [pc, #424]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	2200      	movs	r2, #0
 8004126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004130:	633b      	str	r3, [r7, #48]	@ 0x30
 8004132:	2300      	movs	r3, #0
 8004134:	637b      	str	r3, [r7, #52]	@ 0x34
 8004136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	f04f 0000 	mov.w	r0, #0
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	0159      	lsls	r1, r3, #5
 8004148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800414c:	0150      	lsls	r0, r2, #5
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4621      	mov	r1, r4
 8004154:	1a51      	subs	r1, r2, r1
 8004156:	6139      	str	r1, [r7, #16]
 8004158:	4629      	mov	r1, r5
 800415a:	eb63 0301 	sbc.w	r3, r3, r1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800416c:	4659      	mov	r1, fp
 800416e:	018b      	lsls	r3, r1, #6
 8004170:	4651      	mov	r1, sl
 8004172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004176:	4651      	mov	r1, sl
 8004178:	018a      	lsls	r2, r1, #6
 800417a:	4651      	mov	r1, sl
 800417c:	ebb2 0801 	subs.w	r8, r2, r1
 8004180:	4659      	mov	r1, fp
 8004182:	eb63 0901 	sbc.w	r9, r3, r1
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800419a:	4690      	mov	r8, r2
 800419c:	4699      	mov	r9, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	eb18 0303 	adds.w	r3, r8, r3
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	462b      	mov	r3, r5
 80041a8:	eb49 0303 	adc.w	r3, r9, r3
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041ba:	4629      	mov	r1, r5
 80041bc:	024b      	lsls	r3, r1, #9
 80041be:	4621      	mov	r1, r4
 80041c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041c4:	4621      	mov	r1, r4
 80041c6:	024a      	lsls	r2, r1, #9
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ce:	2200      	movs	r2, #0
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041d8:	f7fc f84a 	bl	8000270 <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4613      	mov	r3, r2
 80041e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e4:	e058      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e6:	4b38      	ldr	r3, [pc, #224]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	2200      	movs	r2, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	4611      	mov	r1, r2
 80041f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041f6:	623b      	str	r3, [r7, #32]
 80041f8:	2300      	movs	r3, #0
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	f04f 0000 	mov.w	r0, #0
 8004208:	f04f 0100 	mov.w	r1, #0
 800420c:	0159      	lsls	r1, r3, #5
 800420e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004212:	0150      	lsls	r0, r2, #5
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4641      	mov	r1, r8
 800421a:	ebb2 0a01 	subs.w	sl, r2, r1
 800421e:	4649      	mov	r1, r9
 8004220:	eb63 0b01 	sbc.w	fp, r3, r1
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004238:	ebb2 040a 	subs.w	r4, r2, sl
 800423c:	eb63 050b 	sbc.w	r5, r3, fp
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	00eb      	lsls	r3, r5, #3
 800424a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424e:	00e2      	lsls	r2, r4, #3
 8004250:	4614      	mov	r4, r2
 8004252:	461d      	mov	r5, r3
 8004254:	4643      	mov	r3, r8
 8004256:	18e3      	adds	r3, r4, r3
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	464b      	mov	r3, r9
 800425c:	eb45 0303 	adc.w	r3, r5, r3
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800426e:	4629      	mov	r1, r5
 8004270:	028b      	lsls	r3, r1, #10
 8004272:	4621      	mov	r1, r4
 8004274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004278:	4621      	mov	r1, r4
 800427a:	028a      	lsls	r2, r1, #10
 800427c:	4610      	mov	r0, r2
 800427e:	4619      	mov	r1, r3
 8004280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004282:	2200      	movs	r2, #0
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	61fa      	str	r2, [r7, #28]
 8004288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800428c:	f7fb fff0 	bl	8000270 <__aeabi_uldivmod>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4613      	mov	r3, r2
 8004296:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004298:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	3301      	adds	r3, #1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042b2:	e002      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_RCC_GetSysClockFreq+0x204>)
 80042b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3750      	adds	r7, #80	@ 0x50
 80042c0:	46bd      	mov	sp, r7
 80042c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	007a1200 	.word	0x007a1200

080042d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d8:	4b03      	ldr	r3, [pc, #12]	@ (80042e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000000 	.word	0x20000000

080042ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042f0:	f7ff fff0 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b05      	ldr	r3, [pc, #20]	@ (800430c <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0a9b      	lsrs	r3, r3, #10
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4903      	ldr	r1, [pc, #12]	@ (8004310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	080096a4 	.word	0x080096a4

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004338:	2b00      	cmp	r3, #0
 800433a:	d035      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800433c:	4b62      	ldr	r3, [pc, #392]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004342:	f7fd f803 	bl	800134c <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004348:	e008      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800434a:	f7fc ffff 	bl	800134c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0b0      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435c:	4b5b      	ldr	r3, [pc, #364]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	019a      	lsls	r2, r3, #6
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	071b      	lsls	r3, r3, #28
 8004374:	4955      	ldr	r1, [pc, #340]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800437c:	4b52      	ldr	r3, [pc, #328]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004382:	f7fc ffe3 	bl	800134c <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800438a:	f7fc ffdf 	bl	800134c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e090      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439c:	4b4b      	ldr	r3, [pc, #300]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8083 	beq.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	4b44      	ldr	r3, [pc, #272]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	4a43      	ldr	r2, [pc, #268]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c6:	4b41      	ldr	r3, [pc, #260]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043d2:	4b3f      	ldr	r3, [pc, #252]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3e      	ldr	r2, [pc, #248]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043de:	f7fc ffb5 	bl	800134c <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e6:	f7fc ffb1 	bl	800134c <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e062      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043f8:	4b35      	ldr	r3, [pc, #212]	@ (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004404:	4b31      	ldr	r3, [pc, #196]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02f      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	429a      	cmp	r2, r3
 8004420:	d028      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004422:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800442c:	4b29      	ldr	r3, [pc, #164]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004432:	4b28      	ldr	r3, [pc, #160]	@ (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004438:	4a24      	ldr	r2, [pc, #144]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800443e:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d114      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800444a:	f7fc ff7f 	bl	800134c <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fc ff7b 	bl	800134c <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e02a      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004468:	4b18      	ldr	r3, [pc, #96]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ee      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004480:	d10d      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004482:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004496:	490d      	ldr	r1, [pc, #52]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	4313      	orrs	r3, r2
 800449a:	608b      	str	r3, [r1, #8]
 800449c:	e005      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800449e:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044a8:	6093      	str	r3, [r2, #8]
 80044aa:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b6:	4905      	ldr	r1, [pc, #20]	@ (80044cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	42470068 	.word	0x42470068
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
 80044d4:	42470e40 	.word	0x42470e40

080044d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d13f      	bne.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044f6:	4b24      	ldr	r3, [pc, #144]	@ (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044fe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800450c:	d12f      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800450e:	4b1f      	ldr	r3, [pc, #124]	@ (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004510:	617b      	str	r3, [r7, #20]
          break;
 8004512:	e02f      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004514:	4b1c      	ldr	r3, [pc, #112]	@ (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004520:	d108      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004522:	4b19      	ldr	r3, [pc, #100]	@ (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800452a:	4a19      	ldr	r2, [pc, #100]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	e007      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004534:	4b14      	ldr	r3, [pc, #80]	@ (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800453c:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004544:	4b10      	ldr	r3, [pc, #64]	@ (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454a:	099b      	lsrs	r3, r3, #6
 800454c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455e:	0f1b      	lsrs	r3, r3, #28
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	617b      	str	r3, [r7, #20]
          break;
 800456c:	e002      	b.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
          break;
 8004572:	bf00      	nop
        }
      }
      break;
 8004574:	e000      	b.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004576:	bf00      	nop
    }
  }
  return frequency;
 8004578:	697b      	ldr	r3, [r7, #20]
}
 800457a:	4618      	mov	r0, r3
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	00bb8000 	.word	0x00bb8000
 8004590:	007a1200 	.word	0x007a1200
 8004594:	00f42400 	.word	0x00f42400

08004598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e07b      	b.n	80046a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ba:	d009      	beq.n	80045d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
 80045c2:	e005      	b.n	80045d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fc9c 	bl	8000f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004606:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	ea42 0103 	orr.w	r1, r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0104 	and.w	r1, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	f003 0210 	and.w	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046aa:	b084      	sub	sp, #16
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	f107 001c 	add.w	r0, r7, #28
 80046b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d123      	bne.n	800470c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80046d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d105      	bne.n	8004700 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f001 fae9 	bl	8005cd8 <USB_CoreReset>
 8004706:	4603      	mov	r3, r0
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e01b      	b.n	8004744 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f001 fadd 	bl	8005cd8 <USB_CoreReset>
 800471e:	4603      	mov	r3, r0
 8004720:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004722:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38
 8004736:	e005      	b.n	8004744 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004744:	7fbb      	ldrb	r3, [r7, #30]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10b      	bne.n	8004762 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f043 0206 	orr.w	r2, r3, #6
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800476e:	b004      	add	sp, #16
 8004770:	4770      	bx	lr
	...

08004774 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d165      	bne.n	8004854 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a41      	ldr	r2, [pc, #260]	@ (8004890 <USB_SetTurnaroundTime+0x11c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d906      	bls.n	800479e <USB_SetTurnaroundTime+0x2a>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a40      	ldr	r2, [pc, #256]	@ (8004894 <USB_SetTurnaroundTime+0x120>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d202      	bcs.n	800479e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004798:	230f      	movs	r3, #15
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e062      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004894 <USB_SetTurnaroundTime+0x120>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d306      	bcc.n	80047b4 <USB_SetTurnaroundTime+0x40>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004898 <USB_SetTurnaroundTime+0x124>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d202      	bcs.n	80047b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047ae:	230e      	movs	r3, #14
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e057      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a38      	ldr	r2, [pc, #224]	@ (8004898 <USB_SetTurnaroundTime+0x124>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d306      	bcc.n	80047ca <USB_SetTurnaroundTime+0x56>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a37      	ldr	r2, [pc, #220]	@ (800489c <USB_SetTurnaroundTime+0x128>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d202      	bcs.n	80047ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047c4:	230d      	movs	r3, #13
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e04c      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a33      	ldr	r2, [pc, #204]	@ (800489c <USB_SetTurnaroundTime+0x128>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d306      	bcc.n	80047e0 <USB_SetTurnaroundTime+0x6c>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a32      	ldr	r2, [pc, #200]	@ (80048a0 <USB_SetTurnaroundTime+0x12c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d802      	bhi.n	80047e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047da:	230c      	movs	r3, #12
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e041      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a2f      	ldr	r2, [pc, #188]	@ (80048a0 <USB_SetTurnaroundTime+0x12c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d906      	bls.n	80047f6 <USB_SetTurnaroundTime+0x82>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a2e      	ldr	r2, [pc, #184]	@ (80048a4 <USB_SetTurnaroundTime+0x130>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d802      	bhi.n	80047f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047f0:	230b      	movs	r3, #11
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e036      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <USB_SetTurnaroundTime+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d906      	bls.n	800480c <USB_SetTurnaroundTime+0x98>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a29      	ldr	r2, [pc, #164]	@ (80048a8 <USB_SetTurnaroundTime+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d802      	bhi.n	800480c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004806:	230a      	movs	r3, #10
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e02b      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <USB_SetTurnaroundTime+0x134>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d906      	bls.n	8004822 <USB_SetTurnaroundTime+0xae>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <USB_SetTurnaroundTime+0x138>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d202      	bcs.n	8004822 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800481c:	2309      	movs	r3, #9
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e020      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a21      	ldr	r2, [pc, #132]	@ (80048ac <USB_SetTurnaroundTime+0x138>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d306      	bcc.n	8004838 <USB_SetTurnaroundTime+0xc4>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a20      	ldr	r2, [pc, #128]	@ (80048b0 <USB_SetTurnaroundTime+0x13c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d802      	bhi.n	8004838 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004832:	2308      	movs	r3, #8
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e015      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <USB_SetTurnaroundTime+0x13c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d906      	bls.n	800484e <USB_SetTurnaroundTime+0xda>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a1c      	ldr	r2, [pc, #112]	@ (80048b4 <USB_SetTurnaroundTime+0x140>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d202      	bcs.n	800484e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004848:	2307      	movs	r3, #7
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e00a      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800484e:	2306      	movs	r3, #6
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e007      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800485a:	2309      	movs	r3, #9
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e001      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004860:	2309      	movs	r3, #9
 8004862:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800487c:	431a      	orrs	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	00d8acbf 	.word	0x00d8acbf
 8004894:	00e4e1c0 	.word	0x00e4e1c0
 8004898:	00f42400 	.word	0x00f42400
 800489c:	01067380 	.word	0x01067380
 80048a0:	011a499f 	.word	0x011a499f
 80048a4:	01312cff 	.word	0x01312cff
 80048a8:	014ca43f 	.word	0x014ca43f
 80048ac:	016e3600 	.word	0x016e3600
 80048b0:	01a6ab1f 	.word	0x01a6ab1f
 80048b4:	01e84800 	.word	0x01e84800

080048b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d115      	bne.n	800494a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800492a:	200a      	movs	r0, #10
 800492c:	f7fc fd1a 	bl	8001364 <HAL_Delay>
      ms += 10U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	330a      	adds	r3, #10
 8004934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f001 f93f 	bl	8005bba <USB_GetMode>
 800493c:	4603      	mov	r3, r0
 800493e:	2b01      	cmp	r3, #1
 8004940:	d01e      	beq.n	8004980 <USB_SetCurrentMode+0x84>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2bc7      	cmp	r3, #199	@ 0xc7
 8004946:	d9f0      	bls.n	800492a <USB_SetCurrentMode+0x2e>
 8004948:	e01a      	b.n	8004980 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d115      	bne.n	800497c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800495c:	200a      	movs	r0, #10
 800495e:	f7fc fd01 	bl	8001364 <HAL_Delay>
      ms += 10U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	330a      	adds	r3, #10
 8004966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 f926 	bl	8005bba <USB_GetMode>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <USB_SetCurrentMode+0x84>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2bc7      	cmp	r3, #199	@ 0xc7
 8004978:	d9f0      	bls.n	800495c <USB_SetCurrentMode+0x60>
 800497a:	e001      	b.n	8004980 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e005      	b.n	800498c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2bc8      	cmp	r3, #200	@ 0xc8
 8004984:	d101      	bne.n	800498a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004994:	b084      	sub	sp, #16
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e009      	b.n	80049c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3340      	adds	r3, #64	@ 0x40
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	2200      	movs	r2, #0
 80049c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	3301      	adds	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b0e      	cmp	r3, #14
 80049cc:	d9f2      	bls.n	80049b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11c      	bne.n	8004a10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e4:	f043 0302 	orr.w	r3, r3, #2
 80049e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a0e:	e00b      	b.n	8004a28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d10d      	bne.n	8004a58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a44:	2100      	movs	r1, #0
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f968 	bl	8004d1c <USB_SetDevSpeed>
 8004a4c:	e008      	b.n	8004a60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a4e:	2101      	movs	r1, #1
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f963 	bl	8004d1c <USB_SetDevSpeed>
 8004a56:	e003      	b.n	8004a60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a58:	2103      	movs	r1, #3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f95e 	bl	8004d1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a60:	2110      	movs	r1, #16
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8fa 	bl	8004c5c <USB_FlushTxFifo>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f924 	bl	8004cc0 <USB_FlushRxFifo>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a94:	461a      	mov	r2, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e043      	b.n	8004b34 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ac2:	d118      	bne.n	8004af6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e013      	b.n	8004b08 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aec:	461a      	mov	r2, r3
 8004aee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e008      	b.n	8004b08 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b02:	461a      	mov	r2, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b14:	461a      	mov	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	461a      	mov	r2, r3
 8004b28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3301      	adds	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b38:	461a      	mov	r2, r3
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d3b5      	bcc.n	8004aac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	e043      	b.n	8004bce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b5c:	d118      	bne.n	8004b90 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b70:	461a      	mov	r2, r3
 8004b72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e013      	b.n	8004ba2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	461a      	mov	r2, r3
 8004b88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e008      	b.n	8004ba2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d3b5      	bcc.n	8004b46 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004bfa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f043 0210 	orr.w	r2, r3, #16
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <USB_DevInit+0x2c4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f043 0208 	orr.w	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d107      	bne.n	8004c48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c54:	b004      	add	sp, #16
 8004c56:	4770      	bx	lr
 8004c58:	803c3800 	.word	0x803c3800

08004c5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c76:	d901      	bls.n	8004c7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e01b      	b.n	8004cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	daf2      	bge.n	8004c6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ca0:	d901      	bls.n	8004ca6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e006      	b.n	8004cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d0f0      	beq.n	8004c94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cd8:	d901      	bls.n	8004cde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e018      	b.n	8004d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	daf2      	bge.n	8004ccc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2210      	movs	r2, #16
 8004cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cfc:	d901      	bls.n	8004d02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e006      	b.n	8004d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	2b10      	cmp	r3, #16
 8004d0c:	d0f0      	beq.n	8004cf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b087      	sub	sp, #28
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0306 	and.w	r3, r3, #6
 8004d66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]
 8004d72:	e00a      	b.n	8004d8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d002      	beq.n	8004d80 <USB_GetDevSpeed+0x32>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b06      	cmp	r3, #6
 8004d7e:	d102      	bne.n	8004d86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d80:	2302      	movs	r3, #2
 8004d82:	75fb      	strb	r3, [r7, #23]
 8004d84:	e001      	b.n	8004d8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d86:	230f      	movs	r3, #15
 8004d88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d13a      	bne.n	8004e2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d155      	bne.n	8004e98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	791b      	ldrb	r3, [r3, #4]
 8004e06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	059b      	lsls	r3, r3, #22
 8004e0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e10:	4313      	orrs	r3, r2
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	e036      	b.n	8004e98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	041b      	lsls	r3, r3, #16
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d11a      	bne.n	8004e98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	791b      	ldrb	r3, [r3, #4]
 8004e7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d161      	bne.n	8004f88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eda:	d11f      	bne.n	8004f1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004efa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	2101      	movs	r1, #1
 8004f52:	fa01 f303 	lsl.w	r3, r1, r3
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f60:	4013      	ands	r3, r2
 8004f62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	0159      	lsls	r1, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	440b      	add	r3, r1
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <USB_DeactivateEndpoint+0x1b0>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
 8004f86:	e060      	b.n	800504a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f9e:	d11f      	bne.n	8004fe0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	68f9      	ldr	r1, [r7, #12]
 8004ffc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005000:	4013      	ands	r3, r2
 8005002:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	43db      	mvns	r3, r3
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005024:	4013      	ands	r3, r2
 8005026:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	0159      	lsls	r1, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	440b      	add	r3, r1
 800503e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005042:	4619      	mov	r1, r3
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <USB_DeactivateEndpoint+0x1b4>)
 8005046:	4013      	ands	r3, r2
 8005048:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	ec337800 	.word	0xec337800
 800505c:	eff37800 	.word	0xeff37800

08005060 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	@ 0x28
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b01      	cmp	r3, #1
 800507e:	f040 817f 	bne.w	8005380 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d132      	bne.n	80050f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050a4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050a8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80050ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e8:	0cdb      	lsrs	r3, r3, #19
 80050ea:	04db      	lsls	r3, r3, #19
 80050ec:	6113      	str	r3, [r2, #16]
 80050ee:	e097      	b.n	8005220 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800510a:	0cdb      	lsrs	r3, r3, #19
 800510c:	04db      	lsls	r3, r3, #19
 800510e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800512a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800512e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005132:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11a      	bne.n	8005170 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	d903      	bls.n	800514e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005168:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800516c:	6113      	str	r3, [r2, #16]
 800516e:	e044      	b.n	80051fa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4413      	add	r3, r2
 800517a:	1e5a      	subs	r2, r3, #1
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	8afb      	ldrh	r3, [r7, #22]
 8005196:	04d9      	lsls	r1, r3, #19
 8005198:	4ba4      	ldr	r3, [pc, #656]	@ (800542c <USB_EPStartXfer+0x3cc>)
 800519a:	400b      	ands	r3, r1
 800519c:	69b9      	ldr	r1, [r7, #24]
 800519e:	0148      	lsls	r0, r1, #5
 80051a0:	69f9      	ldr	r1, [r7, #28]
 80051a2:	4401      	add	r1, r0
 80051a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d122      	bne.n	80051fa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80051d2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	8afb      	ldrh	r3, [r7, #22]
 80051e4:	075b      	lsls	r3, r3, #29
 80051e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80051ea:	69b9      	ldr	r1, [r7, #24]
 80051ec:	0148      	lsls	r0, r1, #5
 80051ee:	69f9      	ldr	r1, [r7, #28]
 80051f0:	4401      	add	r1, r0
 80051f2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80051f6:	4313      	orrs	r3, r2
 80051f8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005210:	69b9      	ldr	r1, [r7, #24]
 8005212:	0148      	lsls	r0, r1, #5
 8005214:	69f9      	ldr	r1, [r7, #28]
 8005216:	4401      	add	r1, r0
 8005218:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800521c:	4313      	orrs	r3, r2
 800521e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d14b      	bne.n	80052be <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523a:	461a      	mov	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d128      	bne.n	800529c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d110      	bne.n	800527c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005274:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e00f      	b.n	800529c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e166      	b.n	800558c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80052dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	791b      	ldrb	r3, [r3, #4]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d015      	beq.n	8005312 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 814e 	beq.w	800558c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2101      	movs	r1, #1
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	69f9      	ldr	r1, [r7, #28]
 8005308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800530c:	4313      	orrs	r3, r2
 800530e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005310:	e13c      	b.n	800558c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d110      	bne.n	8005344 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800533c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e00f      	b.n	8005364 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005362:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	68d9      	ldr	r1, [r3, #12]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	b298      	uxth	r0, r3
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	4603      	mov	r3, r0
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f9b9 	bl	80056f0 <USB_WritePacket>
 800537e:	e105      	b.n	800558c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800539a:	0cdb      	lsrs	r3, r3, #19
 800539c:	04db      	lsls	r3, r3, #19
 800539e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053c2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d132      	bne.n	8005430 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f8:	69b9      	ldr	r1, [r7, #24]
 80053fa:	0148      	lsls	r0, r1, #5
 80053fc:	69f9      	ldr	r1, [r7, #28]
 80053fe:	4401      	add	r1, r0
 8005400:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005404:	4313      	orrs	r3, r2
 8005406:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005422:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005426:	6113      	str	r3, [r2, #16]
 8005428:	e062      	b.n	80054f0 <USB_EPStartXfer+0x490>
 800542a:	bf00      	nop
 800542c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d123      	bne.n	8005480 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	0148      	lsls	r0, r1, #5
 8005452:	69f9      	ldr	r1, [r7, #28]
 8005454:	4401      	add	r1, r0
 8005456:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800545a:	4313      	orrs	r3, r2
 800545c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005478:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800547c:	6113      	str	r3, [r2, #16]
 800547e:	e037      	b.n	80054f0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4413      	add	r3, r2
 800548a:	1e5a      	subs	r2, r3, #1
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	8afa      	ldrh	r2, [r7, #22]
 800549c:	fb03 f202 	mul.w	r2, r3, r2
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	8afb      	ldrh	r3, [r7, #22]
 80054b4:	04d9      	lsls	r1, r3, #19
 80054b6:	4b38      	ldr	r3, [pc, #224]	@ (8005598 <USB_EPStartXfer+0x538>)
 80054b8:	400b      	ands	r3, r1
 80054ba:	69b9      	ldr	r1, [r7, #24]
 80054bc:	0148      	lsls	r0, r1, #5
 80054be:	69f9      	ldr	r1, [r7, #28]
 80054c0:	4401      	add	r1, r0
 80054c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054c6:	4313      	orrs	r3, r2
 80054c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	0148      	lsls	r0, r1, #5
 80054e4:	69f9      	ldr	r1, [r7, #28]
 80054e6:	4401      	add	r1, r0
 80054e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054ec:	4313      	orrs	r3, r2
 80054ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d10d      	bne.n	8005512 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	68d9      	ldr	r1, [r3, #12]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550e:	460a      	mov	r2, r1
 8005510:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	791b      	ldrb	r3, [r3, #4]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d128      	bne.n	800556c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d110      	bne.n	800554c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005544:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e00f      	b.n	800556c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800556a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005586:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800558a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	1ff80000 	.word	0x1ff80000

0800559c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d14a      	bne.n	8005650 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055d2:	f040 8086 	bne.w	80056e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005618:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800561c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f242 7210 	movw	r2, #10000	@ 0x2710
 800562a:	4293      	cmp	r3, r2
 800562c:	d902      	bls.n	8005634 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
          break;
 8005632:	e056      	b.n	80056e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564c:	d0e7      	beq.n	800561e <USB_EPStopXfer+0x82>
 800564e:	e048      	b.n	80056e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005668:	d13b      	bne.n	80056e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005688:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800568c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	7812      	ldrb	r2, [r2, #0]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056be:	4293      	cmp	r3, r2
 80056c0:	d902      	bls.n	80056c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
          break;
 80056c6:	e00c      	b.n	80056e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056e0:	d0e7      	beq.n	80056b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b089      	sub	sp, #36	@ 0x24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4611      	mov	r1, r2
 80056fc:	461a      	mov	r2, r3
 80056fe:	460b      	mov	r3, r1
 8005700:	71fb      	strb	r3, [r7, #7]
 8005702:	4613      	mov	r3, r2
 8005704:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800570e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d123      	bne.n	800575e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005716:	88bb      	ldrh	r3, [r7, #4]
 8005718:	3303      	adds	r3, #3
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800571e:	2300      	movs	r3, #0
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	e018      	b.n	8005756 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	031a      	lsls	r2, r3, #12
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005730:	461a      	mov	r2, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	3301      	adds	r3, #1
 800573c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3301      	adds	r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	3301      	adds	r3, #1
 8005748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	3301      	adds	r3, #1
 8005754:	61bb      	str	r3, [r7, #24]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	d3e2      	bcc.n	8005724 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3724      	adds	r7, #36	@ 0x24
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800576c:	b480      	push	{r7}
 800576e:	b08b      	sub	sp, #44	@ 0x2c
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	b29b      	uxth	r3, r3
 8005788:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	e014      	b.n	80057c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	3301      	adds	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	3301      	adds	r3, #1
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	3301      	adds	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	3301      	adds	r3, #1
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	3301      	adds	r3, #1
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3e6      	bcc.n	8005798 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057ca:	8bfb      	ldrh	r3, [r7, #30]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01e      	beq.n	800580e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057da:	461a      	mov	r2, r3
 80057dc:	f107 0310 	add.w	r3, r7, #16
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	701a      	strb	r2, [r3, #0]
      i++;
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	3301      	adds	r3, #1
 80057fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	3301      	adds	r3, #1
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005802:	8bfb      	ldrh	r3, [r7, #30]
 8005804:	3b01      	subs	r3, #1
 8005806:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005808:	8bfb      	ldrh	r3, [r7, #30]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ea      	bne.n	80057e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005810:	4618      	mov	r0, r3
 8005812:	372c      	adds	r7, #44	@ 0x2c
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d12c      	bne.n	8005892 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	db12      	blt.n	8005870 <USB_EPSetStall+0x54>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00f      	beq.n	8005870 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800586a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800586e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800588a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e02b      	b.n	80058ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db12      	blt.n	80058ca <USB_EPSetStall+0xae>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00f      	beq.n	80058ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d128      	bne.n	8005966 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800592e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005932:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	791b      	ldrb	r3, [r3, #4]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d003      	beq.n	8005944 <USB_EPClearStall+0x4c>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	791b      	ldrb	r3, [r3, #4]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d138      	bne.n	80059b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800595e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e027      	b.n	80059b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005980:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005984:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	791b      	ldrb	r3, [r3, #4]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d003      	beq.n	8005996 <USB_EPClearStall+0x9e>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	791b      	ldrb	r3, [r3, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d10f      	bne.n	80059b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80059e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80059f8:	68f9      	ldr	r1, [r7, #12]
 80059fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059fe:	4313      	orrs	r3, r2
 8005a00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a3e:	f023 0302 	bic.w	r3, r3, #2
 8005a42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a6c:	f023 0303 	bic.w	r3, r3, #3
 8005a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005aac:	68fb      	ldr	r3, [r7, #12]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	0c1b      	lsrs	r3, r3, #16
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	b29b      	uxth	r3, r3
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b50:	68bb      	ldr	r3, [r7, #8]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b087      	sub	sp, #28
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	460b      	mov	r3, r1
 8005b68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8e:	01db      	lsls	r3, r3, #7
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bac:	68bb      	ldr	r3, [r7, #8]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005bf4:	f023 0307 	bic.w	r3, r3, #7
 8005bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	460b      	mov	r3, r1
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	333c      	adds	r3, #60	@ 0x3c
 8005c32:	3304      	adds	r3, #4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4a26      	ldr	r2, [pc, #152]	@ (8005cd4 <USB_EP0_OutStart+0xb8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d90a      	bls.n	8005c56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c50:	d101      	bne.n	8005c56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e037      	b.n	8005cc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c84:	f043 0318 	orr.w	r3, r3, #24
 8005c88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005c9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d10f      	bne.n	8005cc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cbe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005cc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	4f54300a 	.word	0x4f54300a

08005cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cf0:	d901      	bls.n	8005cf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e022      	b.n	8005d3c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	daf2      	bge.n	8005ce4 <USB_CoreReset+0xc>

  count = 10U;
 8005cfe:	230a      	movs	r3, #10
 8005d00:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005d02:	e002      	b.n	8005d0a <USB_CoreReset+0x32>
  {
    count--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f9      	bne.n	8005d04 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f043 0201 	orr.w	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d28:	d901      	bls.n	8005d2e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e006      	b.n	8005d3c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d0f0      	beq.n	8005d1c <USB_CoreReset+0x44>

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d54:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005d58:	f002 fcca 	bl	80086f0 <USBD_static_malloc>
 8005d5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	32b0      	adds	r2, #176	@ 0xb0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d74:	2302      	movs	r3, #2
 8005d76:	e0d4      	b.n	8005f22 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f002 fe11 	bl	80089a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	32b0      	adds	r2, #176	@ 0xb0
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	32b0      	adds	r2, #176	@ 0xb0
 8005d9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7c1b      	ldrb	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d138      	bne.n	8005e22 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005db0:	4b5e      	ldr	r3, [pc, #376]	@ (8005f2c <USBD_CDC_Init+0x1e4>)
 8005db2:	7819      	ldrb	r1, [r3, #0]
 8005db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005db8:	2202      	movs	r2, #2
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f002 fb75 	bl	80084aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005dc0:	4b5a      	ldr	r3, [pc, #360]	@ (8005f2c <USBD_CDC_Init+0x1e4>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	f003 020f 	and.w	r2, r3, #15
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	3323      	adds	r3, #35	@ 0x23
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005dda:	4b55      	ldr	r3, [pc, #340]	@ (8005f30 <USBD_CDC_Init+0x1e8>)
 8005ddc:	7819      	ldrb	r1, [r3, #0]
 8005dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005de2:	2202      	movs	r2, #2
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f002 fb60 	bl	80084aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dea:	4b51      	ldr	r3, [pc, #324]	@ (8005f30 <USBD_CDC_Init+0x1e8>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f003 020f 	and.w	r2, r3, #15
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005e02:	2201      	movs	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e06:	4b4b      	ldr	r3, [pc, #300]	@ (8005f34 <USBD_CDC_Init+0x1ec>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	f003 020f 	and.w	r2, r3, #15
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	331c      	adds	r3, #28
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e035      	b.n	8005e8e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e22:	4b42      	ldr	r3, [pc, #264]	@ (8005f2c <USBD_CDC_Init+0x1e4>)
 8005e24:	7819      	ldrb	r1, [r3, #0]
 8005e26:	2340      	movs	r3, #64	@ 0x40
 8005e28:	2202      	movs	r2, #2
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f002 fb3d 	bl	80084aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e30:	4b3e      	ldr	r3, [pc, #248]	@ (8005f2c <USBD_CDC_Init+0x1e4>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	f003 020f 	and.w	r2, r3, #15
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3323      	adds	r3, #35	@ 0x23
 8005e46:	2201      	movs	r2, #1
 8005e48:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e4a:	4b39      	ldr	r3, [pc, #228]	@ (8005f30 <USBD_CDC_Init+0x1e8>)
 8005e4c:	7819      	ldrb	r1, [r3, #0]
 8005e4e:	2340      	movs	r3, #64	@ 0x40
 8005e50:	2202      	movs	r2, #2
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f002 fb29 	bl	80084aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e58:	4b35      	ldr	r3, [pc, #212]	@ (8005f30 <USBD_CDC_Init+0x1e8>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f003 020f 	and.w	r2, r3, #15
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e74:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <USBD_CDC_Init+0x1ec>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	331c      	adds	r3, #28
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e8e:	4b29      	ldr	r3, [pc, #164]	@ (8005f34 <USBD_CDC_Init+0x1ec>)
 8005e90:	7819      	ldrb	r1, [r3, #0]
 8005e92:	2308      	movs	r3, #8
 8005e94:	2203      	movs	r2, #3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f002 fb07 	bl	80084aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e9c:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <USBD_CDC_Init+0x1ec>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3323      	adds	r3, #35	@ 0x23
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	33b0      	adds	r3, #176	@ 0xb0
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005eec:	2302      	movs	r3, #2
 8005eee:	e018      	b.n	8005f22 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7c1b      	ldrb	r3, [r3, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f30 <USBD_CDC_Init+0x1e8>)
 8005efa:	7819      	ldrb	r1, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f002 fbbe 	bl	8008688 <USBD_LL_PrepareReceive>
 8005f0c:	e008      	b.n	8005f20 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f0e:	4b08      	ldr	r3, [pc, #32]	@ (8005f30 <USBD_CDC_Init+0x1e8>)
 8005f10:	7819      	ldrb	r1, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f18:	2340      	movs	r3, #64	@ 0x40
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f002 fbb4 	bl	8008688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000093 	.word	0x20000093
 8005f30:	20000094 	.word	0x20000094
 8005f34:	20000095 	.word	0x20000095

08005f38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f44:	4b3a      	ldr	r3, [pc, #232]	@ (8006030 <USBD_CDC_DeInit+0xf8>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f002 fad3 	bl	80084f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f50:	4b37      	ldr	r3, [pc, #220]	@ (8006030 <USBD_CDC_DeInit+0xf8>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	3323      	adds	r3, #35	@ 0x23
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f6a:	4b32      	ldr	r3, [pc, #200]	@ (8006034 <USBD_CDC_DeInit+0xfc>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f002 fac0 	bl	80084f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f76:	4b2f      	ldr	r3, [pc, #188]	@ (8006034 <USBD_CDC_DeInit+0xfc>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f003 020f 	and.w	r2, r3, #15
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f92:	4b29      	ldr	r3, [pc, #164]	@ (8006038 <USBD_CDC_DeInit+0x100>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f002 faac 	bl	80084f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f9e:	4b26      	ldr	r3, [pc, #152]	@ (8006038 <USBD_CDC_DeInit+0x100>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f003 020f 	and.w	r2, r3, #15
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3323      	adds	r3, #35	@ 0x23
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8006038 <USBD_CDC_DeInit+0x100>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	331c      	adds	r3, #28
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	32b0      	adds	r2, #176	@ 0xb0
 8005fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01f      	beq.n	8006024 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	33b0      	adds	r3, #176	@ 0xb0
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	32b0      	adds	r2, #176	@ 0xb0
 8006002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006006:	4618      	mov	r0, r3
 8006008:	f002 fb80 	bl	800870c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	32b0      	adds	r2, #176	@ 0xb0
 8006016:	2100      	movs	r1, #0
 8006018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000093 	.word	0x20000093
 8006034:	20000094 	.word	0x20000094
 8006038:	20000095 	.word	0x20000095

0800603c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	32b0      	adds	r2, #176	@ 0xb0
 8006050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006054:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006068:	2303      	movs	r3, #3
 800606a:	e0bf      	b.n	80061ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006074:	2b00      	cmp	r3, #0
 8006076:	d050      	beq.n	800611a <USBD_CDC_Setup+0xde>
 8006078:	2b20      	cmp	r3, #32
 800607a:	f040 80af 	bne.w	80061dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	88db      	ldrh	r3, [r3, #6]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d03a      	beq.n	80060fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b25b      	sxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	da1b      	bge.n	80060c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	33b0      	adds	r3, #176	@ 0xb0
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	88d2      	ldrh	r2, [r2, #6]
 80060ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	88db      	ldrh	r3, [r3, #6]
 80060b2:	2b07      	cmp	r3, #7
 80060b4:	bf28      	it	cs
 80060b6:	2307      	movcs	r3, #7
 80060b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	89fa      	ldrh	r2, [r7, #14]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fda9 	bl	8007c18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80060c6:	e090      	b.n	80061ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	785a      	ldrb	r2, [r3, #1]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88db      	ldrh	r3, [r3, #6]
 80060d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80060d8:	d803      	bhi.n	80060e2 <USBD_CDC_Setup+0xa6>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	88db      	ldrh	r3, [r3, #6]
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	e000      	b.n	80060e4 <USBD_CDC_Setup+0xa8>
 80060e2:	2240      	movs	r2, #64	@ 0x40
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80060ea:	6939      	ldr	r1, [r7, #16]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80060f2:	461a      	mov	r2, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fdbe 	bl	8007c76 <USBD_CtlPrepareRx>
      break;
 80060fa:	e076      	b.n	80061ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	33b0      	adds	r3, #176	@ 0xb0
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	7850      	ldrb	r0, [r2, #1]
 8006112:	2200      	movs	r2, #0
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	4798      	blx	r3
      break;
 8006118:	e067      	b.n	80061ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b0b      	cmp	r3, #11
 8006120:	d851      	bhi.n	80061c6 <USBD_CDC_Setup+0x18a>
 8006122:	a201      	add	r2, pc, #4	@ (adr r2, 8006128 <USBD_CDC_Setup+0xec>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	08006159 	.word	0x08006159
 800612c:	080061d5 	.word	0x080061d5
 8006130:	080061c7 	.word	0x080061c7
 8006134:	080061c7 	.word	0x080061c7
 8006138:	080061c7 	.word	0x080061c7
 800613c:	080061c7 	.word	0x080061c7
 8006140:	080061c7 	.word	0x080061c7
 8006144:	080061c7 	.word	0x080061c7
 8006148:	080061c7 	.word	0x080061c7
 800614c:	080061c7 	.word	0x080061c7
 8006150:	08006183 	.word	0x08006183
 8006154:	080061ad 	.word	0x080061ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b03      	cmp	r3, #3
 8006162:	d107      	bne.n	8006174 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006164:	f107 030a 	add.w	r3, r7, #10
 8006168:	2202      	movs	r2, #2
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fd53 	bl	8007c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006172:	e032      	b.n	80061da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 fcd1 	bl	8007b1e <USBD_CtlError>
            ret = USBD_FAIL;
 800617c:	2303      	movs	r3, #3
 800617e:	75fb      	strb	r3, [r7, #23]
          break;
 8006180:	e02b      	b.n	80061da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b03      	cmp	r3, #3
 800618c:	d107      	bne.n	800619e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800618e:	f107 030d 	add.w	r3, r7, #13
 8006192:	2201      	movs	r2, #1
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 fd3e 	bl	8007c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800619c:	e01d      	b.n	80061da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 fcbc 	bl	8007b1e <USBD_CtlError>
            ret = USBD_FAIL;
 80061a6:	2303      	movs	r3, #3
 80061a8:	75fb      	strb	r3, [r7, #23]
          break;
 80061aa:	e016      	b.n	80061da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d00f      	beq.n	80061d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fcaf 	bl	8007b1e <USBD_CtlError>
            ret = USBD_FAIL;
 80061c0:	2303      	movs	r3, #3
 80061c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061c4:	e008      	b.n	80061d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fca8 	bl	8007b1e <USBD_CtlError>
          ret = USBD_FAIL;
 80061ce:	2303      	movs	r3, #3
 80061d0:	75fb      	strb	r3, [r7, #23]
          break;
 80061d2:	e002      	b.n	80061da <USBD_CDC_Setup+0x19e>
          break;
 80061d4:	bf00      	nop
 80061d6:	e008      	b.n	80061ea <USBD_CDC_Setup+0x1ae>
          break;
 80061d8:	bf00      	nop
      }
      break;
 80061da:	e006      	b.n	80061ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 fc9d 	bl	8007b1e <USBD_CtlError>
      ret = USBD_FAIL;
 80061e4:	2303      	movs	r3, #3
 80061e6:	75fb      	strb	r3, [r7, #23]
      break;
 80061e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006206:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32b0      	adds	r2, #176	@ 0xb0
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	e065      	b.n	80062ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	32b0      	adds	r2, #176	@ 0xb0
 8006228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	3314      	adds	r3, #20
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02f      	beq.n	80062a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	3314      	adds	r3, #20
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	f003 010f 	and.w	r1, r3, #15
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	460b      	mov	r3, r1
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	440b      	add	r3, r1
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4403      	add	r3, r0
 8006270:	331c      	adds	r3, #28
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	fbb2 f1f3 	udiv	r1, r2, r3
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800627e:	2b00      	cmp	r3, #0
 8006280:	d112      	bne.n	80062a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	3314      	adds	r3, #20
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800629a:	78f9      	ldrb	r1, [r7, #3]
 800629c:	2300      	movs	r3, #0
 800629e:	2200      	movs	r2, #0
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f002 f9d0 	bl	8008646 <USBD_LL_Transmit>
 80062a6:	e01f      	b.n	80062e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	33b0      	adds	r3, #176	@ 0xb0
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d010      	beq.n	80062e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	33b0      	adds	r3, #176	@ 0xb0
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32b0      	adds	r2, #176	@ 0xb0
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	32b0      	adds	r2, #176	@ 0xb0
 8006318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	e01a      	b.n	800635a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f002 f9ce 	bl	80086ca <USBD_LL_GetRxDataSize>
 800632e:	4602      	mov	r2, r0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	33b0      	adds	r3, #176	@ 0xb0
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006354:	4611      	mov	r1, r2
 8006356:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	32b0      	adds	r2, #176	@ 0xb0
 8006374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006378:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006380:	2303      	movs	r3, #3
 8006382:	e024      	b.n	80063ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	33b0      	adds	r3, #176	@ 0xb0
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d019      	beq.n	80063cc <USBD_CDC_EP0_RxReady+0x6a>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800639e:	2bff      	cmp	r3, #255	@ 0xff
 80063a0:	d014      	beq.n	80063cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	33b0      	adds	r3, #176	@ 0xb0
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80063ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	22ff      	movs	r2, #255	@ 0xff
 80063c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063e0:	2182      	movs	r1, #130	@ 0x82
 80063e2:	4818      	ldr	r0, [pc, #96]	@ (8006444 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063e4:	f000 fd62 	bl	8006eac <USBD_GetEpDesc>
 80063e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063ea:	2101      	movs	r1, #1
 80063ec:	4815      	ldr	r0, [pc, #84]	@ (8006444 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063ee:	f000 fd5d 	bl	8006eac <USBD_GetEpDesc>
 80063f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063f4:	2181      	movs	r1, #129	@ 0x81
 80063f6:	4813      	ldr	r0, [pc, #76]	@ (8006444 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063f8:	f000 fd58 	bl	8006eac <USBD_GetEpDesc>
 80063fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2210      	movs	r2, #16
 8006408:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2200      	movs	r2, #0
 8006414:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006418:	711a      	strb	r2, [r3, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d006      	beq.n	8006432 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800642c:	711a      	strb	r2, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2243      	movs	r2, #67	@ 0x43
 8006436:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006438:	4b02      	ldr	r3, [pc, #8]	@ (8006444 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000050 	.word	0x20000050

08006448 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006450:	2182      	movs	r1, #130	@ 0x82
 8006452:	4818      	ldr	r0, [pc, #96]	@ (80064b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006454:	f000 fd2a 	bl	8006eac <USBD_GetEpDesc>
 8006458:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800645a:	2101      	movs	r1, #1
 800645c:	4815      	ldr	r0, [pc, #84]	@ (80064b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800645e:	f000 fd25 	bl	8006eac <USBD_GetEpDesc>
 8006462:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006464:	2181      	movs	r1, #129	@ 0x81
 8006466:	4813      	ldr	r0, [pc, #76]	@ (80064b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006468:	f000 fd20 	bl	8006eac <USBD_GetEpDesc>
 800646c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2210      	movs	r2, #16
 8006478:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d006      	beq.n	800648e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2200      	movs	r2, #0
 8006484:	711a      	strb	r2, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f042 0202 	orr.w	r2, r2, #2
 800648c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d006      	beq.n	80064a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	711a      	strb	r2, [r3, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f042 0202 	orr.w	r2, r2, #2
 80064a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2243      	movs	r2, #67	@ 0x43
 80064a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064a8:	4b02      	ldr	r3, [pc, #8]	@ (80064b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000050 	.word	0x20000050

080064b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064c0:	2182      	movs	r1, #130	@ 0x82
 80064c2:	4818      	ldr	r0, [pc, #96]	@ (8006524 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064c4:	f000 fcf2 	bl	8006eac <USBD_GetEpDesc>
 80064c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064ca:	2101      	movs	r1, #1
 80064cc:	4815      	ldr	r0, [pc, #84]	@ (8006524 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064ce:	f000 fced 	bl	8006eac <USBD_GetEpDesc>
 80064d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064d4:	2181      	movs	r1, #129	@ 0x81
 80064d6:	4813      	ldr	r0, [pc, #76]	@ (8006524 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064d8:	f000 fce8 	bl	8006eac <USBD_GetEpDesc>
 80064dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2210      	movs	r2, #16
 80064e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d006      	beq.n	80064fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064f8:	711a      	strb	r2, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800650c:	711a      	strb	r2, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2243      	movs	r2, #67	@ 0x43
 8006516:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006518:	4b02      	ldr	r3, [pc, #8]	@ (8006524 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000050 	.word	0x20000050

08006528 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	220a      	movs	r2, #10
 8006534:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006536:	4b03      	ldr	r3, [pc, #12]	@ (8006544 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	2000000c 	.word	0x2000000c

08006548 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	e009      	b.n	8006570 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	33b0      	adds	r3, #176	@ 0xb0
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	32b0      	adds	r2, #176	@ 0xb0
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800659e:	2303      	movs	r3, #3
 80065a0:	e008      	b.n	80065b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	32b0      	adds	r2, #176	@ 0xb0
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e004      	b.n	80065ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32b0      	adds	r2, #176	@ 0xb0
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800661e:	2303      	movs	r3, #3
 8006620:	e025      	b.n	800666e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006628:	2b00      	cmp	r3, #0
 800662a:	d11f      	bne.n	800666c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2201      	movs	r2, #1
 8006630:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006634:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <USBD_CDC_TransmitPacket+0x7c>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f003 020f 	and.w	r2, r3, #15
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4403      	add	r3, r0
 800664e:	3314      	adds	r3, #20
 8006650:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006652:	4b09      	ldr	r3, [pc, #36]	@ (8006678 <USBD_CDC_TransmitPacket+0x7c>)
 8006654:	7819      	ldrb	r1, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 ffef 	bl	8008646 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000093 	.word	0x20000093

0800667c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	32b0      	adds	r2, #176	@ 0xb0
 800668e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006692:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	32b0      	adds	r2, #176	@ 0xb0
 800669e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e018      	b.n	80066dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7c1b      	ldrb	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066b2:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <USBD_CDC_ReceivePacket+0x68>)
 80066b4:	7819      	ldrb	r1, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 ffe1 	bl	8008688 <USBD_LL_PrepareReceive>
 80066c6:	e008      	b.n	80066da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066c8:	4b06      	ldr	r3, [pc, #24]	@ (80066e4 <USBD_CDC_ReceivePacket+0x68>)
 80066ca:	7819      	ldrb	r1, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066d2:	2340      	movs	r3, #64	@ 0x40
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 ffd7 	bl	8008688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000094 	.word	0x20000094

080066e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e01f      	b.n	8006740 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	79fa      	ldrb	r2, [r7, #7]
 8006732:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f001 fe51 	bl	80083dc <USBD_LL_Init>
 800673a:	4603      	mov	r3, r0
 800673c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800673e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	e025      	b.n	80067ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	32ae      	adds	r2, #174	@ 0xae
 8006772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00f      	beq.n	800679c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	32ae      	adds	r2, #174	@ 0xae
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	f107 020e 	add.w	r2, r7, #14
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	4602      	mov	r2, r0
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fe59 	bl	8008474 <USBD_LL_Start>
 80067c2:	4603      	mov	r3, r0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	4611      	mov	r1, r2
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	4611      	mov	r1, r2
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006840:	2303      	movs	r3, #3
 8006842:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f922 	bl	8007aaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2b02      	cmp	r3, #2
 8006888:	d01a      	beq.n	80068c0 <USBD_LL_SetupStage+0x72>
 800688a:	2b02      	cmp	r3, #2
 800688c:	d822      	bhi.n	80068d4 <USBD_LL_SetupStage+0x86>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <USBD_LL_SetupStage+0x4a>
 8006892:	2b01      	cmp	r3, #1
 8006894:	d00a      	beq.n	80068ac <USBD_LL_SetupStage+0x5e>
 8006896:	e01d      	b.n	80068d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fb77 	bl	8006f94 <USBD_StdDevReq>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]
      break;
 80068aa:	e020      	b.n	80068ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fbdf 	bl	8007078 <USBD_StdItfReq>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
      break;
 80068be:	e016      	b.n	80068ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fc41 	bl	8007150 <USBD_StdEPReq>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
      break;
 80068d2:	e00c      	b.n	80068ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fe26 	bl	8008534 <USBD_LL_StallEP>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]
      break;
 80068ec:	bf00      	nop
  }

  return ret;
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	460b      	mov	r3, r1
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d177      	bne.n	8006a00 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006916:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800691e:	2b03      	cmp	r3, #3
 8006920:	f040 80a1 	bne.w	8006a66 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	8992      	ldrh	r2, [r2, #12]
 800692c:	4293      	cmp	r3, r2
 800692e:	d91c      	bls.n	800696a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	8992      	ldrh	r2, [r2, #12]
 8006938:	1a9a      	subs	r2, r3, r2
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	8992      	ldrh	r2, [r2, #12]
 8006946:	441a      	add	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6919      	ldr	r1, [r3, #16]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	899b      	ldrh	r3, [r3, #12]
 8006954:	461a      	mov	r2, r3
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	4293      	cmp	r3, r2
 800695c:	bf38      	it	cc
 800695e:	4613      	movcc	r3, r2
 8006960:	461a      	mov	r2, r3
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f001 f9a8 	bl	8007cb8 <USBD_CtlContinueRx>
 8006968:	e07d      	b.n	8006a66 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006970:	f003 031f 	and.w	r3, r3, #31
 8006974:	2b02      	cmp	r3, #2
 8006976:	d014      	beq.n	80069a2 <USBD_LL_DataOutStage+0xaa>
 8006978:	2b02      	cmp	r3, #2
 800697a:	d81d      	bhi.n	80069b8 <USBD_LL_DataOutStage+0xc0>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <USBD_LL_DataOutStage+0x8e>
 8006980:	2b01      	cmp	r3, #1
 8006982:	d003      	beq.n	800698c <USBD_LL_DataOutStage+0x94>
 8006984:	e018      	b.n	80069b8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	75bb      	strb	r3, [r7, #22]
            break;
 800698a:	e018      	b.n	80069be <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006992:	b2db      	uxtb	r3, r3
 8006994:	4619      	mov	r1, r3
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fa6e 	bl	8006e78 <USBD_CoreFindIF>
 800699c:	4603      	mov	r3, r0
 800699e:	75bb      	strb	r3, [r7, #22]
            break;
 80069a0:	e00d      	b.n	80069be <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fa70 	bl	8006e92 <USBD_CoreFindEP>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75bb      	strb	r3, [r7, #22]
            break;
 80069b6:	e002      	b.n	80069be <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	75bb      	strb	r3, [r7, #22]
            break;
 80069bc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069be:	7dbb      	ldrb	r3, [r7, #22]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d119      	bne.n	80069f8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d113      	bne.n	80069f8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80069d0:	7dba      	ldrb	r2, [r7, #22]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	32ae      	adds	r2, #174	@ 0xae
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80069e0:	7dba      	ldrb	r2, [r7, #22]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80069e8:	7dba      	ldrb	r2, [r7, #22]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	32ae      	adds	r2, #174	@ 0xae
 80069ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f001 f96e 	bl	8007cda <USBD_CtlSendStatus>
 80069fe:	e032      	b.n	8006a66 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fa41 	bl	8006e92 <USBD_CoreFindEP>
 8006a10:	4603      	mov	r3, r0
 8006a12:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a14:	7dbb      	ldrb	r3, [r7, #22]
 8006a16:	2bff      	cmp	r3, #255	@ 0xff
 8006a18:	d025      	beq.n	8006a66 <USBD_LL_DataOutStage+0x16e>
 8006a1a:	7dbb      	ldrb	r3, [r7, #22]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d122      	bne.n	8006a66 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d117      	bne.n	8006a5c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a2c:	7dba      	ldrb	r2, [r7, #22]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	32ae      	adds	r2, #174	@ 0xae
 8006a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00f      	beq.n	8006a5c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006a3c:	7dba      	ldrb	r2, [r7, #22]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a44:	7dba      	ldrb	r2, [r7, #22]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	32ae      	adds	r2, #174	@ 0xae
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	7afa      	ldrb	r2, [r7, #11]
 8006a52:	4611      	mov	r1, r2
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	4798      	blx	r3
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	e000      	b.n	8006a68 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006a7e:	7afb      	ldrb	r3, [r7, #11]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d178      	bne.n	8006b76 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3314      	adds	r3, #20
 8006a88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d163      	bne.n	8006b5c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	8992      	ldrh	r2, [r2, #12]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d91c      	bls.n	8006ada <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	8992      	ldrh	r2, [r2, #12]
 8006aa8:	1a9a      	subs	r2, r3, r2
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	8992      	ldrh	r2, [r2, #12]
 8006ab6:	441a      	add	r2, r3
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	6919      	ldr	r1, [r3, #16]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f001 f8c4 	bl	8007c54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006acc:	2300      	movs	r3, #0
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 fdd8 	bl	8008688 <USBD_LL_PrepareReceive>
 8006ad8:	e040      	b.n	8006b5c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	899b      	ldrh	r3, [r3, #12]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d11c      	bne.n	8006b22 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d316      	bcc.n	8006b22 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d20f      	bcs.n	8006b22 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b02:	2200      	movs	r2, #0
 8006b04:	2100      	movs	r1, #0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f001 f8a4 	bl	8007c54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b14:	2300      	movs	r3, #0
 8006b16:	2200      	movs	r2, #0
 8006b18:	2100      	movs	r1, #0
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f001 fdb4 	bl	8008688 <USBD_LL_PrepareReceive>
 8006b20:	e01c      	b.n	8006b5c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d10f      	bne.n	8006b4e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b4e:	2180      	movs	r1, #128	@ 0x80
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f001 fcef 	bl	8008534 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f001 f8d2 	bl	8007d00 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d03a      	beq.n	8006bdc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fe30 	bl	80067cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b74:	e032      	b.n	8006bdc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b76:	7afb      	ldrb	r3, [r7, #11]
 8006b78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	4619      	mov	r1, r3
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f986 	bl	8006e92 <USBD_CoreFindEP>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	2bff      	cmp	r3, #255	@ 0xff
 8006b8e:	d025      	beq.n	8006bdc <USBD_LL_DataInStage+0x16c>
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d122      	bne.n	8006bdc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d11c      	bne.n	8006bdc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ba2:	7dfa      	ldrb	r2, [r7, #23]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	32ae      	adds	r2, #174	@ 0xae
 8006ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d014      	beq.n	8006bdc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006bb2:	7dfa      	ldrb	r2, [r7, #23]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bba:	7dfa      	ldrb	r2, [r7, #23]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	32ae      	adds	r2, #174	@ 0xae
 8006bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	7afa      	ldrb	r2, [r7, #11]
 8006bc8:	4611      	mov	r1, r2
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	4798      	blx	r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bd2:	7dbb      	ldrb	r3, [r7, #22]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006bd8:	7dbb      	ldrb	r3, [r7, #22]
 8006bda:	e000      	b.n	8006bde <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d014      	beq.n	8006c4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00e      	beq.n	8006c4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6852      	ldr	r2, [r2, #4]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c4c:	2340      	movs	r3, #64	@ 0x40
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 fc29 	bl	80084aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2240      	movs	r2, #64	@ 0x40
 8006c64:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c68:	2340      	movs	r3, #64	@ 0x40
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2180      	movs	r1, #128	@ 0x80
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fc1b 	bl	80084aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2240      	movs	r2, #64	@ 0x40
 8006c80:	841a      	strh	r2, [r3, #32]

  return ret;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d006      	beq.n	8006cce <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d106      	bne.n	8006d06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d110      	bne.n	8006d4a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32ae      	adds	r2, #174	@ 0xae
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e01c      	b.n	8006db0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d115      	bne.n	8006dae <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	32ae      	adds	r2, #174	@ 0xae
 8006d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	32ae      	adds	r2, #174	@ 0xae
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	4611      	mov	r1, r2
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32ae      	adds	r2, #174	@ 0xae
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e01c      	b.n	8006e14 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d115      	bne.n	8006e12 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	32ae      	adds	r2, #174	@ 0xae
 8006df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	32ae      	adds	r2, #174	@ 0xae
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	78fa      	ldrb	r2, [r7, #3]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6852      	ldr	r2, [r2, #4]
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	4611      	mov	r1, r2
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	885b      	ldrh	r3, [r3, #2]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d91f      	bls.n	8006f12 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ed8:	e013      	b.n	8006f02 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006eda:	f107 030a 	add.w	r3, r7, #10
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6978      	ldr	r0, [r7, #20]
 8006ee2:	f000 f81b 	bl	8006f1c <USBD_GetNextDesc>
 8006ee6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d108      	bne.n	8006f02 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	789b      	ldrb	r3, [r3, #2]
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d008      	beq.n	8006f10 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	897b      	ldrh	r3, [r7, #10]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d8e5      	bhi.n	8006eda <USBD_GetEpDesc+0x2e>
 8006f0e:	e000      	b.n	8006f12 <USBD_GetEpDesc+0x66>
          break;
 8006f10:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f12:	693b      	ldr	r3, [r7, #16]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	4413      	add	r3, r2
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f46:	68fb      	ldr	r3, [r7, #12]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	b21a      	sxth	r2, r3
 8006f7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	b21b      	sxth	r3, r3
 8006f82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f84:	89fb      	ldrh	r3, [r7, #14]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006faa:	2b40      	cmp	r3, #64	@ 0x40
 8006fac:	d005      	beq.n	8006fba <USBD_StdDevReq+0x26>
 8006fae:	2b40      	cmp	r3, #64	@ 0x40
 8006fb0:	d857      	bhi.n	8007062 <USBD_StdDevReq+0xce>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00f      	beq.n	8006fd6 <USBD_StdDevReq+0x42>
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	d153      	bne.n	8007062 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	32ae      	adds	r2, #174	@ 0xae
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd4:	e04a      	b.n	800706c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d83b      	bhi.n	8007056 <USBD_StdDevReq+0xc2>
 8006fde:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe4 <USBD_StdDevReq+0x50>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007039 	.word	0x08007039
 8006fe8:	0800704d 	.word	0x0800704d
 8006fec:	08007057 	.word	0x08007057
 8006ff0:	08007043 	.word	0x08007043
 8006ff4:	08007057 	.word	0x08007057
 8006ff8:	08007017 	.word	0x08007017
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	08007057 	.word	0x08007057
 8007004:	0800702f 	.word	0x0800702f
 8007008:	08007021 	.word	0x08007021
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa3e 	bl	8007490 <USBD_GetDescriptor>
          break;
 8007014:	e024      	b.n	8007060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fba3 	bl	8007764 <USBD_SetAddress>
          break;
 800701e:	e01f      	b.n	8007060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fbe2 	bl	80077ec <USBD_SetConfig>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]
          break;
 800702c:	e018      	b.n	8007060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fc85 	bl	8007940 <USBD_GetConfig>
          break;
 8007036:	e013      	b.n	8007060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fcb6 	bl	80079ac <USBD_GetStatus>
          break;
 8007040:	e00e      	b.n	8007060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fce5 	bl	8007a14 <USBD_SetFeature>
          break;
 800704a:	e009      	b.n	8007060 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fd09 	bl	8007a66 <USBD_ClrFeature>
          break;
 8007054:	e004      	b.n	8007060 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fd60 	bl	8007b1e <USBD_CtlError>
          break;
 800705e:	bf00      	nop
      }
      break;
 8007060:	e004      	b.n	800706c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fd5a 	bl	8007b1e <USBD_CtlError>
      break;
 800706a:	bf00      	nop
  }

  return ret;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop

08007078 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800708e:	2b40      	cmp	r3, #64	@ 0x40
 8007090:	d005      	beq.n	800709e <USBD_StdItfReq+0x26>
 8007092:	2b40      	cmp	r3, #64	@ 0x40
 8007094:	d852      	bhi.n	800713c <USBD_StdItfReq+0xc4>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <USBD_StdItfReq+0x26>
 800709a:	2b20      	cmp	r3, #32
 800709c:	d14e      	bne.n	800713c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	3b01      	subs	r3, #1
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d840      	bhi.n	800712e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	889b      	ldrh	r3, [r3, #4]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d836      	bhi.n	8007124 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	889b      	ldrh	r3, [r3, #4]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff feda 	bl	8006e78 <USBD_CoreFindIF>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2bff      	cmp	r3, #255	@ 0xff
 80070cc:	d01d      	beq.n	800710a <USBD_StdItfReq+0x92>
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11a      	bne.n	800710a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070d4:	7bba      	ldrb	r2, [r7, #14]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	32ae      	adds	r2, #174	@ 0xae
 80070da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00f      	beq.n	8007104 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070e4:	7bba      	ldrb	r2, [r7, #14]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070ec:	7bba      	ldrb	r2, [r7, #14]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	32ae      	adds	r2, #174	@ 0xae
 80070f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007102:	e004      	b.n	800710e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007108:	e001      	b.n	800710e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800710a:	2303      	movs	r3, #3
 800710c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	88db      	ldrh	r3, [r3, #6]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d110      	bne.n	8007138 <USBD_StdItfReq+0xc0>
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10d      	bne.n	8007138 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fddc 	bl	8007cda <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007122:	e009      	b.n	8007138 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fcf9 	bl	8007b1e <USBD_CtlError>
          break;
 800712c:	e004      	b.n	8007138 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fcf4 	bl	8007b1e <USBD_CtlError>
          break;
 8007136:	e000      	b.n	800713a <USBD_StdItfReq+0xc2>
          break;
 8007138:	bf00      	nop
      }
      break;
 800713a:	e004      	b.n	8007146 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fced 	bl	8007b1e <USBD_CtlError>
      break;
 8007144:	bf00      	nop
  }

  return ret;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	889b      	ldrh	r3, [r3, #4]
 8007162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800716c:	2b40      	cmp	r3, #64	@ 0x40
 800716e:	d007      	beq.n	8007180 <USBD_StdEPReq+0x30>
 8007170:	2b40      	cmp	r3, #64	@ 0x40
 8007172:	f200 8181 	bhi.w	8007478 <USBD_StdEPReq+0x328>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02a      	beq.n	80071d0 <USBD_StdEPReq+0x80>
 800717a:	2b20      	cmp	r3, #32
 800717c:	f040 817c 	bne.w	8007478 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fe84 	bl	8006e92 <USBD_CoreFindEP>
 800718a:	4603      	mov	r3, r0
 800718c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800718e:	7b7b      	ldrb	r3, [r7, #13]
 8007190:	2bff      	cmp	r3, #255	@ 0xff
 8007192:	f000 8176 	beq.w	8007482 <USBD_StdEPReq+0x332>
 8007196:	7b7b      	ldrb	r3, [r7, #13]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f040 8172 	bne.w	8007482 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800719e:	7b7a      	ldrb	r2, [r7, #13]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071a6:	7b7a      	ldrb	r2, [r7, #13]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	32ae      	adds	r2, #174	@ 0xae
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8165 	beq.w	8007482 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071b8:	7b7a      	ldrb	r2, [r7, #13]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	32ae      	adds	r2, #174	@ 0xae
 80071be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
 80071ca:	4603      	mov	r3, r0
 80071cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071ce:	e158      	b.n	8007482 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d008      	beq.n	80071ea <USBD_StdEPReq+0x9a>
 80071d8:	2b03      	cmp	r3, #3
 80071da:	f300 8147 	bgt.w	800746c <USBD_StdEPReq+0x31c>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 809b 	beq.w	800731a <USBD_StdEPReq+0x1ca>
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d03c      	beq.n	8007262 <USBD_StdEPReq+0x112>
 80071e8:	e140      	b.n	800746c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d002      	beq.n	80071fc <USBD_StdEPReq+0xac>
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d016      	beq.n	8007228 <USBD_StdEPReq+0xd8>
 80071fa:	e02c      	b.n	8007256 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <USBD_StdEPReq+0xce>
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b80      	cmp	r3, #128	@ 0x80
 8007206:	d00a      	beq.n	800721e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f991 	bl	8008534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007212:	2180      	movs	r1, #128	@ 0x80
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f98d 	bl	8008534 <USBD_LL_StallEP>
 800721a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800721c:	e020      	b.n	8007260 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc7c 	bl	8007b1e <USBD_CtlError>
              break;
 8007226:	e01b      	b.n	8007260 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	885b      	ldrh	r3, [r3, #2]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10e      	bne.n	800724e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <USBD_StdEPReq+0xfe>
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	2b80      	cmp	r3, #128	@ 0x80
 800723a:	d008      	beq.n	800724e <USBD_StdEPReq+0xfe>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	88db      	ldrh	r3, [r3, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f973 	bl	8008534 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fd43 	bl	8007cda <USBD_CtlSendStatus>

              break;
 8007254:	e004      	b.n	8007260 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fc60 	bl	8007b1e <USBD_CtlError>
              break;
 800725e:	bf00      	nop
          }
          break;
 8007260:	e109      	b.n	8007476 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d002      	beq.n	8007274 <USBD_StdEPReq+0x124>
 800726e:	2b03      	cmp	r3, #3
 8007270:	d016      	beq.n	80072a0 <USBD_StdEPReq+0x150>
 8007272:	e04b      	b.n	800730c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <USBD_StdEPReq+0x146>
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b80      	cmp	r3, #128	@ 0x80
 800727e:	d00a      	beq.n	8007296 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 f955 	bl	8008534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800728a:	2180      	movs	r1, #128	@ 0x80
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f951 	bl	8008534 <USBD_LL_StallEP>
 8007292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007294:	e040      	b.n	8007318 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fc40 	bl	8007b1e <USBD_CtlError>
              break;
 800729e:	e03b      	b.n	8007318 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	885b      	ldrh	r3, [r3, #2]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d136      	bne.n	8007316 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 f95b 	bl	8008572 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fd0c 	bl	8007cda <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fde3 	bl	8006e92 <USBD_CoreFindEP>
 80072cc:	4603      	mov	r3, r0
 80072ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072d0:	7b7b      	ldrb	r3, [r7, #13]
 80072d2:	2bff      	cmp	r3, #255	@ 0xff
 80072d4:	d01f      	beq.n	8007316 <USBD_StdEPReq+0x1c6>
 80072d6:	7b7b      	ldrb	r3, [r7, #13]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d11c      	bne.n	8007316 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072dc:	7b7a      	ldrb	r2, [r7, #13]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072e4:	7b7a      	ldrb	r2, [r7, #13]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32ae      	adds	r2, #174	@ 0xae
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d010      	beq.n	8007316 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072f4:	7b7a      	ldrb	r2, [r7, #13]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	32ae      	adds	r2, #174	@ 0xae
 80072fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800730a:	e004      	b.n	8007316 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc05 	bl	8007b1e <USBD_CtlError>
              break;
 8007314:	e000      	b.n	8007318 <USBD_StdEPReq+0x1c8>
              break;
 8007316:	bf00      	nop
          }
          break;
 8007318:	e0ad      	b.n	8007476 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d002      	beq.n	800732c <USBD_StdEPReq+0x1dc>
 8007326:	2b03      	cmp	r3, #3
 8007328:	d033      	beq.n	8007392 <USBD_StdEPReq+0x242>
 800732a:	e099      	b.n	8007460 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <USBD_StdEPReq+0x1f2>
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	2b80      	cmp	r3, #128	@ 0x80
 8007336:	d004      	beq.n	8007342 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fbef 	bl	8007b1e <USBD_CtlError>
                break;
 8007340:	e093      	b.n	800746a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007346:	2b00      	cmp	r3, #0
 8007348:	da0b      	bge.n	8007362 <USBD_StdEPReq+0x212>
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	3310      	adds	r3, #16
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	3304      	adds	r3, #4
 8007360:	e00b      	b.n	800737a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	3304      	adds	r3, #4
 800737a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2200      	movs	r2, #0
 8007380:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	330e      	adds	r3, #14
 8007386:	2202      	movs	r2, #2
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fc44 	bl	8007c18 <USBD_CtlSendData>
              break;
 8007390:	e06b      	b.n	800746a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007392:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da11      	bge.n	80073be <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	3323      	adds	r3, #35	@ 0x23
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d117      	bne.n	80073e4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fbb1 	bl	8007b1e <USBD_CtlError>
                  break;
 80073bc:	e055      	b.n	800746a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	f003 020f 	and.w	r2, r3, #15
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fb9e 	bl	8007b1e <USBD_CtlError>
                  break;
 80073e2:	e042      	b.n	800746a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	da0b      	bge.n	8007404 <USBD_StdEPReq+0x2b4>
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	3310      	adds	r3, #16
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	4413      	add	r3, r2
 8007400:	3304      	adds	r3, #4
 8007402:	e00b      	b.n	800741c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	3304      	adds	r3, #4
 800741c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <USBD_StdEPReq+0x2da>
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b80      	cmp	r3, #128	@ 0x80
 8007428:	d103      	bne.n	8007432 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2200      	movs	r2, #0
 800742e:	739a      	strb	r2, [r3, #14]
 8007430:	e00e      	b.n	8007450 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 f8ba 	bl	80085b0 <USBD_LL_IsStallEP>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2201      	movs	r2, #1
 8007446:	739a      	strb	r2, [r3, #14]
 8007448:	e002      	b.n	8007450 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	330e      	adds	r3, #14
 8007454:	2202      	movs	r2, #2
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fbdd 	bl	8007c18 <USBD_CtlSendData>
              break;
 800745e:	e004      	b.n	800746a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fb5b 	bl	8007b1e <USBD_CtlError>
              break;
 8007468:	bf00      	nop
          }
          break;
 800746a:	e004      	b.n	8007476 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fb55 	bl	8007b1e <USBD_CtlError>
          break;
 8007474:	bf00      	nop
      }
      break;
 8007476:	e005      	b.n	8007484 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb4f 	bl	8007b1e <USBD_CtlError>
      break;
 8007480:	e000      	b.n	8007484 <USBD_StdEPReq+0x334>
      break;
 8007482:	bf00      	nop
  }

  return ret;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	2b06      	cmp	r3, #6
 80074b2:	f200 8128 	bhi.w	8007706 <USBD_GetDescriptor+0x276>
 80074b6:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <USBD_GetDescriptor+0x2c>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074d9 	.word	0x080074d9
 80074c0:	080074f1 	.word	0x080074f1
 80074c4:	08007531 	.word	0x08007531
 80074c8:	08007707 	.word	0x08007707
 80074cc:	08007707 	.word	0x08007707
 80074d0:	080076a7 	.word	0x080076a7
 80074d4:	080076d3 	.word	0x080076d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7c12      	ldrb	r2, [r2, #16]
 80074e4:	f107 0108 	add.w	r1, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
      break;
 80074ee:	e112      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	7c1b      	ldrb	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10d      	bne.n	8007514 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007500:	f107 0208 	add.w	r2, r7, #8
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	2202      	movs	r2, #2
 8007510:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007512:	e100      	b.n	8007716 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751c:	f107 0208 	add.w	r2, r7, #8
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	2202      	movs	r2, #2
 800752c:	701a      	strb	r2, [r3, #0]
      break;
 800752e:	e0f2      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b05      	cmp	r3, #5
 8007538:	f200 80ac 	bhi.w	8007694 <USBD_GetDescriptor+0x204>
 800753c:	a201      	add	r2, pc, #4	@ (adr r2, 8007544 <USBD_GetDescriptor+0xb4>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	0800755d 	.word	0x0800755d
 8007548:	08007591 	.word	0x08007591
 800754c:	080075c5 	.word	0x080075c5
 8007550:	080075f9 	.word	0x080075f9
 8007554:	0800762d 	.word	0x0800762d
 8007558:	08007661 	.word	0x08007661
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7c12      	ldrb	r2, [r2, #16]
 8007574:	f107 0108 	add.w	r1, r7, #8
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800757e:	e091      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 facb 	bl	8007b1e <USBD_CtlError>
            err++;
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	3301      	adds	r3, #1
 800758c:	72fb      	strb	r3, [r7, #11]
          break;
 800758e:	e089      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7c12      	ldrb	r2, [r2, #16]
 80075a8:	f107 0108 	add.w	r1, r7, #8
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b2:	e077      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fab1 	bl	8007b1e <USBD_CtlError>
            err++;
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	3301      	adds	r3, #1
 80075c0:	72fb      	strb	r3, [r7, #11]
          break;
 80075c2:	e06f      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7c12      	ldrb	r2, [r2, #16]
 80075dc:	f107 0108 	add.w	r1, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e6:	e05d      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa97 	bl	8007b1e <USBD_CtlError>
            err++;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	3301      	adds	r3, #1
 80075f4:	72fb      	strb	r3, [r7, #11]
          break;
 80075f6:	e055      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	7c12      	ldrb	r2, [r2, #16]
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761a:	e043      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa7d 	bl	8007b1e <USBD_CtlError>
            err++;
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	3301      	adds	r3, #1
 8007628:	72fb      	strb	r3, [r7, #11]
          break;
 800762a:	e03b      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	7c12      	ldrb	r2, [r2, #16]
 8007644:	f107 0108 	add.w	r1, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764e:	e029      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa63 	bl	8007b1e <USBD_CtlError>
            err++;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	3301      	adds	r3, #1
 800765c:	72fb      	strb	r3, [r7, #11]
          break;
 800765e:	e021      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	7c12      	ldrb	r2, [r2, #16]
 8007678:	f107 0108 	add.w	r1, r7, #8
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007682:	e00f      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa49 	bl	8007b1e <USBD_CtlError>
            err++;
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	3301      	adds	r3, #1
 8007690:	72fb      	strb	r3, [r7, #11]
          break;
 8007692:	e007      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa41 	bl	8007b1e <USBD_CtlError>
          err++;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	3301      	adds	r3, #1
 80076a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076a2:	bf00      	nop
      }
      break;
 80076a4:	e037      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7c1b      	ldrb	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b6:	f107 0208 	add.w	r2, r7, #8
 80076ba:	4610      	mov	r0, r2
 80076bc:	4798      	blx	r3
 80076be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c0:	e029      	b.n	8007716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fa2a 	bl	8007b1e <USBD_CtlError>
        err++;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	3301      	adds	r3, #1
 80076ce:	72fb      	strb	r3, [r7, #11]
      break;
 80076d0:	e021      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	7c1b      	ldrb	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e2:	f107 0208 	add.w	r2, r7, #8
 80076e6:	4610      	mov	r0, r2
 80076e8:	4798      	blx	r3
 80076ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3301      	adds	r3, #1
 80076f0:	2207      	movs	r2, #7
 80076f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076f4:	e00f      	b.n	8007716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fa10 	bl	8007b1e <USBD_CtlError>
        err++;
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	3301      	adds	r3, #1
 8007702:	72fb      	strb	r3, [r7, #11]
      break;
 8007704:	e007      	b.n	8007716 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa08 	bl	8007b1e <USBD_CtlError>
      err++;
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	3301      	adds	r3, #1
 8007712:	72fb      	strb	r3, [r7, #11]
      break;
 8007714:	bf00      	nop
  }

  if (err != 0U)
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d11e      	bne.n	800775a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	88db      	ldrh	r3, [r3, #6]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d016      	beq.n	8007752 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	88da      	ldrh	r2, [r3, #6]
 800772e:	893b      	ldrh	r3, [r7, #8]
 8007730:	4293      	cmp	r3, r2
 8007732:	bf28      	it	cs
 8007734:	4613      	movcs	r3, r2
 8007736:	b29b      	uxth	r3, r3
 8007738:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	461a      	mov	r2, r3
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa69 	bl	8007c18 <USBD_CtlSendData>
 8007746:	e009      	b.n	800775c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9e7 	bl	8007b1e <USBD_CtlError>
 8007750:	e004      	b.n	800775c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fac1 	bl	8007cda <USBD_CtlSendStatus>
 8007758:	e000      	b.n	800775c <USBD_GetDescriptor+0x2cc>
    return;
 800775a:	bf00      	nop
  }
}
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop

08007764 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	889b      	ldrh	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d131      	bne.n	80077da <USBD_SetAddress+0x76>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	88db      	ldrh	r3, [r3, #6]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d12d      	bne.n	80077da <USBD_SetAddress+0x76>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	2b7f      	cmp	r3, #127	@ 0x7f
 8007784:	d829      	bhi.n	80077da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007790:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b03      	cmp	r3, #3
 800779c:	d104      	bne.n	80077a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f9bc 	bl	8007b1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	e01d      	b.n	80077e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	7bfa      	ldrb	r2, [r7, #15]
 80077ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ff27 	bl	8008608 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa8d 	bl	8007cda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ce:	e009      	b.n	80077e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d8:	e004      	b.n	80077e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f99e 	bl	8007b1e <USBD_CtlError>
  }
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	885b      	ldrh	r3, [r3, #2]
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	4b4e      	ldr	r3, [pc, #312]	@ (800793c <USBD_SetConfig+0x150>)
 8007802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007804:	4b4d      	ldr	r3, [pc, #308]	@ (800793c <USBD_SetConfig+0x150>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d905      	bls.n	8007818 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f985 	bl	8007b1e <USBD_CtlError>
    return USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	e08c      	b.n	8007932 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d002      	beq.n	800782a <USBD_SetConfig+0x3e>
 8007824:	2b03      	cmp	r3, #3
 8007826:	d029      	beq.n	800787c <USBD_SetConfig+0x90>
 8007828:	e075      	b.n	8007916 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800782a:	4b44      	ldr	r3, [pc, #272]	@ (800793c <USBD_SetConfig+0x150>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d020      	beq.n	8007874 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007832:	4b42      	ldr	r3, [pc, #264]	@ (800793c <USBD_SetConfig+0x150>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800783c:	4b3f      	ldr	r3, [pc, #252]	@ (800793c <USBD_SetConfig+0x150>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fe ffcd 	bl	80067e2 <USBD_SetClassConfig>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f962 	bl	8007b1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007862:	e065      	b.n	8007930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fa38 	bl	8007cda <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2203      	movs	r2, #3
 800786e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007872:	e05d      	b.n	8007930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa30 	bl	8007cda <USBD_CtlSendStatus>
      break;
 800787a:	e059      	b.n	8007930 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800787c:	4b2f      	ldr	r3, [pc, #188]	@ (800793c <USBD_SetConfig+0x150>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d112      	bne.n	80078aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800788c:	4b2b      	ldr	r3, [pc, #172]	@ (800793c <USBD_SetConfig+0x150>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007896:	4b29      	ldr	r3, [pc, #164]	@ (800793c <USBD_SetConfig+0x150>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fe ffbc 	bl	800681a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa19 	bl	8007cda <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078a8:	e042      	b.n	8007930 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078aa:	4b24      	ldr	r3, [pc, #144]	@ (800793c <USBD_SetConfig+0x150>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d02a      	beq.n	800790e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fe ffaa 	bl	800681a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078c6:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <USBD_SetConfig+0x150>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078d0:	4b1a      	ldr	r3, [pc, #104]	@ (800793c <USBD_SetConfig+0x150>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fe ff83 	bl	80067e2 <USBD_SetClassConfig>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00f      	beq.n	8007906 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f918 	bl	8007b1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fe ff8f 	bl	800681a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007904:	e014      	b.n	8007930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f9e7 	bl	8007cda <USBD_CtlSendStatus>
      break;
 800790c:	e010      	b.n	8007930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f9e3 	bl	8007cda <USBD_CtlSendStatus>
      break;
 8007914:	e00c      	b.n	8007930 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f900 	bl	8007b1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800791e:	4b07      	ldr	r3, [pc, #28]	@ (800793c <USBD_SetConfig+0x150>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe ff78 	bl	800681a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800792a:	2303      	movs	r3, #3
 800792c:	73fb      	strb	r3, [r7, #15]
      break;
 800792e:	bf00      	nop
  }

  return ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000274 	.word	0x20000274

08007940 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	88db      	ldrh	r3, [r3, #6]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d004      	beq.n	800795c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8e2 	bl	8007b1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800795a:	e023      	b.n	80079a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	dc02      	bgt.n	800796e <USBD_GetConfig+0x2e>
 8007968:	2b00      	cmp	r3, #0
 800796a:	dc03      	bgt.n	8007974 <USBD_GetConfig+0x34>
 800796c:	e015      	b.n	800799a <USBD_GetConfig+0x5a>
 800796e:	2b03      	cmp	r3, #3
 8007970:	d00b      	beq.n	800798a <USBD_GetConfig+0x4a>
 8007972:	e012      	b.n	800799a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3308      	adds	r3, #8
 800797e:	2201      	movs	r2, #1
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f948 	bl	8007c18 <USBD_CtlSendData>
        break;
 8007988:	e00c      	b.n	80079a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3304      	adds	r3, #4
 800798e:	2201      	movs	r2, #1
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f940 	bl	8007c18 <USBD_CtlSendData>
        break;
 8007998:	e004      	b.n	80079a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f8be 	bl	8007b1e <USBD_CtlError>
        break;
 80079a2:	bf00      	nop
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d81e      	bhi.n	8007a02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	88db      	ldrh	r3, [r3, #6]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d004      	beq.n	80079d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f8a5 	bl	8007b1e <USBD_CtlError>
        break;
 80079d4:	e01a      	b.n	8007a0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	330c      	adds	r3, #12
 80079f6:	2202      	movs	r2, #2
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f90c 	bl	8007c18 <USBD_CtlSendData>
      break;
 8007a00:	e004      	b.n	8007a0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f88a 	bl	8007b1e <USBD_CtlError>
      break;
 8007a0a:	bf00      	nop
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f953 	bl	8007cda <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a34:	e013      	b.n	8007a5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d10b      	bne.n	8007a56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	889b      	ldrh	r3, [r3, #4]
 8007a42:	0a1b      	lsrs	r3, r3, #8
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f943 	bl	8007cda <USBD_CtlSendStatus>
}
 8007a54:	e003      	b.n	8007a5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f860 	bl	8007b1e <USBD_CtlError>
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d80b      	bhi.n	8007a96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	885b      	ldrh	r3, [r3, #2]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d10c      	bne.n	8007aa0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f923 	bl	8007cda <USBD_CtlSendStatus>
      }
      break;
 8007a94:	e004      	b.n	8007aa0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f840 	bl	8007b1e <USBD_CtlError>
      break;
 8007a9e:	e000      	b.n	8007aa2 <USBD_ClrFeature+0x3c>
      break;
 8007aa0:	bf00      	nop
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	781a      	ldrb	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	781a      	ldrb	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff fa3d 	bl	8006f54 <SWAPBYTE>
 8007ada:	4603      	mov	r3, r0
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff fa30 	bl	8006f54 <SWAPBYTE>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7ff fa23 	bl	8006f54 <SWAPBYTE>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	461a      	mov	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	80da      	strh	r2, [r3, #6]
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b28:	2180      	movs	r1, #128	@ 0x80
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fd02 	bl	8008534 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b30:	2100      	movs	r1, #0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fcfe 	bl	8008534 <USBD_LL_StallEP>
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d042      	beq.n	8007bdc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007b5a:	6938      	ldr	r0, [r7, #16]
 8007b5c:	f000 f842 	bl	8007be4 <USBD_GetLen>
 8007b60:	4603      	mov	r3, r0
 8007b62:	3301      	adds	r3, #1
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b6a:	d808      	bhi.n	8007b7e <USBD_GetString+0x3e>
 8007b6c:	6938      	ldr	r0, [r7, #16]
 8007b6e:	f000 f839 	bl	8007be4 <USBD_GetLen>
 8007b72:	4603      	mov	r3, r0
 8007b74:	3301      	adds	r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	e001      	b.n	8007b82 <USBD_GetString+0x42>
 8007b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7812      	ldrb	r2, [r2, #0]
 8007b90:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	3301      	adds	r3, #1
 8007b96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ba8:	e013      	b.n	8007bd2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	4413      	add	r3, r2
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	613b      	str	r3, [r7, #16]
    idx++;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e7      	bne.n	8007baa <USBD_GetString+0x6a>
 8007bda:	e000      	b.n	8007bde <USBD_GetString+0x9e>
    return;
 8007bdc:	bf00      	nop
  }
}
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bf4:	e005      	b.n	8007c02 <USBD_GetLen+0x1e>
  {
    len++;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1f5      	bne.n	8007bf6 <USBD_GetLen+0x12>
  }

  return len;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	2100      	movs	r1, #0
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fcfe 	bl	8008646 <USBD_LL_Transmit>

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fced 	bl	8008646 <USBD_LL_Transmit>

  return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2203      	movs	r2, #3
 8007c86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fced 	bl	8008688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	2100      	movs	r1, #0
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fcdc 	bl	8008688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cea:	2300      	movs	r3, #0
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fca8 	bl	8008646 <USBD_LL_Transmit>

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2205      	movs	r2, #5
 8007d0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d10:	2300      	movs	r3, #0
 8007d12:	2200      	movs	r2, #0
 8007d14:	2100      	movs	r1, #0
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fcb6 	bl	8008688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4912      	ldr	r1, [pc, #72]	@ (8007d78 <MX_USB_DEVICE_Init+0x50>)
 8007d30:	4812      	ldr	r0, [pc, #72]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d32:	f7fe fcd9 	bl	80066e8 <USBD_Init>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d3c:	f7f8 ff20 	bl	8000b80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d40:	490f      	ldr	r1, [pc, #60]	@ (8007d80 <MX_USB_DEVICE_Init+0x58>)
 8007d42:	480e      	ldr	r0, [pc, #56]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d44:	f7fe fd00 	bl	8006748 <USBD_RegisterClass>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d4e:	f7f8 ff17 	bl	8000b80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d52:	490c      	ldr	r1, [pc, #48]	@ (8007d84 <MX_USB_DEVICE_Init+0x5c>)
 8007d54:	4809      	ldr	r0, [pc, #36]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d56:	f7fe fbf7 	bl	8006548 <USBD_CDC_RegisterInterface>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d60:	f7f8 ff0e 	bl	8000b80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d64:	4805      	ldr	r0, [pc, #20]	@ (8007d7c <MX_USB_DEVICE_Init+0x54>)
 8007d66:	f7fe fd25 	bl	80067b4 <USBD_Start>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d70:	f7f8 ff06 	bl	8000b80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d74:	bf00      	nop
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	200000ac 	.word	0x200000ac
 8007d7c:	20000278 	.word	0x20000278
 8007d80:	20000018 	.word	0x20000018
 8007d84:	20000098 	.word	0x20000098

08007d88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4905      	ldr	r1, [pc, #20]	@ (8007da4 <CDC_Init_FS+0x1c>)
 8007d90:	4805      	ldr	r0, [pc, #20]	@ (8007da8 <CDC_Init_FS+0x20>)
 8007d92:	f7fe fbf3 	bl	800657c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d96:	4905      	ldr	r1, [pc, #20]	@ (8007dac <CDC_Init_FS+0x24>)
 8007d98:	4803      	ldr	r0, [pc, #12]	@ (8007da8 <CDC_Init_FS+0x20>)
 8007d9a:	f7fe fc11 	bl	80065c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000d54 	.word	0x20000d54
 8007da8:	20000278 	.word	0x20000278
 8007dac:	20000554 	.word	0x20000554

08007db0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007db4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007dd0:	79fb      	ldrb	r3, [r7, #7]
 8007dd2:	2b23      	cmp	r3, #35	@ 0x23
 8007dd4:	d84a      	bhi.n	8007e6c <CDC_Control_FS+0xac>
 8007dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ddc <CDC_Control_FS+0x1c>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007e6d 	.word	0x08007e6d
 8007de0:	08007e6d 	.word	0x08007e6d
 8007de4:	08007e6d 	.word	0x08007e6d
 8007de8:	08007e6d 	.word	0x08007e6d
 8007dec:	08007e6d 	.word	0x08007e6d
 8007df0:	08007e6d 	.word	0x08007e6d
 8007df4:	08007e6d 	.word	0x08007e6d
 8007df8:	08007e6d 	.word	0x08007e6d
 8007dfc:	08007e6d 	.word	0x08007e6d
 8007e00:	08007e6d 	.word	0x08007e6d
 8007e04:	08007e6d 	.word	0x08007e6d
 8007e08:	08007e6d 	.word	0x08007e6d
 8007e0c:	08007e6d 	.word	0x08007e6d
 8007e10:	08007e6d 	.word	0x08007e6d
 8007e14:	08007e6d 	.word	0x08007e6d
 8007e18:	08007e6d 	.word	0x08007e6d
 8007e1c:	08007e6d 	.word	0x08007e6d
 8007e20:	08007e6d 	.word	0x08007e6d
 8007e24:	08007e6d 	.word	0x08007e6d
 8007e28:	08007e6d 	.word	0x08007e6d
 8007e2c:	08007e6d 	.word	0x08007e6d
 8007e30:	08007e6d 	.word	0x08007e6d
 8007e34:	08007e6d 	.word	0x08007e6d
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007e6d 	.word	0x08007e6d
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	08007e6d 	.word	0x08007e6d
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007e6d 	.word	0x08007e6d
 8007e54:	08007e6d 	.word	0x08007e6d
 8007e58:	08007e6d 	.word	0x08007e6d
 8007e5c:	08007e6d 	.word	0x08007e6d
 8007e60:	08007e6d 	.word	0x08007e6d
 8007e64:	08007e6d 	.word	0x08007e6d
 8007e68:	08007e6d 	.word	0x08007e6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e6c:	bf00      	nop
  }

  return (USBD_OK);
 8007e6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	4805      	ldr	r0, [pc, #20]	@ (8007ea0 <CDC_Receive_FS+0x24>)
 8007e8a:	f7fe fb99 	bl	80065c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e8e:	4804      	ldr	r0, [pc, #16]	@ (8007ea0 <CDC_Receive_FS+0x24>)
 8007e90:	f7fe fbf4 	bl	800667c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000278 	.word	0x20000278

08007ea4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <CDC_Transmit_FS+0x48>)
 8007eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007eba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e00b      	b.n	8007ee2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007eca:	887b      	ldrh	r3, [r7, #2]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	4806      	ldr	r0, [pc, #24]	@ (8007eec <CDC_Transmit_FS+0x48>)
 8007ed2:	f7fe fb53 	bl	800657c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ed6:	4805      	ldr	r0, [pc, #20]	@ (8007eec <CDC_Transmit_FS+0x48>)
 8007ed8:	f7fe fb90 	bl	80065fc <USBD_CDC_TransmitPacket>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000278 	.word	0x20000278

08007ef0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	6039      	str	r1, [r7, #0]
 8007f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2212      	movs	r2, #18
 8007f24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f26:	4b03      	ldr	r3, [pc, #12]	@ (8007f34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	200000c8 	.word	0x200000c8

08007f38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2204      	movs	r2, #4
 8007f48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f4a:	4b03      	ldr	r3, [pc, #12]	@ (8007f58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	200000dc 	.word	0x200000dc

08007f5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	6039      	str	r1, [r7, #0]
 8007f66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d105      	bne.n	8007f7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	4907      	ldr	r1, [pc, #28]	@ (8007f90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f72:	4808      	ldr	r0, [pc, #32]	@ (8007f94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f74:	f7ff fde4 	bl	8007b40 <USBD_GetString>
 8007f78:	e004      	b.n	8007f84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	4904      	ldr	r1, [pc, #16]	@ (8007f90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f7e:	4805      	ldr	r0, [pc, #20]	@ (8007f94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f80:	f7ff fdde 	bl	8007b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f84:	4b02      	ldr	r3, [pc, #8]	@ (8007f90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20001554 	.word	0x20001554
 8007f94:	0800964c 	.word	0x0800964c

08007f98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	4904      	ldr	r1, [pc, #16]	@ (8007fb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fa8:	4804      	ldr	r0, [pc, #16]	@ (8007fbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007faa:	f7ff fdc9 	bl	8007b40 <USBD_GetString>
  return USBD_StrDesc;
 8007fae:	4b02      	ldr	r3, [pc, #8]	@ (8007fb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20001554 	.word	0x20001554
 8007fbc:	08009664 	.word	0x08009664

08007fc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	221a      	movs	r2, #26
 8007fd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fd2:	f000 f843 	bl	800805c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fd6:	4b02      	ldr	r3, [pc, #8]	@ (8007fe0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	200000e0 	.word	0x200000e0

08007fe4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d105      	bne.n	8008002 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	4907      	ldr	r1, [pc, #28]	@ (8008018 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ffa:	4808      	ldr	r0, [pc, #32]	@ (800801c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ffc:	f7ff fda0 	bl	8007b40 <USBD_GetString>
 8008000:	e004      	b.n	800800c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4904      	ldr	r1, [pc, #16]	@ (8008018 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008006:	4805      	ldr	r0, [pc, #20]	@ (800801c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008008:	f7ff fd9a 	bl	8007b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800800c:	4b02      	ldr	r3, [pc, #8]	@ (8008018 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20001554 	.word	0x20001554
 800801c:	08009678 	.word	0x08009678

08008020 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d105      	bne.n	800803e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4907      	ldr	r1, [pc, #28]	@ (8008054 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008036:	4808      	ldr	r0, [pc, #32]	@ (8008058 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008038:	f7ff fd82 	bl	8007b40 <USBD_GetString>
 800803c:	e004      	b.n	8008048 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4904      	ldr	r1, [pc, #16]	@ (8008054 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008042:	4805      	ldr	r0, [pc, #20]	@ (8008058 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008044:	f7ff fd7c 	bl	8007b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008048:	4b02      	ldr	r3, [pc, #8]	@ (8008054 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20001554 	.word	0x20001554
 8008058:	08009684 	.word	0x08009684

0800805c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008062:	4b0f      	ldr	r3, [pc, #60]	@ (80080a0 <Get_SerialNum+0x44>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008068:	4b0e      	ldr	r3, [pc, #56]	@ (80080a4 <Get_SerialNum+0x48>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800806e:	4b0e      	ldr	r3, [pc, #56]	@ (80080a8 <Get_SerialNum+0x4c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008082:	2208      	movs	r2, #8
 8008084:	4909      	ldr	r1, [pc, #36]	@ (80080ac <Get_SerialNum+0x50>)
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f000 f814 	bl	80080b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800808c:	2204      	movs	r2, #4
 800808e:	4908      	ldr	r1, [pc, #32]	@ (80080b0 <Get_SerialNum+0x54>)
 8008090:	68b8      	ldr	r0, [r7, #8]
 8008092:	f000 f80f 	bl	80080b4 <IntToUnicode>
  }
}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	1fff7a10 	.word	0x1fff7a10
 80080a4:	1fff7a14 	.word	0x1fff7a14
 80080a8:	1fff7a18 	.word	0x1fff7a18
 80080ac:	200000e2 	.word	0x200000e2
 80080b0:	200000f2 	.word	0x200000f2

080080b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	4613      	mov	r3, r2
 80080c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
 80080ca:	e027      	b.n	800811c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	d80b      	bhi.n	80080ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	0f1b      	lsrs	r3, r3, #28
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	4619      	mov	r1, r3
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	440b      	add	r3, r1
 80080e4:	3230      	adds	r2, #48	@ 0x30
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	e00a      	b.n	8008102 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	0f1b      	lsrs	r3, r3, #28
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	4619      	mov	r1, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	440b      	add	r3, r1
 80080fc:	3237      	adds	r2, #55	@ 0x37
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	3301      	adds	r3, #1
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	4413      	add	r3, r2
 8008112:	2200      	movs	r2, #0
 8008114:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	3301      	adds	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
 800811c:	7dfa      	ldrb	r2, [r7, #23]
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	429a      	cmp	r2, r3
 8008122:	d3d3      	bcc.n	80080cc <IntToUnicode+0x18>
  }
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	@ 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800813c:	f107 0314 	add.w	r3, r7, #20
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	60da      	str	r2, [r3, #12]
 800814a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008154:	d147      	bne.n	80081e6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008156:	2300      	movs	r3, #0
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	4b25      	ldr	r3, [pc, #148]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 800815c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815e:	4a24      	ldr	r2, [pc, #144]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	6313      	str	r3, [r2, #48]	@ 0x30
 8008166:	4b22      	ldr	r3, [pc, #136]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008178:	2300      	movs	r3, #0
 800817a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800817c:	2300      	movs	r3, #0
 800817e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008180:	f107 0314 	add.w	r3, r7, #20
 8008184:	4619      	mov	r1, r3
 8008186:	481b      	ldr	r0, [pc, #108]	@ (80081f4 <HAL_PCD_MspInit+0xc0>)
 8008188:	f7f9 fa22 	bl	80015d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800818c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008192:	2302      	movs	r3, #2
 8008194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008196:	2300      	movs	r3, #0
 8008198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819a:	2300      	movs	r3, #0
 800819c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800819e:	230a      	movs	r3, #10
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081a2:	f107 0314 	add.w	r3, r7, #20
 80081a6:	4619      	mov	r1, r3
 80081a8:	4812      	ldr	r0, [pc, #72]	@ (80081f4 <HAL_PCD_MspInit+0xc0>)
 80081aa:	f7f9 fa11 	bl	80015d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081ae:	4b10      	ldr	r3, [pc, #64]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 80081b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b2:	4a0f      	ldr	r2, [pc, #60]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 80081b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	4b0c      	ldr	r3, [pc, #48]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 80081c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c2:	4a0b      	ldr	r2, [pc, #44]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 80081c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80081ca:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <HAL_PCD_MspInit+0xbc>)
 80081cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	2043      	movs	r0, #67	@ 0x43
 80081dc:	f7f9 f9c1 	bl	8001562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081e0:	2043      	movs	r0, #67	@ 0x43
 80081e2:	f7f9 f9da 	bl	800159a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081e6:	bf00      	nop
 80081e8:	3728      	adds	r7, #40	@ 0x28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40023800 	.word	0x40023800
 80081f4:	40020000 	.word	0x40020000

080081f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7fe fb1d 	bl	800684e <USBD_LL_SetupStage>
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	4619      	mov	r1, r3
 8008246:	f7fe fb57 	bl	80068f8 <USBD_LL_DataOutStage>
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4613      	mov	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	3320      	adds	r3, #32
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	4619      	mov	r1, r3
 800827a:	f7fe fbf9 	bl	8006a70 <USBD_LL_DataInStage>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fd3d 	bl	8006d14 <USBD_LL_SOF>
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082aa:	2301      	movs	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	79db      	ldrb	r3, [r3, #7]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
 80082ba:	e008      	b.n	80082ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	79db      	ldrb	r3, [r3, #7]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d102      	bne.n	80082ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
 80082c8:	e001      	b.n	80082ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082ca:	f7f8 fc59 	bl	8000b80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082d4:	7bfa      	ldrb	r2, [r7, #15]
 80082d6:	4611      	mov	r1, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fe fcd7 	bl	8006c8c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f7fe fc7e 	bl	8006be6 <USBD_LL_Reset>
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fcd2 	bl	8006cac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6812      	ldr	r2, [r2, #0]
 8008316:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800831a:	f043 0301 	orr.w	r3, r3, #1
 800831e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7adb      	ldrb	r3, [r3, #11]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008328:	4b04      	ldr	r3, [pc, #16]	@ (800833c <HAL_PCD_SuspendCallback+0x48>)
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	4a03      	ldr	r2, [pc, #12]	@ (800833c <HAL_PCD_SuspendCallback+0x48>)
 800832e:	f043 0306 	orr.w	r3, r3, #6
 8008332:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	e000ed00 	.word	0xe000ed00

08008340 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fcc8 	bl	8006ce4 <USBD_LL_Resume>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800836e:	78fa      	ldrb	r2, [r7, #3]
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe fd20 	bl	8006db8 <USBD_LL_IsoOUTIncomplete>
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008392:	78fa      	ldrb	r2, [r7, #3]
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f7fe fcdc 	bl	8006d54 <USBD_LL_IsoINIncomplete>
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fd32 	bl	8006e1c <USBD_LL_DevConnected>
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fe fd2f 	bl	8006e32 <USBD_LL_DevDisconnected>
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d13c      	bne.n	8008466 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083ec:	4a20      	ldr	r2, [pc, #128]	@ (8008470 <USBD_LL_Init+0x94>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008470 <USBD_LL_Init+0x94>)
 80083f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008470 <USBD_LL_Init+0x94>)
 80083fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008402:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008404:	4b1a      	ldr	r3, [pc, #104]	@ (8008470 <USBD_LL_Init+0x94>)
 8008406:	2204      	movs	r2, #4
 8008408:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800840a:	4b19      	ldr	r3, [pc, #100]	@ (8008470 <USBD_LL_Init+0x94>)
 800840c:	2202      	movs	r2, #2
 800840e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008410:	4b17      	ldr	r3, [pc, #92]	@ (8008470 <USBD_LL_Init+0x94>)
 8008412:	2200      	movs	r2, #0
 8008414:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008416:	4b16      	ldr	r3, [pc, #88]	@ (8008470 <USBD_LL_Init+0x94>)
 8008418:	2202      	movs	r2, #2
 800841a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800841c:	4b14      	ldr	r3, [pc, #80]	@ (8008470 <USBD_LL_Init+0x94>)
 800841e:	2200      	movs	r2, #0
 8008420:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008422:	4b13      	ldr	r3, [pc, #76]	@ (8008470 <USBD_LL_Init+0x94>)
 8008424:	2200      	movs	r2, #0
 8008426:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008428:	4b11      	ldr	r3, [pc, #68]	@ (8008470 <USBD_LL_Init+0x94>)
 800842a:	2200      	movs	r2, #0
 800842c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800842e:	4b10      	ldr	r3, [pc, #64]	@ (8008470 <USBD_LL_Init+0x94>)
 8008430:	2201      	movs	r2, #1
 8008432:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008434:	4b0e      	ldr	r3, [pc, #56]	@ (8008470 <USBD_LL_Init+0x94>)
 8008436:	2200      	movs	r2, #0
 8008438:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800843a:	480d      	ldr	r0, [pc, #52]	@ (8008470 <USBD_LL_Init+0x94>)
 800843c:	f7fa f894 	bl	8002568 <HAL_PCD_Init>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008446:	f7f8 fb9b 	bl	8000b80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800844a:	2180      	movs	r1, #128	@ 0x80
 800844c:	4808      	ldr	r0, [pc, #32]	@ (8008470 <USBD_LL_Init+0x94>)
 800844e:	f7fb fac0 	bl	80039d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008452:	2240      	movs	r2, #64	@ 0x40
 8008454:	2100      	movs	r1, #0
 8008456:	4806      	ldr	r0, [pc, #24]	@ (8008470 <USBD_LL_Init+0x94>)
 8008458:	f7fb fa74 	bl	8003944 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800845c:	2280      	movs	r2, #128	@ 0x80
 800845e:	2101      	movs	r1, #1
 8008460:	4803      	ldr	r0, [pc, #12]	@ (8008470 <USBD_LL_Init+0x94>)
 8008462:	f7fb fa6f 	bl	8003944 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20001754 	.word	0x20001754

08008474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800848a:	4618      	mov	r0, r3
 800848c:	f7fa f97b 	bl	8002786 <HAL_PCD_Start>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f942 	bl	8008720 <USBD_Get_USB_Status>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	4608      	mov	r0, r1
 80084b4:	4611      	mov	r1, r2
 80084b6:	461a      	mov	r2, r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	70fb      	strb	r3, [r7, #3]
 80084bc:	460b      	mov	r3, r1
 80084be:	70bb      	strb	r3, [r7, #2]
 80084c0:	4613      	mov	r3, r2
 80084c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80084d2:	78bb      	ldrb	r3, [r7, #2]
 80084d4:	883a      	ldrh	r2, [r7, #0]
 80084d6:	78f9      	ldrb	r1, [r7, #3]
 80084d8:	f7fa fe4f 	bl	800317a <HAL_PCD_EP_Open>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f91c 	bl	8008720 <USBD_Get_USB_Status>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	460b      	mov	r3, r1
 8008500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008510:	78fa      	ldrb	r2, [r7, #3]
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7fa fe9a 	bl	800324e <HAL_PCD_EP_Close>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f8fd 	bl	8008720 <USBD_Get_USB_Status>
 8008526:	4603      	mov	r3, r0
 8008528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852a:	7bbb      	ldrb	r3, [r7, #14]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7fa ff52 	bl	80033fc <HAL_PCD_EP_SetStall>
 8008558:	4603      	mov	r3, r0
 800855a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 f8de 	bl	8008720 <USBD_Get_USB_Status>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008568:	7bbb      	ldrb	r3, [r7, #14]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7fa ff96 	bl	80034c2 <HAL_PCD_EP_ClrStall>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f8bf 	bl	8008720 <USBD_Get_USB_Status>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	da0b      	bge.n	80085e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	3316      	adds	r3, #22
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	e00b      	b.n	80085fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80085fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	4611      	mov	r1, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f7fa fd83 	bl	8003132 <HAL_PCD_SetAddress>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f874 	bl	8008720 <USBD_Get_USB_Status>
 8008638:	4603      	mov	r3, r0
 800863a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863c:	7bbb      	ldrb	r3, [r7, #14]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	460b      	mov	r3, r1
 8008654:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008664:	7af9      	ldrb	r1, [r7, #11]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	f7fa fe8d 	bl	8003388 <HAL_PCD_EP_Transmit>
 800866e:	4603      	mov	r3, r0
 8008670:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f853 	bl	8008720 <USBD_Get_USB_Status>
 800867a:	4603      	mov	r3, r0
 800867c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800867e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	460b      	mov	r3, r1
 8008696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086a6:	7af9      	ldrb	r1, [r7, #11]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	f7fa fe19 	bl	80032e2 <HAL_PCD_EP_Receive>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 f832 	bl	8008720 <USBD_Get_USB_Status>
 80086bc:	4603      	mov	r3, r0
 80086be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	4611      	mov	r1, r2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fa fe39 	bl	8003358 <HAL_PCD_EP_GetRxCount>
 80086e6:	4603      	mov	r3, r0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086f8:	4b03      	ldr	r3, [pc, #12]	@ (8008708 <USBD_static_malloc+0x18>)
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	20001c38 	.word	0x20001c38

0800870c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]

}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	2b03      	cmp	r3, #3
 8008732:	d817      	bhi.n	8008764 <USBD_Get_USB_Status+0x44>
 8008734:	a201      	add	r2, pc, #4	@ (adr r2, 800873c <USBD_Get_USB_Status+0x1c>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	0800874d 	.word	0x0800874d
 8008740:	08008753 	.word	0x08008753
 8008744:	08008759 	.word	0x08008759
 8008748:	0800875f 	.word	0x0800875f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
    break;
 8008750:	e00b      	b.n	800876a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008752:	2303      	movs	r3, #3
 8008754:	73fb      	strb	r3, [r7, #15]
    break;
 8008756:	e008      	b.n	800876a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008758:	2301      	movs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
    break;
 800875c:	e005      	b.n	800876a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800875e:	2303      	movs	r3, #3
 8008760:	73fb      	strb	r3, [r7, #15]
    break;
 8008762:	e002      	b.n	800876a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	73fb      	strb	r3, [r7, #15]
    break;
 8008768:	bf00      	nop
  }
  return usb_status;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <std>:
 8008778:	2300      	movs	r3, #0
 800877a:	b510      	push	{r4, lr}
 800877c:	4604      	mov	r4, r0
 800877e:	e9c0 3300 	strd	r3, r3, [r0]
 8008782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008786:	6083      	str	r3, [r0, #8]
 8008788:	8181      	strh	r1, [r0, #12]
 800878a:	6643      	str	r3, [r0, #100]	@ 0x64
 800878c:	81c2      	strh	r2, [r0, #14]
 800878e:	6183      	str	r3, [r0, #24]
 8008790:	4619      	mov	r1, r3
 8008792:	2208      	movs	r2, #8
 8008794:	305c      	adds	r0, #92	@ 0x5c
 8008796:	f000 f906 	bl	80089a6 <memset>
 800879a:	4b0d      	ldr	r3, [pc, #52]	@ (80087d0 <std+0x58>)
 800879c:	6263      	str	r3, [r4, #36]	@ 0x24
 800879e:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <std+0x5c>)
 80087a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <std+0x60>)
 80087a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <std+0x64>)
 80087a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <std+0x68>)
 80087ac:	6224      	str	r4, [r4, #32]
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d006      	beq.n	80087c0 <std+0x48>
 80087b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087b6:	4294      	cmp	r4, r2
 80087b8:	d002      	beq.n	80087c0 <std+0x48>
 80087ba:	33d0      	adds	r3, #208	@ 0xd0
 80087bc:	429c      	cmp	r4, r3
 80087be:	d105      	bne.n	80087cc <std+0x54>
 80087c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c8:	f000 b966 	b.w	8008a98 <__retarget_lock_init_recursive>
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	bf00      	nop
 80087d0:	08008921 	.word	0x08008921
 80087d4:	08008943 	.word	0x08008943
 80087d8:	0800897b 	.word	0x0800897b
 80087dc:	0800899f 	.word	0x0800899f
 80087e0:	20001e58 	.word	0x20001e58

080087e4 <stdio_exit_handler>:
 80087e4:	4a02      	ldr	r2, [pc, #8]	@ (80087f0 <stdio_exit_handler+0xc>)
 80087e6:	4903      	ldr	r1, [pc, #12]	@ (80087f4 <stdio_exit_handler+0x10>)
 80087e8:	4803      	ldr	r0, [pc, #12]	@ (80087f8 <stdio_exit_handler+0x14>)
 80087ea:	f000 b869 	b.w	80088c0 <_fwalk_sglue>
 80087ee:	bf00      	nop
 80087f0:	200000fc 	.word	0x200000fc
 80087f4:	08009335 	.word	0x08009335
 80087f8:	2000010c 	.word	0x2000010c

080087fc <cleanup_stdio>:
 80087fc:	6841      	ldr	r1, [r0, #4]
 80087fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008830 <cleanup_stdio+0x34>)
 8008800:	4299      	cmp	r1, r3
 8008802:	b510      	push	{r4, lr}
 8008804:	4604      	mov	r4, r0
 8008806:	d001      	beq.n	800880c <cleanup_stdio+0x10>
 8008808:	f000 fd94 	bl	8009334 <_fflush_r>
 800880c:	68a1      	ldr	r1, [r4, #8]
 800880e:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <cleanup_stdio+0x38>)
 8008810:	4299      	cmp	r1, r3
 8008812:	d002      	beq.n	800881a <cleanup_stdio+0x1e>
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fd8d 	bl	8009334 <_fflush_r>
 800881a:	68e1      	ldr	r1, [r4, #12]
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <cleanup_stdio+0x3c>)
 800881e:	4299      	cmp	r1, r3
 8008820:	d004      	beq.n	800882c <cleanup_stdio+0x30>
 8008822:	4620      	mov	r0, r4
 8008824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008828:	f000 bd84 	b.w	8009334 <_fflush_r>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	bf00      	nop
 8008830:	20001e58 	.word	0x20001e58
 8008834:	20001ec0 	.word	0x20001ec0
 8008838:	20001f28 	.word	0x20001f28

0800883c <global_stdio_init.part.0>:
 800883c:	b510      	push	{r4, lr}
 800883e:	4b0b      	ldr	r3, [pc, #44]	@ (800886c <global_stdio_init.part.0+0x30>)
 8008840:	4c0b      	ldr	r4, [pc, #44]	@ (8008870 <global_stdio_init.part.0+0x34>)
 8008842:	4a0c      	ldr	r2, [pc, #48]	@ (8008874 <global_stdio_init.part.0+0x38>)
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	4620      	mov	r0, r4
 8008848:	2200      	movs	r2, #0
 800884a:	2104      	movs	r1, #4
 800884c:	f7ff ff94 	bl	8008778 <std>
 8008850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008854:	2201      	movs	r2, #1
 8008856:	2109      	movs	r1, #9
 8008858:	f7ff ff8e 	bl	8008778 <std>
 800885c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008860:	2202      	movs	r2, #2
 8008862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008866:	2112      	movs	r1, #18
 8008868:	f7ff bf86 	b.w	8008778 <std>
 800886c:	20001f90 	.word	0x20001f90
 8008870:	20001e58 	.word	0x20001e58
 8008874:	080087e5 	.word	0x080087e5

08008878 <__sfp_lock_acquire>:
 8008878:	4801      	ldr	r0, [pc, #4]	@ (8008880 <__sfp_lock_acquire+0x8>)
 800887a:	f000 b90e 	b.w	8008a9a <__retarget_lock_acquire_recursive>
 800887e:	bf00      	nop
 8008880:	20001f99 	.word	0x20001f99

08008884 <__sfp_lock_release>:
 8008884:	4801      	ldr	r0, [pc, #4]	@ (800888c <__sfp_lock_release+0x8>)
 8008886:	f000 b909 	b.w	8008a9c <__retarget_lock_release_recursive>
 800888a:	bf00      	nop
 800888c:	20001f99 	.word	0x20001f99

08008890 <__sinit>:
 8008890:	b510      	push	{r4, lr}
 8008892:	4604      	mov	r4, r0
 8008894:	f7ff fff0 	bl	8008878 <__sfp_lock_acquire>
 8008898:	6a23      	ldr	r3, [r4, #32]
 800889a:	b11b      	cbz	r3, 80088a4 <__sinit+0x14>
 800889c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a0:	f7ff bff0 	b.w	8008884 <__sfp_lock_release>
 80088a4:	4b04      	ldr	r3, [pc, #16]	@ (80088b8 <__sinit+0x28>)
 80088a6:	6223      	str	r3, [r4, #32]
 80088a8:	4b04      	ldr	r3, [pc, #16]	@ (80088bc <__sinit+0x2c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f5      	bne.n	800889c <__sinit+0xc>
 80088b0:	f7ff ffc4 	bl	800883c <global_stdio_init.part.0>
 80088b4:	e7f2      	b.n	800889c <__sinit+0xc>
 80088b6:	bf00      	nop
 80088b8:	080087fd 	.word	0x080087fd
 80088bc:	20001f90 	.word	0x20001f90

080088c0 <_fwalk_sglue>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	4607      	mov	r7, r0
 80088c6:	4688      	mov	r8, r1
 80088c8:	4614      	mov	r4, r2
 80088ca:	2600      	movs	r6, #0
 80088cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d0:	f1b9 0901 	subs.w	r9, r9, #1
 80088d4:	d505      	bpl.n	80088e2 <_fwalk_sglue+0x22>
 80088d6:	6824      	ldr	r4, [r4, #0]
 80088d8:	2c00      	cmp	r4, #0
 80088da:	d1f7      	bne.n	80088cc <_fwalk_sglue+0xc>
 80088dc:	4630      	mov	r0, r6
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	89ab      	ldrh	r3, [r5, #12]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d907      	bls.n	80088f8 <_fwalk_sglue+0x38>
 80088e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088ec:	3301      	adds	r3, #1
 80088ee:	d003      	beq.n	80088f8 <_fwalk_sglue+0x38>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	4306      	orrs	r6, r0
 80088f8:	3568      	adds	r5, #104	@ 0x68
 80088fa:	e7e9      	b.n	80088d0 <_fwalk_sglue+0x10>

080088fc <iprintf>:
 80088fc:	b40f      	push	{r0, r1, r2, r3}
 80088fe:	b507      	push	{r0, r1, r2, lr}
 8008900:	4906      	ldr	r1, [pc, #24]	@ (800891c <iprintf+0x20>)
 8008902:	ab04      	add	r3, sp, #16
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	f853 2b04 	ldr.w	r2, [r3], #4
 800890a:	6881      	ldr	r1, [r0, #8]
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	f000 f9e9 	bl	8008ce4 <_vfiprintf_r>
 8008912:	b003      	add	sp, #12
 8008914:	f85d eb04 	ldr.w	lr, [sp], #4
 8008918:	b004      	add	sp, #16
 800891a:	4770      	bx	lr
 800891c:	20000108 	.word	0x20000108

08008920 <__sread>:
 8008920:	b510      	push	{r4, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008928:	f000 f868 	bl	80089fc <_read_r>
 800892c:	2800      	cmp	r0, #0
 800892e:	bfab      	itete	ge
 8008930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008932:	89a3      	ldrhlt	r3, [r4, #12]
 8008934:	181b      	addge	r3, r3, r0
 8008936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800893a:	bfac      	ite	ge
 800893c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800893e:	81a3      	strhlt	r3, [r4, #12]
 8008940:	bd10      	pop	{r4, pc}

08008942 <__swrite>:
 8008942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008946:	461f      	mov	r7, r3
 8008948:	898b      	ldrh	r3, [r1, #12]
 800894a:	05db      	lsls	r3, r3, #23
 800894c:	4605      	mov	r5, r0
 800894e:	460c      	mov	r4, r1
 8008950:	4616      	mov	r6, r2
 8008952:	d505      	bpl.n	8008960 <__swrite+0x1e>
 8008954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008958:	2302      	movs	r3, #2
 800895a:	2200      	movs	r2, #0
 800895c:	f000 f83c 	bl	80089d8 <_lseek_r>
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800896a:	81a3      	strh	r3, [r4, #12]
 800896c:	4632      	mov	r2, r6
 800896e:	463b      	mov	r3, r7
 8008970:	4628      	mov	r0, r5
 8008972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008976:	f000 b853 	b.w	8008a20 <_write_r>

0800897a <__sseek>:
 800897a:	b510      	push	{r4, lr}
 800897c:	460c      	mov	r4, r1
 800897e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008982:	f000 f829 	bl	80089d8 <_lseek_r>
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	89a3      	ldrh	r3, [r4, #12]
 800898a:	bf15      	itete	ne
 800898c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800898e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008996:	81a3      	strheq	r3, [r4, #12]
 8008998:	bf18      	it	ne
 800899a:	81a3      	strhne	r3, [r4, #12]
 800899c:	bd10      	pop	{r4, pc}

0800899e <__sclose>:
 800899e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a2:	f000 b809 	b.w	80089b8 <_close_r>

080089a6 <memset>:
 80089a6:	4402      	add	r2, r0
 80089a8:	4603      	mov	r3, r0
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d100      	bne.n	80089b0 <memset+0xa>
 80089ae:	4770      	bx	lr
 80089b0:	f803 1b01 	strb.w	r1, [r3], #1
 80089b4:	e7f9      	b.n	80089aa <memset+0x4>
	...

080089b8 <_close_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4d06      	ldr	r5, [pc, #24]	@ (80089d4 <_close_r+0x1c>)
 80089bc:	2300      	movs	r3, #0
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	f7f8 fb4f 	bl	8001066 <_close>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_close_r+0x1a>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_close_r+0x1a>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	20001f94 	.word	0x20001f94

080089d8 <_lseek_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d07      	ldr	r5, [pc, #28]	@ (80089f8 <_lseek_r+0x20>)
 80089dc:	4604      	mov	r4, r0
 80089de:	4608      	mov	r0, r1
 80089e0:	4611      	mov	r1, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	602a      	str	r2, [r5, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f7f8 fb64 	bl	80010b4 <_lseek>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_lseek_r+0x1e>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_lseek_r+0x1e>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	20001f94 	.word	0x20001f94

080089fc <_read_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d07      	ldr	r5, [pc, #28]	@ (8008a1c <_read_r+0x20>)
 8008a00:	4604      	mov	r4, r0
 8008a02:	4608      	mov	r0, r1
 8008a04:	4611      	mov	r1, r2
 8008a06:	2200      	movs	r2, #0
 8008a08:	602a      	str	r2, [r5, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f7f8 fb0e 	bl	800102c <_read>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_read_r+0x1e>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_read_r+0x1e>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	20001f94 	.word	0x20001f94

08008a20 <_write_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	@ (8008a40 <_write_r+0x20>)
 8008a24:	4604      	mov	r4, r0
 8008a26:	4608      	mov	r0, r1
 8008a28:	4611      	mov	r1, r2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	602a      	str	r2, [r5, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f7f7 fe3a 	bl	80006a8 <_write>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_write_r+0x1e>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_write_r+0x1e>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	20001f94 	.word	0x20001f94

08008a44 <__errno>:
 8008a44:	4b01      	ldr	r3, [pc, #4]	@ (8008a4c <__errno+0x8>)
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000108 	.word	0x20000108

08008a50 <__libc_init_array>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	4d0d      	ldr	r5, [pc, #52]	@ (8008a88 <__libc_init_array+0x38>)
 8008a54:	4c0d      	ldr	r4, [pc, #52]	@ (8008a8c <__libc_init_array+0x3c>)
 8008a56:	1b64      	subs	r4, r4, r5
 8008a58:	10a4      	asrs	r4, r4, #2
 8008a5a:	2600      	movs	r6, #0
 8008a5c:	42a6      	cmp	r6, r4
 8008a5e:	d109      	bne.n	8008a74 <__libc_init_array+0x24>
 8008a60:	4d0b      	ldr	r5, [pc, #44]	@ (8008a90 <__libc_init_array+0x40>)
 8008a62:	4c0c      	ldr	r4, [pc, #48]	@ (8008a94 <__libc_init_array+0x44>)
 8008a64:	f000 fdb6 	bl	80095d4 <_init>
 8008a68:	1b64      	subs	r4, r4, r5
 8008a6a:	10a4      	asrs	r4, r4, #2
 8008a6c:	2600      	movs	r6, #0
 8008a6e:	42a6      	cmp	r6, r4
 8008a70:	d105      	bne.n	8008a7e <__libc_init_array+0x2e>
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
 8008a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a78:	4798      	blx	r3
 8008a7a:	3601      	adds	r6, #1
 8008a7c:	e7ee      	b.n	8008a5c <__libc_init_array+0xc>
 8008a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a82:	4798      	blx	r3
 8008a84:	3601      	adds	r6, #1
 8008a86:	e7f2      	b.n	8008a6e <__libc_init_array+0x1e>
 8008a88:	080096e8 	.word	0x080096e8
 8008a8c:	080096e8 	.word	0x080096e8
 8008a90:	080096e8 	.word	0x080096e8
 8008a94:	080096ec 	.word	0x080096ec

08008a98 <__retarget_lock_init_recursive>:
 8008a98:	4770      	bx	lr

08008a9a <__retarget_lock_acquire_recursive>:
 8008a9a:	4770      	bx	lr

08008a9c <__retarget_lock_release_recursive>:
 8008a9c:	4770      	bx	lr
	...

08008aa0 <_free_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	d041      	beq.n	8008b2c <_free_r+0x8c>
 8008aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aac:	1f0c      	subs	r4, r1, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bfb8      	it	lt
 8008ab2:	18e4      	addlt	r4, r4, r3
 8008ab4:	f000 f8e0 	bl	8008c78 <__malloc_lock>
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b30 <_free_r+0x90>)
 8008aba:	6813      	ldr	r3, [r2, #0]
 8008abc:	b933      	cbnz	r3, 8008acc <_free_r+0x2c>
 8008abe:	6063      	str	r3, [r4, #4]
 8008ac0:	6014      	str	r4, [r2, #0]
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac8:	f000 b8dc 	b.w	8008c84 <__malloc_unlock>
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d908      	bls.n	8008ae2 <_free_r+0x42>
 8008ad0:	6820      	ldr	r0, [r4, #0]
 8008ad2:	1821      	adds	r1, r4, r0
 8008ad4:	428b      	cmp	r3, r1
 8008ad6:	bf01      	itttt	eq
 8008ad8:	6819      	ldreq	r1, [r3, #0]
 8008ada:	685b      	ldreq	r3, [r3, #4]
 8008adc:	1809      	addeq	r1, r1, r0
 8008ade:	6021      	streq	r1, [r4, #0]
 8008ae0:	e7ed      	b.n	8008abe <_free_r+0x1e>
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	b10b      	cbz	r3, 8008aec <_free_r+0x4c>
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d9fa      	bls.n	8008ae2 <_free_r+0x42>
 8008aec:	6811      	ldr	r1, [r2, #0]
 8008aee:	1850      	adds	r0, r2, r1
 8008af0:	42a0      	cmp	r0, r4
 8008af2:	d10b      	bne.n	8008b0c <_free_r+0x6c>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	4401      	add	r1, r0
 8008af8:	1850      	adds	r0, r2, r1
 8008afa:	4283      	cmp	r3, r0
 8008afc:	6011      	str	r1, [r2, #0]
 8008afe:	d1e0      	bne.n	8008ac2 <_free_r+0x22>
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	6053      	str	r3, [r2, #4]
 8008b06:	4408      	add	r0, r1
 8008b08:	6010      	str	r0, [r2, #0]
 8008b0a:	e7da      	b.n	8008ac2 <_free_r+0x22>
 8008b0c:	d902      	bls.n	8008b14 <_free_r+0x74>
 8008b0e:	230c      	movs	r3, #12
 8008b10:	602b      	str	r3, [r5, #0]
 8008b12:	e7d6      	b.n	8008ac2 <_free_r+0x22>
 8008b14:	6820      	ldr	r0, [r4, #0]
 8008b16:	1821      	adds	r1, r4, r0
 8008b18:	428b      	cmp	r3, r1
 8008b1a:	bf04      	itt	eq
 8008b1c:	6819      	ldreq	r1, [r3, #0]
 8008b1e:	685b      	ldreq	r3, [r3, #4]
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	bf04      	itt	eq
 8008b24:	1809      	addeq	r1, r1, r0
 8008b26:	6021      	streq	r1, [r4, #0]
 8008b28:	6054      	str	r4, [r2, #4]
 8008b2a:	e7ca      	b.n	8008ac2 <_free_r+0x22>
 8008b2c:	bd38      	pop	{r3, r4, r5, pc}
 8008b2e:	bf00      	nop
 8008b30:	20001fa0 	.word	0x20001fa0

08008b34 <sbrk_aligned>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4e0f      	ldr	r6, [pc, #60]	@ (8008b74 <sbrk_aligned+0x40>)
 8008b38:	460c      	mov	r4, r1
 8008b3a:	6831      	ldr	r1, [r6, #0]
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	b911      	cbnz	r1, 8008b46 <sbrk_aligned+0x12>
 8008b40:	f000 fcb4 	bl	80094ac <_sbrk_r>
 8008b44:	6030      	str	r0, [r6, #0]
 8008b46:	4621      	mov	r1, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 fcaf 	bl	80094ac <_sbrk_r>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	d103      	bne.n	8008b5a <sbrk_aligned+0x26>
 8008b52:	f04f 34ff 	mov.w	r4, #4294967295
 8008b56:	4620      	mov	r0, r4
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	1cc4      	adds	r4, r0, #3
 8008b5c:	f024 0403 	bic.w	r4, r4, #3
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d0f8      	beq.n	8008b56 <sbrk_aligned+0x22>
 8008b64:	1a21      	subs	r1, r4, r0
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fca0 	bl	80094ac <_sbrk_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d1f2      	bne.n	8008b56 <sbrk_aligned+0x22>
 8008b70:	e7ef      	b.n	8008b52 <sbrk_aligned+0x1e>
 8008b72:	bf00      	nop
 8008b74:	20001f9c 	.word	0x20001f9c

08008b78 <_malloc_r>:
 8008b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	1ccd      	adds	r5, r1, #3
 8008b7e:	f025 0503 	bic.w	r5, r5, #3
 8008b82:	3508      	adds	r5, #8
 8008b84:	2d0c      	cmp	r5, #12
 8008b86:	bf38      	it	cc
 8008b88:	250c      	movcc	r5, #12
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	db01      	blt.n	8008b94 <_malloc_r+0x1c>
 8008b90:	42a9      	cmp	r1, r5
 8008b92:	d904      	bls.n	8008b9e <_malloc_r+0x26>
 8008b94:	230c      	movs	r3, #12
 8008b96:	6033      	str	r3, [r6, #0]
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c74 <_malloc_r+0xfc>
 8008ba2:	f000 f869 	bl	8008c78 <__malloc_lock>
 8008ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8008baa:	461c      	mov	r4, r3
 8008bac:	bb44      	cbnz	r4, 8008c00 <_malloc_r+0x88>
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7ff ffbf 	bl	8008b34 <sbrk_aligned>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	4604      	mov	r4, r0
 8008bba:	d158      	bne.n	8008c6e <_malloc_r+0xf6>
 8008bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8008bc0:	4627      	mov	r7, r4
 8008bc2:	2f00      	cmp	r7, #0
 8008bc4:	d143      	bne.n	8008c4e <_malloc_r+0xd6>
 8008bc6:	2c00      	cmp	r4, #0
 8008bc8:	d04b      	beq.n	8008c62 <_malloc_r+0xea>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	4639      	mov	r1, r7
 8008bce:	4630      	mov	r0, r6
 8008bd0:	eb04 0903 	add.w	r9, r4, r3
 8008bd4:	f000 fc6a 	bl	80094ac <_sbrk_r>
 8008bd8:	4581      	cmp	r9, r0
 8008bda:	d142      	bne.n	8008c62 <_malloc_r+0xea>
 8008bdc:	6821      	ldr	r1, [r4, #0]
 8008bde:	1a6d      	subs	r5, r5, r1
 8008be0:	4629      	mov	r1, r5
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7ff ffa6 	bl	8008b34 <sbrk_aligned>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d03a      	beq.n	8008c62 <_malloc_r+0xea>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	442b      	add	r3, r5
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	bb62      	cbnz	r2, 8008c54 <_malloc_r+0xdc>
 8008bfa:	f8c8 7000 	str.w	r7, [r8]
 8008bfe:	e00f      	b.n	8008c20 <_malloc_r+0xa8>
 8008c00:	6822      	ldr	r2, [r4, #0]
 8008c02:	1b52      	subs	r2, r2, r5
 8008c04:	d420      	bmi.n	8008c48 <_malloc_r+0xd0>
 8008c06:	2a0b      	cmp	r2, #11
 8008c08:	d917      	bls.n	8008c3a <_malloc_r+0xc2>
 8008c0a:	1961      	adds	r1, r4, r5
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	6025      	str	r5, [r4, #0]
 8008c10:	bf18      	it	ne
 8008c12:	6059      	strne	r1, [r3, #4]
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	bf08      	it	eq
 8008c18:	f8c8 1000 	streq.w	r1, [r8]
 8008c1c:	5162      	str	r2, [r4, r5]
 8008c1e:	604b      	str	r3, [r1, #4]
 8008c20:	4630      	mov	r0, r6
 8008c22:	f000 f82f 	bl	8008c84 <__malloc_unlock>
 8008c26:	f104 000b 	add.w	r0, r4, #11
 8008c2a:	1d23      	adds	r3, r4, #4
 8008c2c:	f020 0007 	bic.w	r0, r0, #7
 8008c30:	1ac2      	subs	r2, r0, r3
 8008c32:	bf1c      	itt	ne
 8008c34:	1a1b      	subne	r3, r3, r0
 8008c36:	50a3      	strne	r3, [r4, r2]
 8008c38:	e7af      	b.n	8008b9a <_malloc_r+0x22>
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	bf0c      	ite	eq
 8008c40:	f8c8 2000 	streq.w	r2, [r8]
 8008c44:	605a      	strne	r2, [r3, #4]
 8008c46:	e7eb      	b.n	8008c20 <_malloc_r+0xa8>
 8008c48:	4623      	mov	r3, r4
 8008c4a:	6864      	ldr	r4, [r4, #4]
 8008c4c:	e7ae      	b.n	8008bac <_malloc_r+0x34>
 8008c4e:	463c      	mov	r4, r7
 8008c50:	687f      	ldr	r7, [r7, #4]
 8008c52:	e7b6      	b.n	8008bc2 <_malloc_r+0x4a>
 8008c54:	461a      	mov	r2, r3
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	42a3      	cmp	r3, r4
 8008c5a:	d1fb      	bne.n	8008c54 <_malloc_r+0xdc>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6053      	str	r3, [r2, #4]
 8008c60:	e7de      	b.n	8008c20 <_malloc_r+0xa8>
 8008c62:	230c      	movs	r3, #12
 8008c64:	6033      	str	r3, [r6, #0]
 8008c66:	4630      	mov	r0, r6
 8008c68:	f000 f80c 	bl	8008c84 <__malloc_unlock>
 8008c6c:	e794      	b.n	8008b98 <_malloc_r+0x20>
 8008c6e:	6005      	str	r5, [r0, #0]
 8008c70:	e7d6      	b.n	8008c20 <_malloc_r+0xa8>
 8008c72:	bf00      	nop
 8008c74:	20001fa0 	.word	0x20001fa0

08008c78 <__malloc_lock>:
 8008c78:	4801      	ldr	r0, [pc, #4]	@ (8008c80 <__malloc_lock+0x8>)
 8008c7a:	f7ff bf0e 	b.w	8008a9a <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	20001f98 	.word	0x20001f98

08008c84 <__malloc_unlock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	@ (8008c8c <__malloc_unlock+0x8>)
 8008c86:	f7ff bf09 	b.w	8008a9c <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20001f98 	.word	0x20001f98

08008c90 <__sfputc_r>:
 8008c90:	6893      	ldr	r3, [r2, #8]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	b410      	push	{r4}
 8008c98:	6093      	str	r3, [r2, #8]
 8008c9a:	da08      	bge.n	8008cae <__sfputc_r+0x1e>
 8008c9c:	6994      	ldr	r4, [r2, #24]
 8008c9e:	42a3      	cmp	r3, r4
 8008ca0:	db01      	blt.n	8008ca6 <__sfputc_r+0x16>
 8008ca2:	290a      	cmp	r1, #10
 8008ca4:	d103      	bne.n	8008cae <__sfputc_r+0x1e>
 8008ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008caa:	f000 bb6b 	b.w	8009384 <__swbuf_r>
 8008cae:	6813      	ldr	r3, [r2, #0]
 8008cb0:	1c58      	adds	r0, r3, #1
 8008cb2:	6010      	str	r0, [r2, #0]
 8008cb4:	7019      	strb	r1, [r3, #0]
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <__sfputs_r>:
 8008cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	460f      	mov	r7, r1
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	18d5      	adds	r5, r2, r3
 8008cc8:	42ac      	cmp	r4, r5
 8008cca:	d101      	bne.n	8008cd0 <__sfputs_r+0x12>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e007      	b.n	8008ce0 <__sfputs_r+0x22>
 8008cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f7ff ffda 	bl	8008c90 <__sfputc_r>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d1f3      	bne.n	8008cc8 <__sfputs_r+0xa>
 8008ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ce4 <_vfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	460d      	mov	r5, r1
 8008cea:	b09d      	sub	sp, #116	@ 0x74
 8008cec:	4614      	mov	r4, r2
 8008cee:	4698      	mov	r8, r3
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	b118      	cbz	r0, 8008cfc <_vfiprintf_r+0x18>
 8008cf4:	6a03      	ldr	r3, [r0, #32]
 8008cf6:	b90b      	cbnz	r3, 8008cfc <_vfiprintf_r+0x18>
 8008cf8:	f7ff fdca 	bl	8008890 <__sinit>
 8008cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cfe:	07d9      	lsls	r1, r3, #31
 8008d00:	d405      	bmi.n	8008d0e <_vfiprintf_r+0x2a>
 8008d02:	89ab      	ldrh	r3, [r5, #12]
 8008d04:	059a      	lsls	r2, r3, #22
 8008d06:	d402      	bmi.n	8008d0e <_vfiprintf_r+0x2a>
 8008d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d0a:	f7ff fec6 	bl	8008a9a <__retarget_lock_acquire_recursive>
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	071b      	lsls	r3, r3, #28
 8008d12:	d501      	bpl.n	8008d18 <_vfiprintf_r+0x34>
 8008d14:	692b      	ldr	r3, [r5, #16]
 8008d16:	b99b      	cbnz	r3, 8008d40 <_vfiprintf_r+0x5c>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f000 fb70 	bl	8009400 <__swsetup_r>
 8008d20:	b170      	cbz	r0, 8008d40 <_vfiprintf_r+0x5c>
 8008d22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d24:	07dc      	lsls	r4, r3, #31
 8008d26:	d504      	bpl.n	8008d32 <_vfiprintf_r+0x4e>
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	b01d      	add	sp, #116	@ 0x74
 8008d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d32:	89ab      	ldrh	r3, [r5, #12]
 8008d34:	0598      	lsls	r0, r3, #22
 8008d36:	d4f7      	bmi.n	8008d28 <_vfiprintf_r+0x44>
 8008d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d3a:	f7ff feaf 	bl	8008a9c <__retarget_lock_release_recursive>
 8008d3e:	e7f3      	b.n	8008d28 <_vfiprintf_r+0x44>
 8008d40:	2300      	movs	r3, #0
 8008d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d44:	2320      	movs	r3, #32
 8008d46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4e:	2330      	movs	r3, #48	@ 0x30
 8008d50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f00 <_vfiprintf_r+0x21c>
 8008d54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d58:	f04f 0901 	mov.w	r9, #1
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	469a      	mov	sl, r3
 8008d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d64:	b10a      	cbz	r2, 8008d6a <_vfiprintf_r+0x86>
 8008d66:	2a25      	cmp	r2, #37	@ 0x25
 8008d68:	d1f9      	bne.n	8008d5e <_vfiprintf_r+0x7a>
 8008d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6e:	d00b      	beq.n	8008d88 <_vfiprintf_r+0xa4>
 8008d70:	465b      	mov	r3, fp
 8008d72:	4622      	mov	r2, r4
 8008d74:	4629      	mov	r1, r5
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff ffa1 	bl	8008cbe <__sfputs_r>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f000 80a7 	beq.w	8008ed0 <_vfiprintf_r+0x1ec>
 8008d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d84:	445a      	add	r2, fp
 8008d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d88:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 809f 	beq.w	8008ed0 <_vfiprintf_r+0x1ec>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f04f 32ff 	mov.w	r2, #4294967295
 8008d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9c:	f10a 0a01 	add.w	sl, sl, #1
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	9307      	str	r3, [sp, #28]
 8008da4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008da8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008daa:	4654      	mov	r4, sl
 8008dac:	2205      	movs	r2, #5
 8008dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db2:	4853      	ldr	r0, [pc, #332]	@ (8008f00 <_vfiprintf_r+0x21c>)
 8008db4:	f7f7 fa0c 	bl	80001d0 <memchr>
 8008db8:	9a04      	ldr	r2, [sp, #16]
 8008dba:	b9d8      	cbnz	r0, 8008df4 <_vfiprintf_r+0x110>
 8008dbc:	06d1      	lsls	r1, r2, #27
 8008dbe:	bf44      	itt	mi
 8008dc0:	2320      	movmi	r3, #32
 8008dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc6:	0713      	lsls	r3, r2, #28
 8008dc8:	bf44      	itt	mi
 8008dca:	232b      	movmi	r3, #43	@ 0x2b
 8008dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd6:	d015      	beq.n	8008e04 <_vfiprintf_r+0x120>
 8008dd8:	9a07      	ldr	r2, [sp, #28]
 8008dda:	4654      	mov	r4, sl
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f04f 0c0a 	mov.w	ip, #10
 8008de2:	4621      	mov	r1, r4
 8008de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de8:	3b30      	subs	r3, #48	@ 0x30
 8008dea:	2b09      	cmp	r3, #9
 8008dec:	d94b      	bls.n	8008e86 <_vfiprintf_r+0x1a2>
 8008dee:	b1b0      	cbz	r0, 8008e1e <_vfiprintf_r+0x13a>
 8008df0:	9207      	str	r2, [sp, #28]
 8008df2:	e014      	b.n	8008e1e <_vfiprintf_r+0x13a>
 8008df4:	eba0 0308 	sub.w	r3, r0, r8
 8008df8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	46a2      	mov	sl, r4
 8008e02:	e7d2      	b.n	8008daa <_vfiprintf_r+0xc6>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	1d19      	adds	r1, r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	9103      	str	r1, [sp, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfbb      	ittet	lt
 8008e10:	425b      	neglt	r3, r3
 8008e12:	f042 0202 	orrlt.w	r2, r2, #2
 8008e16:	9307      	strge	r3, [sp, #28]
 8008e18:	9307      	strlt	r3, [sp, #28]
 8008e1a:	bfb8      	it	lt
 8008e1c:	9204      	strlt	r2, [sp, #16]
 8008e1e:	7823      	ldrb	r3, [r4, #0]
 8008e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e22:	d10a      	bne.n	8008e3a <_vfiprintf_r+0x156>
 8008e24:	7863      	ldrb	r3, [r4, #1]
 8008e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e28:	d132      	bne.n	8008e90 <_vfiprintf_r+0x1ac>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	1d1a      	adds	r2, r3, #4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	9203      	str	r2, [sp, #12]
 8008e32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e36:	3402      	adds	r4, #2
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f10 <_vfiprintf_r+0x22c>
 8008e3e:	7821      	ldrb	r1, [r4, #0]
 8008e40:	2203      	movs	r2, #3
 8008e42:	4650      	mov	r0, sl
 8008e44:	f7f7 f9c4 	bl	80001d0 <memchr>
 8008e48:	b138      	cbz	r0, 8008e5a <_vfiprintf_r+0x176>
 8008e4a:	9b04      	ldr	r3, [sp, #16]
 8008e4c:	eba0 000a 	sub.w	r0, r0, sl
 8008e50:	2240      	movs	r2, #64	@ 0x40
 8008e52:	4082      	lsls	r2, r0
 8008e54:	4313      	orrs	r3, r2
 8008e56:	3401      	adds	r4, #1
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5e:	4829      	ldr	r0, [pc, #164]	@ (8008f04 <_vfiprintf_r+0x220>)
 8008e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e64:	2206      	movs	r2, #6
 8008e66:	f7f7 f9b3 	bl	80001d0 <memchr>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d03f      	beq.n	8008eee <_vfiprintf_r+0x20a>
 8008e6e:	4b26      	ldr	r3, [pc, #152]	@ (8008f08 <_vfiprintf_r+0x224>)
 8008e70:	bb1b      	cbnz	r3, 8008eba <_vfiprintf_r+0x1d6>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	3307      	adds	r3, #7
 8008e76:	f023 0307 	bic.w	r3, r3, #7
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e80:	443b      	add	r3, r7
 8008e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e84:	e76a      	b.n	8008d5c <_vfiprintf_r+0x78>
 8008e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	e7a8      	b.n	8008de2 <_vfiprintf_r+0xfe>
 8008e90:	2300      	movs	r3, #0
 8008e92:	3401      	adds	r4, #1
 8008e94:	9305      	str	r3, [sp, #20]
 8008e96:	4619      	mov	r1, r3
 8008e98:	f04f 0c0a 	mov.w	ip, #10
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea2:	3a30      	subs	r2, #48	@ 0x30
 8008ea4:	2a09      	cmp	r2, #9
 8008ea6:	d903      	bls.n	8008eb0 <_vfiprintf_r+0x1cc>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0c6      	beq.n	8008e3a <_vfiprintf_r+0x156>
 8008eac:	9105      	str	r1, [sp, #20]
 8008eae:	e7c4      	b.n	8008e3a <_vfiprintf_r+0x156>
 8008eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e7f0      	b.n	8008e9c <_vfiprintf_r+0x1b8>
 8008eba:	ab03      	add	r3, sp, #12
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	462a      	mov	r2, r5
 8008ec0:	4b12      	ldr	r3, [pc, #72]	@ (8008f0c <_vfiprintf_r+0x228>)
 8008ec2:	a904      	add	r1, sp, #16
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f3af 8000 	nop.w
 8008eca:	4607      	mov	r7, r0
 8008ecc:	1c78      	adds	r0, r7, #1
 8008ece:	d1d6      	bne.n	8008e7e <_vfiprintf_r+0x19a>
 8008ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ed2:	07d9      	lsls	r1, r3, #31
 8008ed4:	d405      	bmi.n	8008ee2 <_vfiprintf_r+0x1fe>
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	059a      	lsls	r2, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_vfiprintf_r+0x1fe>
 8008edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ede:	f7ff fddd 	bl	8008a9c <__retarget_lock_release_recursive>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	065b      	lsls	r3, r3, #25
 8008ee6:	f53f af1f 	bmi.w	8008d28 <_vfiprintf_r+0x44>
 8008eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eec:	e71e      	b.n	8008d2c <_vfiprintf_r+0x48>
 8008eee:	ab03      	add	r3, sp, #12
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <_vfiprintf_r+0x228>)
 8008ef6:	a904      	add	r1, sp, #16
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f000 f879 	bl	8008ff0 <_printf_i>
 8008efe:	e7e4      	b.n	8008eca <_vfiprintf_r+0x1e6>
 8008f00:	080096ac 	.word	0x080096ac
 8008f04:	080096b6 	.word	0x080096b6
 8008f08:	00000000 	.word	0x00000000
 8008f0c:	08008cbf 	.word	0x08008cbf
 8008f10:	080096b2 	.word	0x080096b2

08008f14 <_printf_common>:
 8008f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	4616      	mov	r6, r2
 8008f1a:	4698      	mov	r8, r3
 8008f1c:	688a      	ldr	r2, [r1, #8]
 8008f1e:	690b      	ldr	r3, [r1, #16]
 8008f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f24:	4293      	cmp	r3, r2
 8008f26:	bfb8      	it	lt
 8008f28:	4613      	movlt	r3, r2
 8008f2a:	6033      	str	r3, [r6, #0]
 8008f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f30:	4607      	mov	r7, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	b10a      	cbz	r2, 8008f3a <_printf_common+0x26>
 8008f36:	3301      	adds	r3, #1
 8008f38:	6033      	str	r3, [r6, #0]
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	0699      	lsls	r1, r3, #26
 8008f3e:	bf42      	ittt	mi
 8008f40:	6833      	ldrmi	r3, [r6, #0]
 8008f42:	3302      	addmi	r3, #2
 8008f44:	6033      	strmi	r3, [r6, #0]
 8008f46:	6825      	ldr	r5, [r4, #0]
 8008f48:	f015 0506 	ands.w	r5, r5, #6
 8008f4c:	d106      	bne.n	8008f5c <_printf_common+0x48>
 8008f4e:	f104 0a19 	add.w	sl, r4, #25
 8008f52:	68e3      	ldr	r3, [r4, #12]
 8008f54:	6832      	ldr	r2, [r6, #0]
 8008f56:	1a9b      	subs	r3, r3, r2
 8008f58:	42ab      	cmp	r3, r5
 8008f5a:	dc26      	bgt.n	8008faa <_printf_common+0x96>
 8008f5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f60:	6822      	ldr	r2, [r4, #0]
 8008f62:	3b00      	subs	r3, #0
 8008f64:	bf18      	it	ne
 8008f66:	2301      	movne	r3, #1
 8008f68:	0692      	lsls	r2, r2, #26
 8008f6a:	d42b      	bmi.n	8008fc4 <_printf_common+0xb0>
 8008f6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f70:	4641      	mov	r1, r8
 8008f72:	4638      	mov	r0, r7
 8008f74:	47c8      	blx	r9
 8008f76:	3001      	adds	r0, #1
 8008f78:	d01e      	beq.n	8008fb8 <_printf_common+0xa4>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	6922      	ldr	r2, [r4, #16]
 8008f7e:	f003 0306 	and.w	r3, r3, #6
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	bf02      	ittt	eq
 8008f86:	68e5      	ldreq	r5, [r4, #12]
 8008f88:	6833      	ldreq	r3, [r6, #0]
 8008f8a:	1aed      	subeq	r5, r5, r3
 8008f8c:	68a3      	ldr	r3, [r4, #8]
 8008f8e:	bf0c      	ite	eq
 8008f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f94:	2500      	movne	r5, #0
 8008f96:	4293      	cmp	r3, r2
 8008f98:	bfc4      	itt	gt
 8008f9a:	1a9b      	subgt	r3, r3, r2
 8008f9c:	18ed      	addgt	r5, r5, r3
 8008f9e:	2600      	movs	r6, #0
 8008fa0:	341a      	adds	r4, #26
 8008fa2:	42b5      	cmp	r5, r6
 8008fa4:	d11a      	bne.n	8008fdc <_printf_common+0xc8>
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e008      	b.n	8008fbc <_printf_common+0xa8>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4652      	mov	r2, sl
 8008fae:	4641      	mov	r1, r8
 8008fb0:	4638      	mov	r0, r7
 8008fb2:	47c8      	blx	r9
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d103      	bne.n	8008fc0 <_printf_common+0xac>
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	e7c6      	b.n	8008f52 <_printf_common+0x3e>
 8008fc4:	18e1      	adds	r1, r4, r3
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	2030      	movs	r0, #48	@ 0x30
 8008fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fce:	4422      	add	r2, r4
 8008fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fd8:	3302      	adds	r3, #2
 8008fda:	e7c7      	b.n	8008f6c <_printf_common+0x58>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	4622      	mov	r2, r4
 8008fe0:	4641      	mov	r1, r8
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	47c8      	blx	r9
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	d0e6      	beq.n	8008fb8 <_printf_common+0xa4>
 8008fea:	3601      	adds	r6, #1
 8008fec:	e7d9      	b.n	8008fa2 <_printf_common+0x8e>
	...

08008ff0 <_printf_i>:
 8008ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff4:	7e0f      	ldrb	r7, [r1, #24]
 8008ff6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ff8:	2f78      	cmp	r7, #120	@ 0x78
 8008ffa:	4691      	mov	r9, r2
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	469a      	mov	sl, r3
 8009002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009006:	d807      	bhi.n	8009018 <_printf_i+0x28>
 8009008:	2f62      	cmp	r7, #98	@ 0x62
 800900a:	d80a      	bhi.n	8009022 <_printf_i+0x32>
 800900c:	2f00      	cmp	r7, #0
 800900e:	f000 80d1 	beq.w	80091b4 <_printf_i+0x1c4>
 8009012:	2f58      	cmp	r7, #88	@ 0x58
 8009014:	f000 80b8 	beq.w	8009188 <_printf_i+0x198>
 8009018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800901c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009020:	e03a      	b.n	8009098 <_printf_i+0xa8>
 8009022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009026:	2b15      	cmp	r3, #21
 8009028:	d8f6      	bhi.n	8009018 <_printf_i+0x28>
 800902a:	a101      	add	r1, pc, #4	@ (adr r1, 8009030 <_printf_i+0x40>)
 800902c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009030:	08009089 	.word	0x08009089
 8009034:	0800909d 	.word	0x0800909d
 8009038:	08009019 	.word	0x08009019
 800903c:	08009019 	.word	0x08009019
 8009040:	08009019 	.word	0x08009019
 8009044:	08009019 	.word	0x08009019
 8009048:	0800909d 	.word	0x0800909d
 800904c:	08009019 	.word	0x08009019
 8009050:	08009019 	.word	0x08009019
 8009054:	08009019 	.word	0x08009019
 8009058:	08009019 	.word	0x08009019
 800905c:	0800919b 	.word	0x0800919b
 8009060:	080090c7 	.word	0x080090c7
 8009064:	08009155 	.word	0x08009155
 8009068:	08009019 	.word	0x08009019
 800906c:	08009019 	.word	0x08009019
 8009070:	080091bd 	.word	0x080091bd
 8009074:	08009019 	.word	0x08009019
 8009078:	080090c7 	.word	0x080090c7
 800907c:	08009019 	.word	0x08009019
 8009080:	08009019 	.word	0x08009019
 8009084:	0800915d 	.word	0x0800915d
 8009088:	6833      	ldr	r3, [r6, #0]
 800908a:	1d1a      	adds	r2, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6032      	str	r2, [r6, #0]
 8009090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009098:	2301      	movs	r3, #1
 800909a:	e09c      	b.n	80091d6 <_printf_i+0x1e6>
 800909c:	6833      	ldr	r3, [r6, #0]
 800909e:	6820      	ldr	r0, [r4, #0]
 80090a0:	1d19      	adds	r1, r3, #4
 80090a2:	6031      	str	r1, [r6, #0]
 80090a4:	0606      	lsls	r6, r0, #24
 80090a6:	d501      	bpl.n	80090ac <_printf_i+0xbc>
 80090a8:	681d      	ldr	r5, [r3, #0]
 80090aa:	e003      	b.n	80090b4 <_printf_i+0xc4>
 80090ac:	0645      	lsls	r5, r0, #25
 80090ae:	d5fb      	bpl.n	80090a8 <_printf_i+0xb8>
 80090b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	da03      	bge.n	80090c0 <_printf_i+0xd0>
 80090b8:	232d      	movs	r3, #45	@ 0x2d
 80090ba:	426d      	negs	r5, r5
 80090bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090c0:	4858      	ldr	r0, [pc, #352]	@ (8009224 <_printf_i+0x234>)
 80090c2:	230a      	movs	r3, #10
 80090c4:	e011      	b.n	80090ea <_printf_i+0xfa>
 80090c6:	6821      	ldr	r1, [r4, #0]
 80090c8:	6833      	ldr	r3, [r6, #0]
 80090ca:	0608      	lsls	r0, r1, #24
 80090cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80090d0:	d402      	bmi.n	80090d8 <_printf_i+0xe8>
 80090d2:	0649      	lsls	r1, r1, #25
 80090d4:	bf48      	it	mi
 80090d6:	b2ad      	uxthmi	r5, r5
 80090d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80090da:	4852      	ldr	r0, [pc, #328]	@ (8009224 <_printf_i+0x234>)
 80090dc:	6033      	str	r3, [r6, #0]
 80090de:	bf14      	ite	ne
 80090e0:	230a      	movne	r3, #10
 80090e2:	2308      	moveq	r3, #8
 80090e4:	2100      	movs	r1, #0
 80090e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090ea:	6866      	ldr	r6, [r4, #4]
 80090ec:	60a6      	str	r6, [r4, #8]
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	db05      	blt.n	80090fe <_printf_i+0x10e>
 80090f2:	6821      	ldr	r1, [r4, #0]
 80090f4:	432e      	orrs	r6, r5
 80090f6:	f021 0104 	bic.w	r1, r1, #4
 80090fa:	6021      	str	r1, [r4, #0]
 80090fc:	d04b      	beq.n	8009196 <_printf_i+0x1a6>
 80090fe:	4616      	mov	r6, r2
 8009100:	fbb5 f1f3 	udiv	r1, r5, r3
 8009104:	fb03 5711 	mls	r7, r3, r1, r5
 8009108:	5dc7      	ldrb	r7, [r0, r7]
 800910a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800910e:	462f      	mov	r7, r5
 8009110:	42bb      	cmp	r3, r7
 8009112:	460d      	mov	r5, r1
 8009114:	d9f4      	bls.n	8009100 <_printf_i+0x110>
 8009116:	2b08      	cmp	r3, #8
 8009118:	d10b      	bne.n	8009132 <_printf_i+0x142>
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	07df      	lsls	r7, r3, #31
 800911e:	d508      	bpl.n	8009132 <_printf_i+0x142>
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	6861      	ldr	r1, [r4, #4]
 8009124:	4299      	cmp	r1, r3
 8009126:	bfde      	ittt	le
 8009128:	2330      	movle	r3, #48	@ 0x30
 800912a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800912e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009132:	1b92      	subs	r2, r2, r6
 8009134:	6122      	str	r2, [r4, #16]
 8009136:	f8cd a000 	str.w	sl, [sp]
 800913a:	464b      	mov	r3, r9
 800913c:	aa03      	add	r2, sp, #12
 800913e:	4621      	mov	r1, r4
 8009140:	4640      	mov	r0, r8
 8009142:	f7ff fee7 	bl	8008f14 <_printf_common>
 8009146:	3001      	adds	r0, #1
 8009148:	d14a      	bne.n	80091e0 <_printf_i+0x1f0>
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	b004      	add	sp, #16
 8009150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	f043 0320 	orr.w	r3, r3, #32
 800915a:	6023      	str	r3, [r4, #0]
 800915c:	4832      	ldr	r0, [pc, #200]	@ (8009228 <_printf_i+0x238>)
 800915e:	2778      	movs	r7, #120	@ 0x78
 8009160:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	061f      	lsls	r7, r3, #24
 800916a:	f851 5b04 	ldr.w	r5, [r1], #4
 800916e:	d402      	bmi.n	8009176 <_printf_i+0x186>
 8009170:	065f      	lsls	r7, r3, #25
 8009172:	bf48      	it	mi
 8009174:	b2ad      	uxthmi	r5, r5
 8009176:	6031      	str	r1, [r6, #0]
 8009178:	07d9      	lsls	r1, r3, #31
 800917a:	bf44      	itt	mi
 800917c:	f043 0320 	orrmi.w	r3, r3, #32
 8009180:	6023      	strmi	r3, [r4, #0]
 8009182:	b11d      	cbz	r5, 800918c <_printf_i+0x19c>
 8009184:	2310      	movs	r3, #16
 8009186:	e7ad      	b.n	80090e4 <_printf_i+0xf4>
 8009188:	4826      	ldr	r0, [pc, #152]	@ (8009224 <_printf_i+0x234>)
 800918a:	e7e9      	b.n	8009160 <_printf_i+0x170>
 800918c:	6823      	ldr	r3, [r4, #0]
 800918e:	f023 0320 	bic.w	r3, r3, #32
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	e7f6      	b.n	8009184 <_printf_i+0x194>
 8009196:	4616      	mov	r6, r2
 8009198:	e7bd      	b.n	8009116 <_printf_i+0x126>
 800919a:	6833      	ldr	r3, [r6, #0]
 800919c:	6825      	ldr	r5, [r4, #0]
 800919e:	6961      	ldr	r1, [r4, #20]
 80091a0:	1d18      	adds	r0, r3, #4
 80091a2:	6030      	str	r0, [r6, #0]
 80091a4:	062e      	lsls	r6, r5, #24
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	d501      	bpl.n	80091ae <_printf_i+0x1be>
 80091aa:	6019      	str	r1, [r3, #0]
 80091ac:	e002      	b.n	80091b4 <_printf_i+0x1c4>
 80091ae:	0668      	lsls	r0, r5, #25
 80091b0:	d5fb      	bpl.n	80091aa <_printf_i+0x1ba>
 80091b2:	8019      	strh	r1, [r3, #0]
 80091b4:	2300      	movs	r3, #0
 80091b6:	6123      	str	r3, [r4, #16]
 80091b8:	4616      	mov	r6, r2
 80091ba:	e7bc      	b.n	8009136 <_printf_i+0x146>
 80091bc:	6833      	ldr	r3, [r6, #0]
 80091be:	1d1a      	adds	r2, r3, #4
 80091c0:	6032      	str	r2, [r6, #0]
 80091c2:	681e      	ldr	r6, [r3, #0]
 80091c4:	6862      	ldr	r2, [r4, #4]
 80091c6:	2100      	movs	r1, #0
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7f7 f801 	bl	80001d0 <memchr>
 80091ce:	b108      	cbz	r0, 80091d4 <_printf_i+0x1e4>
 80091d0:	1b80      	subs	r0, r0, r6
 80091d2:	6060      	str	r0, [r4, #4]
 80091d4:	6863      	ldr	r3, [r4, #4]
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	2300      	movs	r3, #0
 80091da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091de:	e7aa      	b.n	8009136 <_printf_i+0x146>
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	4632      	mov	r2, r6
 80091e4:	4649      	mov	r1, r9
 80091e6:	4640      	mov	r0, r8
 80091e8:	47d0      	blx	sl
 80091ea:	3001      	adds	r0, #1
 80091ec:	d0ad      	beq.n	800914a <_printf_i+0x15a>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	079b      	lsls	r3, r3, #30
 80091f2:	d413      	bmi.n	800921c <_printf_i+0x22c>
 80091f4:	68e0      	ldr	r0, [r4, #12]
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	4298      	cmp	r0, r3
 80091fa:	bfb8      	it	lt
 80091fc:	4618      	movlt	r0, r3
 80091fe:	e7a6      	b.n	800914e <_printf_i+0x15e>
 8009200:	2301      	movs	r3, #1
 8009202:	4632      	mov	r2, r6
 8009204:	4649      	mov	r1, r9
 8009206:	4640      	mov	r0, r8
 8009208:	47d0      	blx	sl
 800920a:	3001      	adds	r0, #1
 800920c:	d09d      	beq.n	800914a <_printf_i+0x15a>
 800920e:	3501      	adds	r5, #1
 8009210:	68e3      	ldr	r3, [r4, #12]
 8009212:	9903      	ldr	r1, [sp, #12]
 8009214:	1a5b      	subs	r3, r3, r1
 8009216:	42ab      	cmp	r3, r5
 8009218:	dcf2      	bgt.n	8009200 <_printf_i+0x210>
 800921a:	e7eb      	b.n	80091f4 <_printf_i+0x204>
 800921c:	2500      	movs	r5, #0
 800921e:	f104 0619 	add.w	r6, r4, #25
 8009222:	e7f5      	b.n	8009210 <_printf_i+0x220>
 8009224:	080096bd 	.word	0x080096bd
 8009228:	080096ce 	.word	0x080096ce

0800922c <__sflush_r>:
 800922c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009234:	0716      	lsls	r6, r2, #28
 8009236:	4605      	mov	r5, r0
 8009238:	460c      	mov	r4, r1
 800923a:	d454      	bmi.n	80092e6 <__sflush_r+0xba>
 800923c:	684b      	ldr	r3, [r1, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	dc02      	bgt.n	8009248 <__sflush_r+0x1c>
 8009242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd48      	ble.n	80092da <__sflush_r+0xae>
 8009248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800924a:	2e00      	cmp	r6, #0
 800924c:	d045      	beq.n	80092da <__sflush_r+0xae>
 800924e:	2300      	movs	r3, #0
 8009250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009254:	682f      	ldr	r7, [r5, #0]
 8009256:	6a21      	ldr	r1, [r4, #32]
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	d030      	beq.n	80092be <__sflush_r+0x92>
 800925c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	0759      	lsls	r1, r3, #29
 8009262:	d505      	bpl.n	8009270 <__sflush_r+0x44>
 8009264:	6863      	ldr	r3, [r4, #4]
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800926a:	b10b      	cbz	r3, 8009270 <__sflush_r+0x44>
 800926c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	2300      	movs	r3, #0
 8009272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009274:	6a21      	ldr	r1, [r4, #32]
 8009276:	4628      	mov	r0, r5
 8009278:	47b0      	blx	r6
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	d106      	bne.n	800928e <__sflush_r+0x62>
 8009280:	6829      	ldr	r1, [r5, #0]
 8009282:	291d      	cmp	r1, #29
 8009284:	d82b      	bhi.n	80092de <__sflush_r+0xb2>
 8009286:	4a2a      	ldr	r2, [pc, #168]	@ (8009330 <__sflush_r+0x104>)
 8009288:	40ca      	lsrs	r2, r1
 800928a:	07d6      	lsls	r6, r2, #31
 800928c:	d527      	bpl.n	80092de <__sflush_r+0xb2>
 800928e:	2200      	movs	r2, #0
 8009290:	6062      	str	r2, [r4, #4]
 8009292:	04d9      	lsls	r1, r3, #19
 8009294:	6922      	ldr	r2, [r4, #16]
 8009296:	6022      	str	r2, [r4, #0]
 8009298:	d504      	bpl.n	80092a4 <__sflush_r+0x78>
 800929a:	1c42      	adds	r2, r0, #1
 800929c:	d101      	bne.n	80092a2 <__sflush_r+0x76>
 800929e:	682b      	ldr	r3, [r5, #0]
 80092a0:	b903      	cbnz	r3, 80092a4 <__sflush_r+0x78>
 80092a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80092a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092a6:	602f      	str	r7, [r5, #0]
 80092a8:	b1b9      	cbz	r1, 80092da <__sflush_r+0xae>
 80092aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ae:	4299      	cmp	r1, r3
 80092b0:	d002      	beq.n	80092b8 <__sflush_r+0x8c>
 80092b2:	4628      	mov	r0, r5
 80092b4:	f7ff fbf4 	bl	8008aa0 <_free_r>
 80092b8:	2300      	movs	r3, #0
 80092ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80092bc:	e00d      	b.n	80092da <__sflush_r+0xae>
 80092be:	2301      	movs	r3, #1
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b0      	blx	r6
 80092c4:	4602      	mov	r2, r0
 80092c6:	1c50      	adds	r0, r2, #1
 80092c8:	d1c9      	bne.n	800925e <__sflush_r+0x32>
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0c6      	beq.n	800925e <__sflush_r+0x32>
 80092d0:	2b1d      	cmp	r3, #29
 80092d2:	d001      	beq.n	80092d8 <__sflush_r+0xac>
 80092d4:	2b16      	cmp	r3, #22
 80092d6:	d11e      	bne.n	8009316 <__sflush_r+0xea>
 80092d8:	602f      	str	r7, [r5, #0]
 80092da:	2000      	movs	r0, #0
 80092dc:	e022      	b.n	8009324 <__sflush_r+0xf8>
 80092de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092e2:	b21b      	sxth	r3, r3
 80092e4:	e01b      	b.n	800931e <__sflush_r+0xf2>
 80092e6:	690f      	ldr	r7, [r1, #16]
 80092e8:	2f00      	cmp	r7, #0
 80092ea:	d0f6      	beq.n	80092da <__sflush_r+0xae>
 80092ec:	0793      	lsls	r3, r2, #30
 80092ee:	680e      	ldr	r6, [r1, #0]
 80092f0:	bf08      	it	eq
 80092f2:	694b      	ldreq	r3, [r1, #20]
 80092f4:	600f      	str	r7, [r1, #0]
 80092f6:	bf18      	it	ne
 80092f8:	2300      	movne	r3, #0
 80092fa:	eba6 0807 	sub.w	r8, r6, r7
 80092fe:	608b      	str	r3, [r1, #8]
 8009300:	f1b8 0f00 	cmp.w	r8, #0
 8009304:	dde9      	ble.n	80092da <__sflush_r+0xae>
 8009306:	6a21      	ldr	r1, [r4, #32]
 8009308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800930a:	4643      	mov	r3, r8
 800930c:	463a      	mov	r2, r7
 800930e:	4628      	mov	r0, r5
 8009310:	47b0      	blx	r6
 8009312:	2800      	cmp	r0, #0
 8009314:	dc08      	bgt.n	8009328 <__sflush_r+0xfc>
 8009316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931e:	81a3      	strh	r3, [r4, #12]
 8009320:	f04f 30ff 	mov.w	r0, #4294967295
 8009324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009328:	4407      	add	r7, r0
 800932a:	eba8 0800 	sub.w	r8, r8, r0
 800932e:	e7e7      	b.n	8009300 <__sflush_r+0xd4>
 8009330:	20400001 	.word	0x20400001

08009334 <_fflush_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	690b      	ldr	r3, [r1, #16]
 8009338:	4605      	mov	r5, r0
 800933a:	460c      	mov	r4, r1
 800933c:	b913      	cbnz	r3, 8009344 <_fflush_r+0x10>
 800933e:	2500      	movs	r5, #0
 8009340:	4628      	mov	r0, r5
 8009342:	bd38      	pop	{r3, r4, r5, pc}
 8009344:	b118      	cbz	r0, 800934e <_fflush_r+0x1a>
 8009346:	6a03      	ldr	r3, [r0, #32]
 8009348:	b90b      	cbnz	r3, 800934e <_fflush_r+0x1a>
 800934a:	f7ff faa1 	bl	8008890 <__sinit>
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0f3      	beq.n	800933e <_fflush_r+0xa>
 8009356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009358:	07d0      	lsls	r0, r2, #31
 800935a:	d404      	bmi.n	8009366 <_fflush_r+0x32>
 800935c:	0599      	lsls	r1, r3, #22
 800935e:	d402      	bmi.n	8009366 <_fflush_r+0x32>
 8009360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009362:	f7ff fb9a 	bl	8008a9a <__retarget_lock_acquire_recursive>
 8009366:	4628      	mov	r0, r5
 8009368:	4621      	mov	r1, r4
 800936a:	f7ff ff5f 	bl	800922c <__sflush_r>
 800936e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009370:	07da      	lsls	r2, r3, #31
 8009372:	4605      	mov	r5, r0
 8009374:	d4e4      	bmi.n	8009340 <_fflush_r+0xc>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	059b      	lsls	r3, r3, #22
 800937a:	d4e1      	bmi.n	8009340 <_fflush_r+0xc>
 800937c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800937e:	f7ff fb8d 	bl	8008a9c <__retarget_lock_release_recursive>
 8009382:	e7dd      	b.n	8009340 <_fflush_r+0xc>

08009384 <__swbuf_r>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	460e      	mov	r6, r1
 8009388:	4614      	mov	r4, r2
 800938a:	4605      	mov	r5, r0
 800938c:	b118      	cbz	r0, 8009396 <__swbuf_r+0x12>
 800938e:	6a03      	ldr	r3, [r0, #32]
 8009390:	b90b      	cbnz	r3, 8009396 <__swbuf_r+0x12>
 8009392:	f7ff fa7d 	bl	8008890 <__sinit>
 8009396:	69a3      	ldr	r3, [r4, #24]
 8009398:	60a3      	str	r3, [r4, #8]
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	071a      	lsls	r2, r3, #28
 800939e:	d501      	bpl.n	80093a4 <__swbuf_r+0x20>
 80093a0:	6923      	ldr	r3, [r4, #16]
 80093a2:	b943      	cbnz	r3, 80093b6 <__swbuf_r+0x32>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 f82a 	bl	8009400 <__swsetup_r>
 80093ac:	b118      	cbz	r0, 80093b6 <__swbuf_r+0x32>
 80093ae:	f04f 37ff 	mov.w	r7, #4294967295
 80093b2:	4638      	mov	r0, r7
 80093b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	6922      	ldr	r2, [r4, #16]
 80093ba:	1a98      	subs	r0, r3, r2
 80093bc:	6963      	ldr	r3, [r4, #20]
 80093be:	b2f6      	uxtb	r6, r6
 80093c0:	4283      	cmp	r3, r0
 80093c2:	4637      	mov	r7, r6
 80093c4:	dc05      	bgt.n	80093d2 <__swbuf_r+0x4e>
 80093c6:	4621      	mov	r1, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f7ff ffb3 	bl	8009334 <_fflush_r>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d1ed      	bne.n	80093ae <__swbuf_r+0x2a>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	60a3      	str	r3, [r4, #8]
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	6022      	str	r2, [r4, #0]
 80093de:	701e      	strb	r6, [r3, #0]
 80093e0:	6962      	ldr	r2, [r4, #20]
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d004      	beq.n	80093f2 <__swbuf_r+0x6e>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	07db      	lsls	r3, r3, #31
 80093ec:	d5e1      	bpl.n	80093b2 <__swbuf_r+0x2e>
 80093ee:	2e0a      	cmp	r6, #10
 80093f0:	d1df      	bne.n	80093b2 <__swbuf_r+0x2e>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff ff9d 	bl	8009334 <_fflush_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0d9      	beq.n	80093b2 <__swbuf_r+0x2e>
 80093fe:	e7d6      	b.n	80093ae <__swbuf_r+0x2a>

08009400 <__swsetup_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4b29      	ldr	r3, [pc, #164]	@ (80094a8 <__swsetup_r+0xa8>)
 8009404:	4605      	mov	r5, r0
 8009406:	6818      	ldr	r0, [r3, #0]
 8009408:	460c      	mov	r4, r1
 800940a:	b118      	cbz	r0, 8009414 <__swsetup_r+0x14>
 800940c:	6a03      	ldr	r3, [r0, #32]
 800940e:	b90b      	cbnz	r3, 8009414 <__swsetup_r+0x14>
 8009410:	f7ff fa3e 	bl	8008890 <__sinit>
 8009414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009418:	0719      	lsls	r1, r3, #28
 800941a:	d422      	bmi.n	8009462 <__swsetup_r+0x62>
 800941c:	06da      	lsls	r2, r3, #27
 800941e:	d407      	bmi.n	8009430 <__swsetup_r+0x30>
 8009420:	2209      	movs	r2, #9
 8009422:	602a      	str	r2, [r5, #0]
 8009424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	e033      	b.n	8009498 <__swsetup_r+0x98>
 8009430:	0758      	lsls	r0, r3, #29
 8009432:	d512      	bpl.n	800945a <__swsetup_r+0x5a>
 8009434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009436:	b141      	cbz	r1, 800944a <__swsetup_r+0x4a>
 8009438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800943c:	4299      	cmp	r1, r3
 800943e:	d002      	beq.n	8009446 <__swsetup_r+0x46>
 8009440:	4628      	mov	r0, r5
 8009442:	f7ff fb2d 	bl	8008aa0 <_free_r>
 8009446:	2300      	movs	r3, #0
 8009448:	6363      	str	r3, [r4, #52]	@ 0x34
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	2300      	movs	r3, #0
 8009454:	6063      	str	r3, [r4, #4]
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	f043 0308 	orr.w	r3, r3, #8
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	b94b      	cbnz	r3, 800947a <__swsetup_r+0x7a>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800946c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009470:	d003      	beq.n	800947a <__swsetup_r+0x7a>
 8009472:	4621      	mov	r1, r4
 8009474:	4628      	mov	r0, r5
 8009476:	f000 f84f 	bl	8009518 <__smakebuf_r>
 800947a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947e:	f013 0201 	ands.w	r2, r3, #1
 8009482:	d00a      	beq.n	800949a <__swsetup_r+0x9a>
 8009484:	2200      	movs	r2, #0
 8009486:	60a2      	str	r2, [r4, #8]
 8009488:	6962      	ldr	r2, [r4, #20]
 800948a:	4252      	negs	r2, r2
 800948c:	61a2      	str	r2, [r4, #24]
 800948e:	6922      	ldr	r2, [r4, #16]
 8009490:	b942      	cbnz	r2, 80094a4 <__swsetup_r+0xa4>
 8009492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009496:	d1c5      	bne.n	8009424 <__swsetup_r+0x24>
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	0799      	lsls	r1, r3, #30
 800949c:	bf58      	it	pl
 800949e:	6962      	ldrpl	r2, [r4, #20]
 80094a0:	60a2      	str	r2, [r4, #8]
 80094a2:	e7f4      	b.n	800948e <__swsetup_r+0x8e>
 80094a4:	2000      	movs	r0, #0
 80094a6:	e7f7      	b.n	8009498 <__swsetup_r+0x98>
 80094a8:	20000108 	.word	0x20000108

080094ac <_sbrk_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d06      	ldr	r5, [pc, #24]	@ (80094c8 <_sbrk_r+0x1c>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f7 fe0a 	bl	80010d0 <_sbrk>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_sbrk_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_sbrk_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	20001f94 	.word	0x20001f94

080094cc <__swhatbuf_r>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	460c      	mov	r4, r1
 80094d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d4:	2900      	cmp	r1, #0
 80094d6:	b096      	sub	sp, #88	@ 0x58
 80094d8:	4615      	mov	r5, r2
 80094da:	461e      	mov	r6, r3
 80094dc:	da0d      	bge.n	80094fa <__swhatbuf_r+0x2e>
 80094de:	89a3      	ldrh	r3, [r4, #12]
 80094e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094e4:	f04f 0100 	mov.w	r1, #0
 80094e8:	bf14      	ite	ne
 80094ea:	2340      	movne	r3, #64	@ 0x40
 80094ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094f0:	2000      	movs	r0, #0
 80094f2:	6031      	str	r1, [r6, #0]
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	b016      	add	sp, #88	@ 0x58
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	466a      	mov	r2, sp
 80094fc:	f000 f848 	bl	8009590 <_fstat_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	dbec      	blt.n	80094de <__swhatbuf_r+0x12>
 8009504:	9901      	ldr	r1, [sp, #4]
 8009506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800950a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800950e:	4259      	negs	r1, r3
 8009510:	4159      	adcs	r1, r3
 8009512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009516:	e7eb      	b.n	80094f0 <__swhatbuf_r+0x24>

08009518 <__smakebuf_r>:
 8009518:	898b      	ldrh	r3, [r1, #12]
 800951a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800951c:	079d      	lsls	r5, r3, #30
 800951e:	4606      	mov	r6, r0
 8009520:	460c      	mov	r4, r1
 8009522:	d507      	bpl.n	8009534 <__smakebuf_r+0x1c>
 8009524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	2301      	movs	r3, #1
 800952e:	6163      	str	r3, [r4, #20]
 8009530:	b003      	add	sp, #12
 8009532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009534:	ab01      	add	r3, sp, #4
 8009536:	466a      	mov	r2, sp
 8009538:	f7ff ffc8 	bl	80094cc <__swhatbuf_r>
 800953c:	9f00      	ldr	r7, [sp, #0]
 800953e:	4605      	mov	r5, r0
 8009540:	4639      	mov	r1, r7
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff fb18 	bl	8008b78 <_malloc_r>
 8009548:	b948      	cbnz	r0, 800955e <__smakebuf_r+0x46>
 800954a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954e:	059a      	lsls	r2, r3, #22
 8009550:	d4ee      	bmi.n	8009530 <__smakebuf_r+0x18>
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	f043 0302 	orr.w	r3, r3, #2
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	e7e2      	b.n	8009524 <__smakebuf_r+0xc>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	6020      	str	r0, [r4, #0]
 8009562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	9b01      	ldr	r3, [sp, #4]
 800956a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800956e:	b15b      	cbz	r3, 8009588 <__smakebuf_r+0x70>
 8009570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009574:	4630      	mov	r0, r6
 8009576:	f000 f81d 	bl	80095b4 <_isatty_r>
 800957a:	b128      	cbz	r0, 8009588 <__smakebuf_r+0x70>
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f023 0303 	bic.w	r3, r3, #3
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	81a3      	strh	r3, [r4, #12]
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	431d      	orrs	r5, r3
 800958c:	81a5      	strh	r5, [r4, #12]
 800958e:	e7cf      	b.n	8009530 <__smakebuf_r+0x18>

08009590 <_fstat_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	@ (80095b0 <_fstat_r+0x20>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	4611      	mov	r1, r2
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	f7f7 fd6e 	bl	800107e <_fstat>
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	d102      	bne.n	80095ac <_fstat_r+0x1c>
 80095a6:	682b      	ldr	r3, [r5, #0]
 80095a8:	b103      	cbz	r3, 80095ac <_fstat_r+0x1c>
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	20001f94 	.word	0x20001f94

080095b4 <_isatty_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d06      	ldr	r5, [pc, #24]	@ (80095d0 <_isatty_r+0x1c>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7f7 fd6d 	bl	800109e <_isatty>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_isatty_r+0x1a>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_isatty_r+0x1a>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	20001f94 	.word	0x20001f94

080095d4 <_init>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr

080095e0 <_fini>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr
