
F4Disc-02b-PemrogramanBerstruktur-reset.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009404  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009594  08009594  0000a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009670  08009670  0000b158  2**0
                  CONTENTS
  4 .ARM          00000008  08009670  08009670  0000a670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009678  08009678  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009678  08009678  0000a678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08009680  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b158  2**0
                  CONTENTS
 10 .bss          00001e4c  20000158  20000158  0000b158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fa4  20001fa4  0000b158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158b5  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dfb  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00024838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e96  00000000  00000000  00025b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026028  00000000  00000000  00026a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c19f  00000000  00000000  0004ca46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cce44  00000000  00000000  00068be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135a29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055f0  00000000  00000000  00135a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0013b05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000158 	.word	0x20000158
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800957c 	.word	0x0800957c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000015c 	.word	0x2000015c
 80001cc:	0800957c 	.word	0x0800957c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <counterShow>:
#include <stdio.h>
#include "counter.h"

uint16_t count=0;

uint16_t counterShow(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BAR0_GPIO_Port,BAR0_Pin,count & (1<<0));
 80005a0:	4b2e      	ldr	r3, [pc, #184]	@ (800065c <counterShow+0xc0>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	2140      	movs	r1, #64	@ 0x40
 80005b0:	482b      	ldr	r0, [pc, #172]	@ (8000660 <counterShow+0xc4>)
 80005b2:	f001 f995 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR1_GPIO_Port,BAR1_Pin,count & (1<<1));
 80005b6:	4b29      	ldr	r3, [pc, #164]	@ (800065c <counterShow+0xc0>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	4826      	ldr	r0, [pc, #152]	@ (8000664 <counterShow+0xc8>)
 80005ca:	f001 f989 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR2_GPIO_Port,BAR2_Pin,count & (1<<2));
 80005ce:	4b23      	ldr	r3, [pc, #140]	@ (800065c <counterShow+0xc0>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	2110      	movs	r1, #16
 80005de:	4820      	ldr	r0, [pc, #128]	@ (8000660 <counterShow+0xc4>)
 80005e0:	f001 f97e 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR3_GPIO_Port,BAR3_Pin,count & (1<<3));
 80005e4:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <counterShow+0xc0>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	461a      	mov	r2, r3
 80005f2:	2120      	movs	r1, #32
 80005f4:	481a      	ldr	r0, [pc, #104]	@ (8000660 <counterShow+0xc4>)
 80005f6:	f001 f973 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR4_GPIO_Port,BAR4_Pin,count & (1<<4));
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <counterShow+0xc0>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	2104      	movs	r1, #4
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <counterShow+0xc4>)
 800060c:	f001 f968 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR5_GPIO_Port,BAR5_Pin,count & (1<<5));
 8000610:	4b12      	ldr	r3, [pc, #72]	@ (800065c <counterShow+0xc0>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0320 	and.w	r3, r3, #32
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	2110      	movs	r1, #16
 8000620:	4811      	ldr	r0, [pc, #68]	@ (8000668 <counterShow+0xcc>)
 8000622:	f001 f95d 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR6_GPIO_Port,BAR6_Pin,count & (1<<6));
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <counterShow+0xc0>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	2120      	movs	r1, #32
 8000636:	480c      	ldr	r0, [pc, #48]	@ (8000668 <counterShow+0xcc>)
 8000638:	f001 f952 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BAR7_GPIO_Port,BAR7_Pin,count & (1<<7));
 800063c:	4b07      	ldr	r3, [pc, #28]	@ (800065c <counterShow+0xc0>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	2180      	movs	r1, #128	@ 0x80
 800064c:	4807      	ldr	r0, [pc, #28]	@ (800066c <counterShow+0xd0>)
 800064e:	f001 f947 	bl	80018e0 <HAL_GPIO_WritePin>
	return count;
 8000652:	4b02      	ldr	r3, [pc, #8]	@ (800065c <counterShow+0xc0>)
 8000654:	881b      	ldrh	r3, [r3, #0]
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000174 	.word	0x20000174
 8000660:	40021000 	.word	0x40021000
 8000664:	40020800 	.word	0x40020800
 8000668:	40020400 	.word	0x40020400
 800066c:	40020c00 	.word	0x40020c00

08000670 <counterUpdate>:

void counterUpdate(void){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	++count;
 8000674:	4b05      	ldr	r3, [pc, #20]	@ (800068c <counterUpdate+0x1c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <counterUpdate+0x1c>)
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000174 	.word	0x20000174

08000690 <counterZero>:

void counterZero(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	count=0;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <counterZero+0x14>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	20000174 	.word	0x20000174

080006a8 <_write>:
I2C_HandleTypeDef hi2c1;
I2S_HandleTypeDef hi2s3;
SPI_HandleTypeDef hspi1;
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	68b8      	ldr	r0, [r7, #8]
 80006bc:	f007 fbc6 	bl	8007e4c <CDC_Transmit_FS>
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <usb_is_configured>:

extern USBD_HandleTypeDef hUsbDeviceFS;  // deklarasi handle dari usb_device.c
uint8_t usb_is_configured(void){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	return (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED);
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <usb_is_configured+0x20>)
 80006d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b03      	cmp	r3, #3
 80006da:	bf0c      	ite	eq
 80006dc:	2301      	moveq	r3, #1
 80006de:	2300      	movne	r3, #0
 80006e0:	b2db      	uxtb	r3, r3
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	20000278 	.word	0x20000278

080006f0 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	@ 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 f925 	bl	800894e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	@ (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	@ 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f003 f91c 	bl	80039b4 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000782:	f000 f9fd 	bl	8000b80 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000796:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2105      	movs	r1, #5
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fb7d 	bl	8003ea4 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80007b0:	f000 f9e6 	bl	8000b80 <Error_Handler>
	}
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	@ 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <MX_I2C1_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_I2C1_Init+0x58>)
 80007d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_I2C1_Init+0x50>)
 8000802:	f001 f8a1 	bl	8001948 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800080c:	f000 f9b8 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000178 	.word	0x20000178
 8000818:	40005400 	.word	0x40005400
 800081c:	000186a0 	.word	0x000186a0

08000820 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2S3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000826:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <MX_I2S3_Init+0x58>)
 8000828:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2S3_Init+0x54>)
 800082c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000830:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_I2S3_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000844:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000848:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <MX_I2S3_Init+0x5c>)
 800084a:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_I2S3_Init+0x54>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_I2S3_Init+0x54>)
 8000860:	f001 f9b6 	bl	8001bd0 <HAL_I2S_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 800086a:	f000 f989 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001cc 	.word	0x200001cc
 8000878:	40003c00 	.word	0x40003c00
 800087c:	00017700 	.word	0x00017700

08000880 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_SPI1_Init+0x64>)
 8000886:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <MX_SPI1_Init+0x68>)
 8000888:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008cc:	220a      	movs	r2, #10
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_SPI1_Init+0x64>)
 80008d2:	f003 fe35 	bl	8004540 <HAL_SPI_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80008dc:	f000 f950 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000214 	.word	0x20000214
 80008e8:	40013000 	.word	0x40013000

080008ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	4b98      	ldr	r3, [pc, #608]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a97      	ldr	r2, [pc, #604]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b95      	ldr	r3, [pc, #596]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	4b91      	ldr	r3, [pc, #580]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a90      	ldr	r2, [pc, #576]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b8e      	ldr	r3, [pc, #568]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b8a      	ldr	r3, [pc, #552]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a89      	ldr	r2, [pc, #548]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b87      	ldr	r3, [pc, #540]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b83      	ldr	r3, [pc, #524]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a82      	ldr	r2, [pc, #520]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b80      	ldr	r3, [pc, #512]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b7c      	ldr	r3, [pc, #496]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a7b      	ldr	r2, [pc, #492]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b79      	ldr	r3, [pc, #484]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b75      	ldr	r3, [pc, #468]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a74      	ldr	r2, [pc, #464]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b72      	ldr	r3, [pc, #456]	@ (8000b68 <MX_GPIO_Init+0x27c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 80009aa:	2200      	movs	r2, #0
 80009ac:	217c      	movs	r1, #124	@ 0x7c
 80009ae:	486f      	ldr	r0, [pc, #444]	@ (8000b6c <MX_GPIO_Init+0x280>)
 80009b0:	f000 ff96 	bl	80018e0 <HAL_GPIO_WritePin>
			|BAR0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BAR1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80009ba:	486d      	ldr	r0, [pc, #436]	@ (8000b70 <MX_GPIO_Init+0x284>)
 80009bc:	f000 ff90 	bl	80018e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	486a      	ldr	r0, [pc, #424]	@ (8000b70 <MX_GPIO_Init+0x284>)
 80009c6:	f000 ff8b 	bl	80018e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ca:	2200      	movs	r2, #0
 80009cc:	f24f 0190 	movw	r1, #61584	@ 0xf090
 80009d0:	4868      	ldr	r0, [pc, #416]	@ (8000b74 <MX_GPIO_Init+0x288>)
 80009d2:	f000 ff85 	bl	80018e0 <HAL_GPIO_WritePin>
			|Audio_RST_Pin|BAR7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, BAR5_Pin|BAR6_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2130      	movs	r1, #48	@ 0x30
 80009da:	4867      	ldr	r0, [pc, #412]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 80009dc:	f000 ff80 	bl	80018e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : BAR4_Pin CS_I2C_SPI_Pin BAR2_Pin BAR3_Pin
                           BAR0_Pin */
	GPIO_InitStruct.Pin = BAR4_Pin|CS_I2C_SPI_Pin|BAR2_Pin|BAR3_Pin
 80009e0:	237c      	movs	r3, #124	@ 0x7c
 80009e2:	61fb      	str	r3, [r7, #28]
			|BAR0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	485d      	ldr	r0, [pc, #372]	@ (8000b6c <MX_GPIO_Init+0x280>)
 80009f8:	f000 fdbe 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR1_Pin OTG_FS_PowerSwitchOn_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = BAR1_Pin|OTG_FS_PowerSwitchOn_Pin|BUZZER_Pin;
 80009fc:	f642 0301 	movw	r3, #10241	@ 0x2801
 8000a00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4856      	ldr	r0, [pc, #344]	@ (8000b70 <MX_GPIO_Init+0x284>)
 8000a16:	f000 fdaf 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	484e      	ldr	r0, [pc, #312]	@ (8000b70 <MX_GPIO_Init+0x284>)
 8000a36:	f000 fd9f 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	484b      	ldr	r0, [pc, #300]	@ (8000b7c <MX_GPIO_Init+0x290>)
 8000a50:	f000 fd92 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_RIGHT_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_RIGHT_Pin;
 8000a54:	2330      	movs	r3, #48	@ 0x30
 8000a56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4842      	ldr	r0, [pc, #264]	@ (8000b70 <MX_GPIO_Init+0x284>)
 8000a68:	f000 fd86 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_DN_Pin BTN_LEFT_Pin SW3_Pin SW4_Pin */
	GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_LEFT_Pin|SW3_Pin|SW4_Pin;
 8000a6c:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000a70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	483d      	ldr	r0, [pc, #244]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000a82:	f000 fd79 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a86:	2304      	movs	r3, #4
 8000a88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4837      	ldr	r0, [pc, #220]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000a9a:	f000 fd6d 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_OK_Pin BTN_CANCEL_Pin */
	GPIO_InitStruct.Pin = BTN_OK_Pin|BTN_CANCEL_Pin;
 8000a9e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000aa2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <MX_GPIO_Init+0x280>)
 8000ab4:	f000 fd60 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000abc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aca:	2305      	movs	r3, #5
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4828      	ldr	r0, [pc, #160]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000ad6:	f000 fd4f 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW2_Pin SW1_Pin */
	GPIO_InitStruct.Pin = SW2_Pin|SW1_Pin;
 8000ada:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ade:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4821      	ldr	r0, [pc, #132]	@ (8000b74 <MX_GPIO_Init+0x288>)
 8000af0:	f000 fd42 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin BAR7_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000af4:	f24f 0390 	movw	r3, #61584	@ 0xf090
 8000af8:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin|BAR7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4819      	ldr	r0, [pc, #100]	@ (8000b74 <MX_GPIO_Init+0x288>)
 8000b0e:	f000 fd33 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b12:	2320      	movs	r3, #32
 8000b14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <MX_GPIO_Init+0x288>)
 8000b26:	f000 fd27 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : BAR5_Pin BAR6_Pin */
	GPIO_InitStruct.Pin = BAR5_Pin|BAR6_Pin;
 8000b2a:	2330      	movs	r3, #48	@ 0x30
 8000b2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_GPIO_Init+0x28c>)
 8000b42:	f000 fd19 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b4a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b4e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_GPIO_Init+0x280>)
 8000b5c:	f000 fd0c 	bl	8001578 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	@ 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020000 	.word	0x40020000

08000b80 <Error_Handler>:

void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <main>:
#include "sensor.h"
#include "utility.h"


int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	HAL_Init();
 8000b92:	f000 fb49 	bl	8001228 <HAL_Init>
	SystemClock_Config();
 8000b96:	f7ff fdab 	bl	80006f0 <SystemClock_Config>
	MX_GPIO_Init();
 8000b9a:	f7ff fea7 	bl	80008ec <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b9e:	f7ff fe11 	bl	80007c4 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000ba2:	f7ff fe3d 	bl	8000820 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000ba6:	f7ff fe6b 	bl	8000880 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8000baa:	f007 f891 	bl	8007cd0 <MX_USB_DEVICE_Init>
	uint32_t t0 = HAL_GetTick();
 8000bae:	f000 fba1 	bl	80012f4 <HAL_GetTick>
 8000bb2:	6078      	str	r0, [r7, #4]
	while (!usb_is_configured() && (HAL_GetTick() - t0) < 2000) {
 8000bb4:	e002      	b.n	8000bbc <main+0x30>
		HAL_Delay(10);
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f000 fba8 	bl	800130c <HAL_Delay>
	while (!usb_is_configured() && (HAL_GetTick() - t0) < 2000) {
 8000bbc:	f7ff fd86 	bl	80006cc <usb_is_configured>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d107      	bne.n	8000bd6 <main+0x4a>
 8000bc6:	f000 fb95 	bl	80012f4 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000bd4:	d3ef      	bcc.n	8000bb6 <main+0x2a>
	}
	HAL_Delay(700); //fix auto connect serial app
 8000bd6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000bda:	f000 fb97 	bl	800130c <HAL_Delay>
	checkBoard();
 8000bde:	f000 fa93 	bl	8001108 <checkBoard>

	while (1)
	{

		if(sensorDetected()){
 8000be2:	f000 f81d 	bl	8000c20 <sensorDetected>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d008      	beq.n	8000bfe <main+0x72>
			counterUpdate();
 8000bec:	f7ff fd40 	bl	8000670 <counterUpdate>
			printf("nilai counter: %d \n\r",counterShow());
 8000bf0:	f7ff fcd4 	bl	800059c <counterShow>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <main+0x90>)
 8000bfa:	f007 fe53 	bl	80088a4 <iprintf>
		}

		if(resetDetected()){
 8000bfe:	f000 f843 	bl	8000c88 <resetDetected>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0ec      	beq.n	8000be2 <main+0x56>
			counterZero();
 8000c08:	f7ff fd42 	bl	8000690 <counterZero>
			printf("nilai counter: %d \n\r",counterShow());
 8000c0c:	f7ff fcc6 	bl	800059c <counterShow>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4619      	mov	r1, r3
 8000c14:	4801      	ldr	r0, [pc, #4]	@ (8000c1c <main+0x90>)
 8000c16:	f007 fe45 	bl	80088a4 <iprintf>
		if(sensorDetected()){
 8000c1a:	e7e2      	b.n	8000be2 <main+0x56>
 8000c1c:	08009594 	.word	0x08009594

08000c20 <sensorDetected>:
#include "usb_device.h"

#include <stdio.h>
#include "sensor.h"
// sensor.c dan sensor.h
uint8_t sensorDetected(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	uint32_t db_ms=20;
 8000c26:	2314      	movs	r3, #20
 8000c28:	603b      	str	r3, [r7, #0]
	uint8_t FlagDetect=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4814      	ldr	r0, [pc, #80]	@ (8000c84 <sensorDetected+0x64>)
 8000c32:	f000 fe3d 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d11d      	bne.n	8000c78 <sensorDetected+0x58>
		HAL_Delay(db_ms);
 8000c3c:	6838      	ldr	r0, [r7, #0]
 8000c3e:	f000 fb65 	bl	800130c <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET) {
 8000c42:	2102      	movs	r1, #2
 8000c44:	480f      	ldr	r0, [pc, #60]	@ (8000c84 <sensorDetected+0x64>)
 8000c46:	f000 fe33 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d113      	bne.n	8000c78 <sensorDetected+0x58>
			while(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_RESET);
 8000c50:	bf00      	nop
 8000c52:	2102      	movs	r1, #2
 8000c54:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <sensorDetected+0x64>)
 8000c56:	f000 fe2b 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f8      	beq.n	8000c52 <sensorDetected+0x32>
			// tunggu release stabil
			HAL_Delay(db_ms);
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f000 fb53 	bl	800130c <HAL_Delay>
			if(HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port,BTN_LEFT_Pin)== GPIO_PIN_SET) {
 8000c66:	2102      	movs	r1, #2
 8000c68:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <sensorDetected+0x64>)
 8000c6a:	f000 fe21 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <sensorDetected+0x58>
				FlagDetect=1; // valid press
 8000c74:	2301      	movs	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return FlagDetect;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020400 	.word	0x40020400

08000c88 <resetDetected>:

uint8_t resetDetected(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint32_t db_ms=20;
 8000c8e:	2314      	movs	r3, #20
 8000c90:	603b      	str	r3, [r7, #0]
	uint8_t FlagDetect=0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000c96:	2120      	movs	r1, #32
 8000c98:	4814      	ldr	r0, [pc, #80]	@ (8000cec <resetDetected+0x64>)
 8000c9a:	f000 fe09 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d11d      	bne.n	8000ce0 <resetDetected+0x58>
		HAL_Delay(db_ms);
 8000ca4:	6838      	ldr	r0, [r7, #0]
 8000ca6:	f000 fb31 	bl	800130c <HAL_Delay>
		if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET) {
 8000caa:	2120      	movs	r1, #32
 8000cac:	480f      	ldr	r0, [pc, #60]	@ (8000cec <resetDetected+0x64>)
 8000cae:	f000 fdff 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d113      	bne.n	8000ce0 <resetDetected+0x58>
			while(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_RESET);
 8000cb8:	bf00      	nop
 8000cba:	2120      	movs	r1, #32
 8000cbc:	480b      	ldr	r0, [pc, #44]	@ (8000cec <resetDetected+0x64>)
 8000cbe:	f000 fdf7 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f8      	beq.n	8000cba <resetDetected+0x32>
			// tunggu release stabil
			HAL_Delay(db_ms);
 8000cc8:	6838      	ldr	r0, [r7, #0]
 8000cca:	f000 fb1f 	bl	800130c <HAL_Delay>
			if(HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port,BTN_RIGHT_Pin)== GPIO_PIN_SET) {
 8000cce:	2120      	movs	r1, #32
 8000cd0:	4806      	ldr	r0, [pc, #24]	@ (8000cec <resetDetected+0x64>)
 8000cd2:	f000 fded 	bl	80018b0 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <resetDetected+0x58>
				FlagDetect=1; // valid press
 8000cdc:	2301      	movs	r3, #1
 8000cde:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return FlagDetect;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40020800 	.word	0x40020800

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2e:	2007      	movs	r0, #7
 8000d30:	f000 fbe0 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	@ (8000dc4 <HAL_I2C_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12c      	bne.n	8000dbc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <HAL_I2C_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a17      	ldr	r2, [pc, #92]	@ (8000dc8 <HAL_I2C_MspInit+0x88>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_I2C_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d7e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d90:	2304      	movs	r3, #4
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <HAL_I2C_MspInit+0x8c>)
 8000d9c:	f000 fbec 	bl	8001578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_I2C_MspInit+0x88>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	4a07      	ldr	r2, [pc, #28]	@ (8000dc8 <HAL_I2C_MspInit+0x88>)
 8000daa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_I2C_MspInit+0x88>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	@ 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40005400 	.word	0x40005400
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	@ 0x38
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a31      	ldr	r2, [pc, #196]	@ (8000ec0 <HAL_I2S_MspInit+0xf0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d15a      	bne.n	8000eb6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e00:	2301      	movs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e04:	23c0      	movs	r3, #192	@ 0xc0
 8000e06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fa53 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e1c:	f7ff feb0 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a26      	ldr	r2, [pc, #152]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e44:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	4a18      	ldr	r2, [pc, #96]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <HAL_I2S_MspInit+0xf4>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e74:	2310      	movs	r3, #16
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e84:	2306      	movs	r3, #6
 8000e86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <HAL_I2S_MspInit+0xf8>)
 8000e90:	f000 fb72 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e94:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <HAL_I2S_MspInit+0xfc>)
 8000eb2:	f000 fb61 	bl	8001578 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3738      	adds	r7, #56	@ 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40003c00 	.word	0x40003c00
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020800 	.word	0x40020800

08000ed0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	@ 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_SPI_MspInit+0x84>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d12b      	bne.n	8000f4a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000efc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a10      	ldr	r2, [pc, #64]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_SPI_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f2a:	23e0      	movs	r3, #224	@ 0xe0
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_SPI_MspInit+0x8c>)
 8000f46:	f000 fb17 	bl	8001578 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40013000 	.word	0x40013000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f989 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <OTG_FS_IRQHandler+0x10>)
 8000fc6:	f001 fbe7 	bl	8002798 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20001754 	.word	0x20001754

08000fd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e00a      	b.n	8000ffc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe6:	f3af 8000 	nop.w
 8000fea:	4601      	mov	r1, r0
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf0      	blt.n	8000fe6 <_read+0x12>
  }

  return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_close>:
  }
  return len;
}

int _close(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001036:	605a      	str	r2, [r3, #4]
  return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_isatty>:

int _isatty(int file)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f007 fca0 	bl	80089ec <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20020000 	.word	0x20020000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	2000026c 	.word	0x2000026c
 80010e0:	20001fa8 	.word	0x20001fa8

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <checkBoard>:
 *  Created on: Aug 31, 2025
 *      Author: hendri
 */

#include "utility.h"
void checkBoard(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	printf("Cek BarLED, buzzer, USER LED \n\r");
 800110e:	482b      	ldr	r0, [pc, #172]	@ (80011bc <checkBoard+0xb4>)
 8001110:	f007 fbc8 	bl	80088a4 <iprintf>
	HAL_Delay(300);
 8001114:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001118:	f000 f8f8 	bl	800130c <HAL_Delay>
	for (uint8_t cnt=0;cnt<8;cnt++){
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	e044      	b.n	80011ac <checkBoard+0xa4>

		HAL_GPIO_TogglePin(BAR0_GPIO_Port, BAR0_Pin);
 8001122:	2140      	movs	r1, #64	@ 0x40
 8001124:	4826      	ldr	r0, [pc, #152]	@ (80011c0 <checkBoard+0xb8>)
 8001126:	f000 fbf4 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR1_GPIO_Port, BAR1_Pin);
 800112a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800112e:	4825      	ldr	r0, [pc, #148]	@ (80011c4 <checkBoard+0xbc>)
 8001130:	f000 fbef 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR2_GPIO_Port, BAR2_Pin);
 8001134:	2110      	movs	r1, #16
 8001136:	4822      	ldr	r0, [pc, #136]	@ (80011c0 <checkBoard+0xb8>)
 8001138:	f000 fbeb 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR3_GPIO_Port, BAR3_Pin);
 800113c:	2120      	movs	r1, #32
 800113e:	4820      	ldr	r0, [pc, #128]	@ (80011c0 <checkBoard+0xb8>)
 8001140:	f000 fbe7 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR4_GPIO_Port, BAR4_Pin);
 8001144:	2104      	movs	r1, #4
 8001146:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <checkBoard+0xb8>)
 8001148:	f000 fbe3 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR5_GPIO_Port, BAR5_Pin);
 800114c:	2110      	movs	r1, #16
 800114e:	481e      	ldr	r0, [pc, #120]	@ (80011c8 <checkBoard+0xc0>)
 8001150:	f000 fbdf 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR6_GPIO_Port, BAR6_Pin);
 8001154:	2120      	movs	r1, #32
 8001156:	481c      	ldr	r0, [pc, #112]	@ (80011c8 <checkBoard+0xc0>)
 8001158:	f000 fbdb 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BAR7_GPIO_Port, BAR7_Pin);
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	481b      	ldr	r0, [pc, #108]	@ (80011cc <checkBoard+0xc4>)
 8001160:	f000 fbd7 	bl	8001912 <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001164:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001168:	4816      	ldr	r0, [pc, #88]	@ (80011c4 <checkBoard+0xbc>)
 800116a:	f000 fbd2 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800116e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001172:	4816      	ldr	r0, [pc, #88]	@ (80011cc <checkBoard+0xc4>)
 8001174:	f000 fbcd 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001178:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800117c:	4813      	ldr	r0, [pc, #76]	@ (80011cc <checkBoard+0xc4>)
 800117e:	f000 fbc8 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001182:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <checkBoard+0xc4>)
 8001188:	f000 fbc3 	bl	8001912 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800118c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001190:	480e      	ldr	r0, [pc, #56]	@ (80011cc <checkBoard+0xc4>)
 8001192:	f000 fbbe 	bl	8001912 <HAL_GPIO_TogglePin>
		printf("count: %d \n\r",cnt);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <checkBoard+0xc8>)
 800119c:	f007 fb82 	bl	80088a4 <iprintf>
		HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	@ 0x64
 80011a2:	f000 f8b3 	bl	800130c <HAL_Delay>
	for (uint8_t cnt=0;cnt<8;cnt++){
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	3301      	adds	r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	d9b7      	bls.n	8001122 <checkBoard+0x1a>
	}

}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	080095ac 	.word	0x080095ac
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	080095cc 	.word	0x080095cc

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	@ (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	@ (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ff71 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f007 fbf9 	bl	80089f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fcc1 	bl	8000b8c <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001218:	08009680 	.word	0x08009680
  ldr r2, =_sbss
 800121c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001220:	20001fa4 	.word	0x20001fa4

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f94f 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fd48 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f967 	bl	800155e <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f92f 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000270 	.word	0x20000270

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000270 	.word	0x20000270

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	@ (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	@ (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e16b      	b.n	800186c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 815a 	bne.w	8001866 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d005      	beq.n	80015ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d130      	bne.n	800162c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 0201 	and.w	r2, r3, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b03      	cmp	r3, #3
 8001636:	d017      	beq.n	8001668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d123      	bne.n	80016bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80b4 	beq.w	8001866 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <HAL_GPIO_Init+0x30c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	4a5f      	ldr	r2, [pc, #380]	@ (8001884 <HAL_GPIO_Init+0x30c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800170c:	6453      	str	r3, [r2, #68]	@ 0x44
 800170e:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <HAL_GPIO_Init+0x30c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171a:	4a5b      	ldr	r2, [pc, #364]	@ (8001888 <HAL_GPIO_Init+0x310>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a52      	ldr	r2, [pc, #328]	@ (800188c <HAL_GPIO_Init+0x314>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d02b      	beq.n	800179e <HAL_GPIO_Init+0x226>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a51      	ldr	r2, [pc, #324]	@ (8001890 <HAL_GPIO_Init+0x318>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d025      	beq.n	800179a <HAL_GPIO_Init+0x222>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a50      	ldr	r2, [pc, #320]	@ (8001894 <HAL_GPIO_Init+0x31c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01f      	beq.n	8001796 <HAL_GPIO_Init+0x21e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	@ (8001898 <HAL_GPIO_Init+0x320>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0x21a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4e      	ldr	r2, [pc, #312]	@ (800189c <HAL_GPIO_Init+0x324>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d013      	beq.n	800178e <HAL_GPIO_Init+0x216>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <HAL_GPIO_Init+0x328>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00d      	beq.n	800178a <HAL_GPIO_Init+0x212>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4c      	ldr	r2, [pc, #304]	@ (80018a4 <HAL_GPIO_Init+0x32c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_GPIO_Init+0x20a>
 800177e:	2307      	movs	r3, #7
 8001780:	e00e      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001782:	2308      	movs	r3, #8
 8001784:	e00c      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001786:	2306      	movs	r3, #6
 8001788:	e00a      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800178a:	2305      	movs	r3, #5
 800178c:	e008      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800178e:	2304      	movs	r3, #4
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001792:	2303      	movs	r3, #3
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x228>
 800179e:	2300      	movs	r3, #0
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b0:	4935      	ldr	r1, [pc, #212]	@ (8001888 <HAL_GPIO_Init+0x310>)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a32      	ldr	r2, [pc, #200]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a27      	ldr	r2, [pc, #156]	@ (80018ac <HAL_GPIO_Init+0x334>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001812:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001836:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_GPIO_Init+0x334>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001860:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3301      	adds	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b0f      	cmp	r3, #15
 8001870:	f67f ae90 	bls.w	8001594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40013800 	.word	0x40013800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40021c00 	.word	0x40021c00
 80018ac:	40013c00 	.word	0x40013c00

080018b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e001      	b.n	80018d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	041a      	lsls	r2, r3, #16
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43d9      	mvns	r1, r3
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	400b      	ands	r3, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e12b      	b.n	8001bb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff f9e6 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	@ 0x24
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800199a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019ac:	f002 fc72 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 80019b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a81      	ldr	r2, [pc, #516]	@ (8001bbc <HAL_I2C_Init+0x274>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d807      	bhi.n	80019cc <HAL_I2C_Init+0x84>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a80      	ldr	r2, [pc, #512]	@ (8001bc0 <HAL_I2C_Init+0x278>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	bf94      	ite	ls
 80019c4:	2301      	movls	r3, #1
 80019c6:	2300      	movhi	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e006      	b.n	80019da <HAL_I2C_Init+0x92>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a7d      	ldr	r2, [pc, #500]	@ (8001bc4 <HAL_I2C_Init+0x27c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	bf94      	ite	ls
 80019d4:	2301      	movls	r3, #1
 80019d6:	2300      	movhi	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0e7      	b.n	8001bb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4a78      	ldr	r2, [pc, #480]	@ (8001bc8 <HAL_I2C_Init+0x280>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9b      	lsrs	r3, r3, #18
 80019ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a6a      	ldr	r2, [pc, #424]	@ (8001bbc <HAL_I2C_Init+0x274>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d802      	bhi.n	8001a1c <HAL_I2C_Init+0xd4>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	e009      	b.n	8001a30 <HAL_I2C_Init+0xe8>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a69      	ldr	r2, [pc, #420]	@ (8001bcc <HAL_I2C_Init+0x284>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	3301      	adds	r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	495c      	ldr	r1, [pc, #368]	@ (8001bbc <HAL_I2C_Init+0x274>)
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d819      	bhi.n	8001a84 <HAL_I2C_Init+0x13c>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e59      	subs	r1, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a5e:	1c59      	adds	r1, r3, #1
 8001a60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a64:	400b      	ands	r3, r1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00a      	beq.n	8001a80 <HAL_I2C_Init+0x138>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1e59      	subs	r1, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7e:	e051      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001a80:	2304      	movs	r3, #4
 8001a82:	e04f      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d111      	bne.n	8001ab0 <HAL_I2C_Init+0x168>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e58      	subs	r0, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	440b      	add	r3, r1
 8001a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	e012      	b.n	8001ad6 <HAL_I2C_Init+0x18e>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e58      	subs	r0, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	0099      	lsls	r1, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_Init+0x196>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e022      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10e      	bne.n	8001b04 <HAL_I2C_Init+0x1bc>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e58      	subs	r0, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6859      	ldr	r1, [r3, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	440b      	add	r3, r1
 8001af4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b02:	e00f      	b.n	8001b24 <HAL_I2C_Init+0x1dc>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e58      	subs	r0, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	0099      	lsls	r1, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	6809      	ldr	r1, [r1, #0]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6911      	ldr	r1, [r2, #16]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68d2      	ldr	r2, [r2, #12]
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	000186a0 	.word	0x000186a0
 8001bc0:	001e847f 	.word	0x001e847f
 8001bc4:	003d08ff 	.word	0x003d08ff
 8001bc8:	431bde83 	.word	0x431bde83
 8001bcc:	10624dd3 	.word	0x10624dd3

08001bd0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e128      	b.n	8001e34 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a90      	ldr	r2, [pc, #576]	@ (8001e3c <HAL_I2S_Init+0x26c>)
 8001bfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff f8e7 	bl	8000dd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c18:	f023 030f 	bic.w	r3, r3, #15
 8001c1c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d060      	beq.n	8001cf0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c36:	2310      	movs	r3, #16
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e001      	b.n	8001c40 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d802      	bhi.n	8001c4e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f002 fc16 	bl	8004480 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c54:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c5e:	d125      	bne.n	8001cac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	3305      	adds	r3, #5
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e01f      	b.n	8001cca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	3305      	adds	r3, #5
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e00e      	b.n	8001cca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	3305      	adds	r3, #5
 8001cc8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8001e40 <HAL_I2S_Init+0x270>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	e003      	b.n	8001cf8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d902      	bls.n	8001d04 <HAL_I2S_Init+0x134>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	2bff      	cmp	r3, #255	@ 0xff
 8001d02:	d907      	bls.n	8001d14 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e08f      	b.n	8001e34 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	ea42 0103 	orr.w	r1, r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d32:	f023 030f 	bic.w	r3, r3, #15
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6851      	ldr	r1, [r2, #4]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6892      	ldr	r2, [r2, #8]
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68d2      	ldr	r2, [r2, #12]
 8001d44:	4311      	orrs	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6992      	ldr	r2, [r2, #24]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d56:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d161      	bne.n	8001e24 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a38      	ldr	r2, [pc, #224]	@ (8001e44 <HAL_I2S_Init+0x274>)
 8001d64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a37      	ldr	r2, [pc, #220]	@ (8001e48 <HAL_I2S_Init+0x278>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_I2S_Init+0x1a4>
 8001d70:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <HAL_I2S_Init+0x27c>)
 8001d72:	e001      	b.n	8001d78 <HAL_I2S_Init+0x1a8>
 8001d74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	4932      	ldr	r1, [pc, #200]	@ (8001e48 <HAL_I2S_Init+0x278>)
 8001d80:	428a      	cmp	r2, r1
 8001d82:	d101      	bne.n	8001d88 <HAL_I2S_Init+0x1b8>
 8001d84:	4a31      	ldr	r2, [pc, #196]	@ (8001e4c <HAL_I2S_Init+0x27c>)
 8001d86:	e001      	b.n	8001d8c <HAL_I2S_Init+0x1bc>
 8001d88:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001d8c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001d90:	f023 030f 	bic.w	r3, r3, #15
 8001d94:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e48 <HAL_I2S_Init+0x278>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2S_Init+0x1d4>
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <HAL_I2S_Init+0x27c>)
 8001da2:	e001      	b.n	8001da8 <HAL_I2S_Init+0x1d8>
 8001da4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001da8:	2202      	movs	r2, #2
 8001daa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a25      	ldr	r2, [pc, #148]	@ (8001e48 <HAL_I2S_Init+0x278>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_I2S_Init+0x1ea>
 8001db6:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_I2S_Init+0x27c>)
 8001db8:	e001      	b.n	8001dbe <HAL_I2S_Init+0x1ee>
 8001dba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dca:	d003      	beq.n	8001dd4 <HAL_I2S_Init+0x204>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	e001      	b.n	8001de0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e0c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <HAL_I2S_Init+0x278>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_I2S_Init+0x24c>
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_I2S_Init+0x27c>)
 8001e1a:	e001      	b.n	8001e20 <HAL_I2S_Init+0x250>
 8001e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e20:	897a      	ldrh	r2, [r7, #10]
 8001e22:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	08001f47 	.word	0x08001f47
 8001e40:	cccccccd 	.word	0xcccccccd
 8001e44:	0800205d 	.word	0x0800205d
 8001e48:	40003800 	.word	0x40003800
 8001e4c:	40003400 	.word	0x40003400

08001e50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10e      	bne.n	8001ee0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ed0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffb8 	bl	8001e50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	b292      	uxth	r2, r2
 8001efc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	1c9a      	adds	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10e      	bne.n	8001f3e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff93 	bl	8001e64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d13a      	bne.n	8001fd8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d109      	bne.n	8001f80 <I2S_IRQHandler+0x3a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f76:	2b40      	cmp	r3, #64	@ 0x40
 8001f78:	d102      	bne.n	8001f80 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffb4 	bl	8001ee8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f86:	2b40      	cmp	r3, #64	@ 0x40
 8001f88:	d126      	bne.n	8001fd8 <I2S_IRQHandler+0x92>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d11f      	bne.n	8001fd8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fa6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff50 	bl	8001e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d136      	bne.n	8002052 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d109      	bne.n	8002002 <I2S_IRQHandler+0xbc>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff8:	2b80      	cmp	r3, #128	@ 0x80
 8001ffa:	d102      	bne.n	8002002 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff45 	bl	8001e8c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d122      	bne.n	8002052 <I2S_IRQHandler+0x10c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b20      	cmp	r3, #32
 8002018:	d11b      	bne.n	8002052 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002028:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	f043 0204 	orr.w	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff13 	bl	8001e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a92      	ldr	r2, [pc, #584]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002076:	4b92      	ldr	r3, [pc, #584]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002078:	e001      	b.n	800207e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800207a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a8b      	ldr	r2, [pc, #556]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002094:	4b8a      	ldr	r3, [pc, #552]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002096:	e001      	b.n	800209c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002098:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020a8:	d004      	beq.n	80020b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8099 	bne.w	80021e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d107      	bne.n	80020ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f925 	bl	8002318 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f9c8 	bl	8002478 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ee:	2b40      	cmp	r3, #64	@ 0x40
 80020f0:	d13a      	bne.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d035      	beq.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6e      	ldr	r2, [pc, #440]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002106:	4b6e      	ldr	r3, [pc, #440]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002108:	e001      	b.n	800210e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800210a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4969      	ldr	r1, [pc, #420]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002116:	428b      	cmp	r3, r1
 8002118:	d101      	bne.n	800211e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800211a:	4b69      	ldr	r3, [pc, #420]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800211c:	e001      	b.n	8002122 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800211e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002122:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002126:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002136:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fe88 	bl	8001e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b08      	cmp	r3, #8
 8002170:	f040 80c3 	bne.w	80022fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80bd 	beq.w	80022fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800218e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a49      	ldr	r2, [pc, #292]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800219a:	4b49      	ldr	r3, [pc, #292]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800219c:	e001      	b.n	80021a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800219e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4944      	ldr	r1, [pc, #272]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021aa:	428b      	cmp	r3, r1
 80021ac:	d101      	bne.n	80021b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80021ae:	4b44      	ldr	r3, [pc, #272]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021b0:	e001      	b.n	80021b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80021b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	f043 0204 	orr.w	r2, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fe4a 	bl	8001e78 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021e4:	e089      	b.n	80022fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d107      	bne.n	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8be 	bl	800237c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d107      	bne.n	800221a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f8fd 	bl	8002414 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002220:	2b40      	cmp	r3, #64	@ 0x40
 8002222:	d12f      	bne.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02a      	beq.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800223c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002248:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800224a:	e001      	b.n	8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800224c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4919      	ldr	r1, [pc, #100]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002258:	428b      	cmp	r3, r1
 800225a:	d101      	bne.n	8002260 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800225c:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800225e:	e001      	b.n	8002264 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002260:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002264:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002268:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fdfa 	bl	8001e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b08      	cmp	r3, #8
 800228c:	d136      	bne.n	80022fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d031      	beq.n	80022fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d101      	bne.n	80022a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022a4:	e001      	b.n	80022aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80022a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4902      	ldr	r1, [pc, #8]	@ (80022bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022b2:	428b      	cmp	r3, r1
 80022b4:	d106      	bne.n	80022c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80022b6:	4b02      	ldr	r3, [pc, #8]	@ (80022c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022b8:	e006      	b.n	80022c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80022ba:	bf00      	nop
 80022bc:	40003800 	.word	0x40003800
 80022c0:	40003400 	.word	0x40003400
 80022c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022c8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f043 0204 	orr.w	r2, r3, #4
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fdc0 	bl	8001e78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022f8:	e000      	b.n	80022fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022fa:	bf00      	nop
}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	1c99      	adds	r1, r3, #2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6251      	str	r1, [r2, #36]	@ 0x24
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d113      	bne.n	8002372 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002358:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ffc9 	bl	8002304 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	1c99      	adds	r1, r3, #2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6251      	str	r1, [r2, #36]	@ 0x24
 800238e:	8819      	ldrh	r1, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1d      	ldr	r2, [pc, #116]	@ (800240c <I2SEx_TxISR_I2SExt+0x90>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <I2SEx_TxISR_I2SExt+0x22>
 800239a:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <I2SEx_TxISR_I2SExt+0x94>)
 800239c:	e001      	b.n	80023a2 <I2SEx_TxISR_I2SExt+0x26>
 800239e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023a2:	460a      	mov	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d121      	bne.n	8002402 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <I2SEx_TxISR_I2SExt+0x90>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <I2SEx_TxISR_I2SExt+0x50>
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <I2SEx_TxISR_I2SExt+0x94>)
 80023ca:	e001      	b.n	80023d0 <I2SEx_TxISR_I2SExt+0x54>
 80023cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <I2SEx_TxISR_I2SExt+0x90>)
 80023d8:	428b      	cmp	r3, r1
 80023da:	d101      	bne.n	80023e0 <I2SEx_TxISR_I2SExt+0x64>
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <I2SEx_TxISR_I2SExt+0x94>)
 80023de:	e001      	b.n	80023e4 <I2SEx_TxISR_I2SExt+0x68>
 80023e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80023e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff81 	bl	8002304 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40003800 	.word	0x40003800
 8002410:	40003400 	.word	0x40003400

08002414 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68d8      	ldr	r0, [r3, #12]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002426:	1c99      	adds	r1, r3, #2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800242c:	b282      	uxth	r2, r0
 800242e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d113      	bne.n	8002470 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002456:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff4a 	bl	8002304 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a20      	ldr	r2, [pc, #128]	@ (8002508 <I2SEx_RxISR_I2SExt+0x90>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <I2SEx_RxISR_I2SExt+0x16>
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <I2SEx_RxISR_I2SExt+0x94>)
 800248c:	e001      	b.n	8002492 <I2SEx_RxISR_I2SExt+0x1a>
 800248e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002492:	68d8      	ldr	r0, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	1c99      	adds	r1, r3, #2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800249e:	b282      	uxth	r2, r0
 80024a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d121      	bne.n	80024fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <I2SEx_RxISR_I2SExt+0x90>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d101      	bne.n	80024c8 <I2SEx_RxISR_I2SExt+0x50>
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <I2SEx_RxISR_I2SExt+0x94>)
 80024c6:	e001      	b.n	80024cc <I2SEx_RxISR_I2SExt+0x54>
 80024c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	490d      	ldr	r1, [pc, #52]	@ (8002508 <I2SEx_RxISR_I2SExt+0x90>)
 80024d4:	428b      	cmp	r3, r1
 80024d6:	d101      	bne.n	80024dc <I2SEx_RxISR_I2SExt+0x64>
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <I2SEx_RxISR_I2SExt+0x94>)
 80024da:	e001      	b.n	80024e0 <I2SEx_RxISR_I2SExt+0x68>
 80024dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d106      	bne.n	80024fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff03 	bl	8002304 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40003800 	.word	0x40003800
 800250c:	40003400 	.word	0x40003400

08002510 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e101      	b.n	8002726 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f005 fdcd 	bl	80080dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2203      	movs	r2, #3
 8002546:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002550:	d102      	bne.n	8002558 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f002 f990 	bl	8004882 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7c1a      	ldrb	r2, [r3, #16]
 800256a:	f88d 2000 	strb.w	r2, [sp]
 800256e:	3304      	adds	r3, #4
 8002570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002572:	f002 f86e 	bl	8004652 <USB_CoreInit>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0ce      	b.n	8002726 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f002 f988 	bl	80048a4 <USB_SetCurrentMode>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e0bf      	b.n	8002726 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e04a      	b.n	8002642 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3315      	adds	r3, #21
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3314      	adds	r3, #20
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	b298      	uxth	r0, r3
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	332e      	adds	r3, #46	@ 0x2e
 80025e8:	4602      	mov	r2, r0
 80025ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3318      	adds	r3, #24
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	331c      	adds	r3, #28
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3320      	adds	r3, #32
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3324      	adds	r3, #36	@ 0x24
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	3301      	adds	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	791b      	ldrb	r3, [r3, #4]
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	429a      	cmp	r2, r3
 800264a:	d3af      	bcc.n	80025ac <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	e044      	b.n	80026dc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	3301      	adds	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	791b      	ldrb	r3, [r3, #4]
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d3b5      	bcc.n	8002652 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7c1a      	ldrb	r2, [r3, #16]
 80026ee:	f88d 2000 	strb.w	r2, [sp]
 80026f2:	3304      	adds	r3, #4
 80026f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f6:	f002 f921 	bl	800493c <USB_DevInit>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e00c      	b.n	8002726 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f96b 	bl	80059fa <USB_DevDisconnect>

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_PCD_Start+0x1c>
 8002746:	2302      	movs	r3, #2
 8002748:	e022      	b.n	8002790 <HAL_PCD_Start+0x62>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f002 f872 	bl	8004860 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 f919 	bl	80059b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b08d      	sub	sp, #52	@ 0x34
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 f9d7 	bl	8005b62 <USB_GetMode>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 848c 	bne.w	80030d4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 f93b 	bl	8005a3c <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8482 	beq.w	80030d2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 f928 	bl	8005a3c <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d107      	bne.n	8002806 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f002 0202 	and.w	r2, r2, #2
 8002804:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 f916 	bl	8005a3c <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b10      	cmp	r3, #16
 8002818:	d161      	bne.n	80028de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0210 	bic.w	r2, r2, #16
 8002828:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f003 020f 	and.w	r2, r3, #15
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002850:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002854:	d124      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d035      	beq.n	80028ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800286c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6a38      	ldr	r0, [r7, #32]
 8002876:	f002 ff4d 	bl	8005714 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002886:	441a      	add	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002898:	441a      	add	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	e016      	b.n	80028ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028aa:	d110      	bne.n	80028ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028b2:	2208      	movs	r2, #8
 80028b4:	4619      	mov	r1, r3
 80028b6:	6a38      	ldr	r0, [r7, #32]
 80028b8:	f002 ff2c 	bl	8005714 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c8:	441a      	add	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0210 	orr.w	r2, r2, #16
 80028dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 f8aa 	bl	8005a3c <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028f2:	f040 80a7 	bne.w	8002a44 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f003 f8af 	bl	8005a62 <USB_ReadDevAllOutEpInterrupt>
 8002904:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002906:	e099      	b.n	8002a3c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 808e 	beq.w	8002a30 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f003 f8d3 	bl	8005aca <USB_ReadDevOutEPInterrupt>
 8002924:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800293c:	461a      	mov	r2, r3
 800293e:	2301      	movs	r3, #1
 8002940:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002942:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fea3 	bl	8003690 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00c      	beq.n	800296e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002960:	461a      	mov	r2, r3
 8002962:	2308      	movs	r3, #8
 8002964:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002966:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 ff79 	bl	8003860 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002984:	461a      	mov	r2, r3
 8002986:	2310      	movs	r3, #16
 8002988:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d030      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299c:	2b80      	cmp	r3, #128	@ 0x80
 800299e:	d109      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f005 fc90 	bl	8008304 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f0:	461a      	mov	r2, r3
 80029f2:	2302      	movs	r3, #2
 80029f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2320      	movs	r3, #32
 8002a10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a2e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	3301      	adds	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f af62 	bne.w	8002908 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fff7 	bl	8005a3c <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a58:	f040 80db 	bne.w	8002c12 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 f818 	bl	8005a96 <USB_ReadDevAllInEpInterrupt>
 8002a66:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a6c:	e0cd      	b.n	8002c0a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80c2 	beq.w	8002bfe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 f83e 	bl	8005b06 <USB_ReadDevInEPInterrupt>
 8002a8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d057      	beq.n	8002b46 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69f9      	ldr	r1, [r7, #28]
 8002ab2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2301      	movs	r3, #1
 8002aca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	799b      	ldrb	r3, [r3, #6]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d132      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3320      	adds	r3, #32
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4403      	add	r3, r0
 8002af4:	331c      	adds	r3, #28
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4419      	add	r1, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4403      	add	r3, r0
 8002b08:	3320      	adds	r3, #32
 8002b0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d113      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x3a2>
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3324      	adds	r3, #36	@ 0x24
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d108      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b32:	461a      	mov	r2, r3
 8002b34:	2101      	movs	r1, #1
 8002b36:	f003 f845 	bl	8005bc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f005 fb5a 	bl	80081fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2308      	movs	r3, #8
 8002b60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2310      	movs	r3, #16
 8002b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b94:	461a      	mov	r2, r3
 8002b96:	2340      	movs	r3, #64	@ 0x40
 8002b98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ba6:	6a38      	ldr	r0, [r7, #32]
 8002ba8:	f002 f82c 	bl	8004c04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	3310      	adds	r3, #16
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	78db      	ldrb	r3, [r3, #3]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f005 fba7 	bl	8008328 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002be6:	461a      	mov	r2, r3
 8002be8:	2302      	movs	r3, #2
 8002bea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bf6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fcbd 	bl	8003578 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	3301      	adds	r3, #1
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f47f af2e 	bne.w	8002a6e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 ff10 	bl	8005a3c <USB_ReadInterrupts>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c26:	d122      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fea3 	bl	800399c <HAL_PCDEx_LPM_Callback>
 8002c56:	e002      	b.n	8002c5e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f005 fb45 	bl	80082e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fee2 	bl	8005a3c <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c82:	d112      	bne.n	8002caa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d102      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f005 fb01 	bl	800829c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ca8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 fec4 	bl	8005a3c <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cbe:	f040 80b7 	bne.w	8002e30 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2110      	movs	r1, #16
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 ff91 	bl	8004c04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce6:	e046      	b.n	8002d76 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cfa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d2e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d40:	0151      	lsls	r1, r2, #5
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	440a      	add	r2, r1
 8002d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d60:	0151      	lsls	r1, r2, #5
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	440a      	add	r2, r1
 8002d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d6e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d72:	3301      	adds	r3, #1
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	791b      	ldrb	r3, [r3, #4]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d3b2      	bcc.n	8002ce8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d90:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7bdb      	ldrb	r3, [r3, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dae:	f043 030b 	orr.w	r3, r3, #11
 8002db2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc4:	f043 030b 	orr.w	r3, r3, #11
 8002dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dca:	e015      	b.n	8002df8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dda:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dde:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002de2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df2:	f043 030b 	orr.w	r3, r3, #11
 8002df6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f002 fed2 	bl	8005bc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f002 fe01 	bl	8005a3c <USB_ReadInterrupts>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e44:	d123      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 fe97 	bl	8005b7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 ff4e 	bl	8004cf6 <USB_GetDevSpeed>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681c      	ldr	r4, [r3, #0]
 8002e66:	f001 fa09 	bl	800427c <HAL_RCC_GetHCLKFreq>
 8002e6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e70:	461a      	mov	r2, r3
 8002e72:	4620      	mov	r0, r4
 8002e74:	f001 fc52 	bl	800471c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f005 f9e6 	bl	800824a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 fdd2 	bl	8005a3c <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f005 f9c3 	bl	800822e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f002 0208 	and.w	r2, r2, #8
 8002eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fdbd 	bl	8005a3c <USB_ReadInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec8:	2b80      	cmp	r3, #128	@ 0x80
 8002eca:	d123      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed8:	2301      	movs	r3, #1
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002edc:	e014      	b.n	8002f08 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fb0a 	bl	8003516 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	791b      	ldrb	r3, [r3, #4]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d3e4      	bcc.n	8002ede <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fd8f 	bl	8005a3c <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f28:	d13c      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2e:	e02b      	b.n	8002f88 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3318      	adds	r3, #24
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d115      	bne.n	8002f82 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f56:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da12      	bge.n	8002f82 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3317      	adds	r3, #23
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 faca 	bl	8003516 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	3301      	adds	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	791b      	ldrb	r3, [r3, #4]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d3cd      	bcc.n	8002f30 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fd47 	bl	8005a3c <USB_ReadInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fb8:	d156      	bne.n	8003068 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fba:	2301      	movs	r3, #1
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	e045      	b.n	800304c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d12e      	bne.n	8003046 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fe8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da2b      	bge.n	8003046 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	0c1a      	lsrs	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002ff8:	4053      	eors	r3, r2
 8002ffa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d121      	bne.n	8003046 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800303e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003042:	6053      	str	r3, [r2, #4]
            break;
 8003044:	e008      	b.n	8003058 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	3301      	adds	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	791b      	ldrb	r3, [r3, #4]
 8003050:	461a      	mov	r2, r3
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	4293      	cmp	r3, r2
 8003056:	d3b3      	bcc.n	8002fc0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fce5 	bl	8005a3c <USB_ReadInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307c:	d10a      	bne.n	8003094 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f005 f964 	bl	800834c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f002 fccf 	bl	8005a3c <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d115      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f005 f954 	bl	8008368 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e000      	b.n	80030d4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80030d2:	bf00      	nop
    }
  }
}
 80030d4:	3734      	adds	r7, #52	@ 0x34
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}

080030da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_PCD_SetAddress+0x1a>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e012      	b.n	800311a <HAL_PCD_SetAddress+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f002 fc2e 	bl	800596c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	4608      	mov	r0, r1
 800312c:	4611      	mov	r1, r2
 800312e:	461a      	mov	r2, r3
 8003130:	4603      	mov	r3, r0
 8003132:	70fb      	strb	r3, [r7, #3]
 8003134:	460b      	mov	r3, r1
 8003136:	803b      	strh	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da0f      	bge.n	8003168 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	3310      	adds	r3, #16
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00f      	b.n	8003188 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003194:	883b      	ldrh	r3, [r7, #0]
 8003196:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	78ba      	ldrb	r2, [r7, #2]
 80031a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	785b      	ldrb	r3, [r3, #1]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031b6:	78bb      	ldrb	r3, [r7, #2]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d102      	bne.n	80031c2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_PCD_EP_Open+0xae>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e00e      	b.n	80031ee <HAL_PCD_EP_Open+0xcc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 fdae 	bl	8004d40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80031ec:	7afb      	ldrb	r3, [r7, #11]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003206:	2b00      	cmp	r3, #0
 8003208:	da0f      	bge.n	800322a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	3310      	adds	r3, #16
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	705a      	strb	r2, [r3, #1]
 8003228:	e00f      	b.n	800324a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	3304      	adds	r3, #4
 8003242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_PCD_EP_Close+0x6e>
 8003260:	2302      	movs	r3, #2
 8003262:	e00e      	b.n	8003282 <HAL_PCD_EP_Close+0x8c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68f9      	ldr	r1, [r7, #12]
 8003272:	4618      	mov	r0, r3
 8003274:	f001 fdec 	bl	8004e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	460b      	mov	r3, r1
 8003298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800329a:	7afb      	ldrb	r3, [r7, #11]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032cc:	7afb      	ldrb	r3, [r7, #11]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	799b      	ldrb	r3, [r3, #6]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	799b      	ldrb	r3, [r3, #6]
 80032ee:	461a      	mov	r2, r3
 80032f0:	6979      	ldr	r1, [r7, #20]
 80032f2:	f001 fe89 	bl	8005008 <USB_EPStartXfer>

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 020f 	and.w	r2, r3, #15
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	460b      	mov	r3, r1
 800333e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003340:	7afb      	ldrb	r3, [r7, #11]
 8003342:	f003 020f 	and.w	r2, r3, #15
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	3310      	adds	r3, #16
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2200      	movs	r2, #0
 8003368:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2201      	movs	r2, #1
 800336e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003370:	7afb      	ldrb	r3, [r7, #11]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	b2da      	uxtb	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	799b      	ldrb	r3, [r3, #6]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	799b      	ldrb	r3, [r3, #6]
 8003392:	461a      	mov	r2, r3
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	f001 fe37 	bl	8005008 <USB_EPStartXfer>

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	7912      	ldrb	r2, [r2, #4]
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e04f      	b.n	8003462 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da0f      	bge.n	80033ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	3310      	adds	r3, #16
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	705a      	strb	r2, [r3, #1]
 80033e8:	e00d      	b.n	8003406 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_EP_SetStall+0x82>
 8003422:	2302      	movs	r3, #2
 8003424:	e01d      	b.n	8003462 <HAL_PCD_EP_SetStall+0xbe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f002 f9c5 	bl	80057c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7999      	ldrb	r1, [r3, #6]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003452:	461a      	mov	r2, r3
 8003454:	f002 fbb6 	bl	8005bc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	7912      	ldrb	r2, [r2, #4]
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e042      	b.n	800350e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003488:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348c:	2b00      	cmp	r3, #0
 800348e:	da0f      	bge.n	80034b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	3310      	adds	r3, #16
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
 80034ae:	e00f      	b.n	80034d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_PCD_EP_ClrStall+0x86>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_ClrStall+0xa4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68f9      	ldr	r1, [r7, #12]
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 f9ce 	bl	80058a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003526:	2b00      	cmp	r3, #0
 8003528:	da0c      	bge.n	8003544 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	3310      	adds	r3, #16
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	e00c      	b.n	800355e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 020f 	and.w	r2, r3, #15
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	3304      	adds	r3, #4
 800355c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	4618      	mov	r0, r3
 8003566:	f001 ffed 	bl	8005544 <USB_EPStopXfer>
 800356a:	4603      	mov	r3, r0
 800356c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800356e:	7afb      	ldrb	r3, [r7, #11]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3310      	adds	r3, #16
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4413      	add	r3, r2
 800359c:	3304      	adds	r3, #4
 800359e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d901      	bls.n	80035b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e06b      	b.n	8003688 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d902      	bls.n	80035cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3303      	adds	r3, #3
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d4:	e02a      	b.n	800362c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d902      	bls.n	80035f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3303      	adds	r3, #3
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68d9      	ldr	r1, [r3, #12]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4603      	mov	r3, r0
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f002 f842 	bl	8005698 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	441a      	add	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	429a      	cmp	r2, r3
 8003640:	d809      	bhi.n	8003656 <PCD_WriteEmptyTxFifo+0xde>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364a:	429a      	cmp	r2, r3
 800364c:	d203      	bcs.n	8003656 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1bf      	bne.n	80035d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	429a      	cmp	r2, r3
 8003660:	d811      	bhi.n	8003686 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	2201      	movs	r2, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	43db      	mvns	r3, r3
 800367c:	6939      	ldr	r1, [r7, #16]
 800367e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003682:	4013      	ands	r3, r2
 8003684:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	333c      	adds	r3, #60	@ 0x3c
 80036a8:	3304      	adds	r3, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	799b      	ldrb	r3, [r3, #6]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d17b      	bne.n	80037be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4a61      	ldr	r2, [pc, #388]	@ (8003858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	f240 80b9 	bls.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b3 	beq.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f2:	461a      	mov	r2, r3
 80036f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036f8:	6093      	str	r3, [r2, #8]
 80036fa:	e0a7      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003712:	461a      	mov	r2, r3
 8003714:	2320      	movs	r3, #32
 8003716:	6093      	str	r3, [r2, #8]
 8003718:	e098      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 8093 	bne.w	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4a4b      	ldr	r2, [pc, #300]	@ (8003858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d90f      	bls.n	800374e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003744:	461a      	mov	r2, r3
 8003746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374a:	6093      	str	r3, [r2, #8]
 800374c:	e07e      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	0159      	lsls	r1, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	440b      	add	r3, r1
 8003770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d114      	bne.n	80037b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003798:	461a      	mov	r2, r3
 800379a:	2101      	movs	r1, #1
 800379c:	f002 fa12 	bl	8005bc4 <USB_EP0_OutStart>
 80037a0:	e006      	b.n	80037b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f004 fd04 	bl	80081c4 <HAL_PCD_DataOutStageCallback>
 80037bc:	e046      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a26      	ldr	r2, [pc, #152]	@ (800385c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d124      	bne.n	8003810 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e2:	6093      	str	r3, [r2, #8]
 80037e4:	e032      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fc:	461a      	mov	r2, r3
 80037fe:	2320      	movs	r3, #32
 8003800:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f004 fcdb 	bl	80081c4 <HAL_PCD_DataOutStageCallback>
 800380e:	e01d      	b.n	800384c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d114      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003838:	461a      	mov	r2, r3
 800383a:	2100      	movs	r1, #0
 800383c:	f002 f9c2 	bl	8005bc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f004 fcbc 	bl	80081c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	4f54300a 	.word	0x4f54300a
 800385c:	4f54310a 	.word	0x4f54310a

08003860 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	333c      	adds	r3, #60	@ 0x3c
 8003878:	3304      	adds	r3, #4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4a15      	ldr	r2, [pc, #84]	@ (80038e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d90e      	bls.n	80038b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f004 fc73 	bl	80081a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a0a      	ldr	r2, [pc, #40]	@ (80038e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d90c      	bls.n	80038dc <PCD_EP_OutSetupPacket_int+0x7c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	799b      	ldrb	r3, [r3, #6]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038d4:	461a      	mov	r2, r3
 80038d6:	2101      	movs	r1, #1
 80038d8:	f002 f974 	bl	8005bc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	4f54300a 	.word	0x4f54300a

080038ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	70fb      	strb	r3, [r7, #3]
 80038f8:	4613      	mov	r3, r2
 80038fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d107      	bne.n	800391a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800390a:	883b      	ldrh	r3, [r7, #0]
 800390c:	0419      	lsls	r1, r3, #16
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	430a      	orrs	r2, r1
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28
 8003918:	e028      	b.n	800396c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	0c1b      	lsrs	r3, r3, #16
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	4413      	add	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e00d      	b.n	800394a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	3340      	adds	r3, #64	@ 0x40
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4413      	add	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	3301      	adds	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	3b01      	subs	r3, #1
 8003950:	429a      	cmp	r2, r3
 8003952:	d3ec      	bcc.n	800392e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003954:	883b      	ldrh	r3, [r7, #0]
 8003956:	0418      	lsls	r0, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	3b01      	subs	r3, #1
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4302      	orrs	r2, r0
 8003964:	3340      	adds	r3, #64	@ 0x40
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e267      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d075      	beq.n	8003abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039d2:	4b88      	ldr	r3, [pc, #544]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d00c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4b85      	ldr	r3, [pc, #532]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d112      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b82      	ldr	r3, [pc, #520]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05b      	beq.n	8003abc <HAL_RCC_OscConfig+0x108>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d157      	bne.n	8003abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e242      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x74>
 8003a1a:	4b76      	ldr	r3, [pc, #472]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a75      	ldr	r2, [pc, #468]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b70      	ldr	r3, [pc, #448]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	4b69      	ldr	r3, [pc, #420]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a68      	ldr	r2, [pc, #416]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b66      	ldr	r3, [pc, #408]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a65      	ldr	r2, [pc, #404]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fc42 	bl	80012f4 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fd fc3e 	bl	80012f4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	@ 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e207      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xc0>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fd fc2e 	bl	80012f4 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fc2a 	bl	80012f4 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	@ 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1f3      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	4b51      	ldr	r3, [pc, #324]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0xe8>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d063      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aca:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b44      	ldr	r3, [pc, #272]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1c7      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4937      	ldr	r1, [pc, #220]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e03a      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCC_OscConfig+0x244>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd fbe3 	bl	80012f4 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fd fbdf 	bl	80012f4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1a8      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4925      	ldr	r1, [pc, #148]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_RCC_OscConfig+0x244>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fbc2 	bl	80012f4 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fd fbbe 	bl	80012f4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e187      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d036      	beq.n	8003c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <HAL_RCC_OscConfig+0x248>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fd fba2 	bl	80012f4 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fd fb9e 	bl	80012f4 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e167      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x200>
 8003bd2:	e01b      	b.n	8003c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd4:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <HAL_RCC_OscConfig+0x248>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fd fb8b 	bl	80012f4 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	e00e      	b.n	8003c00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be2:	f7fd fb87 	bl	80012f4 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d907      	bls.n	8003c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e150      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	42470000 	.word	0x42470000
 8003bfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b88      	ldr	r3, [pc, #544]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ea      	bne.n	8003be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8097 	beq.w	8003d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b81      	ldr	r3, [pc, #516]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	4a7c      	ldr	r2, [pc, #496]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b77      	ldr	r3, [pc, #476]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b74      	ldr	r3, [pc, #464]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a73      	ldr	r2, [pc, #460]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fd fb47 	bl	80012f4 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fd fb43 	bl	80012f4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e10c      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e28 <HAL_RCC_OscConfig+0x474>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x2ea>
 8003c90:	4b64      	ldr	r3, [pc, #400]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c94:	4a63      	ldr	r2, [pc, #396]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9c:	e01c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x324>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x30c>
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a5e      	ldr	r2, [pc, #376]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x324>
 8003cc0:	4b58      	ldr	r3, [pc, #352]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a57      	ldr	r2, [pc, #348]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ccc:	4b55      	ldr	r3, [pc, #340]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd0:	4a54      	ldr	r2, [pc, #336]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fd fb08 	bl	80012f4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fb04 	bl	80012f4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0cb      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	4b49      	ldr	r3, [pc, #292]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ee      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x334>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0c:	f7fd faf2 	bl	80012f4 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fd faee 	bl	80012f4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0b5      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ee      	bne.n	8003d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	4a38      	ldr	r2, [pc, #224]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a1 	beq.w	8003e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d52:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d05c      	beq.n	8003e18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d141      	bne.n	8003dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b31      	ldr	r3, [pc, #196]	@ (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fac2 	bl	80012f4 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fd fabe 	bl	80012f4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e087      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	4b27      	ldr	r3, [pc, #156]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	491b      	ldr	r1, [pc, #108]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fd fa97 	bl	80012f4 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dca:	f7fd fa93 	bl	80012f4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e05c      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x416>
 8003de8:	e054      	b.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dea:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <HAL_RCC_OscConfig+0x478>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fd fa80 	bl	80012f4 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd fa7c 	bl	80012f4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e045      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x444>
 8003e16:	e03d      	b.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e038      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <HAL_RCC_OscConfig+0x4ec>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d028      	beq.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d121      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d11a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0cc      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b68      	ldr	r3, [pc, #416]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d90c      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b65      	ldr	r3, [pc, #404]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a58      	ldr	r2, [pc, #352]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a52      	ldr	r2, [pc, #328]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d044      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d119      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d003      	beq.n	8003f62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	4b3f      	ldr	r3, [pc, #252]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e06f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f72:	4b3b      	ldr	r3, [pc, #236]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e067      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f82:	4b37      	ldr	r3, [pc, #220]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4934      	ldr	r1, [pc, #208]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f94:	f7fd f9ae 	bl	80012f4 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fd f9aa 	bl	80012f4 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e04f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 020c 	and.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1eb      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b25      	ldr	r3, [pc, #148]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d20c      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b22      	ldr	r3, [pc, #136]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	@ (800405c <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004016:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f821 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	490a      	ldr	r1, [pc, #40]	@ (8004064 <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fd f90e 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023c00 	.word	0x40023c00
 8004060:	40023800 	.word	0x40023800
 8004064:	08009624 	.word	0x08009624
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004

08004070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004074:	b094      	sub	sp, #80	@ 0x50
 8004076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004088:	4b79      	ldr	r3, [pc, #484]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d00d      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004094:	2b08      	cmp	r3, #8
 8004096:	f200 80e1 	bhi.w	800425c <HAL_RCC_GetSysClockFreq+0x1ec>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0x34>
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x3a>
 80040a2:	e0db      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a4:	4b73      	ldr	r3, [pc, #460]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x204>)
 80040a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040a8:	e0db      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040aa:	4b73      	ldr	r3, [pc, #460]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x208>)
 80040ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ae:	e0d8      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d063      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	2200      	movs	r2, #0
 80040ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040da:	2300      	movs	r3, #0
 80040dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	f04f 0000 	mov.w	r0, #0
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	0159      	lsls	r1, r3, #5
 80040f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f4:	0150      	lsls	r0, r2, #5
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4621      	mov	r1, r4
 80040fc:	1a51      	subs	r1, r2, r1
 80040fe:	6139      	str	r1, [r7, #16]
 8004100:	4629      	mov	r1, r5
 8004102:	eb63 0301 	sbc.w	r3, r3, r1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004114:	4659      	mov	r1, fp
 8004116:	018b      	lsls	r3, r1, #6
 8004118:	4651      	mov	r1, sl
 800411a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800411e:	4651      	mov	r1, sl
 8004120:	018a      	lsls	r2, r1, #6
 8004122:	4651      	mov	r1, sl
 8004124:	ebb2 0801 	subs.w	r8, r2, r1
 8004128:	4659      	mov	r1, fp
 800412a:	eb63 0901 	sbc.w	r9, r3, r1
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004142:	4690      	mov	r8, r2
 8004144:	4699      	mov	r9, r3
 8004146:	4623      	mov	r3, r4
 8004148:	eb18 0303 	adds.w	r3, r8, r3
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	462b      	mov	r3, r5
 8004150:	eb49 0303 	adc.w	r3, r9, r3
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004162:	4629      	mov	r1, r5
 8004164:	024b      	lsls	r3, r1, #9
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800416c:	4621      	mov	r1, r4
 800416e:	024a      	lsls	r2, r1, #9
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004176:	2200      	movs	r2, #0
 8004178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800417a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800417c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004180:	f7fc f876 	bl	8000270 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800418c:	e058      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418e:	4b38      	ldr	r3, [pc, #224]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	099b      	lsrs	r3, r3, #6
 8004194:	2200      	movs	r2, #0
 8004196:	4618      	mov	r0, r3
 8004198:	4611      	mov	r1, r2
 800419a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	2300      	movs	r3, #0
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	0159      	lsls	r1, r3, #5
 80041b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ba:	0150      	lsls	r0, r2, #5
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4641      	mov	r1, r8
 80041c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041e0:	ebb2 040a 	subs.w	r4, r2, sl
 80041e4:	eb63 050b 	sbc.w	r5, r3, fp
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	00eb      	lsls	r3, r5, #3
 80041f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f6:	00e2      	lsls	r2, r4, #3
 80041f8:	4614      	mov	r4, r2
 80041fa:	461d      	mov	r5, r3
 80041fc:	4643      	mov	r3, r8
 80041fe:	18e3      	adds	r3, r4, r3
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	464b      	mov	r3, r9
 8004204:	eb45 0303 	adc.w	r3, r5, r3
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004216:	4629      	mov	r1, r5
 8004218:	028b      	lsls	r3, r1, #10
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004220:	4621      	mov	r1, r4
 8004222:	028a      	lsls	r2, r1, #10
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422a:	2200      	movs	r2, #0
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	61fa      	str	r2, [r7, #28]
 8004230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004234:	f7fc f81c 	bl	8000270 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004250:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800425a:	e002      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x204>)
 800425e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004264:	4618      	mov	r0, r3
 8004266:	3750      	adds	r7, #80	@ 0x50
 8004268:	46bd      	mov	sp, r7
 800426a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	00f42400 	.word	0x00f42400
 8004278:	007a1200 	.word	0x007a1200

0800427c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_RCC_GetHCLKFreq+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000000 	.word	0x20000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004298:	f7ff fff0 	bl	800427c <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b05      	ldr	r3, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4903      	ldr	r1, [pc, #12]	@ (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40023800 	.word	0x40023800
 80042b8:	08009634 	.word	0x08009634

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d035      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042e4:	4b62      	ldr	r3, [pc, #392]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ea:	f7fd f803 	bl	80012f4 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042f2:	f7fc ffff 	bl	80012f4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0b0      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004304:	4b5b      	ldr	r3, [pc, #364]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	019a      	lsls	r2, r3, #6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	071b      	lsls	r3, r3, #28
 800431c:	4955      	ldr	r1, [pc, #340]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004324:	4b52      	ldr	r3, [pc, #328]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800432a:	f7fc ffe3 	bl	80012f4 <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004332:	f7fc ffdf 	bl	80012f4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e090      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004344:	4b4b      	ldr	r3, [pc, #300]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 8083 	beq.w	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b44      	ldr	r3, [pc, #272]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	4a43      	ldr	r2, [pc, #268]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	@ 0x40
 800436e:	4b41      	ldr	r3, [pc, #260]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800437a:	4b3f      	ldr	r3, [pc, #252]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a3e      	ldr	r2, [pc, #248]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004384:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7fc ffb5 	bl	80012f4 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438e:	f7fc ffb1 	bl	80012f4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e062      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043a0:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ac:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02f      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d028      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043d4:	4b29      	ldr	r3, [pc, #164]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043da:	4b28      	ldr	r3, [pc, #160]	@ (800447c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043e0:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043e6:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d114      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fc ff7f 	bl	80012f4 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fc ff7b 	bl	80012f4 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e02a      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	4b18      	ldr	r3, [pc, #96]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ee      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004428:	d10d      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800442a:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800443a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443e:	490d      	ldr	r1, [pc, #52]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
 8004444:	e005      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004446:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4a0a      	ldr	r2, [pc, #40]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004450:	6093      	str	r3, [r2, #8]
 8004452:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	4905      	ldr	r1, [pc, #20]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	42470068 	.word	0x42470068
 8004474:	40023800 	.word	0x40023800
 8004478:	40007000 	.word	0x40007000
 800447c:	42470e40 	.word	0x42470e40

08004480 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d13f      	bne.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800449e:	4b24      	ldr	r3, [pc, #144]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044a6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044b4:	d12f      	bne.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044b8:	617b      	str	r3, [r7, #20]
          break;
 80044ba:	e02f      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044c8:	d108      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044ca:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044d2:	4a19      	ldr	r2, [pc, #100]	@ (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e007      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044dc:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044e4:	4a15      	ldr	r2, [pc, #84]	@ (800453c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044ec:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004506:	0f1b      	lsrs	r3, r3, #28
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	617b      	str	r3, [r7, #20]
          break;
 8004514:	e002      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
          break;
 800451a:	bf00      	nop
        }
      }
      break;
 800451c:	e000      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800451e:	bf00      	nop
    }
  }
  return frequency;
 8004520:	697b      	ldr	r3, [r7, #20]
}
 8004522:	4618      	mov	r0, r3
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00bb8000 	.word	0x00bb8000
 8004538:	007a1200 	.word	0x007a1200
 800453c:	00f42400 	.word	0x00f42400

08004540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e07b      	b.n	800464a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d108      	bne.n	800456c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004562:	d009      	beq.n	8004578 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	61da      	str	r2, [r3, #28]
 800456a:	e005      	b.n	8004578 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fc9c 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fc:	ea42 0103 	orr.w	r1, r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	f003 0104 	and.w	r1, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	f003 0210 	and.w	r2, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69da      	ldr	r2, [r3, #28]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004638:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004652:	b084      	sub	sp, #16
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	f107 001c 	add.w	r0, r7, #28
 8004660:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004664:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004668:	2b01      	cmp	r3, #1
 800466a:	d123      	bne.n	80046b4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004670:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004694:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 fae9 	bl	8005c80 <USB_CoreReset>
 80046ae:	4603      	mov	r3, r0
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	e01b      	b.n	80046ec <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f001 fadd 	bl	8005c80 <USB_CoreReset>
 80046c6:	4603      	mov	r3, r0
 80046c8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80046de:	e005      	b.n	80046ec <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046ec:	7fbb      	ldrb	r3, [r7, #30]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10b      	bne.n	800470a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f043 0206 	orr.w	r2, r3, #6
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004716:	b004      	add	sp, #16
 8004718:	4770      	bx	lr
	...

0800471c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d165      	bne.n	80047fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4a41      	ldr	r2, [pc, #260]	@ (8004838 <USB_SetTurnaroundTime+0x11c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d906      	bls.n	8004746 <USB_SetTurnaroundTime+0x2a>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4a40      	ldr	r2, [pc, #256]	@ (800483c <USB_SetTurnaroundTime+0x120>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d202      	bcs.n	8004746 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004740:	230f      	movs	r3, #15
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	e062      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4a3c      	ldr	r2, [pc, #240]	@ (800483c <USB_SetTurnaroundTime+0x120>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d306      	bcc.n	800475c <USB_SetTurnaroundTime+0x40>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	4a3b      	ldr	r2, [pc, #236]	@ (8004840 <USB_SetTurnaroundTime+0x124>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d202      	bcs.n	800475c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004756:	230e      	movs	r3, #14
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	e057      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4a38      	ldr	r2, [pc, #224]	@ (8004840 <USB_SetTurnaroundTime+0x124>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d306      	bcc.n	8004772 <USB_SetTurnaroundTime+0x56>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4a37      	ldr	r2, [pc, #220]	@ (8004844 <USB_SetTurnaroundTime+0x128>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d202      	bcs.n	8004772 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800476c:	230d      	movs	r3, #13
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e04c      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4a33      	ldr	r2, [pc, #204]	@ (8004844 <USB_SetTurnaroundTime+0x128>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d306      	bcc.n	8004788 <USB_SetTurnaroundTime+0x6c>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4a32      	ldr	r2, [pc, #200]	@ (8004848 <USB_SetTurnaroundTime+0x12c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d802      	bhi.n	8004788 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004782:	230c      	movs	r3, #12
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e041      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a2f      	ldr	r2, [pc, #188]	@ (8004848 <USB_SetTurnaroundTime+0x12c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d906      	bls.n	800479e <USB_SetTurnaroundTime+0x82>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a2e      	ldr	r2, [pc, #184]	@ (800484c <USB_SetTurnaroundTime+0x130>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d802      	bhi.n	800479e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004798:	230b      	movs	r3, #11
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e036      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4a2a      	ldr	r2, [pc, #168]	@ (800484c <USB_SetTurnaroundTime+0x130>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d906      	bls.n	80047b4 <USB_SetTurnaroundTime+0x98>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a29      	ldr	r2, [pc, #164]	@ (8004850 <USB_SetTurnaroundTime+0x134>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d802      	bhi.n	80047b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047ae:	230a      	movs	r3, #10
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e02b      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <USB_SetTurnaroundTime+0x134>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d906      	bls.n	80047ca <USB_SetTurnaroundTime+0xae>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a25      	ldr	r2, [pc, #148]	@ (8004854 <USB_SetTurnaroundTime+0x138>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d202      	bcs.n	80047ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047c4:	2309      	movs	r3, #9
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e020      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a21      	ldr	r2, [pc, #132]	@ (8004854 <USB_SetTurnaroundTime+0x138>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d306      	bcc.n	80047e0 <USB_SetTurnaroundTime+0xc4>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a20      	ldr	r2, [pc, #128]	@ (8004858 <USB_SetTurnaroundTime+0x13c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d802      	bhi.n	80047e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047da:	2308      	movs	r3, #8
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e015      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004858 <USB_SetTurnaroundTime+0x13c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d906      	bls.n	80047f6 <USB_SetTurnaroundTime+0xda>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a1c      	ldr	r2, [pc, #112]	@ (800485c <USB_SetTurnaroundTime+0x140>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d202      	bcs.n	80047f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047f0:	2307      	movs	r3, #7
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e00a      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047f6:	2306      	movs	r3, #6
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	e007      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004802:	2309      	movs	r3, #9
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e001      	b.n	800480c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004808:	2309      	movs	r3, #9
 800480a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	00d8acbf 	.word	0x00d8acbf
 800483c:	00e4e1c0 	.word	0x00e4e1c0
 8004840:	00f42400 	.word	0x00f42400
 8004844:	01067380 	.word	0x01067380
 8004848:	011a499f 	.word	0x011a499f
 800484c:	01312cff 	.word	0x01312cff
 8004850:	014ca43f 	.word	0x014ca43f
 8004854:	016e3600 	.word	0x016e3600
 8004858:	01a6ab1f 	.word	0x01a6ab1f
 800485c:	01e84800 	.word	0x01e84800

08004860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0201 	bic.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d115      	bne.n	80048f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048d2:	200a      	movs	r0, #10
 80048d4:	f7fc fd1a 	bl	800130c <HAL_Delay>
      ms += 10U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	330a      	adds	r3, #10
 80048dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 f93f 	bl	8005b62 <USB_GetMode>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d01e      	beq.n	8004928 <USB_SetCurrentMode+0x84>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80048ee:	d9f0      	bls.n	80048d2 <USB_SetCurrentMode+0x2e>
 80048f0:	e01a      	b.n	8004928 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d115      	bne.n	8004924 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004904:	200a      	movs	r0, #10
 8004906:	f7fc fd01 	bl	800130c <HAL_Delay>
      ms += 10U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	330a      	adds	r3, #10
 800490e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 f926 	bl	8005b62 <USB_GetMode>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <USB_SetCurrentMode+0x84>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004920:	d9f0      	bls.n	8004904 <USB_SetCurrentMode+0x60>
 8004922:	e001      	b.n	8004928 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e005      	b.n	8004934 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2bc8      	cmp	r3, #200	@ 0xc8
 800492c:	d101      	bne.n	8004932 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800493c:	b084      	sub	sp, #16
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800494a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	e009      	b.n	8004970 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3340      	adds	r3, #64	@ 0x40
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3301      	adds	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b0e      	cmp	r3, #14
 8004974:	d9f2      	bls.n	800495c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004976:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11c      	bne.n	80049b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80049b6:	e00b      	b.n	80049d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049d6:	461a      	mov	r2, r3
 80049d8:	2300      	movs	r3, #0
 80049da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10d      	bne.n	8004a00 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ec:	2100      	movs	r1, #0
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f968 	bl	8004cc4 <USB_SetDevSpeed>
 80049f4:	e008      	b.n	8004a08 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049f6:	2101      	movs	r1, #1
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f963 	bl	8004cc4 <USB_SetDevSpeed>
 80049fe:	e003      	b.n	8004a08 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a00:	2103      	movs	r1, #3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f95e 	bl	8004cc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a08:	2110      	movs	r1, #16
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8fa 	bl	8004c04 <USB_FlushTxFifo>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f924 	bl	8004c68 <USB_FlushRxFifo>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a30:	461a      	mov	r2, r3
 8004a32:	2300      	movs	r3, #0
 8004a34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	e043      	b.n	8004adc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a6a:	d118      	bne.n	8004a9e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e013      	b.n	8004ab0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	e008      	b.n	8004ab0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ad4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d3b5      	bcc.n	8004a54 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	e043      	b.n	8004b76 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b04:	d118      	bne.n	8004b38 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	e013      	b.n	8004b4a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e008      	b.n	8004b4a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b44:	461a      	mov	r2, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b56:	461a      	mov	r2, r3
 8004b58:	2300      	movs	r3, #0
 8004b5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	3301      	adds	r3, #1
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d3b5      	bcc.n	8004aee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004ba2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d105      	bne.n	8004bb8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f043 0210 	orr.w	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <USB_DevInit+0x2c4>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f043 0208 	orr.w	r2, r3, #8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d107      	bne.n	8004bf0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004be8:	f043 0304 	orr.w	r3, r3, #4
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bfc:	b004      	add	sp, #16
 8004bfe:	4770      	bx	lr
 8004c00:	803c3800 	.word	0x803c3800

08004c04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3301      	adds	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c1e:	d901      	bls.n	8004c24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e01b      	b.n	8004c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	daf2      	bge.n	8004c12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	019b      	lsls	r3, r3, #6
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c48:	d901      	bls.n	8004c4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e006      	b.n	8004c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d0f0      	beq.n	8004c3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c80:	d901      	bls.n	8004c86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e018      	b.n	8004cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	daf2      	bge.n	8004c74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2210      	movs	r2, #16
 8004c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ca4:	d901      	bls.n	8004caa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e006      	b.n	8004cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d0f0      	beq.n	8004c98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0306 	and.w	r3, r3, #6
 8004d0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
 8004d1a:	e00a      	b.n	8004d32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d002      	beq.n	8004d28 <USB_GetDevSpeed+0x32>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b06      	cmp	r3, #6
 8004d26:	d102      	bne.n	8004d2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	75fb      	strb	r3, [r7, #23]
 8004d2c:	e001      	b.n	8004d32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d2e:	230f      	movs	r3, #15
 8004d30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d13a      	bne.n	8004dd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d155      	bne.n	8004e40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	791b      	ldrb	r3, [r3, #4]
 8004dae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004db0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	059b      	lsls	r3, r3, #22
 8004db6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004db8:	4313      	orrs	r3, r2
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e036      	b.n	8004e40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	2101      	movs	r1, #1
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11a      	bne.n	8004e40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	791b      	ldrb	r3, [r3, #4]
 8004e24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e26:	430b      	orrs	r3, r1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d161      	bne.n	8004f30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e82:	d11f      	bne.n	8004ec4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ea2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	2101      	movs	r1, #1
 8004efa:	fa01 f303 	lsl.w	r3, r1, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	68f9      	ldr	r1, [r7, #12]
 8004f04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	0159      	lsls	r1, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	440b      	add	r3, r1
 8004f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f26:	4619      	mov	r1, r3
 8004f28:	4b35      	ldr	r3, [pc, #212]	@ (8005000 <USB_DeactivateEndpoint+0x1b0>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
 8004f2e:	e060      	b.n	8004ff2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f46:	d11f      	bne.n	8004f88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	2101      	movs	r1, #1
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fa8:	4013      	ands	r3, r2
 8004faa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	0159      	lsls	r1, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	440b      	add	r3, r1
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fea:	4619      	mov	r1, r3
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <USB_DeactivateEndpoint+0x1b4>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	ec337800 	.word	0xec337800
 8005004:	eff37800 	.word	0xeff37800

08005008 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b01      	cmp	r3, #1
 8005026:	f040 817f 	bne.w	8005328 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d132      	bne.n	8005098 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800504c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005050:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005054:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005070:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005090:	0cdb      	lsrs	r3, r3, #19
 8005092:	04db      	lsls	r3, r3, #19
 8005094:	6113      	str	r3, [r2, #16]
 8005096:	e097      	b.n	80051c8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050b2:	0cdb      	lsrs	r3, r3, #19
 80050b4:	04db      	lsls	r3, r3, #19
 80050b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80050da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d11a      	bne.n	8005118 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d903      	bls.n	80050f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005114:	6113      	str	r3, [r2, #16]
 8005116:	e044      	b.n	80051a2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4413      	add	r3, r2
 8005122:	1e5a      	subs	r2, r3, #1
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	8afb      	ldrh	r3, [r7, #22]
 800513e:	04d9      	lsls	r1, r3, #19
 8005140:	4ba4      	ldr	r3, [pc, #656]	@ (80053d4 <USB_EPStartXfer+0x3cc>)
 8005142:	400b      	ands	r3, r1
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	0148      	lsls	r0, r1, #5
 8005148:	69f9      	ldr	r1, [r7, #28]
 800514a:	4401      	add	r1, r0
 800514c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005150:	4313      	orrs	r3, r2
 8005152:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	791b      	ldrb	r3, [r3, #4]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d122      	bne.n	80051a2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005176:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800517a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	8afb      	ldrh	r3, [r7, #22]
 800518c:	075b      	lsls	r3, r3, #29
 800518e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005192:	69b9      	ldr	r1, [r7, #24]
 8005194:	0148      	lsls	r0, r1, #5
 8005196:	69f9      	ldr	r1, [r7, #28]
 8005198:	4401      	add	r1, r0
 800519a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	0148      	lsls	r0, r1, #5
 80051bc:	69f9      	ldr	r1, [r7, #28]
 80051be:	4401      	add	r1, r0
 80051c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80051c4:	4313      	orrs	r3, r2
 80051c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d14b      	bne.n	8005266 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	791b      	ldrb	r3, [r3, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d128      	bne.n	8005244 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d110      	bne.n	8005224 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800521c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e00f      	b.n	8005244 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005242:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800525e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e166      	b.n	8005534 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005280:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005284:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	791b      	ldrb	r3, [r3, #4]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d015      	beq.n	80052ba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 814e 	beq.w	8005534 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f303 	lsl.w	r3, r1, r3
 80052ae:	69f9      	ldr	r1, [r7, #28]
 80052b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052b4:	4313      	orrs	r3, r2
 80052b6:	634b      	str	r3, [r1, #52]	@ 0x34
 80052b8:	e13c      	b.n	8005534 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d110      	bne.n	80052ec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e00f      	b.n	800530c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	68d9      	ldr	r1, [r3, #12]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781a      	ldrb	r2, [r3, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	b298      	uxth	r0, r3
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4603      	mov	r3, r0
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f9b9 	bl	8005698 <USB_WritePacket>
 8005326:	e105      	b.n	8005534 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005342:	0cdb      	lsrs	r3, r3, #19
 8005344:	04db      	lsls	r3, r3, #19
 8005346:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005362:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005366:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800536a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d132      	bne.n	80053d8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a0:	69b9      	ldr	r1, [r7, #24]
 80053a2:	0148      	lsls	r0, r1, #5
 80053a4:	69f9      	ldr	r1, [r7, #28]
 80053a6:	4401      	add	r1, r0
 80053a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80053ac:	4313      	orrs	r3, r2
 80053ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ce:	6113      	str	r3, [r2, #16]
 80053d0:	e062      	b.n	8005498 <USB_EPStartXfer+0x490>
 80053d2:	bf00      	nop
 80053d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d123      	bne.n	8005428 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f6:	69b9      	ldr	r1, [r7, #24]
 80053f8:	0148      	lsls	r0, r1, #5
 80053fa:	69f9      	ldr	r1, [r7, #28]
 80053fc:	4401      	add	r1, r0
 80053fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005402:	4313      	orrs	r3, r2
 8005404:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005420:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005424:	6113      	str	r3, [r2, #16]
 8005426:	e037      	b.n	8005498 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4413      	add	r3, r2
 8005432:	1e5a      	subs	r2, r3, #1
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	8afa      	ldrh	r2, [r7, #22]
 8005444:	fb03 f202 	mul.w	r2, r3, r2
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	8afb      	ldrh	r3, [r7, #22]
 800545c:	04d9      	lsls	r1, r3, #19
 800545e:	4b38      	ldr	r3, [pc, #224]	@ (8005540 <USB_EPStartXfer+0x538>)
 8005460:	400b      	ands	r3, r1
 8005462:	69b9      	ldr	r1, [r7, #24]
 8005464:	0148      	lsls	r0, r1, #5
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	4401      	add	r1, r0
 800546a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800546e:	4313      	orrs	r3, r2
 8005470:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	0148      	lsls	r0, r1, #5
 800548c:	69f9      	ldr	r1, [r7, #28]
 800548e:	4401      	add	r1, r0
 8005490:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005494:	4313      	orrs	r3, r2
 8005496:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10d      	bne.n	80054ba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	68d9      	ldr	r1, [r3, #12]
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	460a      	mov	r2, r1
 80054b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	791b      	ldrb	r3, [r3, #4]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d128      	bne.n	8005514 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d110      	bne.n	80054f4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	e00f      	b.n	8005514 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005512:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800552e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	1ff80000 	.word	0x1ff80000

08005544 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d14a      	bne.n	80055f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800557a:	f040 8086 	bne.w	800568a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	7812      	ldrb	r2, [r2, #0]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	7812      	ldrb	r2, [r2, #0]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d902      	bls.n	80055dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
          break;
 80055da:	e056      	b.n	800568a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055f4:	d0e7      	beq.n	80055c6 <USB_EPStopXfer+0x82>
 80055f6:	e048      	b.n	800568a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800560c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005610:	d13b      	bne.n	800568a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005630:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005634:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005654:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005658:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005666:	4293      	cmp	r3, r2
 8005668:	d902      	bls.n	8005670 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
          break;
 800566e:	e00c      	b.n	800568a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005688:	d0e7      	beq.n	800565a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800568a:	7dfb      	ldrb	r3, [r7, #23]
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	@ 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	460b      	mov	r3, r1
 80056a8:	71fb      	strb	r3, [r7, #7]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d123      	bne.n	8005706 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056be:	88bb      	ldrh	r3, [r7, #4]
 80056c0:	3303      	adds	r3, #3
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	e018      	b.n	80056fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	031a      	lsls	r2, r3, #12
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056d8:	461a      	mov	r2, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	3301      	adds	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	d3e2      	bcc.n	80056cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3724      	adds	r7, #36	@ 0x24
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005714:	b480      	push	{r7}
 8005716:	b08b      	sub	sp, #44	@ 0x2c
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	4613      	mov	r3, r2
 8005720:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	b29b      	uxth	r3, r3
 8005730:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800573a:	2300      	movs	r3, #0
 800573c:	623b      	str	r3, [r7, #32]
 800573e:	e014      	b.n	800576a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	601a      	str	r2, [r3, #0]
    pDest++;
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	3301      	adds	r3, #1
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	3301      	adds	r3, #1
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	3301      	adds	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	3301      	adds	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	3301      	adds	r3, #1
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	429a      	cmp	r2, r3
 8005770:	d3e6      	bcc.n	8005740 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005772:	8bfb      	ldrh	r3, [r7, #30]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01e      	beq.n	80057b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005782:	461a      	mov	r2, r3
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	b2da      	uxtb	r2, r3
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	701a      	strb	r2, [r3, #0]
      i++;
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	3301      	adds	r3, #1
 80057a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	3301      	adds	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80057aa:	8bfb      	ldrh	r3, [r7, #30]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057b0:	8bfb      	ldrh	r3, [r7, #30]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ea      	bne.n	800578c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	372c      	adds	r7, #44	@ 0x2c
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d12c      	bne.n	800583a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	db12      	blt.n	8005818 <USB_EPSetStall+0x54>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00f      	beq.n	8005818 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005812:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005816:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005832:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e02b      	b.n	8005892 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	db12      	blt.n	8005872 <USB_EPSetStall+0xae>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00f      	beq.n	8005872 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800586c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005870:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800588c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005890:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d128      	bne.n	800590e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	791b      	ldrb	r3, [r3, #4]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d003      	beq.n	80058ec <USB_EPClearStall+0x4c>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	791b      	ldrb	r3, [r3, #4]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d138      	bne.n	800595e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e027      	b.n	800595e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005928:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800592c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	791b      	ldrb	r3, [r3, #4]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d003      	beq.n	800593e <USB_EPClearStall+0x9e>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	791b      	ldrb	r3, [r3, #4]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d10f      	bne.n	800595e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800598a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800598e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80059a0:	68f9      	ldr	r1, [r7, #12]
 80059a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a6:	4313      	orrs	r3, r2
 80059a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e6:	f023 0302 	bic.w	r3, r3, #2
 80059ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a14:	f023 0303 	bic.w	r3, r3, #3
 8005a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4013      	ands	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a54:	68fb      	ldr	r3, [r7, #12]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	0c1b      	lsrs	r3, r3, #16
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	b29b      	uxth	r3, r3
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b085      	sub	sp, #20
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005af8:	68bb      	ldr	r3, [r7, #8]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b087      	sub	sp, #28
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	fa22 f303 	lsr.w	r3, r2, r3
 8005b36:	01db      	lsls	r3, r3, #7
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4013      	ands	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b54:	68bb      	ldr	r3, [r7, #8]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b9c:	f023 0307 	bic.w	r3, r3, #7
 8005ba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	333c      	adds	r3, #60	@ 0x3c
 8005bda:	3304      	adds	r3, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4a26      	ldr	r2, [pc, #152]	@ (8005c7c <USB_EP0_OutStart+0xb8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d90a      	bls.n	8005bfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bf8:	d101      	bne.n	8005bfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e037      	b.n	8005c6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c04:	461a      	mov	r2, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c2c:	f043 0318 	orr.w	r3, r3, #24
 8005c30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005c44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c46:	7afb      	ldrb	r3, [r7, #11]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d10f      	bne.n	8005c6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005c6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	4f54300a 	.word	0x4f54300a

08005c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c98:	d901      	bls.n	8005c9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e022      	b.n	8005ce4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	daf2      	bge.n	8005c8c <USB_CoreReset+0xc>

  count = 10U;
 8005ca6:	230a      	movs	r3, #10
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005caa:	e002      	b.n	8005cb2 <USB_CoreReset+0x32>
  {
    count--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f9      	bne.n	8005cac <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f043 0201 	orr.w	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cd0:	d901      	bls.n	8005cd6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e006      	b.n	8005ce4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d0f0      	beq.n	8005cc4 <USB_CoreReset+0x44>

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005cfc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005d00:	f002 fcca 	bl	8008698 <USBD_static_malloc>
 8005d04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	32b0      	adds	r2, #176	@ 0xb0
 8005d16:	2100      	movs	r1, #0
 8005d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e0d4      	b.n	8005eca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d20:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005d24:	2100      	movs	r1, #0
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f002 fe11 	bl	800894e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	32b0      	adds	r2, #176	@ 0xb0
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	32b0      	adds	r2, #176	@ 0xb0
 8005d46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	7c1b      	ldrb	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d138      	bne.n	8005dca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d58:	4b5e      	ldr	r3, [pc, #376]	@ (8005ed4 <USBD_CDC_Init+0x1e4>)
 8005d5a:	7819      	ldrb	r1, [r3, #0]
 8005d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d60:	2202      	movs	r2, #2
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f002 fb75 	bl	8008452 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d68:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed4 <USBD_CDC_Init+0x1e4>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3323      	adds	r3, #35	@ 0x23
 8005d7e:	2201      	movs	r2, #1
 8005d80:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d82:	4b55      	ldr	r3, [pc, #340]	@ (8005ed8 <USBD_CDC_Init+0x1e8>)
 8005d84:	7819      	ldrb	r1, [r3, #0]
 8005d86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f002 fb60 	bl	8008452 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d92:	4b51      	ldr	r3, [pc, #324]	@ (8005ed8 <USBD_CDC_Init+0x1e8>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dae:	4b4b      	ldr	r3, [pc, #300]	@ (8005edc <USBD_CDC_Init+0x1ec>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 020f 	and.w	r2, r3, #15
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	331c      	adds	r3, #28
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e035      	b.n	8005e36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dca:	4b42      	ldr	r3, [pc, #264]	@ (8005ed4 <USBD_CDC_Init+0x1e4>)
 8005dcc:	7819      	ldrb	r1, [r3, #0]
 8005dce:	2340      	movs	r3, #64	@ 0x40
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f002 fb3d 	bl	8008452 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed4 <USBD_CDC_Init+0x1e4>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	3323      	adds	r3, #35	@ 0x23
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005df2:	4b39      	ldr	r3, [pc, #228]	@ (8005ed8 <USBD_CDC_Init+0x1e8>)
 8005df4:	7819      	ldrb	r1, [r3, #0]
 8005df6:	2340      	movs	r3, #64	@ 0x40
 8005df8:	2202      	movs	r2, #2
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f002 fb29 	bl	8008452 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e00:	4b35      	ldr	r3, [pc, #212]	@ (8005ed8 <USBD_CDC_Init+0x1e8>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f003 020f 	and.w	r2, r3, #15
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005e18:	2201      	movs	r2, #1
 8005e1a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8005edc <USBD_CDC_Init+0x1ec>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 020f 	and.w	r2, r3, #15
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	331c      	adds	r3, #28
 8005e32:	2210      	movs	r2, #16
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e36:	4b29      	ldr	r3, [pc, #164]	@ (8005edc <USBD_CDC_Init+0x1ec>)
 8005e38:	7819      	ldrb	r1, [r3, #0]
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f002 fb07 	bl	8008452 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e44:	4b25      	ldr	r3, [pc, #148]	@ (8005edc <USBD_CDC_Init+0x1ec>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	3323      	adds	r3, #35	@ 0x23
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	33b0      	adds	r3, #176	@ 0xb0
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e94:	2302      	movs	r3, #2
 8005e96:	e018      	b.n	8005eca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7c1b      	ldrb	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <USBD_CDC_Init+0x1e8>)
 8005ea2:	7819      	ldrb	r1, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f002 fbbe 	bl	8008630 <USBD_LL_PrepareReceive>
 8005eb4:	e008      	b.n	8005ec8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eb6:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <USBD_CDC_Init+0x1e8>)
 8005eb8:	7819      	ldrb	r1, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ec0:	2340      	movs	r3, #64	@ 0x40
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f002 fbb4 	bl	8008630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000093 	.word	0x20000093
 8005ed8:	20000094 	.word	0x20000094
 8005edc:	20000095 	.word	0x20000095

08005ee0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005eec:	4b3a      	ldr	r3, [pc, #232]	@ (8005fd8 <USBD_CDC_DeInit+0xf8>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f002 fad3 	bl	800849e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005ef8:	4b37      	ldr	r3, [pc, #220]	@ (8005fd8 <USBD_CDC_DeInit+0xf8>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 020f 	and.w	r2, r3, #15
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3323      	adds	r3, #35	@ 0x23
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f12:	4b32      	ldr	r3, [pc, #200]	@ (8005fdc <USBD_CDC_DeInit+0xfc>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f002 fac0 	bl	800849e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8005fdc <USBD_CDC_DeInit+0xfc>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f003 020f 	and.w	r2, r3, #15
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f3a:	4b29      	ldr	r3, [pc, #164]	@ (8005fe0 <USBD_CDC_DeInit+0x100>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f002 faac 	bl	800849e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f46:	4b26      	ldr	r3, [pc, #152]	@ (8005fe0 <USBD_CDC_DeInit+0x100>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f003 020f 	and.w	r2, r3, #15
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	3323      	adds	r3, #35	@ 0x23
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f60:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe0 <USBD_CDC_DeInit+0x100>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f003 020f 	and.w	r2, r3, #15
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	331c      	adds	r3, #28
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	32b0      	adds	r2, #176	@ 0xb0
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01f      	beq.n	8005fcc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	33b0      	adds	r3, #176	@ 0xb0
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32b0      	adds	r2, #176	@ 0xb0
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f002 fb80 	bl	80086b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	32b0      	adds	r2, #176	@ 0xb0
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000093 	.word	0x20000093
 8005fdc:	20000094 	.word	0x20000094
 8005fe0:	20000095 	.word	0x20000095

08005fe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	32b0      	adds	r2, #176	@ 0xb0
 8005ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	e0bf      	b.n	8006194 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800601c:	2b00      	cmp	r3, #0
 800601e:	d050      	beq.n	80060c2 <USBD_CDC_Setup+0xde>
 8006020:	2b20      	cmp	r3, #32
 8006022:	f040 80af 	bne.w	8006184 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	88db      	ldrh	r3, [r3, #6]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d03a      	beq.n	80060a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	b25b      	sxtb	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	da1b      	bge.n	8006070 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	33b0      	adds	r3, #176	@ 0xb0
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800604e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	88d2      	ldrh	r2, [r2, #6]
 8006054:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	88db      	ldrh	r3, [r3, #6]
 800605a:	2b07      	cmp	r3, #7
 800605c:	bf28      	it	cs
 800605e:	2307      	movcs	r3, #7
 8006060:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	89fa      	ldrh	r2, [r7, #14]
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f001 fda9 	bl	8007bc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800606e:	e090      	b.n	8006192 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	785a      	ldrb	r2, [r3, #1]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	88db      	ldrh	r3, [r3, #6]
 800607e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006080:	d803      	bhi.n	800608a <USBD_CDC_Setup+0xa6>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	88db      	ldrh	r3, [r3, #6]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	e000      	b.n	800608c <USBD_CDC_Setup+0xa8>
 800608a:	2240      	movs	r2, #64	@ 0x40
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006092:	6939      	ldr	r1, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800609a:	461a      	mov	r2, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fdbe 	bl	8007c1e <USBD_CtlPrepareRx>
      break;
 80060a2:	e076      	b.n	8006192 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	33b0      	adds	r3, #176	@ 0xb0
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	7850      	ldrb	r0, [r2, #1]
 80060ba:	2200      	movs	r2, #0
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	4798      	blx	r3
      break;
 80060c0:	e067      	b.n	8006192 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b0b      	cmp	r3, #11
 80060c8:	d851      	bhi.n	800616e <USBD_CDC_Setup+0x18a>
 80060ca:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <USBD_CDC_Setup+0xec>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	08006101 	.word	0x08006101
 80060d4:	0800617d 	.word	0x0800617d
 80060d8:	0800616f 	.word	0x0800616f
 80060dc:	0800616f 	.word	0x0800616f
 80060e0:	0800616f 	.word	0x0800616f
 80060e4:	0800616f 	.word	0x0800616f
 80060e8:	0800616f 	.word	0x0800616f
 80060ec:	0800616f 	.word	0x0800616f
 80060f0:	0800616f 	.word	0x0800616f
 80060f4:	0800616f 	.word	0x0800616f
 80060f8:	0800612b 	.word	0x0800612b
 80060fc:	08006155 	.word	0x08006155
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b03      	cmp	r3, #3
 800610a:	d107      	bne.n	800611c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800610c:	f107 030a 	add.w	r3, r7, #10
 8006110:	2202      	movs	r2, #2
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 fd53 	bl	8007bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800611a:	e032      	b.n	8006182 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fcd1 	bl	8007ac6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	75fb      	strb	r3, [r7, #23]
          break;
 8006128:	e02b      	b.n	8006182 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b03      	cmp	r3, #3
 8006134:	d107      	bne.n	8006146 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006136:	f107 030d 	add.w	r3, r7, #13
 800613a:	2201      	movs	r2, #1
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fd3e 	bl	8007bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006144:	e01d      	b.n	8006182 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fcbc 	bl	8007ac6 <USBD_CtlError>
            ret = USBD_FAIL;
 800614e:	2303      	movs	r3, #3
 8006150:	75fb      	strb	r3, [r7, #23]
          break;
 8006152:	e016      	b.n	8006182 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b03      	cmp	r3, #3
 800615e:	d00f      	beq.n	8006180 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 fcaf 	bl	8007ac6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006168:	2303      	movs	r3, #3
 800616a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800616c:	e008      	b.n	8006180 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fca8 	bl	8007ac6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006176:	2303      	movs	r3, #3
 8006178:	75fb      	strb	r3, [r7, #23]
          break;
 800617a:	e002      	b.n	8006182 <USBD_CDC_Setup+0x19e>
          break;
 800617c:	bf00      	nop
 800617e:	e008      	b.n	8006192 <USBD_CDC_Setup+0x1ae>
          break;
 8006180:	bf00      	nop
      }
      break;
 8006182:	e006      	b.n	8006192 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 fc9d 	bl	8007ac6 <USBD_CtlError>
      ret = USBD_FAIL;
 800618c:	2303      	movs	r3, #3
 800618e:	75fb      	strb	r3, [r7, #23]
      break;
 8006190:	bf00      	nop
  }

  return (uint8_t)ret;
 8006192:	7dfb      	ldrb	r3, [r7, #23]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80061ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	32b0      	adds	r2, #176	@ 0xb0
 80061ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e065      	b.n	8006292 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	32b0      	adds	r2, #176	@ 0xb0
 80061d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	3314      	adds	r3, #20
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d02f      	beq.n	8006250 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	3314      	adds	r3, #20
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	f003 010f 	and.w	r1, r3, #15
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	460b      	mov	r3, r1
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	440b      	add	r3, r1
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4403      	add	r3, r0
 8006218:	331c      	adds	r3, #28
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006226:	2b00      	cmp	r3, #0
 8006228:	d112      	bne.n	8006250 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	3314      	adds	r3, #20
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006242:	78f9      	ldrb	r1, [r7, #3]
 8006244:	2300      	movs	r3, #0
 8006246:	2200      	movs	r2, #0
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 f9d0 	bl	80085ee <USBD_LL_Transmit>
 800624e:	e01f      	b.n	8006290 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	33b0      	adds	r3, #176	@ 0xb0
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d010      	beq.n	8006290 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	33b0      	adds	r3, #176	@ 0xb0
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	32b0      	adds	r2, #176	@ 0xb0
 80062b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	32b0      	adds	r2, #176	@ 0xb0
 80062c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e01a      	b.n	8006302 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f002 f9ce 	bl	8008672 <USBD_LL_GetRxDataSize>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	33b0      	adds	r3, #176	@ 0xb0
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80062fc:	4611      	mov	r1, r2
 80062fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	32b0      	adds	r2, #176	@ 0xb0
 800631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006320:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006328:	2303      	movs	r3, #3
 800632a:	e024      	b.n	8006376 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	33b0      	adds	r3, #176	@ 0xb0
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d019      	beq.n	8006374 <USBD_CDC_EP0_RxReady+0x6a>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006346:	2bff      	cmp	r3, #255	@ 0xff
 8006348:	d014      	beq.n	8006374 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	33b0      	adds	r3, #176	@ 0xb0
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006362:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800636a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	22ff      	movs	r2, #255	@ 0xff
 8006370:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006388:	2182      	movs	r1, #130	@ 0x82
 800638a:	4818      	ldr	r0, [pc, #96]	@ (80063ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800638c:	f000 fd62 	bl	8006e54 <USBD_GetEpDesc>
 8006390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006392:	2101      	movs	r1, #1
 8006394:	4815      	ldr	r0, [pc, #84]	@ (80063ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006396:	f000 fd5d 	bl	8006e54 <USBD_GetEpDesc>
 800639a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800639c:	2181      	movs	r1, #129	@ 0x81
 800639e:	4813      	ldr	r0, [pc, #76]	@ (80063ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063a0:	f000 fd58 	bl	8006e54 <USBD_GetEpDesc>
 80063a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2210      	movs	r2, #16
 80063b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063c0:	711a      	strb	r2, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d006      	beq.n	80063da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063d4:	711a      	strb	r2, [r3, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2243      	movs	r2, #67	@ 0x43
 80063de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063e0:	4b02      	ldr	r3, [pc, #8]	@ (80063ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000050 	.word	0x20000050

080063f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063f8:	2182      	movs	r1, #130	@ 0x82
 80063fa:	4818      	ldr	r0, [pc, #96]	@ (800645c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063fc:	f000 fd2a 	bl	8006e54 <USBD_GetEpDesc>
 8006400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006402:	2101      	movs	r1, #1
 8006404:	4815      	ldr	r0, [pc, #84]	@ (800645c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006406:	f000 fd25 	bl	8006e54 <USBD_GetEpDesc>
 800640a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800640c:	2181      	movs	r1, #129	@ 0x81
 800640e:	4813      	ldr	r0, [pc, #76]	@ (800645c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006410:	f000 fd20 	bl	8006e54 <USBD_GetEpDesc>
 8006414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2210      	movs	r2, #16
 8006420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d006      	beq.n	8006436 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	2200      	movs	r2, #0
 800642c:	711a      	strb	r2, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f042 0202 	orr.w	r2, r2, #2
 8006434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d006      	beq.n	800644a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	711a      	strb	r2, [r3, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f042 0202 	orr.w	r2, r2, #2
 8006448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2243      	movs	r2, #67	@ 0x43
 800644e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006450:	4b02      	ldr	r3, [pc, #8]	@ (800645c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000050 	.word	0x20000050

08006460 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006468:	2182      	movs	r1, #130	@ 0x82
 800646a:	4818      	ldr	r0, [pc, #96]	@ (80064cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800646c:	f000 fcf2 	bl	8006e54 <USBD_GetEpDesc>
 8006470:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006472:	2101      	movs	r1, #1
 8006474:	4815      	ldr	r0, [pc, #84]	@ (80064cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006476:	f000 fced 	bl	8006e54 <USBD_GetEpDesc>
 800647a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800647c:	2181      	movs	r1, #129	@ 0x81
 800647e:	4813      	ldr	r0, [pc, #76]	@ (80064cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006480:	f000 fce8 	bl	8006e54 <USBD_GetEpDesc>
 8006484:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2210      	movs	r2, #16
 8006490:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d006      	beq.n	80064a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2200      	movs	r2, #0
 800649c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064a0:	711a      	strb	r2, [r3, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d006      	beq.n	80064ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064b4:	711a      	strb	r2, [r3, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2243      	movs	r2, #67	@ 0x43
 80064be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064c0:	4b02      	ldr	r3, [pc, #8]	@ (80064cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000050 	.word	0x20000050

080064d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	220a      	movs	r2, #10
 80064dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80064de:	4b03      	ldr	r3, [pc, #12]	@ (80064ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	2000000c 	.word	0x2000000c

080064f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	e009      	b.n	8006518 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	33b0      	adds	r3, #176	@ 0xb0
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	32b0      	adds	r2, #176	@ 0xb0
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006546:	2303      	movs	r3, #3
 8006548:	e008      	b.n	800655c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	32b0      	adds	r2, #176	@ 0xb0
 800657c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006580:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006588:	2303      	movs	r3, #3
 800658a:	e004      	b.n	8006596 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32b0      	adds	r2, #176	@ 0xb0
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80065bc:	2301      	movs	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e025      	b.n	8006616 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11f      	bne.n	8006614 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80065dc:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <USBD_CDC_TransmitPacket+0x7c>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4403      	add	r3, r0
 80065f6:	3314      	adds	r3, #20
 80065f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80065fa:	4b09      	ldr	r3, [pc, #36]	@ (8006620 <USBD_CDC_TransmitPacket+0x7c>)
 80065fc:	7819      	ldrb	r1, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 ffef 	bl	80085ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000093 	.word	0x20000093

08006624 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32b0      	adds	r2, #176	@ 0xb0
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32b0      	adds	r2, #176	@ 0xb0
 8006646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800664e:	2303      	movs	r3, #3
 8006650:	e018      	b.n	8006684 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7c1b      	ldrb	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800665a:	4b0c      	ldr	r3, [pc, #48]	@ (800668c <USBD_CDC_ReceivePacket+0x68>)
 800665c:	7819      	ldrb	r1, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 ffe1 	bl	8008630 <USBD_LL_PrepareReceive>
 800666e:	e008      	b.n	8006682 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <USBD_CDC_ReceivePacket+0x68>)
 8006672:	7819      	ldrb	r1, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800667a:	2340      	movs	r3, #64	@ 0x40
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 ffd7 	bl	8008630 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000094 	.word	0x20000094

08006690 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e01f      	b.n	80066e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	79fa      	ldrb	r2, [r7, #7]
 80066da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f001 fe51 	bl	8008384 <USBD_LL_Init>
 80066e2:	4603      	mov	r3, r0
 80066e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	e025      	b.n	8006754 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	32ae      	adds	r2, #174	@ 0xae
 800671a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00f      	beq.n	8006744 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	32ae      	adds	r2, #174	@ 0xae
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	f107 020e 	add.w	r2, r7, #14
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fe59 	bl	800841c <USBD_LL_Start>
 800676a:	4603      	mov	r3, r0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800677c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	4611      	mov	r1, r2
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	4611      	mov	r1, r2
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067e8:	2303      	movs	r3, #3
 80067ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f001 f922 	bl	8007a52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2b02      	cmp	r3, #2
 8006830:	d01a      	beq.n	8006868 <USBD_LL_SetupStage+0x72>
 8006832:	2b02      	cmp	r3, #2
 8006834:	d822      	bhi.n	800687c <USBD_LL_SetupStage+0x86>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <USBD_LL_SetupStage+0x4a>
 800683a:	2b01      	cmp	r3, #1
 800683c:	d00a      	beq.n	8006854 <USBD_LL_SetupStage+0x5e>
 800683e:	e01d      	b.n	800687c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb77 	bl	8006f3c <USBD_StdDevReq>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]
      break;
 8006852:	e020      	b.n	8006896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fbdf 	bl	8007020 <USBD_StdItfReq>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
      break;
 8006866:	e016      	b.n	8006896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fc41 	bl	80070f8 <USBD_StdEPReq>
 8006876:	4603      	mov	r3, r0
 8006878:	73fb      	strb	r3, [r7, #15]
      break;
 800687a:	e00c      	b.n	8006896 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006882:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 fe26 	bl	80084dc <USBD_LL_StallEP>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
      break;
 8006894:	bf00      	nop
  }

  return ret;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	460b      	mov	r3, r1
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d177      	bne.n	80069a8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80068be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	f040 80a1 	bne.w	8006a0e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	8992      	ldrh	r2, [r2, #12]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d91c      	bls.n	8006912 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	8992      	ldrh	r2, [r2, #12]
 80068e0:	1a9a      	subs	r2, r3, r2
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	8992      	ldrh	r2, [r2, #12]
 80068ee:	441a      	add	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	6919      	ldr	r1, [r3, #16]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	899b      	ldrh	r3, [r3, #12]
 80068fc:	461a      	mov	r2, r3
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4293      	cmp	r3, r2
 8006904:	bf38      	it	cc
 8006906:	4613      	movcc	r3, r2
 8006908:	461a      	mov	r2, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f001 f9a8 	bl	8007c60 <USBD_CtlContinueRx>
 8006910:	e07d      	b.n	8006a0e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2b02      	cmp	r3, #2
 800691e:	d014      	beq.n	800694a <USBD_LL_DataOutStage+0xaa>
 8006920:	2b02      	cmp	r3, #2
 8006922:	d81d      	bhi.n	8006960 <USBD_LL_DataOutStage+0xc0>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <USBD_LL_DataOutStage+0x8e>
 8006928:	2b01      	cmp	r3, #1
 800692a:	d003      	beq.n	8006934 <USBD_LL_DataOutStage+0x94>
 800692c:	e018      	b.n	8006960 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	75bb      	strb	r3, [r7, #22]
            break;
 8006932:	e018      	b.n	8006966 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800693a:	b2db      	uxtb	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fa6e 	bl	8006e20 <USBD_CoreFindIF>
 8006944:	4603      	mov	r3, r0
 8006946:	75bb      	strb	r3, [r7, #22]
            break;
 8006948:	e00d      	b.n	8006966 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006950:	b2db      	uxtb	r3, r3
 8006952:	4619      	mov	r1, r3
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fa70 	bl	8006e3a <USBD_CoreFindEP>
 800695a:	4603      	mov	r3, r0
 800695c:	75bb      	strb	r3, [r7, #22]
            break;
 800695e:	e002      	b.n	8006966 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	75bb      	strb	r3, [r7, #22]
            break;
 8006964:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006966:	7dbb      	ldrb	r3, [r7, #22]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d119      	bne.n	80069a0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b03      	cmp	r3, #3
 8006976:	d113      	bne.n	80069a0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006978:	7dba      	ldrb	r2, [r7, #22]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	32ae      	adds	r2, #174	@ 0xae
 800697e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006988:	7dba      	ldrb	r2, [r7, #22]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006990:	7dba      	ldrb	r2, [r7, #22]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	32ae      	adds	r2, #174	@ 0xae
 8006996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f001 f96e 	bl	8007c82 <USBD_CtlSendStatus>
 80069a6:	e032      	b.n	8006a0e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	4619      	mov	r1, r3
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 fa41 	bl	8006e3a <USBD_CoreFindEP>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069bc:	7dbb      	ldrb	r3, [r7, #22]
 80069be:	2bff      	cmp	r3, #255	@ 0xff
 80069c0:	d025      	beq.n	8006a0e <USBD_LL_DataOutStage+0x16e>
 80069c2:	7dbb      	ldrb	r3, [r7, #22]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d122      	bne.n	8006a0e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d117      	bne.n	8006a04 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069d4:	7dba      	ldrb	r2, [r7, #22]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	32ae      	adds	r2, #174	@ 0xae
 80069da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00f      	beq.n	8006a04 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80069e4:	7dba      	ldrb	r2, [r7, #22]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069ec:	7dba      	ldrb	r2, [r7, #22]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	32ae      	adds	r2, #174	@ 0xae
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	7afa      	ldrb	r2, [r7, #11]
 80069fa:	4611      	mov	r1, r2
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	4798      	blx	r3
 8006a00:	4603      	mov	r3, r0
 8006a02:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	e000      	b.n	8006a10 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	460b      	mov	r3, r1
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d178      	bne.n	8006b1e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3314      	adds	r3, #20
 8006a30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d163      	bne.n	8006b04 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	8992      	ldrh	r2, [r2, #12]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d91c      	bls.n	8006a82 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	8992      	ldrh	r2, [r2, #12]
 8006a50:	1a9a      	subs	r2, r3, r2
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	8992      	ldrh	r2, [r2, #12]
 8006a5e:	441a      	add	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6919      	ldr	r1, [r3, #16]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f001 f8c4 	bl	8007bfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a74:	2300      	movs	r3, #0
 8006a76:	2200      	movs	r2, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 fdd8 	bl	8008630 <USBD_LL_PrepareReceive>
 8006a80:	e040      	b.n	8006b04 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	899b      	ldrh	r3, [r3, #12]
 8006a86:	461a      	mov	r2, r3
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d11c      	bne.n	8006aca <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d316      	bcc.n	8006aca <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d20f      	bcs.n	8006aca <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2100      	movs	r1, #0
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 f8a4 	bl	8007bfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006abc:	2300      	movs	r3, #0
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f001 fdb4 	bl	8008630 <USBD_LL_PrepareReceive>
 8006ac8:	e01c      	b.n	8006b04 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d10f      	bne.n	8006af6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006af6:	2180      	movs	r1, #128	@ 0x80
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f001 fcef 	bl	80084dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f001 f8d2 	bl	8007ca8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d03a      	beq.n	8006b84 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff fe30 	bl	8006774 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b1c:	e032      	b.n	8006b84 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b1e:	7afb      	ldrb	r3, [r7, #11]
 8006b20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	4619      	mov	r1, r3
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f986 	bl	8006e3a <USBD_CoreFindEP>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2bff      	cmp	r3, #255	@ 0xff
 8006b36:	d025      	beq.n	8006b84 <USBD_LL_DataInStage+0x16c>
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d122      	bne.n	8006b84 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d11c      	bne.n	8006b84 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b4a:	7dfa      	ldrb	r2, [r7, #23]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	32ae      	adds	r2, #174	@ 0xae
 8006b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d014      	beq.n	8006b84 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006b5a:	7dfa      	ldrb	r2, [r7, #23]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b62:	7dfa      	ldrb	r2, [r7, #23]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	32ae      	adds	r2, #174	@ 0xae
 8006b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	7afa      	ldrb	r2, [r7, #11]
 8006b70:	4611      	mov	r1, r2
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	4798      	blx	r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b7a:	7dbb      	ldrb	r3, [r7, #22]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006b80:	7dbb      	ldrb	r3, [r7, #22]
 8006b82:	e000      	b.n	8006b86 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3718      	adds	r7, #24
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d014      	beq.n	8006bf4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6852      	ldr	r2, [r2, #4]
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	4611      	mov	r1, r2
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bf4:	2340      	movs	r3, #64	@ 0x40
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fc29 	bl	8008452 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2240      	movs	r2, #64	@ 0x40
 8006c0c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c10:	2340      	movs	r3, #64	@ 0x40
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	@ 0x80
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f001 fc1b 	bl	8008452 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2240      	movs	r2, #64	@ 0x40
 8006c28:	841a      	strh	r2, [r3, #32]

  return ret;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	78fa      	ldrb	r2, [r7, #3]
 8006c44:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d006      	beq.n	8006c76 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d106      	bne.n	8006cae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d110      	bne.n	8006cf2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00b      	beq.n	8006cf2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	32ae      	adds	r2, #174	@ 0xae
 8006d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e01c      	b.n	8006d58 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d115      	bne.n	8006d56 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	32ae      	adds	r2, #174	@ 0xae
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	32ae      	adds	r2, #174	@ 0xae
 8006d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	4611      	mov	r1, r2
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32ae      	adds	r2, #174	@ 0xae
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e01c      	b.n	8006dbc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d115      	bne.n	8006dba <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	32ae      	adds	r2, #174	@ 0xae
 8006d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	32ae      	adds	r2, #174	@ 0xae
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	4611      	mov	r1, r2
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6852      	ldr	r2, [r2, #4]
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	4611      	mov	r1, r2
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	4798      	blx	r3
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e12:	2303      	movs	r3, #3
 8006e14:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	885b      	ldrh	r3, [r3, #2]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d91f      	bls.n	8006eba <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e80:	e013      	b.n	8006eaa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e82:	f107 030a 	add.w	r3, r7, #10
 8006e86:	4619      	mov	r1, r3
 8006e88:	6978      	ldr	r0, [r7, #20]
 8006e8a:	f000 f81b 	bl	8006ec4 <USBD_GetNextDesc>
 8006e8e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d108      	bne.n	8006eaa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	789b      	ldrb	r3, [r3, #2]
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d008      	beq.n	8006eb8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	885b      	ldrh	r3, [r3, #2]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	897b      	ldrh	r3, [r7, #10]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d8e5      	bhi.n	8006e82 <USBD_GetEpDesc+0x2e>
 8006eb6:	e000      	b.n	8006eba <USBD_GetEpDesc+0x66>
          break;
 8006eb8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006eba:	693b      	ldr	r3, [r7, #16]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	7812      	ldrb	r2, [r2, #0]
 8006eda:	4413      	add	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006eee:	68fb      	ldr	r3, [r7, #12]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	3301      	adds	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	b21a      	sxth	r2, r3
 8006f22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	b21b      	sxth	r3, r3
 8006f2a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f2c:	89fb      	ldrh	r3, [r7, #14]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f52:	2b40      	cmp	r3, #64	@ 0x40
 8006f54:	d005      	beq.n	8006f62 <USBD_StdDevReq+0x26>
 8006f56:	2b40      	cmp	r3, #64	@ 0x40
 8006f58:	d857      	bhi.n	800700a <USBD_StdDevReq+0xce>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00f      	beq.n	8006f7e <USBD_StdDevReq+0x42>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d153      	bne.n	800700a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32ae      	adds	r2, #174	@ 0xae
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7c:	e04a      	b.n	8007014 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d83b      	bhi.n	8006ffe <USBD_StdDevReq+0xc2>
 8006f86:	a201      	add	r2, pc, #4	@ (adr r2, 8006f8c <USBD_StdDevReq+0x50>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fe1 	.word	0x08006fe1
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08006fff 	.word	0x08006fff
 8006f98:	08006feb 	.word	0x08006feb
 8006f9c:	08006fff 	.word	0x08006fff
 8006fa0:	08006fbf 	.word	0x08006fbf
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fff 	.word	0x08006fff
 8006fac:	08006fd7 	.word	0x08006fd7
 8006fb0:	08006fc9 	.word	0x08006fc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa3e 	bl	8007438 <USBD_GetDescriptor>
          break;
 8006fbc:	e024      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fba3 	bl	800770c <USBD_SetAddress>
          break;
 8006fc6:	e01f      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fbe2 	bl	8007794 <USBD_SetConfig>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fd4:	e018      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc85 	bl	80078e8 <USBD_GetConfig>
          break;
 8006fde:	e013      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcb6 	bl	8007954 <USBD_GetStatus>
          break;
 8006fe8:	e00e      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fce5 	bl	80079bc <USBD_SetFeature>
          break;
 8006ff2:	e009      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fd09 	bl	8007a0e <USBD_ClrFeature>
          break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fd60 	bl	8007ac6 <USBD_CtlError>
          break;
 8007006:	bf00      	nop
      }
      break;
 8007008:	e004      	b.n	8007014 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fd5a 	bl	8007ac6 <USBD_CtlError>
      break;
 8007012:	bf00      	nop
  }

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007036:	2b40      	cmp	r3, #64	@ 0x40
 8007038:	d005      	beq.n	8007046 <USBD_StdItfReq+0x26>
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	d852      	bhi.n	80070e4 <USBD_StdItfReq+0xc4>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <USBD_StdItfReq+0x26>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d14e      	bne.n	80070e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800704c:	b2db      	uxtb	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	2b02      	cmp	r3, #2
 8007052:	d840      	bhi.n	80070d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	889b      	ldrh	r3, [r3, #4]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d836      	bhi.n	80070cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	889b      	ldrh	r3, [r3, #4]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff feda 	bl	8006e20 <USBD_CoreFindIF>
 800706c:	4603      	mov	r3, r0
 800706e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2bff      	cmp	r3, #255	@ 0xff
 8007074:	d01d      	beq.n	80070b2 <USBD_StdItfReq+0x92>
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11a      	bne.n	80070b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800707c:	7bba      	ldrb	r2, [r7, #14]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	32ae      	adds	r2, #174	@ 0xae
 8007082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00f      	beq.n	80070ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800708c:	7bba      	ldrb	r2, [r7, #14]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007094:	7bba      	ldrb	r2, [r7, #14]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	@ 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070aa:	e004      	b.n	80070b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070b0:	e001      	b.n	80070b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070b2:	2303      	movs	r3, #3
 80070b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d110      	bne.n	80070e0 <USBD_StdItfReq+0xc0>
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fddc 	bl	8007c82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fcf9 	bl	8007ac6 <USBD_CtlError>
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fcf4 	bl	8007ac6 <USBD_CtlError>
          break;
 80070de:	e000      	b.n	80070e2 <USBD_StdItfReq+0xc2>
          break;
 80070e0:	bf00      	nop
      }
      break;
 80070e2:	e004      	b.n	80070ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fced 	bl	8007ac6 <USBD_CtlError>
      break;
 80070ec:	bf00      	nop
  }

  return ret;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	889b      	ldrh	r3, [r3, #4]
 800710a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007114:	2b40      	cmp	r3, #64	@ 0x40
 8007116:	d007      	beq.n	8007128 <USBD_StdEPReq+0x30>
 8007118:	2b40      	cmp	r3, #64	@ 0x40
 800711a:	f200 8181 	bhi.w	8007420 <USBD_StdEPReq+0x328>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d02a      	beq.n	8007178 <USBD_StdEPReq+0x80>
 8007122:	2b20      	cmp	r3, #32
 8007124:	f040 817c 	bne.w	8007420 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fe84 	bl	8006e3a <USBD_CoreFindEP>
 8007132:	4603      	mov	r3, r0
 8007134:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007136:	7b7b      	ldrb	r3, [r7, #13]
 8007138:	2bff      	cmp	r3, #255	@ 0xff
 800713a:	f000 8176 	beq.w	800742a <USBD_StdEPReq+0x332>
 800713e:	7b7b      	ldrb	r3, [r7, #13]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8172 	bne.w	800742a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007146:	7b7a      	ldrb	r2, [r7, #13]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800714e:	7b7a      	ldrb	r2, [r7, #13]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	32ae      	adds	r2, #174	@ 0xae
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8165 	beq.w	800742a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007160:	7b7a      	ldrb	r2, [r7, #13]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	32ae      	adds	r2, #174	@ 0xae
 8007166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007176:	e158      	b.n	800742a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d008      	beq.n	8007192 <USBD_StdEPReq+0x9a>
 8007180:	2b03      	cmp	r3, #3
 8007182:	f300 8147 	bgt.w	8007414 <USBD_StdEPReq+0x31c>
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 809b 	beq.w	80072c2 <USBD_StdEPReq+0x1ca>
 800718c:	2b01      	cmp	r3, #1
 800718e:	d03c      	beq.n	800720a <USBD_StdEPReq+0x112>
 8007190:	e140      	b.n	8007414 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d002      	beq.n	80071a4 <USBD_StdEPReq+0xac>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d016      	beq.n	80071d0 <USBD_StdEPReq+0xd8>
 80071a2:	e02c      	b.n	80071fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <USBD_StdEPReq+0xce>
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b80      	cmp	r3, #128	@ 0x80
 80071ae:	d00a      	beq.n	80071c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f991 	bl	80084dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ba:	2180      	movs	r1, #128	@ 0x80
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 f98d 	bl	80084dc <USBD_LL_StallEP>
 80071c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c4:	e020      	b.n	8007208 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fc7c 	bl	8007ac6 <USBD_CtlError>
              break;
 80071ce:	e01b      	b.n	8007208 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	885b      	ldrh	r3, [r3, #2]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10e      	bne.n	80071f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <USBD_StdEPReq+0xfe>
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b80      	cmp	r3, #128	@ 0x80
 80071e2:	d008      	beq.n	80071f6 <USBD_StdEPReq+0xfe>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	88db      	ldrh	r3, [r3, #6]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 f973 	bl	80084dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fd43 	bl	8007c82 <USBD_CtlSendStatus>

              break;
 80071fc:	e004      	b.n	8007208 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc60 	bl	8007ac6 <USBD_CtlError>
              break;
 8007206:	bf00      	nop
          }
          break;
 8007208:	e109      	b.n	800741e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d002      	beq.n	800721c <USBD_StdEPReq+0x124>
 8007216:	2b03      	cmp	r3, #3
 8007218:	d016      	beq.n	8007248 <USBD_StdEPReq+0x150>
 800721a:	e04b      	b.n	80072b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00d      	beq.n	800723e <USBD_StdEPReq+0x146>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b80      	cmp	r3, #128	@ 0x80
 8007226:	d00a      	beq.n	800723e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 f955 	bl	80084dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007232:	2180      	movs	r1, #128	@ 0x80
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 f951 	bl	80084dc <USBD_LL_StallEP>
 800723a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800723c:	e040      	b.n	80072c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc40 	bl	8007ac6 <USBD_CtlError>
              break;
 8007246:	e03b      	b.n	80072c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d136      	bne.n	80072be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f95b 	bl	800851a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fd0c 	bl	8007c82 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fde3 	bl	8006e3a <USBD_CoreFindEP>
 8007274:	4603      	mov	r3, r0
 8007276:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007278:	7b7b      	ldrb	r3, [r7, #13]
 800727a:	2bff      	cmp	r3, #255	@ 0xff
 800727c:	d01f      	beq.n	80072be <USBD_StdEPReq+0x1c6>
 800727e:	7b7b      	ldrb	r3, [r7, #13]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11c      	bne.n	80072be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007284:	7b7a      	ldrb	r2, [r7, #13]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800728c:	7b7a      	ldrb	r2, [r7, #13]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	32ae      	adds	r2, #174	@ 0xae
 8007292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800729c:	7b7a      	ldrb	r2, [r7, #13]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	32ae      	adds	r2, #174	@ 0xae
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072b2:	e004      	b.n	80072be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fc05 	bl	8007ac6 <USBD_CtlError>
              break;
 80072bc:	e000      	b.n	80072c0 <USBD_StdEPReq+0x1c8>
              break;
 80072be:	bf00      	nop
          }
          break;
 80072c0:	e0ad      	b.n	800741e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d002      	beq.n	80072d4 <USBD_StdEPReq+0x1dc>
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d033      	beq.n	800733a <USBD_StdEPReq+0x242>
 80072d2:	e099      	b.n	8007408 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <USBD_StdEPReq+0x1f2>
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b80      	cmp	r3, #128	@ 0x80
 80072de:	d004      	beq.n	80072ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fbef 	bl	8007ac6 <USBD_CtlError>
                break;
 80072e8:	e093      	b.n	8007412 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da0b      	bge.n	800730a <USBD_StdEPReq+0x212>
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	3310      	adds	r3, #16
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	3304      	adds	r3, #4
 8007308:	e00b      	b.n	8007322 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	3304      	adds	r3, #4
 8007322:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	330e      	adds	r3, #14
 800732e:	2202      	movs	r2, #2
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fc44 	bl	8007bc0 <USBD_CtlSendData>
              break;
 8007338:	e06b      	b.n	8007412 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800733a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733e:	2b00      	cmp	r3, #0
 8007340:	da11      	bge.n	8007366 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	3323      	adds	r3, #35	@ 0x23
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d117      	bne.n	800738c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fbb1 	bl	8007ac6 <USBD_CtlError>
                  break;
 8007364:	e055      	b.n	8007412 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	f003 020f 	and.w	r2, r3, #15
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	440b      	add	r3, r1
 8007378:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fb9e 	bl	8007ac6 <USBD_CtlError>
                  break;
 800738a:	e042      	b.n	8007412 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007390:	2b00      	cmp	r3, #0
 8007392:	da0b      	bge.n	80073ac <USBD_StdEPReq+0x2b4>
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	3310      	adds	r3, #16
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	3304      	adds	r3, #4
 80073aa:	e00b      	b.n	80073c4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	4413      	add	r3, r2
 80073c2:	3304      	adds	r3, #4
 80073c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <USBD_StdEPReq+0x2da>
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b80      	cmp	r3, #128	@ 0x80
 80073d0:	d103      	bne.n	80073da <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	739a      	strb	r2, [r3, #14]
 80073d8:	e00e      	b.n	80073f8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 f8ba 	bl	8008558 <USBD_LL_IsStallEP>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2201      	movs	r2, #1
 80073ee:	739a      	strb	r2, [r3, #14]
 80073f0:	e002      	b.n	80073f8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2200      	movs	r2, #0
 80073f6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	330e      	adds	r3, #14
 80073fc:	2202      	movs	r2, #2
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fbdd 	bl	8007bc0 <USBD_CtlSendData>
              break;
 8007406:	e004      	b.n	8007412 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fb5b 	bl	8007ac6 <USBD_CtlError>
              break;
 8007410:	bf00      	nop
          }
          break;
 8007412:	e004      	b.n	800741e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb55 	bl	8007ac6 <USBD_CtlError>
          break;
 800741c:	bf00      	nop
      }
      break;
 800741e:	e005      	b.n	800742c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb4f 	bl	8007ac6 <USBD_CtlError>
      break;
 8007428:	e000      	b.n	800742c <USBD_StdEPReq+0x334>
      break;
 800742a:	bf00      	nop
  }

  return ret;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	885b      	ldrh	r3, [r3, #2]
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	2b06      	cmp	r3, #6
 800745a:	f200 8128 	bhi.w	80076ae <USBD_GetDescriptor+0x276>
 800745e:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <USBD_GetDescriptor+0x2c>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007481 	.word	0x08007481
 8007468:	08007499 	.word	0x08007499
 800746c:	080074d9 	.word	0x080074d9
 8007470:	080076af 	.word	0x080076af
 8007474:	080076af 	.word	0x080076af
 8007478:	0800764f 	.word	0x0800764f
 800747c:	0800767b 	.word	0x0800767b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	7c12      	ldrb	r2, [r2, #16]
 800748c:	f107 0108 	add.w	r1, r7, #8
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
 8007494:	60f8      	str	r0, [r7, #12]
      break;
 8007496:	e112      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7c1b      	ldrb	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10d      	bne.n	80074bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	f107 0208 	add.w	r2, r7, #8
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
 80074b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3301      	adds	r3, #1
 80074b6:	2202      	movs	r2, #2
 80074b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074ba:	e100      	b.n	80076be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	f107 0208 	add.w	r2, r7, #8
 80074c8:	4610      	mov	r0, r2
 80074ca:	4798      	blx	r3
 80074cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	2202      	movs	r2, #2
 80074d4:	701a      	strb	r2, [r3, #0]
      break;
 80074d6:	e0f2      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	885b      	ldrh	r3, [r3, #2]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b05      	cmp	r3, #5
 80074e0:	f200 80ac 	bhi.w	800763c <USBD_GetDescriptor+0x204>
 80074e4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <USBD_GetDescriptor+0xb4>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007505 	.word	0x08007505
 80074f0:	08007539 	.word	0x08007539
 80074f4:	0800756d 	.word	0x0800756d
 80074f8:	080075a1 	.word	0x080075a1
 80074fc:	080075d5 	.word	0x080075d5
 8007500:	08007609 	.word	0x08007609
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7c12      	ldrb	r2, [r2, #16]
 800751c:	f107 0108 	add.w	r1, r7, #8
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007526:	e091      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 facb 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	3301      	adds	r3, #1
 8007534:	72fb      	strb	r3, [r7, #11]
          break;
 8007536:	e089      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7c12      	ldrb	r2, [r2, #16]
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800755a:	e077      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fab1 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	3301      	adds	r3, #1
 8007568:	72fb      	strb	r3, [r7, #11]
          break;
 800756a:	e06f      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	7c12      	ldrb	r2, [r2, #16]
 8007584:	f107 0108 	add.w	r1, r7, #8
 8007588:	4610      	mov	r0, r2
 800758a:	4798      	blx	r3
 800758c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758e:	e05d      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fa97 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	3301      	adds	r3, #1
 800759c:	72fb      	strb	r3, [r7, #11]
          break;
 800759e:	e055      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7c12      	ldrb	r2, [r2, #16]
 80075b8:	f107 0108 	add.w	r1, r7, #8
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
 80075c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c2:	e043      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa7d 	bl	8007ac6 <USBD_CtlError>
            err++;
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	3301      	adds	r3, #1
 80075d0:	72fb      	strb	r3, [r7, #11]
          break;
 80075d2:	e03b      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f6:	e029      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa63 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	3301      	adds	r3, #1
 8007604:	72fb      	strb	r3, [r7, #11]
          break;
 8007606:	e021      	b.n	800764c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762a:	e00f      	b.n	800764c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa49 	bl	8007ac6 <USBD_CtlError>
            err++;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	3301      	adds	r3, #1
 8007638:	72fb      	strb	r3, [r7, #11]
          break;
 800763a:	e007      	b.n	800764c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa41 	bl	8007ac6 <USBD_CtlError>
          err++;
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	3301      	adds	r3, #1
 8007648:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800764a:	bf00      	nop
      }
      break;
 800764c:	e037      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7c1b      	ldrb	r3, [r3, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800765c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765e:	f107 0208 	add.w	r2, r7, #8
 8007662:	4610      	mov	r0, r2
 8007664:	4798      	blx	r3
 8007666:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007668:	e029      	b.n	80076be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa2a 	bl	8007ac6 <USBD_CtlError>
        err++;
 8007672:	7afb      	ldrb	r3, [r7, #11]
 8007674:	3301      	adds	r3, #1
 8007676:	72fb      	strb	r3, [r7, #11]
      break;
 8007678:	e021      	b.n	80076be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7c1b      	ldrb	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	f107 0208 	add.w	r2, r7, #8
 800768e:	4610      	mov	r0, r2
 8007690:	4798      	blx	r3
 8007692:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	2207      	movs	r2, #7
 800769a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800769c:	e00f      	b.n	80076be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fa10 	bl	8007ac6 <USBD_CtlError>
        err++;
 80076a6:	7afb      	ldrb	r3, [r7, #11]
 80076a8:	3301      	adds	r3, #1
 80076aa:	72fb      	strb	r3, [r7, #11]
      break;
 80076ac:	e007      	b.n	80076be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fa08 	bl	8007ac6 <USBD_CtlError>
      err++;
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	3301      	adds	r3, #1
 80076ba:	72fb      	strb	r3, [r7, #11]
      break;
 80076bc:	bf00      	nop
  }

  if (err != 0U)
 80076be:	7afb      	ldrb	r3, [r7, #11]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11e      	bne.n	8007702 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	88db      	ldrh	r3, [r3, #6]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d016      	beq.n	80076fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076cc:	893b      	ldrh	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	88da      	ldrh	r2, [r3, #6]
 80076d6:	893b      	ldrh	r3, [r7, #8]
 80076d8:	4293      	cmp	r3, r2
 80076da:	bf28      	it	cs
 80076dc:	4613      	movcs	r3, r2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076e2:	893b      	ldrh	r3, [r7, #8]
 80076e4:	461a      	mov	r2, r3
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa69 	bl	8007bc0 <USBD_CtlSendData>
 80076ee:	e009      	b.n	8007704 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f9e7 	bl	8007ac6 <USBD_CtlError>
 80076f8:	e004      	b.n	8007704 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fac1 	bl	8007c82 <USBD_CtlSendStatus>
 8007700:	e000      	b.n	8007704 <USBD_GetDescriptor+0x2cc>
    return;
 8007702:	bf00      	nop
  }
}
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop

0800770c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	889b      	ldrh	r3, [r3, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d131      	bne.n	8007782 <USBD_SetAddress+0x76>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	88db      	ldrh	r3, [r3, #6]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d12d      	bne.n	8007782 <USBD_SetAddress+0x76>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	2b7f      	cmp	r3, #127	@ 0x7f
 800772c:	d829      	bhi.n	8007782 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	885b      	ldrh	r3, [r3, #2]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d104      	bne.n	8007750 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9bc 	bl	8007ac6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	e01d      	b.n	800778c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	7bfa      	ldrb	r2, [r7, #15]
 8007754:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 ff27 	bl	80085b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa8d 	bl	8007c82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2202      	movs	r2, #2
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007776:	e009      	b.n	800778c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007780:	e004      	b.n	800778c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f99e 	bl	8007ac6 <USBD_CtlError>
  }
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	885b      	ldrh	r3, [r3, #2]
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	4b4e      	ldr	r3, [pc, #312]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077ac:	4b4d      	ldr	r3, [pc, #308]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d905      	bls.n	80077c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f985 	bl	8007ac6 <USBD_CtlError>
    return USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	e08c      	b.n	80078da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d002      	beq.n	80077d2 <USBD_SetConfig+0x3e>
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d029      	beq.n	8007824 <USBD_SetConfig+0x90>
 80077d0:	e075      	b.n	80078be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077d2:	4b44      	ldr	r3, [pc, #272]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d020      	beq.n	800781c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077da:	4b42      	ldr	r3, [pc, #264]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077e4:	4b3f      	ldr	r3, [pc, #252]	@ (80078e4 <USBD_SetConfig+0x150>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fe ffcd 	bl	800678a <USBD_SetClassConfig>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f962 	bl	8007ac6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800780a:	e065      	b.n	80078d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa38 	bl	8007c82 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2203      	movs	r2, #3
 8007816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800781a:	e05d      	b.n	80078d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa30 	bl	8007c82 <USBD_CtlSendStatus>
      break;
 8007822:	e059      	b.n	80078d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007824:	4b2f      	ldr	r3, [pc, #188]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d112      	bne.n	8007852 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007834:	4b2b      	ldr	r3, [pc, #172]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800783e:	4b29      	ldr	r3, [pc, #164]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fe ffbc 	bl	80067c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa19 	bl	8007c82 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007850:	e042      	b.n	80078d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007852:	4b24      	ldr	r3, [pc, #144]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d02a      	beq.n	80078b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe ffaa 	bl	80067c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800786e:	4b1d      	ldr	r3, [pc, #116]	@ (80078e4 <USBD_SetConfig+0x150>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007878:	4b1a      	ldr	r3, [pc, #104]	@ (80078e4 <USBD_SetConfig+0x150>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fe ff83 	bl	800678a <USBD_SetClassConfig>
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00f      	beq.n	80078ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f918 	bl	8007ac6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fe ff8f 	bl	80067c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078ac:	e014      	b.n	80078d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9e7 	bl	8007c82 <USBD_CtlSendStatus>
      break;
 80078b4:	e010      	b.n	80078d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9e3 	bl	8007c82 <USBD_CtlSendStatus>
      break;
 80078bc:	e00c      	b.n	80078d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f900 	bl	8007ac6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078c6:	4b07      	ldr	r3, [pc, #28]	@ (80078e4 <USBD_SetConfig+0x150>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7fe ff78 	bl	80067c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078d2:	2303      	movs	r3, #3
 80078d4:	73fb      	strb	r3, [r7, #15]
      break;
 80078d6:	bf00      	nop
  }

  return ret;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000274 	.word	0x20000274

080078e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	88db      	ldrh	r3, [r3, #6]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d004      	beq.n	8007904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f8e2 	bl	8007ac6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007902:	e023      	b.n	800794c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	dc02      	bgt.n	8007916 <USBD_GetConfig+0x2e>
 8007910:	2b00      	cmp	r3, #0
 8007912:	dc03      	bgt.n	800791c <USBD_GetConfig+0x34>
 8007914:	e015      	b.n	8007942 <USBD_GetConfig+0x5a>
 8007916:	2b03      	cmp	r3, #3
 8007918:	d00b      	beq.n	8007932 <USBD_GetConfig+0x4a>
 800791a:	e012      	b.n	8007942 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3308      	adds	r3, #8
 8007926:	2201      	movs	r2, #1
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f948 	bl	8007bc0 <USBD_CtlSendData>
        break;
 8007930:	e00c      	b.n	800794c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3304      	adds	r3, #4
 8007936:	2201      	movs	r2, #1
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f940 	bl	8007bc0 <USBD_CtlSendData>
        break;
 8007940:	e004      	b.n	800794c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f8be 	bl	8007ac6 <USBD_CtlError>
        break;
 800794a:	bf00      	nop
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007964:	b2db      	uxtb	r3, r3
 8007966:	3b01      	subs	r3, #1
 8007968:	2b02      	cmp	r3, #2
 800796a:	d81e      	bhi.n	80079aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d004      	beq.n	800797e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8a5 	bl	8007ac6 <USBD_CtlError>
        break;
 800797c:	e01a      	b.n	80079b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f043 0202 	orr.w	r2, r3, #2
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	330c      	adds	r3, #12
 800799e:	2202      	movs	r2, #2
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f90c 	bl	8007bc0 <USBD_CtlSendData>
      break;
 80079a8:	e004      	b.n	80079b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f88a 	bl	8007ac6 <USBD_CtlError>
      break;
 80079b2:	bf00      	nop
  }
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d107      	bne.n	80079de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f953 	bl	8007c82 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079dc:	e013      	b.n	8007a06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d10b      	bne.n	80079fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	889b      	ldrh	r3, [r3, #4]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f943 	bl	8007c82 <USBD_CtlSendStatus>
}
 80079fc:	e003      	b.n	8007a06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f860 	bl	8007ac6 <USBD_CtlError>
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d80b      	bhi.n	8007a3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	885b      	ldrh	r3, [r3, #2]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d10c      	bne.n	8007a48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f923 	bl	8007c82 <USBD_CtlSendStatus>
      }
      break;
 8007a3c:	e004      	b.n	8007a48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f840 	bl	8007ac6 <USBD_CtlError>
      break;
 8007a46:	e000      	b.n	8007a4a <USBD_ClrFeature+0x3c>
      break;
 8007a48:	bf00      	nop
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	781a      	ldrb	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7ff fa3d 	bl	8006efc <SWAPBYTE>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff fa30 	bl	8006efc <SWAPBYTE>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7ff fa23 	bl	8006efc <SWAPBYTE>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	80da      	strh	r2, [r3, #6]
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad0:	2180      	movs	r1, #128	@ 0x80
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fd02 	bl	80084dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fcfe 	bl	80084dc <USBD_LL_StallEP>
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d042      	beq.n	8007b84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007b02:	6938      	ldr	r0, [r7, #16]
 8007b04:	f000 f842 	bl	8007b8c <USBD_GetLen>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b12:	d808      	bhi.n	8007b26 <USBD_GetString+0x3e>
 8007b14:	6938      	ldr	r0, [r7, #16]
 8007b16:	f000 f839 	bl	8007b8c <USBD_GetLen>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	e001      	b.n	8007b2a <USBD_GetString+0x42>
 8007b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	4413      	add	r3, r2
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	7812      	ldrb	r2, [r2, #0]
 8007b38:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	4413      	add	r3, r2
 8007b46:	2203      	movs	r2, #3
 8007b48:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b50:	e013      	b.n	8007b7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	4413      	add	r3, r2
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3301      	adds	r3, #1
 8007b62:	613b      	str	r3, [r7, #16]
    idx++;
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	3301      	adds	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	4413      	add	r3, r2
 8007b70:	2200      	movs	r2, #0
 8007b72:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	3301      	adds	r3, #1
 8007b78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e7      	bne.n	8007b52 <USBD_GetString+0x6a>
 8007b82:	e000      	b.n	8007b86 <USBD_GetString+0x9e>
    return;
 8007b84:	bf00      	nop
  }
}
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b9c:	e005      	b.n	8007baa <USBD_GetLen+0x1e>
  {
    len++;
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f5      	bne.n	8007b9e <USBD_GetLen+0x12>
  }

  return len;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	2100      	movs	r1, #0
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fcfe 	bl	80085ee <USBD_LL_Transmit>

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fced 	bl	80085ee <USBD_LL_Transmit>

  return USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	2100      	movs	r1, #0
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fced 	bl	8008630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	2100      	movs	r1, #0
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fcdc 	bl	8008630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c92:	2300      	movs	r3, #0
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fca8 	bl	80085ee <USBD_LL_Transmit>

  return USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2205      	movs	r2, #5
 8007cb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fcb6 	bl	8008630 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4912      	ldr	r1, [pc, #72]	@ (8007d20 <MX_USB_DEVICE_Init+0x50>)
 8007cd8:	4812      	ldr	r0, [pc, #72]	@ (8007d24 <MX_USB_DEVICE_Init+0x54>)
 8007cda:	f7fe fcd9 	bl	8006690 <USBD_Init>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ce4:	f7f8 ff4c 	bl	8000b80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ce8:	490f      	ldr	r1, [pc, #60]	@ (8007d28 <MX_USB_DEVICE_Init+0x58>)
 8007cea:	480e      	ldr	r0, [pc, #56]	@ (8007d24 <MX_USB_DEVICE_Init+0x54>)
 8007cec:	f7fe fd00 	bl	80066f0 <USBD_RegisterClass>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cf6:	f7f8 ff43 	bl	8000b80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cfa:	490c      	ldr	r1, [pc, #48]	@ (8007d2c <MX_USB_DEVICE_Init+0x5c>)
 8007cfc:	4809      	ldr	r0, [pc, #36]	@ (8007d24 <MX_USB_DEVICE_Init+0x54>)
 8007cfe:	f7fe fbf7 	bl	80064f0 <USBD_CDC_RegisterInterface>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d08:	f7f8 ff3a 	bl	8000b80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d0c:	4805      	ldr	r0, [pc, #20]	@ (8007d24 <MX_USB_DEVICE_Init+0x54>)
 8007d0e:	f7fe fd25 	bl	800675c <USBD_Start>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d18:	f7f8 ff32 	bl	8000b80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d1c:	bf00      	nop
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	200000ac 	.word	0x200000ac
 8007d24:	20000278 	.word	0x20000278
 8007d28:	20000018 	.word	0x20000018
 8007d2c:	20000098 	.word	0x20000098

08007d30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d34:	2200      	movs	r2, #0
 8007d36:	4905      	ldr	r1, [pc, #20]	@ (8007d4c <CDC_Init_FS+0x1c>)
 8007d38:	4805      	ldr	r0, [pc, #20]	@ (8007d50 <CDC_Init_FS+0x20>)
 8007d3a:	f7fe fbf3 	bl	8006524 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d3e:	4905      	ldr	r1, [pc, #20]	@ (8007d54 <CDC_Init_FS+0x24>)
 8007d40:	4803      	ldr	r0, [pc, #12]	@ (8007d50 <CDC_Init_FS+0x20>)
 8007d42:	f7fe fc11 	bl	8006568 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000d54 	.word	0x20000d54
 8007d50:	20000278 	.word	0x20000278
 8007d54:	20000554 	.word	0x20000554

08007d58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	6039      	str	r1, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]
 8007d74:	4613      	mov	r3, r2
 8007d76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	2b23      	cmp	r3, #35	@ 0x23
 8007d7c:	d84a      	bhi.n	8007e14 <CDC_Control_FS+0xac>
 8007d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <CDC_Control_FS+0x1c>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007e15 	.word	0x08007e15
 8007d88:	08007e15 	.word	0x08007e15
 8007d8c:	08007e15 	.word	0x08007e15
 8007d90:	08007e15 	.word	0x08007e15
 8007d94:	08007e15 	.word	0x08007e15
 8007d98:	08007e15 	.word	0x08007e15
 8007d9c:	08007e15 	.word	0x08007e15
 8007da0:	08007e15 	.word	0x08007e15
 8007da4:	08007e15 	.word	0x08007e15
 8007da8:	08007e15 	.word	0x08007e15
 8007dac:	08007e15 	.word	0x08007e15
 8007db0:	08007e15 	.word	0x08007e15
 8007db4:	08007e15 	.word	0x08007e15
 8007db8:	08007e15 	.word	0x08007e15
 8007dbc:	08007e15 	.word	0x08007e15
 8007dc0:	08007e15 	.word	0x08007e15
 8007dc4:	08007e15 	.word	0x08007e15
 8007dc8:	08007e15 	.word	0x08007e15
 8007dcc:	08007e15 	.word	0x08007e15
 8007dd0:	08007e15 	.word	0x08007e15
 8007dd4:	08007e15 	.word	0x08007e15
 8007dd8:	08007e15 	.word	0x08007e15
 8007ddc:	08007e15 	.word	0x08007e15
 8007de0:	08007e15 	.word	0x08007e15
 8007de4:	08007e15 	.word	0x08007e15
 8007de8:	08007e15 	.word	0x08007e15
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e15 	.word	0x08007e15
 8007df8:	08007e15 	.word	0x08007e15
 8007dfc:	08007e15 	.word	0x08007e15
 8007e00:	08007e15 	.word	0x08007e15
 8007e04:	08007e15 	.word	0x08007e15
 8007e08:	08007e15 	.word	0x08007e15
 8007e0c:	08007e15 	.word	0x08007e15
 8007e10:	08007e15 	.word	0x08007e15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e14:	bf00      	nop
  }

  return (USBD_OK);
 8007e16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4805      	ldr	r0, [pc, #20]	@ (8007e48 <CDC_Receive_FS+0x24>)
 8007e32:	f7fe fb99 	bl	8006568 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e36:	4804      	ldr	r0, [pc, #16]	@ (8007e48 <CDC_Receive_FS+0x24>)
 8007e38:	f7fe fbf4 	bl	8006624 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000278 	.word	0x20000278

08007e4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e94 <CDC_Transmit_FS+0x48>)
 8007e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e00b      	b.n	8007e8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e72:	887b      	ldrh	r3, [r7, #2]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4806      	ldr	r0, [pc, #24]	@ (8007e94 <CDC_Transmit_FS+0x48>)
 8007e7a:	f7fe fb53 	bl	8006524 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e7e:	4805      	ldr	r0, [pc, #20]	@ (8007e94 <CDC_Transmit_FS+0x48>)
 8007e80:	f7fe fb90 	bl	80065a4 <USBD_CDC_TransmitPacket>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000278 	.word	0x20000278

08007e98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2212      	movs	r2, #18
 8007ecc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ece:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	200000c8 	.word	0x200000c8

08007ee0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2204      	movs	r2, #4
 8007ef0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ef2:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	200000dc 	.word	0x200000dc

08007f04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6039      	str	r1, [r7, #0]
 8007f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d105      	bne.n	8007f22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	4907      	ldr	r1, [pc, #28]	@ (8007f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f1a:	4808      	ldr	r0, [pc, #32]	@ (8007f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f1c:	f7ff fde4 	bl	8007ae8 <USBD_GetString>
 8007f20:	e004      	b.n	8007f2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	4904      	ldr	r1, [pc, #16]	@ (8007f38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f26:	4805      	ldr	r0, [pc, #20]	@ (8007f3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f28:	f7ff fdde 	bl	8007ae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f2c:	4b02      	ldr	r3, [pc, #8]	@ (8007f38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20001554 	.word	0x20001554
 8007f3c:	080095dc 	.word	0x080095dc

08007f40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	4904      	ldr	r1, [pc, #16]	@ (8007f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f50:	4804      	ldr	r0, [pc, #16]	@ (8007f64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f52:	f7ff fdc9 	bl	8007ae8 <USBD_GetString>
  return USBD_StrDesc;
 8007f56:	4b02      	ldr	r3, [pc, #8]	@ (8007f60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20001554 	.word	0x20001554
 8007f64:	080095f4 	.word	0x080095f4

08007f68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	221a      	movs	r2, #26
 8007f78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f7a:	f000 f843 	bl	8008004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f7e:	4b02      	ldr	r3, [pc, #8]	@ (8007f88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	200000e0 	.word	0x200000e0

08007f8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d105      	bne.n	8007faa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4907      	ldr	r1, [pc, #28]	@ (8007fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fa2:	4808      	ldr	r0, [pc, #32]	@ (8007fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fa4:	f7ff fda0 	bl	8007ae8 <USBD_GetString>
 8007fa8:	e004      	b.n	8007fb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4904      	ldr	r1, [pc, #16]	@ (8007fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fae:	4805      	ldr	r0, [pc, #20]	@ (8007fc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fb0:	f7ff fd9a 	bl	8007ae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb4:	4b02      	ldr	r3, [pc, #8]	@ (8007fc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20001554 	.word	0x20001554
 8007fc4:	08009608 	.word	0x08009608

08007fc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d105      	bne.n	8007fe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	4907      	ldr	r1, [pc, #28]	@ (8007ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fde:	4808      	ldr	r0, [pc, #32]	@ (8008000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fe0:	f7ff fd82 	bl	8007ae8 <USBD_GetString>
 8007fe4:	e004      	b.n	8007ff0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4904      	ldr	r1, [pc, #16]	@ (8007ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fea:	4805      	ldr	r0, [pc, #20]	@ (8008000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fec:	f7ff fd7c 	bl	8007ae8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ff0:	4b02      	ldr	r3, [pc, #8]	@ (8007ffc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001554 	.word	0x20001554
 8008000:	08009614 	.word	0x08009614

08008004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800800a:	4b0f      	ldr	r3, [pc, #60]	@ (8008048 <Get_SerialNum+0x44>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008010:	4b0e      	ldr	r3, [pc, #56]	@ (800804c <Get_SerialNum+0x48>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008016:	4b0e      	ldr	r3, [pc, #56]	@ (8008050 <Get_SerialNum+0x4c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800802a:	2208      	movs	r2, #8
 800802c:	4909      	ldr	r1, [pc, #36]	@ (8008054 <Get_SerialNum+0x50>)
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 f814 	bl	800805c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008034:	2204      	movs	r2, #4
 8008036:	4908      	ldr	r1, [pc, #32]	@ (8008058 <Get_SerialNum+0x54>)
 8008038:	68b8      	ldr	r0, [r7, #8]
 800803a:	f000 f80f 	bl	800805c <IntToUnicode>
  }
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	1fff7a10 	.word	0x1fff7a10
 800804c:	1fff7a14 	.word	0x1fff7a14
 8008050:	1fff7a18 	.word	0x1fff7a18
 8008054:	200000e2 	.word	0x200000e2
 8008058:	200000f2 	.word	0x200000f2

0800805c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]
 8008072:	e027      	b.n	80080c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	0f1b      	lsrs	r3, r3, #28
 8008078:	2b09      	cmp	r3, #9
 800807a:	d80b      	bhi.n	8008094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	0f1b      	lsrs	r3, r3, #28
 8008080:	b2da      	uxtb	r2, r3
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	4619      	mov	r1, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	440b      	add	r3, r1
 800808c:	3230      	adds	r2, #48	@ 0x30
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	e00a      	b.n	80080aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	0f1b      	lsrs	r3, r3, #28
 8008098:	b2da      	uxtb	r2, r3
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	4619      	mov	r1, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	440b      	add	r3, r1
 80080a4:	3237      	adds	r2, #55	@ 0x37
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	3301      	adds	r3, #1
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	3301      	adds	r3, #1
 80080c2:	75fb      	strb	r3, [r7, #23]
 80080c4:	7dfa      	ldrb	r2, [r7, #23]
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d3d3      	bcc.n	8008074 <IntToUnicode+0x18>
  }
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08a      	sub	sp, #40	@ 0x28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080e4:	f107 0314 	add.w	r3, r7, #20
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	60da      	str	r2, [r3, #12]
 80080f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080fc:	d147      	bne.n	800818e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	4b25      	ldr	r3, [pc, #148]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008106:	4a24      	ldr	r2, [pc, #144]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 8008108:	f043 0301 	orr.w	r3, r3, #1
 800810c:	6313      	str	r3, [r2, #48]	@ 0x30
 800810e:	4b22      	ldr	r3, [pc, #136]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800811a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800811e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008128:	f107 0314 	add.w	r3, r7, #20
 800812c:	4619      	mov	r1, r3
 800812e:	481b      	ldr	r0, [pc, #108]	@ (800819c <HAL_PCD_MspInit+0xc0>)
 8008130:	f7f9 fa22 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008134:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800813a:	2302      	movs	r3, #2
 800813c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008142:	2300      	movs	r3, #0
 8008144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008146:	230a      	movs	r3, #10
 8008148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800814a:	f107 0314 	add.w	r3, r7, #20
 800814e:	4619      	mov	r1, r3
 8008150:	4812      	ldr	r0, [pc, #72]	@ (800819c <HAL_PCD_MspInit+0xc0>)
 8008152:	f7f9 fa11 	bl	8001578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008156:	4b10      	ldr	r3, [pc, #64]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 8008158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800815a:	4a0f      	ldr	r2, [pc, #60]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 800815c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008160:	6353      	str	r3, [r2, #52]	@ 0x34
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	4b0c      	ldr	r3, [pc, #48]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 8008168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816a:	4a0b      	ldr	r2, [pc, #44]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 800816c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008170:	6453      	str	r3, [r2, #68]	@ 0x44
 8008172:	4b09      	ldr	r3, [pc, #36]	@ (8008198 <HAL_PCD_MspInit+0xbc>)
 8008174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800817e:	2200      	movs	r2, #0
 8008180:	2100      	movs	r1, #0
 8008182:	2043      	movs	r0, #67	@ 0x43
 8008184:	f7f9 f9c1 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008188:	2043      	movs	r0, #67	@ 0x43
 800818a:	f7f9 f9da 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800818e:	bf00      	nop
 8008190:	3728      	adds	r7, #40	@ 0x28
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40023800 	.word	0x40023800
 800819c:	40020000 	.word	0x40020000

080081a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f7fe fb1d 	bl	80067f6 <USBD_LL_SetupStage>
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	4619      	mov	r1, r3
 80081ee:	f7fe fb57 	bl	80068a0 <USBD_LL_DataOutStage>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3320      	adds	r3, #32
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	4619      	mov	r1, r3
 8008222:	f7fe fbf9 	bl	8006a18 <USBD_LL_DataInStage>
}
 8008226:	bf00      	nop
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800823c:	4618      	mov	r0, r3
 800823e:	f7fe fd3d 	bl	8006cbc <USBD_LL_SOF>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008252:	2301      	movs	r3, #1
 8008254:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	79db      	ldrb	r3, [r3, #7]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
 8008262:	e008      	b.n	8008276 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	79db      	ldrb	r3, [r3, #7]
 8008268:	2b02      	cmp	r3, #2
 800826a:	d102      	bne.n	8008272 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800826c:	2301      	movs	r3, #1
 800826e:	73fb      	strb	r3, [r7, #15]
 8008270:	e001      	b.n	8008276 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008272:	f7f8 fc85 	bl	8000b80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800827c:	7bfa      	ldrb	r2, [r7, #15]
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fcd7 	bl	8006c34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fc7e 	bl	8006b8e <USBD_LL_Reset>
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fcd2 	bl	8006c54 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7adb      	ldrb	r3, [r3, #11]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082d0:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <HAL_PCD_SuspendCallback+0x48>)
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4a03      	ldr	r2, [pc, #12]	@ (80082e4 <HAL_PCD_SuspendCallback+0x48>)
 80082d6:	f043 0306 	orr.w	r3, r3, #6
 80082da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	e000ed00 	.word	0xe000ed00

080082e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fcc8 	bl	8006c8c <USBD_LL_Resume>
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	4611      	mov	r1, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fd20 	bl	8006d60 <USBD_LL_IsoOUTIncomplete>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fcdc 	bl	8006cfc <USBD_LL_IsoINIncomplete>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fd32 	bl	8006dc4 <USBD_LL_DevConnected>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fd2f 	bl	8006dda <USBD_LL_DevDisconnected>
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d13c      	bne.n	800840e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008394:	4a20      	ldr	r2, [pc, #128]	@ (8008418 <USBD_LL_Init+0x94>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a1e      	ldr	r2, [pc, #120]	@ (8008418 <USBD_LL_Init+0x94>)
 80083a0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008418 <USBD_LL_Init+0x94>)
 80083a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80083aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80083ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008418 <USBD_LL_Init+0x94>)
 80083ae:	2204      	movs	r2, #4
 80083b0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80083b2:	4b19      	ldr	r3, [pc, #100]	@ (8008418 <USBD_LL_Init+0x94>)
 80083b4:	2202      	movs	r2, #2
 80083b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083b8:	4b17      	ldr	r3, [pc, #92]	@ (8008418 <USBD_LL_Init+0x94>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083be:	4b16      	ldr	r3, [pc, #88]	@ (8008418 <USBD_LL_Init+0x94>)
 80083c0:	2202      	movs	r2, #2
 80083c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083c4:	4b14      	ldr	r3, [pc, #80]	@ (8008418 <USBD_LL_Init+0x94>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083ca:	4b13      	ldr	r3, [pc, #76]	@ (8008418 <USBD_LL_Init+0x94>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083d0:	4b11      	ldr	r3, [pc, #68]	@ (8008418 <USBD_LL_Init+0x94>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80083d6:	4b10      	ldr	r3, [pc, #64]	@ (8008418 <USBD_LL_Init+0x94>)
 80083d8:	2201      	movs	r2, #1
 80083da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008418 <USBD_LL_Init+0x94>)
 80083de:	2200      	movs	r2, #0
 80083e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083e2:	480d      	ldr	r0, [pc, #52]	@ (8008418 <USBD_LL_Init+0x94>)
 80083e4:	f7fa f894 	bl	8002510 <HAL_PCD_Init>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083ee:	f7f8 fbc7 	bl	8000b80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083f2:	2180      	movs	r1, #128	@ 0x80
 80083f4:	4808      	ldr	r0, [pc, #32]	@ (8008418 <USBD_LL_Init+0x94>)
 80083f6:	f7fb fac0 	bl	800397a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083fa:	2240      	movs	r2, #64	@ 0x40
 80083fc:	2100      	movs	r1, #0
 80083fe:	4806      	ldr	r0, [pc, #24]	@ (8008418 <USBD_LL_Init+0x94>)
 8008400:	f7fb fa74 	bl	80038ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008404:	2280      	movs	r2, #128	@ 0x80
 8008406:	2101      	movs	r1, #1
 8008408:	4803      	ldr	r0, [pc, #12]	@ (8008418 <USBD_LL_Init+0x94>)
 800840a:	f7fb fa6f 	bl	80038ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20001754 	.word	0x20001754

0800841c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008432:	4618      	mov	r0, r3
 8008434:	f7fa f97b 	bl	800272e <HAL_PCD_Start>
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 f942 	bl	80086c8 <USBD_Get_USB_Status>
 8008444:	4603      	mov	r3, r0
 8008446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008448:	7bbb      	ldrb	r3, [r7, #14]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	4608      	mov	r0, r1
 800845c:	4611      	mov	r1, r2
 800845e:	461a      	mov	r2, r3
 8008460:	4603      	mov	r3, r0
 8008462:	70fb      	strb	r3, [r7, #3]
 8008464:	460b      	mov	r3, r1
 8008466:	70bb      	strb	r3, [r7, #2]
 8008468:	4613      	mov	r3, r2
 800846a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800847a:	78bb      	ldrb	r3, [r7, #2]
 800847c:	883a      	ldrh	r2, [r7, #0]
 800847e:	78f9      	ldrb	r1, [r7, #3]
 8008480:	f7fa fe4f 	bl	8003122 <HAL_PCD_EP_Open>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f91c 	bl	80086c8 <USBD_Get_USB_Status>
 8008490:	4603      	mov	r3, r0
 8008492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008494:	7bbb      	ldrb	r3, [r7, #14]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fa fe9a 	bl	80031f6 <HAL_PCD_EP_Close>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 f8fd 	bl	80086c8 <USBD_Get_USB_Status>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fa ff52 	bl	80033a4 <HAL_PCD_EP_SetStall>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f8de 	bl	80086c8 <USBD_Get_USB_Status>
 800850c:	4603      	mov	r3, r0
 800850e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008510:	7bbb      	ldrb	r3, [r7, #14]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f7fa ff96 	bl	800346a <HAL_PCD_EP_ClrStall>
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f8bf 	bl	80086c8 <USBD_Get_USB_Status>
 800854a:	4603      	mov	r3, r0
 800854c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800854e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800856a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800856c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008570:	2b00      	cmp	r3, #0
 8008572:	da0b      	bge.n	800858c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800857a:	68f9      	ldr	r1, [r7, #12]
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	3316      	adds	r3, #22
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	e00b      	b.n	80085a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	4613      	mov	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80085a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fa fd83 	bl	80030da <HAL_PCD_SetAddress>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f874 	bl	80086c8 <USBD_Get_USB_Status>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b086      	sub	sp, #24
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
 80085fa:	460b      	mov	r3, r1
 80085fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800860c:	7af9      	ldrb	r1, [r7, #11]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	f7fa fe8d 	bl	8003330 <HAL_PCD_EP_Transmit>
 8008616:	4603      	mov	r3, r0
 8008618:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	4618      	mov	r0, r3
 800861e:	f000 f853 	bl	80086c8 <USBD_Get_USB_Status>
 8008622:	4603      	mov	r3, r0
 8008624:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008626:	7dbb      	ldrb	r3, [r7, #22]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	607a      	str	r2, [r7, #4]
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	460b      	mov	r3, r1
 800863e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800864e:	7af9      	ldrb	r1, [r7, #11]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	f7fa fe19 	bl	800328a <HAL_PCD_EP_Receive>
 8008658:	4603      	mov	r3, r0
 800865a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f832 	bl	80086c8 <USBD_Get_USB_Status>
 8008664:	4603      	mov	r3, r0
 8008666:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008668:	7dbb      	ldrb	r3, [r7, #22]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	460b      	mov	r3, r1
 800867c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f7fa fe39 	bl	8003300 <HAL_PCD_EP_GetRxCount>
 800868e:	4603      	mov	r3, r0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086a0:	4b03      	ldr	r3, [pc, #12]	@ (80086b0 <USBD_static_malloc+0x18>)
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	20001c38 	.word	0x20001c38

080086b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d817      	bhi.n	800870c <USBD_Get_USB_Status+0x44>
 80086dc:	a201      	add	r2, pc, #4	@ (adr r2, 80086e4 <USBD_Get_USB_Status+0x1c>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	080086fb 	.word	0x080086fb
 80086ec:	08008701 	.word	0x08008701
 80086f0:	08008707 	.word	0x08008707
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
    break;
 80086f8:	e00b      	b.n	8008712 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	73fb      	strb	r3, [r7, #15]
    break;
 80086fe:	e008      	b.n	8008712 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008700:	2301      	movs	r3, #1
 8008702:	73fb      	strb	r3, [r7, #15]
    break;
 8008704:	e005      	b.n	8008712 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008706:	2303      	movs	r3, #3
 8008708:	73fb      	strb	r3, [r7, #15]
    break;
 800870a:	e002      	b.n	8008712 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800870c:	2303      	movs	r3, #3
 800870e:	73fb      	strb	r3, [r7, #15]
    break;
 8008710:	bf00      	nop
  }
  return usb_status;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <std>:
 8008720:	2300      	movs	r3, #0
 8008722:	b510      	push	{r4, lr}
 8008724:	4604      	mov	r4, r0
 8008726:	e9c0 3300 	strd	r3, r3, [r0]
 800872a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800872e:	6083      	str	r3, [r0, #8]
 8008730:	8181      	strh	r1, [r0, #12]
 8008732:	6643      	str	r3, [r0, #100]	@ 0x64
 8008734:	81c2      	strh	r2, [r0, #14]
 8008736:	6183      	str	r3, [r0, #24]
 8008738:	4619      	mov	r1, r3
 800873a:	2208      	movs	r2, #8
 800873c:	305c      	adds	r0, #92	@ 0x5c
 800873e:	f000 f906 	bl	800894e <memset>
 8008742:	4b0d      	ldr	r3, [pc, #52]	@ (8008778 <std+0x58>)
 8008744:	6263      	str	r3, [r4, #36]	@ 0x24
 8008746:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <std+0x5c>)
 8008748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800874a:	4b0d      	ldr	r3, [pc, #52]	@ (8008780 <std+0x60>)
 800874c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800874e:	4b0d      	ldr	r3, [pc, #52]	@ (8008784 <std+0x64>)
 8008750:	6323      	str	r3, [r4, #48]	@ 0x30
 8008752:	4b0d      	ldr	r3, [pc, #52]	@ (8008788 <std+0x68>)
 8008754:	6224      	str	r4, [r4, #32]
 8008756:	429c      	cmp	r4, r3
 8008758:	d006      	beq.n	8008768 <std+0x48>
 800875a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800875e:	4294      	cmp	r4, r2
 8008760:	d002      	beq.n	8008768 <std+0x48>
 8008762:	33d0      	adds	r3, #208	@ 0xd0
 8008764:	429c      	cmp	r4, r3
 8008766:	d105      	bne.n	8008774 <std+0x54>
 8008768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800876c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008770:	f000 b966 	b.w	8008a40 <__retarget_lock_init_recursive>
 8008774:	bd10      	pop	{r4, pc}
 8008776:	bf00      	nop
 8008778:	080088c9 	.word	0x080088c9
 800877c:	080088eb 	.word	0x080088eb
 8008780:	08008923 	.word	0x08008923
 8008784:	08008947 	.word	0x08008947
 8008788:	20001e58 	.word	0x20001e58

0800878c <stdio_exit_handler>:
 800878c:	4a02      	ldr	r2, [pc, #8]	@ (8008798 <stdio_exit_handler+0xc>)
 800878e:	4903      	ldr	r1, [pc, #12]	@ (800879c <stdio_exit_handler+0x10>)
 8008790:	4803      	ldr	r0, [pc, #12]	@ (80087a0 <stdio_exit_handler+0x14>)
 8008792:	f000 b869 	b.w	8008868 <_fwalk_sglue>
 8008796:	bf00      	nop
 8008798:	200000fc 	.word	0x200000fc
 800879c:	080092dd 	.word	0x080092dd
 80087a0:	2000010c 	.word	0x2000010c

080087a4 <cleanup_stdio>:
 80087a4:	6841      	ldr	r1, [r0, #4]
 80087a6:	4b0c      	ldr	r3, [pc, #48]	@ (80087d8 <cleanup_stdio+0x34>)
 80087a8:	4299      	cmp	r1, r3
 80087aa:	b510      	push	{r4, lr}
 80087ac:	4604      	mov	r4, r0
 80087ae:	d001      	beq.n	80087b4 <cleanup_stdio+0x10>
 80087b0:	f000 fd94 	bl	80092dc <_fflush_r>
 80087b4:	68a1      	ldr	r1, [r4, #8]
 80087b6:	4b09      	ldr	r3, [pc, #36]	@ (80087dc <cleanup_stdio+0x38>)
 80087b8:	4299      	cmp	r1, r3
 80087ba:	d002      	beq.n	80087c2 <cleanup_stdio+0x1e>
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 fd8d 	bl	80092dc <_fflush_r>
 80087c2:	68e1      	ldr	r1, [r4, #12]
 80087c4:	4b06      	ldr	r3, [pc, #24]	@ (80087e0 <cleanup_stdio+0x3c>)
 80087c6:	4299      	cmp	r1, r3
 80087c8:	d004      	beq.n	80087d4 <cleanup_stdio+0x30>
 80087ca:	4620      	mov	r0, r4
 80087cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d0:	f000 bd84 	b.w	80092dc <_fflush_r>
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	bf00      	nop
 80087d8:	20001e58 	.word	0x20001e58
 80087dc:	20001ec0 	.word	0x20001ec0
 80087e0:	20001f28 	.word	0x20001f28

080087e4 <global_stdio_init.part.0>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008814 <global_stdio_init.part.0+0x30>)
 80087e8:	4c0b      	ldr	r4, [pc, #44]	@ (8008818 <global_stdio_init.part.0+0x34>)
 80087ea:	4a0c      	ldr	r2, [pc, #48]	@ (800881c <global_stdio_init.part.0+0x38>)
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	4620      	mov	r0, r4
 80087f0:	2200      	movs	r2, #0
 80087f2:	2104      	movs	r1, #4
 80087f4:	f7ff ff94 	bl	8008720 <std>
 80087f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087fc:	2201      	movs	r2, #1
 80087fe:	2109      	movs	r1, #9
 8008800:	f7ff ff8e 	bl	8008720 <std>
 8008804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008808:	2202      	movs	r2, #2
 800880a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800880e:	2112      	movs	r1, #18
 8008810:	f7ff bf86 	b.w	8008720 <std>
 8008814:	20001f90 	.word	0x20001f90
 8008818:	20001e58 	.word	0x20001e58
 800881c:	0800878d 	.word	0x0800878d

08008820 <__sfp_lock_acquire>:
 8008820:	4801      	ldr	r0, [pc, #4]	@ (8008828 <__sfp_lock_acquire+0x8>)
 8008822:	f000 b90e 	b.w	8008a42 <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	20001f99 	.word	0x20001f99

0800882c <__sfp_lock_release>:
 800882c:	4801      	ldr	r0, [pc, #4]	@ (8008834 <__sfp_lock_release+0x8>)
 800882e:	f000 b909 	b.w	8008a44 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	20001f99 	.word	0x20001f99

08008838 <__sinit>:
 8008838:	b510      	push	{r4, lr}
 800883a:	4604      	mov	r4, r0
 800883c:	f7ff fff0 	bl	8008820 <__sfp_lock_acquire>
 8008840:	6a23      	ldr	r3, [r4, #32]
 8008842:	b11b      	cbz	r3, 800884c <__sinit+0x14>
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	f7ff bff0 	b.w	800882c <__sfp_lock_release>
 800884c:	4b04      	ldr	r3, [pc, #16]	@ (8008860 <__sinit+0x28>)
 800884e:	6223      	str	r3, [r4, #32]
 8008850:	4b04      	ldr	r3, [pc, #16]	@ (8008864 <__sinit+0x2c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1f5      	bne.n	8008844 <__sinit+0xc>
 8008858:	f7ff ffc4 	bl	80087e4 <global_stdio_init.part.0>
 800885c:	e7f2      	b.n	8008844 <__sinit+0xc>
 800885e:	bf00      	nop
 8008860:	080087a5 	.word	0x080087a5
 8008864:	20001f90 	.word	0x20001f90

08008868 <_fwalk_sglue>:
 8008868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800886c:	4607      	mov	r7, r0
 800886e:	4688      	mov	r8, r1
 8008870:	4614      	mov	r4, r2
 8008872:	2600      	movs	r6, #0
 8008874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008878:	f1b9 0901 	subs.w	r9, r9, #1
 800887c:	d505      	bpl.n	800888a <_fwalk_sglue+0x22>
 800887e:	6824      	ldr	r4, [r4, #0]
 8008880:	2c00      	cmp	r4, #0
 8008882:	d1f7      	bne.n	8008874 <_fwalk_sglue+0xc>
 8008884:	4630      	mov	r0, r6
 8008886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d907      	bls.n	80088a0 <_fwalk_sglue+0x38>
 8008890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008894:	3301      	adds	r3, #1
 8008896:	d003      	beq.n	80088a0 <_fwalk_sglue+0x38>
 8008898:	4629      	mov	r1, r5
 800889a:	4638      	mov	r0, r7
 800889c:	47c0      	blx	r8
 800889e:	4306      	orrs	r6, r0
 80088a0:	3568      	adds	r5, #104	@ 0x68
 80088a2:	e7e9      	b.n	8008878 <_fwalk_sglue+0x10>

080088a4 <iprintf>:
 80088a4:	b40f      	push	{r0, r1, r2, r3}
 80088a6:	b507      	push	{r0, r1, r2, lr}
 80088a8:	4906      	ldr	r1, [pc, #24]	@ (80088c4 <iprintf+0x20>)
 80088aa:	ab04      	add	r3, sp, #16
 80088ac:	6808      	ldr	r0, [r1, #0]
 80088ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b2:	6881      	ldr	r1, [r0, #8]
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	f000 f9e9 	bl	8008c8c <_vfiprintf_r>
 80088ba:	b003      	add	sp, #12
 80088bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088c0:	b004      	add	sp, #16
 80088c2:	4770      	bx	lr
 80088c4:	20000108 	.word	0x20000108

080088c8 <__sread>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	460c      	mov	r4, r1
 80088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d0:	f000 f868 	bl	80089a4 <_read_r>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	bfab      	itete	ge
 80088d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088da:	89a3      	ldrhlt	r3, [r4, #12]
 80088dc:	181b      	addge	r3, r3, r0
 80088de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088e2:	bfac      	ite	ge
 80088e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088e6:	81a3      	strhlt	r3, [r4, #12]
 80088e8:	bd10      	pop	{r4, pc}

080088ea <__swrite>:
 80088ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	461f      	mov	r7, r3
 80088f0:	898b      	ldrh	r3, [r1, #12]
 80088f2:	05db      	lsls	r3, r3, #23
 80088f4:	4605      	mov	r5, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	4616      	mov	r6, r2
 80088fa:	d505      	bpl.n	8008908 <__swrite+0x1e>
 80088fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008900:	2302      	movs	r3, #2
 8008902:	2200      	movs	r2, #0
 8008904:	f000 f83c 	bl	8008980 <_lseek_r>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800890e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	4632      	mov	r2, r6
 8008916:	463b      	mov	r3, r7
 8008918:	4628      	mov	r0, r5
 800891a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	f000 b853 	b.w	80089c8 <_write_r>

08008922 <__sseek>:
 8008922:	b510      	push	{r4, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892a:	f000 f829 	bl	8008980 <_lseek_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	bf15      	itete	ne
 8008934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800893a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800893e:	81a3      	strheq	r3, [r4, #12]
 8008940:	bf18      	it	ne
 8008942:	81a3      	strhne	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__sclose>:
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f000 b809 	b.w	8008960 <_close_r>

0800894e <memset>:
 800894e:	4402      	add	r2, r0
 8008950:	4603      	mov	r3, r0
 8008952:	4293      	cmp	r3, r2
 8008954:	d100      	bne.n	8008958 <memset+0xa>
 8008956:	4770      	bx	lr
 8008958:	f803 1b01 	strb.w	r1, [r3], #1
 800895c:	e7f9      	b.n	8008952 <memset+0x4>
	...

08008960 <_close_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d06      	ldr	r5, [pc, #24]	@ (800897c <_close_r+0x1c>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f8 fb4f 	bl	800100e <_close>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_close_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_close_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20001f94 	.word	0x20001f94

08008980 <_lseek_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	@ (80089a0 <_lseek_r+0x20>)
 8008984:	4604      	mov	r4, r0
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	2200      	movs	r2, #0
 800898c:	602a      	str	r2, [r5, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f7f8 fb64 	bl	800105c <_lseek>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_lseek_r+0x1e>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_lseek_r+0x1e>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20001f94 	.word	0x20001f94

080089a4 <_read_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	4d07      	ldr	r5, [pc, #28]	@ (80089c4 <_read_r+0x20>)
 80089a8:	4604      	mov	r4, r0
 80089aa:	4608      	mov	r0, r1
 80089ac:	4611      	mov	r1, r2
 80089ae:	2200      	movs	r2, #0
 80089b0:	602a      	str	r2, [r5, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f7f8 fb0e 	bl	8000fd4 <_read>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_read_r+0x1e>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_read_r+0x1e>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	20001f94 	.word	0x20001f94

080089c8 <_write_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	@ (80089e8 <_write_r+0x20>)
 80089cc:	4604      	mov	r4, r0
 80089ce:	4608      	mov	r0, r1
 80089d0:	4611      	mov	r1, r2
 80089d2:	2200      	movs	r2, #0
 80089d4:	602a      	str	r2, [r5, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	f7f7 fe66 	bl	80006a8 <_write>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_write_r+0x1e>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_write_r+0x1e>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	20001f94 	.word	0x20001f94

080089ec <__errno>:
 80089ec:	4b01      	ldr	r3, [pc, #4]	@ (80089f4 <__errno+0x8>)
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20000108 	.word	0x20000108

080089f8 <__libc_init_array>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4d0d      	ldr	r5, [pc, #52]	@ (8008a30 <__libc_init_array+0x38>)
 80089fc:	4c0d      	ldr	r4, [pc, #52]	@ (8008a34 <__libc_init_array+0x3c>)
 80089fe:	1b64      	subs	r4, r4, r5
 8008a00:	10a4      	asrs	r4, r4, #2
 8008a02:	2600      	movs	r6, #0
 8008a04:	42a6      	cmp	r6, r4
 8008a06:	d109      	bne.n	8008a1c <__libc_init_array+0x24>
 8008a08:	4d0b      	ldr	r5, [pc, #44]	@ (8008a38 <__libc_init_array+0x40>)
 8008a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8008a3c <__libc_init_array+0x44>)
 8008a0c:	f000 fdb6 	bl	800957c <_init>
 8008a10:	1b64      	subs	r4, r4, r5
 8008a12:	10a4      	asrs	r4, r4, #2
 8008a14:	2600      	movs	r6, #0
 8008a16:	42a6      	cmp	r6, r4
 8008a18:	d105      	bne.n	8008a26 <__libc_init_array+0x2e>
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a20:	4798      	blx	r3
 8008a22:	3601      	adds	r6, #1
 8008a24:	e7ee      	b.n	8008a04 <__libc_init_array+0xc>
 8008a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2a:	4798      	blx	r3
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	e7f2      	b.n	8008a16 <__libc_init_array+0x1e>
 8008a30:	08009678 	.word	0x08009678
 8008a34:	08009678 	.word	0x08009678
 8008a38:	08009678 	.word	0x08009678
 8008a3c:	0800967c 	.word	0x0800967c

08008a40 <__retarget_lock_init_recursive>:
 8008a40:	4770      	bx	lr

08008a42 <__retarget_lock_acquire_recursive>:
 8008a42:	4770      	bx	lr

08008a44 <__retarget_lock_release_recursive>:
 8008a44:	4770      	bx	lr
	...

08008a48 <_free_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	d041      	beq.n	8008ad4 <_free_r+0x8c>
 8008a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a54:	1f0c      	subs	r4, r1, #4
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bfb8      	it	lt
 8008a5a:	18e4      	addlt	r4, r4, r3
 8008a5c:	f000 f8e0 	bl	8008c20 <__malloc_lock>
 8008a60:	4a1d      	ldr	r2, [pc, #116]	@ (8008ad8 <_free_r+0x90>)
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	b933      	cbnz	r3, 8008a74 <_free_r+0x2c>
 8008a66:	6063      	str	r3, [r4, #4]
 8008a68:	6014      	str	r4, [r2, #0]
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a70:	f000 b8dc 	b.w	8008c2c <__malloc_unlock>
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	d908      	bls.n	8008a8a <_free_r+0x42>
 8008a78:	6820      	ldr	r0, [r4, #0]
 8008a7a:	1821      	adds	r1, r4, r0
 8008a7c:	428b      	cmp	r3, r1
 8008a7e:	bf01      	itttt	eq
 8008a80:	6819      	ldreq	r1, [r3, #0]
 8008a82:	685b      	ldreq	r3, [r3, #4]
 8008a84:	1809      	addeq	r1, r1, r0
 8008a86:	6021      	streq	r1, [r4, #0]
 8008a88:	e7ed      	b.n	8008a66 <_free_r+0x1e>
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	b10b      	cbz	r3, 8008a94 <_free_r+0x4c>
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d9fa      	bls.n	8008a8a <_free_r+0x42>
 8008a94:	6811      	ldr	r1, [r2, #0]
 8008a96:	1850      	adds	r0, r2, r1
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d10b      	bne.n	8008ab4 <_free_r+0x6c>
 8008a9c:	6820      	ldr	r0, [r4, #0]
 8008a9e:	4401      	add	r1, r0
 8008aa0:	1850      	adds	r0, r2, r1
 8008aa2:	4283      	cmp	r3, r0
 8008aa4:	6011      	str	r1, [r2, #0]
 8008aa6:	d1e0      	bne.n	8008a6a <_free_r+0x22>
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	6053      	str	r3, [r2, #4]
 8008aae:	4408      	add	r0, r1
 8008ab0:	6010      	str	r0, [r2, #0]
 8008ab2:	e7da      	b.n	8008a6a <_free_r+0x22>
 8008ab4:	d902      	bls.n	8008abc <_free_r+0x74>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	602b      	str	r3, [r5, #0]
 8008aba:	e7d6      	b.n	8008a6a <_free_r+0x22>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	1821      	adds	r1, r4, r0
 8008ac0:	428b      	cmp	r3, r1
 8008ac2:	bf04      	itt	eq
 8008ac4:	6819      	ldreq	r1, [r3, #0]
 8008ac6:	685b      	ldreq	r3, [r3, #4]
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	bf04      	itt	eq
 8008acc:	1809      	addeq	r1, r1, r0
 8008ace:	6021      	streq	r1, [r4, #0]
 8008ad0:	6054      	str	r4, [r2, #4]
 8008ad2:	e7ca      	b.n	8008a6a <_free_r+0x22>
 8008ad4:	bd38      	pop	{r3, r4, r5, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20001fa0 	.word	0x20001fa0

08008adc <sbrk_aligned>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	4e0f      	ldr	r6, [pc, #60]	@ (8008b1c <sbrk_aligned+0x40>)
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	6831      	ldr	r1, [r6, #0]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	b911      	cbnz	r1, 8008aee <sbrk_aligned+0x12>
 8008ae8:	f000 fcb4 	bl	8009454 <_sbrk_r>
 8008aec:	6030      	str	r0, [r6, #0]
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 fcaf 	bl	8009454 <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d103      	bne.n	8008b02 <sbrk_aligned+0x26>
 8008afa:	f04f 34ff 	mov.w	r4, #4294967295
 8008afe:	4620      	mov	r0, r4
 8008b00:	bd70      	pop	{r4, r5, r6, pc}
 8008b02:	1cc4      	adds	r4, r0, #3
 8008b04:	f024 0403 	bic.w	r4, r4, #3
 8008b08:	42a0      	cmp	r0, r4
 8008b0a:	d0f8      	beq.n	8008afe <sbrk_aligned+0x22>
 8008b0c:	1a21      	subs	r1, r4, r0
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 fca0 	bl	8009454 <_sbrk_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1f2      	bne.n	8008afe <sbrk_aligned+0x22>
 8008b18:	e7ef      	b.n	8008afa <sbrk_aligned+0x1e>
 8008b1a:	bf00      	nop
 8008b1c:	20001f9c 	.word	0x20001f9c

08008b20 <_malloc_r>:
 8008b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b24:	1ccd      	adds	r5, r1, #3
 8008b26:	f025 0503 	bic.w	r5, r5, #3
 8008b2a:	3508      	adds	r5, #8
 8008b2c:	2d0c      	cmp	r5, #12
 8008b2e:	bf38      	it	cc
 8008b30:	250c      	movcc	r5, #12
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	4606      	mov	r6, r0
 8008b36:	db01      	blt.n	8008b3c <_malloc_r+0x1c>
 8008b38:	42a9      	cmp	r1, r5
 8008b3a:	d904      	bls.n	8008b46 <_malloc_r+0x26>
 8008b3c:	230c      	movs	r3, #12
 8008b3e:	6033      	str	r3, [r6, #0]
 8008b40:	2000      	movs	r0, #0
 8008b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c1c <_malloc_r+0xfc>
 8008b4a:	f000 f869 	bl	8008c20 <__malloc_lock>
 8008b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b52:	461c      	mov	r4, r3
 8008b54:	bb44      	cbnz	r4, 8008ba8 <_malloc_r+0x88>
 8008b56:	4629      	mov	r1, r5
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7ff ffbf 	bl	8008adc <sbrk_aligned>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	4604      	mov	r4, r0
 8008b62:	d158      	bne.n	8008c16 <_malloc_r+0xf6>
 8008b64:	f8d8 4000 	ldr.w	r4, [r8]
 8008b68:	4627      	mov	r7, r4
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	d143      	bne.n	8008bf6 <_malloc_r+0xd6>
 8008b6e:	2c00      	cmp	r4, #0
 8008b70:	d04b      	beq.n	8008c0a <_malloc_r+0xea>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	4639      	mov	r1, r7
 8008b76:	4630      	mov	r0, r6
 8008b78:	eb04 0903 	add.w	r9, r4, r3
 8008b7c:	f000 fc6a 	bl	8009454 <_sbrk_r>
 8008b80:	4581      	cmp	r9, r0
 8008b82:	d142      	bne.n	8008c0a <_malloc_r+0xea>
 8008b84:	6821      	ldr	r1, [r4, #0]
 8008b86:	1a6d      	subs	r5, r5, r1
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7ff ffa6 	bl	8008adc <sbrk_aligned>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d03a      	beq.n	8008c0a <_malloc_r+0xea>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	442b      	add	r3, r5
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	bb62      	cbnz	r2, 8008bfc <_malloc_r+0xdc>
 8008ba2:	f8c8 7000 	str.w	r7, [r8]
 8008ba6:	e00f      	b.n	8008bc8 <_malloc_r+0xa8>
 8008ba8:	6822      	ldr	r2, [r4, #0]
 8008baa:	1b52      	subs	r2, r2, r5
 8008bac:	d420      	bmi.n	8008bf0 <_malloc_r+0xd0>
 8008bae:	2a0b      	cmp	r2, #11
 8008bb0:	d917      	bls.n	8008be2 <_malloc_r+0xc2>
 8008bb2:	1961      	adds	r1, r4, r5
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	6025      	str	r5, [r4, #0]
 8008bb8:	bf18      	it	ne
 8008bba:	6059      	strne	r1, [r3, #4]
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	bf08      	it	eq
 8008bc0:	f8c8 1000 	streq.w	r1, [r8]
 8008bc4:	5162      	str	r2, [r4, r5]
 8008bc6:	604b      	str	r3, [r1, #4]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f82f 	bl	8008c2c <__malloc_unlock>
 8008bce:	f104 000b 	add.w	r0, r4, #11
 8008bd2:	1d23      	adds	r3, r4, #4
 8008bd4:	f020 0007 	bic.w	r0, r0, #7
 8008bd8:	1ac2      	subs	r2, r0, r3
 8008bda:	bf1c      	itt	ne
 8008bdc:	1a1b      	subne	r3, r3, r0
 8008bde:	50a3      	strne	r3, [r4, r2]
 8008be0:	e7af      	b.n	8008b42 <_malloc_r+0x22>
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	bf0c      	ite	eq
 8008be8:	f8c8 2000 	streq.w	r2, [r8]
 8008bec:	605a      	strne	r2, [r3, #4]
 8008bee:	e7eb      	b.n	8008bc8 <_malloc_r+0xa8>
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	6864      	ldr	r4, [r4, #4]
 8008bf4:	e7ae      	b.n	8008b54 <_malloc_r+0x34>
 8008bf6:	463c      	mov	r4, r7
 8008bf8:	687f      	ldr	r7, [r7, #4]
 8008bfa:	e7b6      	b.n	8008b6a <_malloc_r+0x4a>
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d1fb      	bne.n	8008bfc <_malloc_r+0xdc>
 8008c04:	2300      	movs	r3, #0
 8008c06:	6053      	str	r3, [r2, #4]
 8008c08:	e7de      	b.n	8008bc8 <_malloc_r+0xa8>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	6033      	str	r3, [r6, #0]
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f000 f80c 	bl	8008c2c <__malloc_unlock>
 8008c14:	e794      	b.n	8008b40 <_malloc_r+0x20>
 8008c16:	6005      	str	r5, [r0, #0]
 8008c18:	e7d6      	b.n	8008bc8 <_malloc_r+0xa8>
 8008c1a:	bf00      	nop
 8008c1c:	20001fa0 	.word	0x20001fa0

08008c20 <__malloc_lock>:
 8008c20:	4801      	ldr	r0, [pc, #4]	@ (8008c28 <__malloc_lock+0x8>)
 8008c22:	f7ff bf0e 	b.w	8008a42 <__retarget_lock_acquire_recursive>
 8008c26:	bf00      	nop
 8008c28:	20001f98 	.word	0x20001f98

08008c2c <__malloc_unlock>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	@ (8008c34 <__malloc_unlock+0x8>)
 8008c2e:	f7ff bf09 	b.w	8008a44 <__retarget_lock_release_recursive>
 8008c32:	bf00      	nop
 8008c34:	20001f98 	.word	0x20001f98

08008c38 <__sfputc_r>:
 8008c38:	6893      	ldr	r3, [r2, #8]
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	b410      	push	{r4}
 8008c40:	6093      	str	r3, [r2, #8]
 8008c42:	da08      	bge.n	8008c56 <__sfputc_r+0x1e>
 8008c44:	6994      	ldr	r4, [r2, #24]
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	db01      	blt.n	8008c4e <__sfputc_r+0x16>
 8008c4a:	290a      	cmp	r1, #10
 8008c4c:	d103      	bne.n	8008c56 <__sfputc_r+0x1e>
 8008c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c52:	f000 bb6b 	b.w	800932c <__swbuf_r>
 8008c56:	6813      	ldr	r3, [r2, #0]
 8008c58:	1c58      	adds	r0, r3, #1
 8008c5a:	6010      	str	r0, [r2, #0]
 8008c5c:	7019      	strb	r1, [r3, #0]
 8008c5e:	4608      	mov	r0, r1
 8008c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <__sfputs_r>:
 8008c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	18d5      	adds	r5, r2, r3
 8008c70:	42ac      	cmp	r4, r5
 8008c72:	d101      	bne.n	8008c78 <__sfputs_r+0x12>
 8008c74:	2000      	movs	r0, #0
 8008c76:	e007      	b.n	8008c88 <__sfputs_r+0x22>
 8008c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7c:	463a      	mov	r2, r7
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7ff ffda 	bl	8008c38 <__sfputc_r>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d1f3      	bne.n	8008c70 <__sfputs_r+0xa>
 8008c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c8c <_vfiprintf_r>:
 8008c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c90:	460d      	mov	r5, r1
 8008c92:	b09d      	sub	sp, #116	@ 0x74
 8008c94:	4614      	mov	r4, r2
 8008c96:	4698      	mov	r8, r3
 8008c98:	4606      	mov	r6, r0
 8008c9a:	b118      	cbz	r0, 8008ca4 <_vfiprintf_r+0x18>
 8008c9c:	6a03      	ldr	r3, [r0, #32]
 8008c9e:	b90b      	cbnz	r3, 8008ca4 <_vfiprintf_r+0x18>
 8008ca0:	f7ff fdca 	bl	8008838 <__sinit>
 8008ca4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca6:	07d9      	lsls	r1, r3, #31
 8008ca8:	d405      	bmi.n	8008cb6 <_vfiprintf_r+0x2a>
 8008caa:	89ab      	ldrh	r3, [r5, #12]
 8008cac:	059a      	lsls	r2, r3, #22
 8008cae:	d402      	bmi.n	8008cb6 <_vfiprintf_r+0x2a>
 8008cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cb2:	f7ff fec6 	bl	8008a42 <__retarget_lock_acquire_recursive>
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	071b      	lsls	r3, r3, #28
 8008cba:	d501      	bpl.n	8008cc0 <_vfiprintf_r+0x34>
 8008cbc:	692b      	ldr	r3, [r5, #16]
 8008cbe:	b99b      	cbnz	r3, 8008ce8 <_vfiprintf_r+0x5c>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f000 fb70 	bl	80093a8 <__swsetup_r>
 8008cc8:	b170      	cbz	r0, 8008ce8 <_vfiprintf_r+0x5c>
 8008cca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ccc:	07dc      	lsls	r4, r3, #31
 8008cce:	d504      	bpl.n	8008cda <_vfiprintf_r+0x4e>
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	b01d      	add	sp, #116	@ 0x74
 8008cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cda:	89ab      	ldrh	r3, [r5, #12]
 8008cdc:	0598      	lsls	r0, r3, #22
 8008cde:	d4f7      	bmi.n	8008cd0 <_vfiprintf_r+0x44>
 8008ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ce2:	f7ff feaf 	bl	8008a44 <__retarget_lock_release_recursive>
 8008ce6:	e7f3      	b.n	8008cd0 <_vfiprintf_r+0x44>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cec:	2320      	movs	r3, #32
 8008cee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cf6:	2330      	movs	r3, #48	@ 0x30
 8008cf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ea8 <_vfiprintf_r+0x21c>
 8008cfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d00:	f04f 0901 	mov.w	r9, #1
 8008d04:	4623      	mov	r3, r4
 8008d06:	469a      	mov	sl, r3
 8008d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0c:	b10a      	cbz	r2, 8008d12 <_vfiprintf_r+0x86>
 8008d0e:	2a25      	cmp	r2, #37	@ 0x25
 8008d10:	d1f9      	bne.n	8008d06 <_vfiprintf_r+0x7a>
 8008d12:	ebba 0b04 	subs.w	fp, sl, r4
 8008d16:	d00b      	beq.n	8008d30 <_vfiprintf_r+0xa4>
 8008d18:	465b      	mov	r3, fp
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7ff ffa1 	bl	8008c66 <__sfputs_r>
 8008d24:	3001      	adds	r0, #1
 8008d26:	f000 80a7 	beq.w	8008e78 <_vfiprintf_r+0x1ec>
 8008d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d2c:	445a      	add	r2, fp
 8008d2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d30:	f89a 3000 	ldrb.w	r3, [sl]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 809f 	beq.w	8008e78 <_vfiprintf_r+0x1ec>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d44:	f10a 0a01 	add.w	sl, sl, #1
 8008d48:	9304      	str	r3, [sp, #16]
 8008d4a:	9307      	str	r3, [sp, #28]
 8008d4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d50:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d52:	4654      	mov	r4, sl
 8008d54:	2205      	movs	r2, #5
 8008d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5a:	4853      	ldr	r0, [pc, #332]	@ (8008ea8 <_vfiprintf_r+0x21c>)
 8008d5c:	f7f7 fa38 	bl	80001d0 <memchr>
 8008d60:	9a04      	ldr	r2, [sp, #16]
 8008d62:	b9d8      	cbnz	r0, 8008d9c <_vfiprintf_r+0x110>
 8008d64:	06d1      	lsls	r1, r2, #27
 8008d66:	bf44      	itt	mi
 8008d68:	2320      	movmi	r3, #32
 8008d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d6e:	0713      	lsls	r3, r2, #28
 8008d70:	bf44      	itt	mi
 8008d72:	232b      	movmi	r3, #43	@ 0x2b
 8008d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d78:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d7e:	d015      	beq.n	8008dac <_vfiprintf_r+0x120>
 8008d80:	9a07      	ldr	r2, [sp, #28]
 8008d82:	4654      	mov	r4, sl
 8008d84:	2000      	movs	r0, #0
 8008d86:	f04f 0c0a 	mov.w	ip, #10
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d90:	3b30      	subs	r3, #48	@ 0x30
 8008d92:	2b09      	cmp	r3, #9
 8008d94:	d94b      	bls.n	8008e2e <_vfiprintf_r+0x1a2>
 8008d96:	b1b0      	cbz	r0, 8008dc6 <_vfiprintf_r+0x13a>
 8008d98:	9207      	str	r2, [sp, #28]
 8008d9a:	e014      	b.n	8008dc6 <_vfiprintf_r+0x13a>
 8008d9c:	eba0 0308 	sub.w	r3, r0, r8
 8008da0:	fa09 f303 	lsl.w	r3, r9, r3
 8008da4:	4313      	orrs	r3, r2
 8008da6:	9304      	str	r3, [sp, #16]
 8008da8:	46a2      	mov	sl, r4
 8008daa:	e7d2      	b.n	8008d52 <_vfiprintf_r+0xc6>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	1d19      	adds	r1, r3, #4
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	9103      	str	r1, [sp, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bfbb      	ittet	lt
 8008db8:	425b      	neglt	r3, r3
 8008dba:	f042 0202 	orrlt.w	r2, r2, #2
 8008dbe:	9307      	strge	r3, [sp, #28]
 8008dc0:	9307      	strlt	r3, [sp, #28]
 8008dc2:	bfb8      	it	lt
 8008dc4:	9204      	strlt	r2, [sp, #16]
 8008dc6:	7823      	ldrb	r3, [r4, #0]
 8008dc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dca:	d10a      	bne.n	8008de2 <_vfiprintf_r+0x156>
 8008dcc:	7863      	ldrb	r3, [r4, #1]
 8008dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd0:	d132      	bne.n	8008e38 <_vfiprintf_r+0x1ac>
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	9203      	str	r2, [sp, #12]
 8008dda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dde:	3402      	adds	r4, #2
 8008de0:	9305      	str	r3, [sp, #20]
 8008de2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008eb8 <_vfiprintf_r+0x22c>
 8008de6:	7821      	ldrb	r1, [r4, #0]
 8008de8:	2203      	movs	r2, #3
 8008dea:	4650      	mov	r0, sl
 8008dec:	f7f7 f9f0 	bl	80001d0 <memchr>
 8008df0:	b138      	cbz	r0, 8008e02 <_vfiprintf_r+0x176>
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	eba0 000a 	sub.w	r0, r0, sl
 8008df8:	2240      	movs	r2, #64	@ 0x40
 8008dfa:	4082      	lsls	r2, r0
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	3401      	adds	r4, #1
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e06:	4829      	ldr	r0, [pc, #164]	@ (8008eac <_vfiprintf_r+0x220>)
 8008e08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e0c:	2206      	movs	r2, #6
 8008e0e:	f7f7 f9df 	bl	80001d0 <memchr>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d03f      	beq.n	8008e96 <_vfiprintf_r+0x20a>
 8008e16:	4b26      	ldr	r3, [pc, #152]	@ (8008eb0 <_vfiprintf_r+0x224>)
 8008e18:	bb1b      	cbnz	r3, 8008e62 <_vfiprintf_r+0x1d6>
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	3307      	adds	r3, #7
 8008e1e:	f023 0307 	bic.w	r3, r3, #7
 8008e22:	3308      	adds	r3, #8
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e28:	443b      	add	r3, r7
 8008e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e2c:	e76a      	b.n	8008d04 <_vfiprintf_r+0x78>
 8008e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e32:	460c      	mov	r4, r1
 8008e34:	2001      	movs	r0, #1
 8008e36:	e7a8      	b.n	8008d8a <_vfiprintf_r+0xfe>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	3401      	adds	r4, #1
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	f04f 0c0a 	mov.w	ip, #10
 8008e44:	4620      	mov	r0, r4
 8008e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e4a:	3a30      	subs	r2, #48	@ 0x30
 8008e4c:	2a09      	cmp	r2, #9
 8008e4e:	d903      	bls.n	8008e58 <_vfiprintf_r+0x1cc>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d0c6      	beq.n	8008de2 <_vfiprintf_r+0x156>
 8008e54:	9105      	str	r1, [sp, #20]
 8008e56:	e7c4      	b.n	8008de2 <_vfiprintf_r+0x156>
 8008e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e7f0      	b.n	8008e44 <_vfiprintf_r+0x1b8>
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	462a      	mov	r2, r5
 8008e68:	4b12      	ldr	r3, [pc, #72]	@ (8008eb4 <_vfiprintf_r+0x228>)
 8008e6a:	a904      	add	r1, sp, #16
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f3af 8000 	nop.w
 8008e72:	4607      	mov	r7, r0
 8008e74:	1c78      	adds	r0, r7, #1
 8008e76:	d1d6      	bne.n	8008e26 <_vfiprintf_r+0x19a>
 8008e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e7a:	07d9      	lsls	r1, r3, #31
 8008e7c:	d405      	bmi.n	8008e8a <_vfiprintf_r+0x1fe>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	059a      	lsls	r2, r3, #22
 8008e82:	d402      	bmi.n	8008e8a <_vfiprintf_r+0x1fe>
 8008e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e86:	f7ff fddd 	bl	8008a44 <__retarget_lock_release_recursive>
 8008e8a:	89ab      	ldrh	r3, [r5, #12]
 8008e8c:	065b      	lsls	r3, r3, #25
 8008e8e:	f53f af1f 	bmi.w	8008cd0 <_vfiprintf_r+0x44>
 8008e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e94:	e71e      	b.n	8008cd4 <_vfiprintf_r+0x48>
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	4b05      	ldr	r3, [pc, #20]	@ (8008eb4 <_vfiprintf_r+0x228>)
 8008e9e:	a904      	add	r1, sp, #16
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 f879 	bl	8008f98 <_printf_i>
 8008ea6:	e7e4      	b.n	8008e72 <_vfiprintf_r+0x1e6>
 8008ea8:	0800963c 	.word	0x0800963c
 8008eac:	08009646 	.word	0x08009646
 8008eb0:	00000000 	.word	0x00000000
 8008eb4:	08008c67 	.word	0x08008c67
 8008eb8:	08009642 	.word	0x08009642

08008ebc <_printf_common>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	4698      	mov	r8, r3
 8008ec4:	688a      	ldr	r2, [r1, #8]
 8008ec6:	690b      	ldr	r3, [r1, #16]
 8008ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	bfb8      	it	lt
 8008ed0:	4613      	movlt	r3, r2
 8008ed2:	6033      	str	r3, [r6, #0]
 8008ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ed8:	4607      	mov	r7, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	b10a      	cbz	r2, 8008ee2 <_printf_common+0x26>
 8008ede:	3301      	adds	r3, #1
 8008ee0:	6033      	str	r3, [r6, #0]
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	0699      	lsls	r1, r3, #26
 8008ee6:	bf42      	ittt	mi
 8008ee8:	6833      	ldrmi	r3, [r6, #0]
 8008eea:	3302      	addmi	r3, #2
 8008eec:	6033      	strmi	r3, [r6, #0]
 8008eee:	6825      	ldr	r5, [r4, #0]
 8008ef0:	f015 0506 	ands.w	r5, r5, #6
 8008ef4:	d106      	bne.n	8008f04 <_printf_common+0x48>
 8008ef6:	f104 0a19 	add.w	sl, r4, #25
 8008efa:	68e3      	ldr	r3, [r4, #12]
 8008efc:	6832      	ldr	r2, [r6, #0]
 8008efe:	1a9b      	subs	r3, r3, r2
 8008f00:	42ab      	cmp	r3, r5
 8008f02:	dc26      	bgt.n	8008f52 <_printf_common+0x96>
 8008f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f08:	6822      	ldr	r2, [r4, #0]
 8008f0a:	3b00      	subs	r3, #0
 8008f0c:	bf18      	it	ne
 8008f0e:	2301      	movne	r3, #1
 8008f10:	0692      	lsls	r2, r2, #26
 8008f12:	d42b      	bmi.n	8008f6c <_printf_common+0xb0>
 8008f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f18:	4641      	mov	r1, r8
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	47c8      	blx	r9
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d01e      	beq.n	8008f60 <_printf_common+0xa4>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	6922      	ldr	r2, [r4, #16]
 8008f26:	f003 0306 	and.w	r3, r3, #6
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	bf02      	ittt	eq
 8008f2e:	68e5      	ldreq	r5, [r4, #12]
 8008f30:	6833      	ldreq	r3, [r6, #0]
 8008f32:	1aed      	subeq	r5, r5, r3
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	bf0c      	ite	eq
 8008f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f3c:	2500      	movne	r5, #0
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	bfc4      	itt	gt
 8008f42:	1a9b      	subgt	r3, r3, r2
 8008f44:	18ed      	addgt	r5, r5, r3
 8008f46:	2600      	movs	r6, #0
 8008f48:	341a      	adds	r4, #26
 8008f4a:	42b5      	cmp	r5, r6
 8008f4c:	d11a      	bne.n	8008f84 <_printf_common+0xc8>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	e008      	b.n	8008f64 <_printf_common+0xa8>
 8008f52:	2301      	movs	r3, #1
 8008f54:	4652      	mov	r2, sl
 8008f56:	4641      	mov	r1, r8
 8008f58:	4638      	mov	r0, r7
 8008f5a:	47c8      	blx	r9
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d103      	bne.n	8008f68 <_printf_common+0xac>
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f68:	3501      	adds	r5, #1
 8008f6a:	e7c6      	b.n	8008efa <_printf_common+0x3e>
 8008f6c:	18e1      	adds	r1, r4, r3
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	2030      	movs	r0, #48	@ 0x30
 8008f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f76:	4422      	add	r2, r4
 8008f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f80:	3302      	adds	r3, #2
 8008f82:	e7c7      	b.n	8008f14 <_printf_common+0x58>
 8008f84:	2301      	movs	r3, #1
 8008f86:	4622      	mov	r2, r4
 8008f88:	4641      	mov	r1, r8
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	47c8      	blx	r9
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d0e6      	beq.n	8008f60 <_printf_common+0xa4>
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7d9      	b.n	8008f4a <_printf_common+0x8e>
	...

08008f98 <_printf_i>:
 8008f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	7e0f      	ldrb	r7, [r1, #24]
 8008f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fa0:	2f78      	cmp	r7, #120	@ 0x78
 8008fa2:	4691      	mov	r9, r2
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	469a      	mov	sl, r3
 8008faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fae:	d807      	bhi.n	8008fc0 <_printf_i+0x28>
 8008fb0:	2f62      	cmp	r7, #98	@ 0x62
 8008fb2:	d80a      	bhi.n	8008fca <_printf_i+0x32>
 8008fb4:	2f00      	cmp	r7, #0
 8008fb6:	f000 80d1 	beq.w	800915c <_printf_i+0x1c4>
 8008fba:	2f58      	cmp	r7, #88	@ 0x58
 8008fbc:	f000 80b8 	beq.w	8009130 <_printf_i+0x198>
 8008fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fc8:	e03a      	b.n	8009040 <_printf_i+0xa8>
 8008fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fce:	2b15      	cmp	r3, #21
 8008fd0:	d8f6      	bhi.n	8008fc0 <_printf_i+0x28>
 8008fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8008fd8 <_printf_i+0x40>)
 8008fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd8:	08009031 	.word	0x08009031
 8008fdc:	08009045 	.word	0x08009045
 8008fe0:	08008fc1 	.word	0x08008fc1
 8008fe4:	08008fc1 	.word	0x08008fc1
 8008fe8:	08008fc1 	.word	0x08008fc1
 8008fec:	08008fc1 	.word	0x08008fc1
 8008ff0:	08009045 	.word	0x08009045
 8008ff4:	08008fc1 	.word	0x08008fc1
 8008ff8:	08008fc1 	.word	0x08008fc1
 8008ffc:	08008fc1 	.word	0x08008fc1
 8009000:	08008fc1 	.word	0x08008fc1
 8009004:	08009143 	.word	0x08009143
 8009008:	0800906f 	.word	0x0800906f
 800900c:	080090fd 	.word	0x080090fd
 8009010:	08008fc1 	.word	0x08008fc1
 8009014:	08008fc1 	.word	0x08008fc1
 8009018:	08009165 	.word	0x08009165
 800901c:	08008fc1 	.word	0x08008fc1
 8009020:	0800906f 	.word	0x0800906f
 8009024:	08008fc1 	.word	0x08008fc1
 8009028:	08008fc1 	.word	0x08008fc1
 800902c:	08009105 	.word	0x08009105
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	1d1a      	adds	r2, r3, #4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6032      	str	r2, [r6, #0]
 8009038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800903c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009040:	2301      	movs	r3, #1
 8009042:	e09c      	b.n	800917e <_printf_i+0x1e6>
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	6820      	ldr	r0, [r4, #0]
 8009048:	1d19      	adds	r1, r3, #4
 800904a:	6031      	str	r1, [r6, #0]
 800904c:	0606      	lsls	r6, r0, #24
 800904e:	d501      	bpl.n	8009054 <_printf_i+0xbc>
 8009050:	681d      	ldr	r5, [r3, #0]
 8009052:	e003      	b.n	800905c <_printf_i+0xc4>
 8009054:	0645      	lsls	r5, r0, #25
 8009056:	d5fb      	bpl.n	8009050 <_printf_i+0xb8>
 8009058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800905c:	2d00      	cmp	r5, #0
 800905e:	da03      	bge.n	8009068 <_printf_i+0xd0>
 8009060:	232d      	movs	r3, #45	@ 0x2d
 8009062:	426d      	negs	r5, r5
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009068:	4858      	ldr	r0, [pc, #352]	@ (80091cc <_printf_i+0x234>)
 800906a:	230a      	movs	r3, #10
 800906c:	e011      	b.n	8009092 <_printf_i+0xfa>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	6833      	ldr	r3, [r6, #0]
 8009072:	0608      	lsls	r0, r1, #24
 8009074:	f853 5b04 	ldr.w	r5, [r3], #4
 8009078:	d402      	bmi.n	8009080 <_printf_i+0xe8>
 800907a:	0649      	lsls	r1, r1, #25
 800907c:	bf48      	it	mi
 800907e:	b2ad      	uxthmi	r5, r5
 8009080:	2f6f      	cmp	r7, #111	@ 0x6f
 8009082:	4852      	ldr	r0, [pc, #328]	@ (80091cc <_printf_i+0x234>)
 8009084:	6033      	str	r3, [r6, #0]
 8009086:	bf14      	ite	ne
 8009088:	230a      	movne	r3, #10
 800908a:	2308      	moveq	r3, #8
 800908c:	2100      	movs	r1, #0
 800908e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009092:	6866      	ldr	r6, [r4, #4]
 8009094:	60a6      	str	r6, [r4, #8]
 8009096:	2e00      	cmp	r6, #0
 8009098:	db05      	blt.n	80090a6 <_printf_i+0x10e>
 800909a:	6821      	ldr	r1, [r4, #0]
 800909c:	432e      	orrs	r6, r5
 800909e:	f021 0104 	bic.w	r1, r1, #4
 80090a2:	6021      	str	r1, [r4, #0]
 80090a4:	d04b      	beq.n	800913e <_printf_i+0x1a6>
 80090a6:	4616      	mov	r6, r2
 80090a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80090ac:	fb03 5711 	mls	r7, r3, r1, r5
 80090b0:	5dc7      	ldrb	r7, [r0, r7]
 80090b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090b6:	462f      	mov	r7, r5
 80090b8:	42bb      	cmp	r3, r7
 80090ba:	460d      	mov	r5, r1
 80090bc:	d9f4      	bls.n	80090a8 <_printf_i+0x110>
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d10b      	bne.n	80090da <_printf_i+0x142>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	07df      	lsls	r7, r3, #31
 80090c6:	d508      	bpl.n	80090da <_printf_i+0x142>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	6861      	ldr	r1, [r4, #4]
 80090cc:	4299      	cmp	r1, r3
 80090ce:	bfde      	ittt	le
 80090d0:	2330      	movle	r3, #48	@ 0x30
 80090d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090da:	1b92      	subs	r2, r2, r6
 80090dc:	6122      	str	r2, [r4, #16]
 80090de:	f8cd a000 	str.w	sl, [sp]
 80090e2:	464b      	mov	r3, r9
 80090e4:	aa03      	add	r2, sp, #12
 80090e6:	4621      	mov	r1, r4
 80090e8:	4640      	mov	r0, r8
 80090ea:	f7ff fee7 	bl	8008ebc <_printf_common>
 80090ee:	3001      	adds	r0, #1
 80090f0:	d14a      	bne.n	8009188 <_printf_i+0x1f0>
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295
 80090f6:	b004      	add	sp, #16
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	f043 0320 	orr.w	r3, r3, #32
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	4832      	ldr	r0, [pc, #200]	@ (80091d0 <_printf_i+0x238>)
 8009106:	2778      	movs	r7, #120	@ 0x78
 8009108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	6831      	ldr	r1, [r6, #0]
 8009110:	061f      	lsls	r7, r3, #24
 8009112:	f851 5b04 	ldr.w	r5, [r1], #4
 8009116:	d402      	bmi.n	800911e <_printf_i+0x186>
 8009118:	065f      	lsls	r7, r3, #25
 800911a:	bf48      	it	mi
 800911c:	b2ad      	uxthmi	r5, r5
 800911e:	6031      	str	r1, [r6, #0]
 8009120:	07d9      	lsls	r1, r3, #31
 8009122:	bf44      	itt	mi
 8009124:	f043 0320 	orrmi.w	r3, r3, #32
 8009128:	6023      	strmi	r3, [r4, #0]
 800912a:	b11d      	cbz	r5, 8009134 <_printf_i+0x19c>
 800912c:	2310      	movs	r3, #16
 800912e:	e7ad      	b.n	800908c <_printf_i+0xf4>
 8009130:	4826      	ldr	r0, [pc, #152]	@ (80091cc <_printf_i+0x234>)
 8009132:	e7e9      	b.n	8009108 <_printf_i+0x170>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	f023 0320 	bic.w	r3, r3, #32
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	e7f6      	b.n	800912c <_printf_i+0x194>
 800913e:	4616      	mov	r6, r2
 8009140:	e7bd      	b.n	80090be <_printf_i+0x126>
 8009142:	6833      	ldr	r3, [r6, #0]
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	6961      	ldr	r1, [r4, #20]
 8009148:	1d18      	adds	r0, r3, #4
 800914a:	6030      	str	r0, [r6, #0]
 800914c:	062e      	lsls	r6, r5, #24
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	d501      	bpl.n	8009156 <_printf_i+0x1be>
 8009152:	6019      	str	r1, [r3, #0]
 8009154:	e002      	b.n	800915c <_printf_i+0x1c4>
 8009156:	0668      	lsls	r0, r5, #25
 8009158:	d5fb      	bpl.n	8009152 <_printf_i+0x1ba>
 800915a:	8019      	strh	r1, [r3, #0]
 800915c:	2300      	movs	r3, #0
 800915e:	6123      	str	r3, [r4, #16]
 8009160:	4616      	mov	r6, r2
 8009162:	e7bc      	b.n	80090de <_printf_i+0x146>
 8009164:	6833      	ldr	r3, [r6, #0]
 8009166:	1d1a      	adds	r2, r3, #4
 8009168:	6032      	str	r2, [r6, #0]
 800916a:	681e      	ldr	r6, [r3, #0]
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	2100      	movs	r1, #0
 8009170:	4630      	mov	r0, r6
 8009172:	f7f7 f82d 	bl	80001d0 <memchr>
 8009176:	b108      	cbz	r0, 800917c <_printf_i+0x1e4>
 8009178:	1b80      	subs	r0, r0, r6
 800917a:	6060      	str	r0, [r4, #4]
 800917c:	6863      	ldr	r3, [r4, #4]
 800917e:	6123      	str	r3, [r4, #16]
 8009180:	2300      	movs	r3, #0
 8009182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009186:	e7aa      	b.n	80090de <_printf_i+0x146>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	4632      	mov	r2, r6
 800918c:	4649      	mov	r1, r9
 800918e:	4640      	mov	r0, r8
 8009190:	47d0      	blx	sl
 8009192:	3001      	adds	r0, #1
 8009194:	d0ad      	beq.n	80090f2 <_printf_i+0x15a>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	079b      	lsls	r3, r3, #30
 800919a:	d413      	bmi.n	80091c4 <_printf_i+0x22c>
 800919c:	68e0      	ldr	r0, [r4, #12]
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	4298      	cmp	r0, r3
 80091a2:	bfb8      	it	lt
 80091a4:	4618      	movlt	r0, r3
 80091a6:	e7a6      	b.n	80090f6 <_printf_i+0x15e>
 80091a8:	2301      	movs	r3, #1
 80091aa:	4632      	mov	r2, r6
 80091ac:	4649      	mov	r1, r9
 80091ae:	4640      	mov	r0, r8
 80091b0:	47d0      	blx	sl
 80091b2:	3001      	adds	r0, #1
 80091b4:	d09d      	beq.n	80090f2 <_printf_i+0x15a>
 80091b6:	3501      	adds	r5, #1
 80091b8:	68e3      	ldr	r3, [r4, #12]
 80091ba:	9903      	ldr	r1, [sp, #12]
 80091bc:	1a5b      	subs	r3, r3, r1
 80091be:	42ab      	cmp	r3, r5
 80091c0:	dcf2      	bgt.n	80091a8 <_printf_i+0x210>
 80091c2:	e7eb      	b.n	800919c <_printf_i+0x204>
 80091c4:	2500      	movs	r5, #0
 80091c6:	f104 0619 	add.w	r6, r4, #25
 80091ca:	e7f5      	b.n	80091b8 <_printf_i+0x220>
 80091cc:	0800964d 	.word	0x0800964d
 80091d0:	0800965e 	.word	0x0800965e

080091d4 <__sflush_r>:
 80091d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091dc:	0716      	lsls	r6, r2, #28
 80091de:	4605      	mov	r5, r0
 80091e0:	460c      	mov	r4, r1
 80091e2:	d454      	bmi.n	800928e <__sflush_r+0xba>
 80091e4:	684b      	ldr	r3, [r1, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dc02      	bgt.n	80091f0 <__sflush_r+0x1c>
 80091ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dd48      	ble.n	8009282 <__sflush_r+0xae>
 80091f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d045      	beq.n	8009282 <__sflush_r+0xae>
 80091f6:	2300      	movs	r3, #0
 80091f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091fc:	682f      	ldr	r7, [r5, #0]
 80091fe:	6a21      	ldr	r1, [r4, #32]
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	d030      	beq.n	8009266 <__sflush_r+0x92>
 8009204:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	0759      	lsls	r1, r3, #29
 800920a:	d505      	bpl.n	8009218 <__sflush_r+0x44>
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009212:	b10b      	cbz	r3, 8009218 <__sflush_r+0x44>
 8009214:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009216:	1ad2      	subs	r2, r2, r3
 8009218:	2300      	movs	r3, #0
 800921a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800921c:	6a21      	ldr	r1, [r4, #32]
 800921e:	4628      	mov	r0, r5
 8009220:	47b0      	blx	r6
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	d106      	bne.n	8009236 <__sflush_r+0x62>
 8009228:	6829      	ldr	r1, [r5, #0]
 800922a:	291d      	cmp	r1, #29
 800922c:	d82b      	bhi.n	8009286 <__sflush_r+0xb2>
 800922e:	4a2a      	ldr	r2, [pc, #168]	@ (80092d8 <__sflush_r+0x104>)
 8009230:	40ca      	lsrs	r2, r1
 8009232:	07d6      	lsls	r6, r2, #31
 8009234:	d527      	bpl.n	8009286 <__sflush_r+0xb2>
 8009236:	2200      	movs	r2, #0
 8009238:	6062      	str	r2, [r4, #4]
 800923a:	04d9      	lsls	r1, r3, #19
 800923c:	6922      	ldr	r2, [r4, #16]
 800923e:	6022      	str	r2, [r4, #0]
 8009240:	d504      	bpl.n	800924c <__sflush_r+0x78>
 8009242:	1c42      	adds	r2, r0, #1
 8009244:	d101      	bne.n	800924a <__sflush_r+0x76>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	b903      	cbnz	r3, 800924c <__sflush_r+0x78>
 800924a:	6560      	str	r0, [r4, #84]	@ 0x54
 800924c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800924e:	602f      	str	r7, [r5, #0]
 8009250:	b1b9      	cbz	r1, 8009282 <__sflush_r+0xae>
 8009252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009256:	4299      	cmp	r1, r3
 8009258:	d002      	beq.n	8009260 <__sflush_r+0x8c>
 800925a:	4628      	mov	r0, r5
 800925c:	f7ff fbf4 	bl	8008a48 <_free_r>
 8009260:	2300      	movs	r3, #0
 8009262:	6363      	str	r3, [r4, #52]	@ 0x34
 8009264:	e00d      	b.n	8009282 <__sflush_r+0xae>
 8009266:	2301      	movs	r3, #1
 8009268:	4628      	mov	r0, r5
 800926a:	47b0      	blx	r6
 800926c:	4602      	mov	r2, r0
 800926e:	1c50      	adds	r0, r2, #1
 8009270:	d1c9      	bne.n	8009206 <__sflush_r+0x32>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0c6      	beq.n	8009206 <__sflush_r+0x32>
 8009278:	2b1d      	cmp	r3, #29
 800927a:	d001      	beq.n	8009280 <__sflush_r+0xac>
 800927c:	2b16      	cmp	r3, #22
 800927e:	d11e      	bne.n	80092be <__sflush_r+0xea>
 8009280:	602f      	str	r7, [r5, #0]
 8009282:	2000      	movs	r0, #0
 8009284:	e022      	b.n	80092cc <__sflush_r+0xf8>
 8009286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800928a:	b21b      	sxth	r3, r3
 800928c:	e01b      	b.n	80092c6 <__sflush_r+0xf2>
 800928e:	690f      	ldr	r7, [r1, #16]
 8009290:	2f00      	cmp	r7, #0
 8009292:	d0f6      	beq.n	8009282 <__sflush_r+0xae>
 8009294:	0793      	lsls	r3, r2, #30
 8009296:	680e      	ldr	r6, [r1, #0]
 8009298:	bf08      	it	eq
 800929a:	694b      	ldreq	r3, [r1, #20]
 800929c:	600f      	str	r7, [r1, #0]
 800929e:	bf18      	it	ne
 80092a0:	2300      	movne	r3, #0
 80092a2:	eba6 0807 	sub.w	r8, r6, r7
 80092a6:	608b      	str	r3, [r1, #8]
 80092a8:	f1b8 0f00 	cmp.w	r8, #0
 80092ac:	dde9      	ble.n	8009282 <__sflush_r+0xae>
 80092ae:	6a21      	ldr	r1, [r4, #32]
 80092b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092b2:	4643      	mov	r3, r8
 80092b4:	463a      	mov	r2, r7
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b0      	blx	r6
 80092ba:	2800      	cmp	r0, #0
 80092bc:	dc08      	bgt.n	80092d0 <__sflush_r+0xfc>
 80092be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c6:	81a3      	strh	r3, [r4, #12]
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295
 80092cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d0:	4407      	add	r7, r0
 80092d2:	eba8 0800 	sub.w	r8, r8, r0
 80092d6:	e7e7      	b.n	80092a8 <__sflush_r+0xd4>
 80092d8:	20400001 	.word	0x20400001

080092dc <_fflush_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	690b      	ldr	r3, [r1, #16]
 80092e0:	4605      	mov	r5, r0
 80092e2:	460c      	mov	r4, r1
 80092e4:	b913      	cbnz	r3, 80092ec <_fflush_r+0x10>
 80092e6:	2500      	movs	r5, #0
 80092e8:	4628      	mov	r0, r5
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	b118      	cbz	r0, 80092f6 <_fflush_r+0x1a>
 80092ee:	6a03      	ldr	r3, [r0, #32]
 80092f0:	b90b      	cbnz	r3, 80092f6 <_fflush_r+0x1a>
 80092f2:	f7ff faa1 	bl	8008838 <__sinit>
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0f3      	beq.n	80092e6 <_fflush_r+0xa>
 80092fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009300:	07d0      	lsls	r0, r2, #31
 8009302:	d404      	bmi.n	800930e <_fflush_r+0x32>
 8009304:	0599      	lsls	r1, r3, #22
 8009306:	d402      	bmi.n	800930e <_fflush_r+0x32>
 8009308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800930a:	f7ff fb9a 	bl	8008a42 <__retarget_lock_acquire_recursive>
 800930e:	4628      	mov	r0, r5
 8009310:	4621      	mov	r1, r4
 8009312:	f7ff ff5f 	bl	80091d4 <__sflush_r>
 8009316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009318:	07da      	lsls	r2, r3, #31
 800931a:	4605      	mov	r5, r0
 800931c:	d4e4      	bmi.n	80092e8 <_fflush_r+0xc>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	059b      	lsls	r3, r3, #22
 8009322:	d4e1      	bmi.n	80092e8 <_fflush_r+0xc>
 8009324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009326:	f7ff fb8d 	bl	8008a44 <__retarget_lock_release_recursive>
 800932a:	e7dd      	b.n	80092e8 <_fflush_r+0xc>

0800932c <__swbuf_r>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	460e      	mov	r6, r1
 8009330:	4614      	mov	r4, r2
 8009332:	4605      	mov	r5, r0
 8009334:	b118      	cbz	r0, 800933e <__swbuf_r+0x12>
 8009336:	6a03      	ldr	r3, [r0, #32]
 8009338:	b90b      	cbnz	r3, 800933e <__swbuf_r+0x12>
 800933a:	f7ff fa7d 	bl	8008838 <__sinit>
 800933e:	69a3      	ldr	r3, [r4, #24]
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	071a      	lsls	r2, r3, #28
 8009346:	d501      	bpl.n	800934c <__swbuf_r+0x20>
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	b943      	cbnz	r3, 800935e <__swbuf_r+0x32>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f000 f82a 	bl	80093a8 <__swsetup_r>
 8009354:	b118      	cbz	r0, 800935e <__swbuf_r+0x32>
 8009356:	f04f 37ff 	mov.w	r7, #4294967295
 800935a:	4638      	mov	r0, r7
 800935c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	6922      	ldr	r2, [r4, #16]
 8009362:	1a98      	subs	r0, r3, r2
 8009364:	6963      	ldr	r3, [r4, #20]
 8009366:	b2f6      	uxtb	r6, r6
 8009368:	4283      	cmp	r3, r0
 800936a:	4637      	mov	r7, r6
 800936c:	dc05      	bgt.n	800937a <__swbuf_r+0x4e>
 800936e:	4621      	mov	r1, r4
 8009370:	4628      	mov	r0, r5
 8009372:	f7ff ffb3 	bl	80092dc <_fflush_r>
 8009376:	2800      	cmp	r0, #0
 8009378:	d1ed      	bne.n	8009356 <__swbuf_r+0x2a>
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	3b01      	subs	r3, #1
 800937e:	60a3      	str	r3, [r4, #8]
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	701e      	strb	r6, [r3, #0]
 8009388:	6962      	ldr	r2, [r4, #20]
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	429a      	cmp	r2, r3
 800938e:	d004      	beq.n	800939a <__swbuf_r+0x6e>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	07db      	lsls	r3, r3, #31
 8009394:	d5e1      	bpl.n	800935a <__swbuf_r+0x2e>
 8009396:	2e0a      	cmp	r6, #10
 8009398:	d1df      	bne.n	800935a <__swbuf_r+0x2e>
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f7ff ff9d 	bl	80092dc <_fflush_r>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0d9      	beq.n	800935a <__swbuf_r+0x2e>
 80093a6:	e7d6      	b.n	8009356 <__swbuf_r+0x2a>

080093a8 <__swsetup_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4b29      	ldr	r3, [pc, #164]	@ (8009450 <__swsetup_r+0xa8>)
 80093ac:	4605      	mov	r5, r0
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	460c      	mov	r4, r1
 80093b2:	b118      	cbz	r0, 80093bc <__swsetup_r+0x14>
 80093b4:	6a03      	ldr	r3, [r0, #32]
 80093b6:	b90b      	cbnz	r3, 80093bc <__swsetup_r+0x14>
 80093b8:	f7ff fa3e 	bl	8008838 <__sinit>
 80093bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c0:	0719      	lsls	r1, r3, #28
 80093c2:	d422      	bmi.n	800940a <__swsetup_r+0x62>
 80093c4:	06da      	lsls	r2, r3, #27
 80093c6:	d407      	bmi.n	80093d8 <__swsetup_r+0x30>
 80093c8:	2209      	movs	r2, #9
 80093ca:	602a      	str	r2, [r5, #0]
 80093cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	f04f 30ff 	mov.w	r0, #4294967295
 80093d6:	e033      	b.n	8009440 <__swsetup_r+0x98>
 80093d8:	0758      	lsls	r0, r3, #29
 80093da:	d512      	bpl.n	8009402 <__swsetup_r+0x5a>
 80093dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093de:	b141      	cbz	r1, 80093f2 <__swsetup_r+0x4a>
 80093e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093e4:	4299      	cmp	r1, r3
 80093e6:	d002      	beq.n	80093ee <__swsetup_r+0x46>
 80093e8:	4628      	mov	r0, r5
 80093ea:	f7ff fb2d 	bl	8008a48 <_free_r>
 80093ee:	2300      	movs	r3, #0
 80093f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	2300      	movs	r3, #0
 80093fc:	6063      	str	r3, [r4, #4]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f043 0308 	orr.w	r3, r3, #8
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	b94b      	cbnz	r3, 8009422 <__swsetup_r+0x7a>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009418:	d003      	beq.n	8009422 <__swsetup_r+0x7a>
 800941a:	4621      	mov	r1, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f000 f84f 	bl	80094c0 <__smakebuf_r>
 8009422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009426:	f013 0201 	ands.w	r2, r3, #1
 800942a:	d00a      	beq.n	8009442 <__swsetup_r+0x9a>
 800942c:	2200      	movs	r2, #0
 800942e:	60a2      	str	r2, [r4, #8]
 8009430:	6962      	ldr	r2, [r4, #20]
 8009432:	4252      	negs	r2, r2
 8009434:	61a2      	str	r2, [r4, #24]
 8009436:	6922      	ldr	r2, [r4, #16]
 8009438:	b942      	cbnz	r2, 800944c <__swsetup_r+0xa4>
 800943a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800943e:	d1c5      	bne.n	80093cc <__swsetup_r+0x24>
 8009440:	bd38      	pop	{r3, r4, r5, pc}
 8009442:	0799      	lsls	r1, r3, #30
 8009444:	bf58      	it	pl
 8009446:	6962      	ldrpl	r2, [r4, #20]
 8009448:	60a2      	str	r2, [r4, #8]
 800944a:	e7f4      	b.n	8009436 <__swsetup_r+0x8e>
 800944c:	2000      	movs	r0, #0
 800944e:	e7f7      	b.n	8009440 <__swsetup_r+0x98>
 8009450:	20000108 	.word	0x20000108

08009454 <_sbrk_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	@ (8009470 <_sbrk_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f7 fe0a 	bl	8001078 <_sbrk>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_sbrk_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_sbrk_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20001f94 	.word	0x20001f94

08009474 <__swhatbuf_r>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	2900      	cmp	r1, #0
 800947e:	b096      	sub	sp, #88	@ 0x58
 8009480:	4615      	mov	r5, r2
 8009482:	461e      	mov	r6, r3
 8009484:	da0d      	bge.n	80094a2 <__swhatbuf_r+0x2e>
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800948c:	f04f 0100 	mov.w	r1, #0
 8009490:	bf14      	ite	ne
 8009492:	2340      	movne	r3, #64	@ 0x40
 8009494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009498:	2000      	movs	r0, #0
 800949a:	6031      	str	r1, [r6, #0]
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	b016      	add	sp, #88	@ 0x58
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	466a      	mov	r2, sp
 80094a4:	f000 f848 	bl	8009538 <_fstat_r>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	dbec      	blt.n	8009486 <__swhatbuf_r+0x12>
 80094ac:	9901      	ldr	r1, [sp, #4]
 80094ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094b6:	4259      	negs	r1, r3
 80094b8:	4159      	adcs	r1, r3
 80094ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094be:	e7eb      	b.n	8009498 <__swhatbuf_r+0x24>

080094c0 <__smakebuf_r>:
 80094c0:	898b      	ldrh	r3, [r1, #12]
 80094c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094c4:	079d      	lsls	r5, r3, #30
 80094c6:	4606      	mov	r6, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	d507      	bpl.n	80094dc <__smakebuf_r+0x1c>
 80094cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	6123      	str	r3, [r4, #16]
 80094d4:	2301      	movs	r3, #1
 80094d6:	6163      	str	r3, [r4, #20]
 80094d8:	b003      	add	sp, #12
 80094da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094dc:	ab01      	add	r3, sp, #4
 80094de:	466a      	mov	r2, sp
 80094e0:	f7ff ffc8 	bl	8009474 <__swhatbuf_r>
 80094e4:	9f00      	ldr	r7, [sp, #0]
 80094e6:	4605      	mov	r5, r0
 80094e8:	4639      	mov	r1, r7
 80094ea:	4630      	mov	r0, r6
 80094ec:	f7ff fb18 	bl	8008b20 <_malloc_r>
 80094f0:	b948      	cbnz	r0, 8009506 <__smakebuf_r+0x46>
 80094f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f6:	059a      	lsls	r2, r3, #22
 80094f8:	d4ee      	bmi.n	80094d8 <__smakebuf_r+0x18>
 80094fa:	f023 0303 	bic.w	r3, r3, #3
 80094fe:	f043 0302 	orr.w	r3, r3, #2
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	e7e2      	b.n	80094cc <__smakebuf_r+0xc>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	6020      	str	r0, [r4, #0]
 800950a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009516:	b15b      	cbz	r3, 8009530 <__smakebuf_r+0x70>
 8009518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800951c:	4630      	mov	r0, r6
 800951e:	f000 f81d 	bl	800955c <_isatty_r>
 8009522:	b128      	cbz	r0, 8009530 <__smakebuf_r+0x70>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f023 0303 	bic.w	r3, r3, #3
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	431d      	orrs	r5, r3
 8009534:	81a5      	strh	r5, [r4, #12]
 8009536:	e7cf      	b.n	80094d8 <__smakebuf_r+0x18>

08009538 <_fstat_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d07      	ldr	r5, [pc, #28]	@ (8009558 <_fstat_r+0x20>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	4611      	mov	r1, r2
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	f7f7 fd6e 	bl	8001026 <_fstat>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	d102      	bne.n	8009554 <_fstat_r+0x1c>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	b103      	cbz	r3, 8009554 <_fstat_r+0x1c>
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	bd38      	pop	{r3, r4, r5, pc}
 8009556:	bf00      	nop
 8009558:	20001f94 	.word	0x20001f94

0800955c <_isatty_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4d06      	ldr	r5, [pc, #24]	@ (8009578 <_isatty_r+0x1c>)
 8009560:	2300      	movs	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	4608      	mov	r0, r1
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	f7f7 fd6d 	bl	8001046 <_isatty>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_isatty_r+0x1a>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_isatty_r+0x1a>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	20001f94 	.word	0x20001f94

0800957c <_init>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr

08009588 <_fini>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr
